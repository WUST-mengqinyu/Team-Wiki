{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Members : DashBoard : Team DashBoard Onsite Link NULL Training Logs Link Name Date Solved Upsolved 2020 Multi-University Training Contest 3 2020/7/28 4/11 7/11 2020 Multi-University Training Contest 2 2020/7/23 5/12 7/12 2020 Multi-University Training Contest 1 2020/7/21 2/12 7/12 Name Date Solved Upsolved 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u516d\u573a\uff09 2020/7/27 5/11 7/11 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09 2020/7/25 3/11 8/11 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2020/7/20 3/10 7/10 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2020/7/18 6/12 9/12 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2020/7/13 4/11 11/11 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2020/7/12 3/10 6/10 O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7 History Link 2020 Wannafly Camp Link 2020 \u5e74\u521dWannafly Camp 2019 Link Name \uff1a \u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members : Onsite Link Name Date Rank Solved 2019 ICPC EC-Final 2019/12/15 Brozen(Rank:148) 3 2019 ICPC Asia Shanghai Regional Contest 2019/11/24 Silver(Rank:41) 5 \u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b 2019/11/17 Iron(Rank:76) 3 2019 ICPC Asia Nanjing Regional Contest 2019/10/27 Brozen(Rank:131) 4 The 2019 CCPC, Xiamen Site 2019/10/20 Silver(Rank:48) 5 Training Logs Link Name Date Upsolved 2019 ICPC Asia Nanchang Regional 2019/12/11 5/13 2019 ICPC Asia Xuzhou Regional 2019/12/7 6/12 2019-2020 ICPC, NERC, Northern Eurasia Finals 2019/12/1 7/12 2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b 2019/11/20 6/12 2018 China Collegiate Programming Contest Final (CCPC-Final 2018) 2019/11/11 6/12 The 2019 China Collegiate Programming Contest Harbin Site 2019/11/2 7/12 2019-2020 ICPC, Asia Jakarta Regional Contest 2019/10/31 9/12 2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest 2019/10/28 9/14 2018-2019 ACM-ICPC, Asia East Continent Finals 2019/10/12 6/12 The 2018 ACM-ICPC Asia Beijing Regional Contest 2019/10/11 5/12 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest 2019/10/8 10/12 2019 China Collegiate Programming Contest Qinhuangdao Onsite 2019/9/28 7/12 The 13 th Chinese Northeast Collegiate Programming Contest 2019/9/25 7/10 The Preliminary Contest for ICPC Asia Shanghai 2019 2019/9/15 7/12 The Preliminary Contest for ICPC Asia Shenyang 2019 2019/9/14 6/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09 2019/8/8 9/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2019/7/27 7/11 2019 Multi-University Training Contest 3 2019/7/29 5/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2019/7/25 6/10 2019 Multi-University Training Contest 2 2019/7/24 6/12 2019 Multi-University Training Contest 1 2019/7/22 7/13 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 7/10 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"\u8d5b\u5b63\u5217\u8868"},{"location":"#onsite","text":"NULL","title":"Onsite"},{"location":"#training-logs","text":"Name Date Solved Upsolved 2020 Multi-University Training Contest 3 2020/7/28 4/11 7/11 2020 Multi-University Training Contest 2 2020/7/23 5/12 7/12 2020 Multi-University Training Contest 1 2020/7/21 2/12 7/12 Name Date Solved Upsolved 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u516d\u573a\uff09 2020/7/27 5/11 7/11 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09 2020/7/25 3/11 8/11 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2020/7/20 3/10 7/10 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2020/7/18 6/12 9/12 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2020/7/13 4/11 11/11 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2020/7/12 3/10 6/10 O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"Training Logs"},{"location":"#history","text":"","title":"History"},{"location":"#2020-wannafly-camp","text":"2020 \u5e74\u521dWannafly Camp","title":"2020 Wannafly Camp"},{"location":"#2019","text":"Name \uff1a \u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members :","title":"2019"},{"location":"#onsite_1","text":"Name Date Rank Solved 2019 ICPC EC-Final 2019/12/15 Brozen(Rank:148) 3 2019 ICPC Asia Shanghai Regional Contest 2019/11/24 Silver(Rank:41) 5 \u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b 2019/11/17 Iron(Rank:76) 3 2019 ICPC Asia Nanjing Regional Contest 2019/10/27 Brozen(Rank:131) 4 The 2019 CCPC, Xiamen Site 2019/10/20 Silver(Rank:48) 5","title":"Onsite"},{"location":"#training-logs_1","text":"Name Date Upsolved 2019 ICPC Asia Nanchang Regional 2019/12/11 5/13 2019 ICPC Asia Xuzhou Regional 2019/12/7 6/12 2019-2020 ICPC, NERC, Northern Eurasia Finals 2019/12/1 7/12 2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b 2019/11/20 6/12 2018 China Collegiate Programming Contest Final (CCPC-Final 2018) 2019/11/11 6/12 The 2019 China Collegiate Programming Contest Harbin Site 2019/11/2 7/12 2019-2020 ICPC, Asia Jakarta Regional Contest 2019/10/31 9/12 2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest 2019/10/28 9/14 2018-2019 ACM-ICPC, Asia East Continent Finals 2019/10/12 6/12 The 2018 ACM-ICPC Asia Beijing Regional Contest 2019/10/11 5/12 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest 2019/10/8 10/12 2019 China Collegiate Programming Contest Qinhuangdao Onsite 2019/9/28 7/12 The 13 th Chinese Northeast Collegiate Programming Contest 2019/9/25 7/10 The Preliminary Contest for ICPC Asia Shanghai 2019 2019/9/15 7/12 The Preliminary Contest for ICPC Asia Shenyang 2019 2019/9/14 6/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09 2019/8/8 9/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2019/7/27 7/11 2019 Multi-University Training Contest 3 2019/7/29 5/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2019/7/25 6/10 2019 Multi-University Training Contest 2 2019/7/24 6/12 2019 Multi-University Training Contest 1 2019/7/22 7/13 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 7/10 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"Training Logs"},{"location":"history/","text":"History Link 2020 Wannafly Camp Link 2020 \u5e74\u521dWannafly Camp 2019 Link Name \uff1a \u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members :","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#2020-wannafly-camp","text":"2020 \u5e74\u521dWannafly Camp","title":"2020 Wannafly Camp"},{"location":"history/#2019","text":"Name \uff1a \u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members :","title":"2019"},{"location":"About/About/","text":"If you have any question about this wiki, please contact qq: 952223482","title":"About"},{"location":"Index/2019/","text":"Team Wiki Link General Link Name \uff1a\u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members : DashBoard : Team DashBoard Onsite Link Name Date Rank Solved 2019 ICPC EC-Final 2019/12/15 Brozen(Rank:148) 3 2019 ICPC Asia Shanghai Regional Contest 2019/11/24 Silver(Rank:41) 5 \u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b 2019/11/17 Iron(Rank:76) 3 2019 ICPC Asia Nanjing Regional Contest 2019/10/27 Brozen(Rank:131) 4 The 2019 CCPC, Xiamen Site 2019/10/20 Silver(Rank:48) 5 Training Logs Link Name Date Solved 2019 ICPC Asia Nanchang Regional 2019/12/11 5/13 2019 ICPC Asia Xuzhou Regional 2019/12/7 6/12 2019-2020 ICPC, NERC, Northern Eurasia Finals 2019/12/1 7/12 2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b 2019/11/20 6/12 2018 China Collegiate Programming Contest Final (CCPC-Final 2018) 2019/11/11 6/12 The 2019 China Collegiate Programming Contest Harbin Site 2019/11/2 7/12 2019-2020 ICPC, Asia Jakarta Regional Contest 2019/10/31 9/12 2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest 2019/10/28 9/14 2018-2019 ACM-ICPC, Asia East Continent Finals 2019/10/12 6/12 The 2018 ACM-ICPC Asia Beijing Regional Contest 2019/10/11 5/12 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest 2019/10/8 10/12 2019 China Collegiate Programming Contest Qinhuangdao Onsite 2019/9/28 7/12 The 13 th Chinese Northeast Collegiate Programming Contest 2019/9/25 7/10 The Preliminary Contest for ICPC Asia Shanghai 2019 2019/9/15 7/12 The Preliminary Contest for ICPC Asia Shenyang 2019 2019/9/14 6/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09 2019/8/8 9/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2019/7/27 7/11 2019 Multi-University Training Contest 3 2019/7/29 5/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2019/7/25 6/10 2019 Multi-University Training Contest 2 2019/7/24 6/12 2019 Multi-University Training Contest 1 2019/7/22 7/13 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 7/10 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"Team Wiki"},{"location":"Index/2019/#team-wiki","text":"","title":"Team Wiki"},{"location":"Index/2019/#general","text":"Name \uff1a\u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members : DashBoard : Team DashBoard","title":"General"},{"location":"Index/2019/#onsite","text":"Name Date Rank Solved 2019 ICPC EC-Final 2019/12/15 Brozen(Rank:148) 3 2019 ICPC Asia Shanghai Regional Contest 2019/11/24 Silver(Rank:41) 5 \u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b 2019/11/17 Iron(Rank:76) 3 2019 ICPC Asia Nanjing Regional Contest 2019/10/27 Brozen(Rank:131) 4 The 2019 CCPC, Xiamen Site 2019/10/20 Silver(Rank:48) 5","title":"Onsite"},{"location":"Index/2019/#training-logs","text":"Name Date Solved 2019 ICPC Asia Nanchang Regional 2019/12/11 5/13 2019 ICPC Asia Xuzhou Regional 2019/12/7 6/12 2019-2020 ICPC, NERC, Northern Eurasia Finals 2019/12/1 7/12 2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b 2019/11/20 6/12 2018 China Collegiate Programming Contest Final (CCPC-Final 2018) 2019/11/11 6/12 The 2019 China Collegiate Programming Contest Harbin Site 2019/11/2 7/12 2019-2020 ICPC, Asia Jakarta Regional Contest 2019/10/31 9/12 2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest 2019/10/28 9/14 2018-2019 ACM-ICPC, Asia East Continent Finals 2019/10/12 6/12 The 2018 ACM-ICPC Asia Beijing Regional Contest 2019/10/11 5/12 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest 2019/10/8 10/12 2019 China Collegiate Programming Contest Qinhuangdao Onsite 2019/9/28 7/12 The 13 th Chinese Northeast Collegiate Programming Contest 2019/9/25 7/10 The Preliminary Contest for ICPC Asia Shanghai 2019 2019/9/15 7/12 The Preliminary Contest for ICPC Asia Shenyang 2019 2019/9/14 6/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09 2019/8/8 9/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2019/7/27 7/11 2019 Multi-University Training Contest 3 2019/7/29 5/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2019/7/25 6/10 2019 Multi-University Training Contest 2 2019/7/24 6/12 2019 Multi-University Training Contest 1 2019/7/22 7/13 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 7/10 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"Training Logs"},{"location":"Index/Wannafly%20Winter%20Camp%202020/","text":"\u961f\u4f0d\u7ec4\u6210\u7ed3\u6784 Link \u8bb0\u5f55\u7bc7 Link day1 day2 day3 day4 day5 day6 day7","title":"Wannafly Winter Camp 2020"},{"location":"Index/Wannafly%20Winter%20Camp%202020/#_1","text":"","title":"\u961f\u4f0d\u7ec4\u6210\u7ed3\u6784"},{"location":"Index/Wannafly%20Winter%20Camp%202020/#_2","text":"day1 day2 day3 day4 day5 day6 day7","title":"\u8bb0\u5f55\u7bc7"},{"location":"Personal%20Page/Verly/","text":"Overview Link \u535a\u5ba2: https://v-verly.github.io/ CF: Verly \u6709\u60f3\u8be6\u7ec6\u5199\u7684\u9898\u89e3\u4e22\u5728\u535a\u5ba2\uff0cwiki\u653e\u4e2a(mo)\u4eba(yu)\u8bb0\u5f55 \u8fd9\u8fb9\u5199\u7684\u4e1c\u897f\u5e94\u8be5\u4e0d\u4f1a\u5f88\u8be6\u7ec6\uff0c\u5eb7\u4e0d\u61c2\u7684\u8bdd\u79c1\u804a\u6211\u4e00\u54c8\u5b50 To-Do List Link \u8865\u4e00\u4e0b\u5b57\u7b26\u4e32(undo:exKMP, manachar, SA, SAM) \u5207\u56fe\u8bba\u6742\u9898\uff0c\u6709\u7a7a\u7684\u65f6\u5019\u5b66\u4e00\u4e9b\u9ad8\u7ea7\u4e00\u70b9\u7684\u4e1c\u897f \u4ee5\u4e0a\u4e24\u9879\u90fd\u4e0d\u60f3\u770b\u7684\u65f6\u5019\uff0c\u53bb\u6478\u4e00\u4e0b\u7ec4\u5408\u6570\u5b66\u6216\u8005\u591a\u9879\u5f0f \u6709\u7a7a\u5f00\u4e00\u4e2aCF\u8865\u9898\u8bb0\u5f55\u7684page Logs Link Topic Link Contest Link 2019/7/27 KMP(done) 2019/7/17 \u7f51\u7edc\u6d4124\u9898 (done) Daily Link 2019/8/9 Link BZOJ-1005:\u7ed9\u51fa\u6807\u53f7\u4e3a1\u5230N\u7684\u70b9\uff0c\u4ee5\u53ca\u67d0\u4e9b\u70b9\u6700\u7ec8\u7684\u5ea6\u6570\uff0c\u5141\u8bb8\u5728\u4efb\u610f\u4e24\u70b9\u95f4\u8fde\u7ebf\uff0c\u53ef\u4ea7\u751f\u591a\u5c11\u68f5\u5ea6\u6570\u6ee1\u8db3\u8981\u6c42\u7684\u6811\u3002 \u6811\u7684Purfer\u5e8f\u5217\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u7684\u51fa\u73b0\u6b21\u6570=\u70b9\u7684\u5ea6\u6570-1\u3002\u8bbe\u5ea6\u6570\u786e\u5b9a\u7684\u70b9\u5171\u6709 cnt cnt \u4e2a\uff0c\u4ee4\u5176\u96c6\u5408\u4e3a V V \uff0c sum=\\sum_{i\u2208V}d[i]-1 sum=\\sum_{i\u2208V}d[i]-1 \u5bf9\u4e8e\u8fd9\u6837\u7684\u5ea6\u6570\u5e8f\u5217\uff0c\u5b83\u7684Purfer\u5e8f\u5217\u4e2d\uff0c\u5ea6\u6570\u786e\u5b9a\u7684\u70b9\u6709 C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)} C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)} \u79cd\u586b\u6cd5\uff0c\u5269\u4e0b\u7684 n-2-sum n-2-sum \u4e2a\u70b9\u53ef\u4ee5\u586b\u4efb\u610f\u4e00\u4e2a\u5ea6\u6570\u672a\u77e5\u7684\u70b9\uff08\u5728 n-cnt n-cnt \u4e2a\u70b9\u4e2d\u9009\uff09\uff0c\u6709 (n-cnt)^{n-2-sum} (n-cnt)^{n-2-sum} \u79cd\u65b9\u6848\u3002 \u603b\u65b9\u6848\u6570\u4e3a C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)}\u00d7(n-cnt)^{n-2-sum} C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)}\u00d7(n-cnt)^{n-2-sum} \u79cd BZOJ-1004:\u7ed9\u5b9am\u79cd\u7f6e\u6362\u548c3\u79cd\u989c\u8272\uff0c\u6bcf\u79cd\u989c\u8272\u7684\u6570\u91cf\u56fa\u5b9a\uff0c\u6c42\u672c\u8d28\u4e0d\u540c\u7684\u67d3\u8272\u65b9\u6848\u6570\u3002 \u7531Burnside\u5f15\u7406\uff0c\u672c\u8d28\u4e0d\u540c\u7684\u67d3\u8272\u65b9\u6848\u6570=\u6bcf\u79cd\u7f6e\u6362\u4e0b\u4e0d\u53d8\u7684\u67d3\u8272\u65b9\u6848\u6570/\u7f6e\u6362\u603b\u6570\u3002 \u8fd9\u91cc\u7684\u6d17\u724c\u7f6e\u6362\u53ea\u8981\u52a0\u4e0a\u4e00\u4e2a\u5355\u4f4d\u5143\uff0c\u5c31\u80fd\u6784\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u7f6e\u6362\u7fa4\u3002\u5bf9\u4e8e\u6bcf\u79cd\u7f6e\u6362\uff0c\u56e0\u4e3a\u6bcf\u79cd\u989c\u8272\u7684\u79cd\u7c7b\u56fa\u5b9a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7c7b\u7f6e\u6362\uff0c\u6c42\u51fa\u5faa\u73af\u8282\u540e\u5bf9\u4e09\u79cd\u989c\u8272\u505a01\u80cc\u5305\uff0c dp[sr][sg][sb] \u5c31\u662f\u5f53\u524d\u7f6e\u6362\u4e0b\u4e0d\u53d8\u7684\u67d3\u8272\u65b9\u6848\u6570\u3002 2019/8/2 Link BZOJ-4568:\u5728\u6811\u4e0a\u8def\u5f84(u,v)\u4e4b\u95f4\u9009\u62e9\u4e00\u4e9b\u70b9\u7684\u6743\u503c\uff0c\u4f7f\u5f02\u6216\u548c\u6700\u5927\uff1a\u5bf9\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\u4e00\u4e2a\u500d\u589e\u7684\u7ebf\u6027\u57fa\uff0c\u627eLCA\u7684\u65f6\u5019\u500d\u589e\u4e0a\u8df3\u7ef4\u62a4\u6574\u4e2a\u8def\u5f84\u7684\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6c42\u6700\u5927\u503c\u4e86\uff0c \u5e76\u4e0d\u8be6\u7ec6\u7684\u9898\u89e3 BZOJ-3122\uff1a X_{i+1}=(aX_i+b) mod p X_{i+1}=(aX_i+b) mod p \uff0c\u6c42\u6700\u5c0f\u7684i\u4f7f X_i=t X_i=t \uff1a\u63a8\u4e2a\u5f0f\u5b50\u5904\u7406\u6389\u7279\u6b8a\u60c5\u51b5\u7136\u540eBSGS\uff0c\u591a\u6821\u90a3\u9898\u662f\u8fd9\u9898\u7684\u52a0\u5f3a\u7248\u6240\u4ee5\u5199\u4e86\u4e00\u4e0b\u8fd9\u9898\uff0c \u8be6\u7ec6\u9898\u89e3 2019/8/1 Link BZOJ-2565:\u7ed9\u5b9a\u4e00\u4e2a\u4e32\uff0c\u627e\u5230\u6700\u957f\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u4f7f\u5b83\u7684\u5de6\u90e8X\u548c\u53f3\u90e8Y(|X|>0,|Y|>0)\u90fd\u4e3a\u56de\u6587\u4e32\uff1a\u6bd4\u8f83\u5e38\u89c4\u7684Manacher\uff0c\u6807\u8bb0\u6bcf\u4e2a#\u8282\u70b9\u5411\u5de6\u5411\u53f3\u80fd\u591f\u7ec4\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u6c42\u548c\u5373\u53ef\uff0cmanacher\u7684\u4ee5pos\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u771f\u5b9e\u957f\u5ea6\u4e3aLen[pos]-1\u3002 2019/7/31 Link CF-1199F:n\u00d7n\u7684\u7f51\u683c\u56fe\u4e2d\u6709\u82e5\u5e72\u4e2a\u9ed1\u70b9\uff0c\u8986\u76d6\u6389\u4e00\u6bb5\u957f\u5ea6\u4e3a(x,y)\u7684\u5757\u7684\u82b1\u8d39\u662fmax(x,y)\uff0c\u6c42\u8986\u76d6\u6389\u6240\u6709\u9ed1\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\uff1a\u5f31\u667a\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e0d\u77e5\u9053\u8fd9\u79cd\u9898\u4e3a\u4ec0\u4e48\u653e\u5728F\uff1b CF-1199E: \u7ed9\u5b9a3n\u4e2a\u70b9\u548cm\u6761\u8fb9\u7684\u56fe\uff0c\u8981\u6c42\u627e\u52302n\u4e2a\u70b9\uff0c\u5176\u4e2d\u4e24\u4e2a\u70b9\u4ec5\u7531\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u4e0d\u5b58\u5728\u4e00\u4e2a\u70b9\u4e0e\u591a\u4e2a\u70b9\u76f8\u8fde\uff1b\u6216\u627e\u5230n\u4e2a\u70b9\uff0c\u4f7fn\u4e2a\u70b9\u4e3a\u72ec\u7acb\u96c6(\u4e24\u4e24\u4e92\u4e0d\u76f8\u8fde)\uff1a\u76f4\u63a5\u66b4\u529bvis\u627e\u8fb9\u96c6\uff0c\u5982\u679c\u80fd\u627e\u5230n\u5bf9\u5c31\u8f93\u51fa\u8fb9\u96c6\uff1b\u4e0d\u80fd\u627e\u5230\u5c31\u8bf4\u660e\u5269\u4e0b\u7684\u76f8\u4e92\u72ec\u7acb\u7684\u70b9\u96c6\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8en\uff0c\u8f93\u51fa\u70b9\u96c6\u3002 2019/7/30 Link BZOJ-1283: \u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6b63\u6574\u6570\u5e8f\u5217Ci\uff0c\u6c42\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u539f\u5e8f\u5217\u4e2d\u4efb\u610f\u957f\u5ea6\u4e3am\u7684\u5b50\u4e32\u4e2d\u88ab\u9009\u51fa\u7684\u5143\u7d20\u4e0d\u8d85\u8fc7K(K,M<=100) \u4e2a\uff0c\u5e76\u4e14\u9009\u51fa\u7684\u5143\u7d20\u4e4b\u548c\u6700\u5927\u3002 \u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u9009k\u6b21\uff0c\u6bcf\u6b21\u9009\u7684\u6570\u8ddd\u79bb>=m\uff0c\u8dd1\u8d39\u7528\u6d41\u3002S\u54111\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ak\uff1bi\u5411i+1\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0c\u8d39\u7528\u4e3a0\uff1bi\u5411min(i+m,T)\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a-c[i]\uff0c\u4ee3\u8868\u9009\u8fd9\u4e2a\u70b9\uff0c\u6700\u5927\u8d39\u7528\u6d41\u5c31\u662f\u7b54\u6848\u3002 2019/7/29 Link BZOJ-3931: \u6700\u77ed\u8def+\u6700\u5927\u6d41\uff0c\u6309\u9898\u610f\u6a21\u62df\uff0c\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u6700\u77ed\u8def\u7684\u8fb9\uff0c\u62c6\u70b9\u8dd1\u7f51\u7edc\u6d41\u5373\u53ef BZOJ-3624: \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u56fe\u4e0a\u670901\u4e24\u7c7b\u8fb9\uff0c\u8981\u6c42\u627e\u5230\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f0\u8fb9\u7684\u6570\u91cf\u6070\u597d\u4e3ak \u5148\u53d6\u6240\u67091\u8fb9\u5efa\u751f\u6210\u6811\uff0c\u7136\u540e\u6dfb\u52a00\u8fb9\uff0c\u8fd9\u65f6\u5019\u6dfb\u52a0\u8fdb\u76840\u8fb9\u662f\u5fc5\u987b\u6dfb\u52a0\u7684\uff1b\u91cd\u65b0\u5efa\u751f\u6210\u6811\uff0c\u5148\u52a0\u5165\u5fc5\u987b\u6dfb\u52a0\u76840\u8fb9\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u51650\u8fb9\u76f4\u5230\u5171\u6709k\u6761\uff0c\u518d\u52a01\u8fb9\uff0c\u8fd9\u6837\u5f62\u6210\u7684\u751f\u6210\u6811\u5c31\u662f\u7b54\u6848","title":"Verly"},{"location":"Personal%20Page/Verly/#overview","text":"\u535a\u5ba2: https://v-verly.github.io/ CF: Verly \u6709\u60f3\u8be6\u7ec6\u5199\u7684\u9898\u89e3\u4e22\u5728\u535a\u5ba2\uff0cwiki\u653e\u4e2a(mo)\u4eba(yu)\u8bb0\u5f55 \u8fd9\u8fb9\u5199\u7684\u4e1c\u897f\u5e94\u8be5\u4e0d\u4f1a\u5f88\u8be6\u7ec6\uff0c\u5eb7\u4e0d\u61c2\u7684\u8bdd\u79c1\u804a\u6211\u4e00\u54c8\u5b50","title":"Overview"},{"location":"Personal%20Page/Verly/#to-do-list","text":"\u8865\u4e00\u4e0b\u5b57\u7b26\u4e32(undo:exKMP, manachar, SA, SAM) \u5207\u56fe\u8bba\u6742\u9898\uff0c\u6709\u7a7a\u7684\u65f6\u5019\u5b66\u4e00\u4e9b\u9ad8\u7ea7\u4e00\u70b9\u7684\u4e1c\u897f \u4ee5\u4e0a\u4e24\u9879\u90fd\u4e0d\u60f3\u770b\u7684\u65f6\u5019\uff0c\u53bb\u6478\u4e00\u4e0b\u7ec4\u5408\u6570\u5b66\u6216\u8005\u591a\u9879\u5f0f \u6709\u7a7a\u5f00\u4e00\u4e2aCF\u8865\u9898\u8bb0\u5f55\u7684page","title":"To-Do List"},{"location":"Personal%20Page/Verly/#logs","text":"","title":"Logs"},{"location":"Personal%20Page/Verly/#topic","text":"","title":"Topic"},{"location":"Personal%20Page/Verly/#contest","text":"2019/7/27 KMP(done) 2019/7/17 \u7f51\u7edc\u6d4124\u9898 (done)","title":"Contest"},{"location":"Personal%20Page/Verly/#daily","text":"","title":"Daily"},{"location":"Personal%20Page/Verly/#201989","text":"BZOJ-1005:\u7ed9\u51fa\u6807\u53f7\u4e3a1\u5230N\u7684\u70b9\uff0c\u4ee5\u53ca\u67d0\u4e9b\u70b9\u6700\u7ec8\u7684\u5ea6\u6570\uff0c\u5141\u8bb8\u5728\u4efb\u610f\u4e24\u70b9\u95f4\u8fde\u7ebf\uff0c\u53ef\u4ea7\u751f\u591a\u5c11\u68f5\u5ea6\u6570\u6ee1\u8db3\u8981\u6c42\u7684\u6811\u3002 \u6811\u7684Purfer\u5e8f\u5217\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u7684\u51fa\u73b0\u6b21\u6570=\u70b9\u7684\u5ea6\u6570-1\u3002\u8bbe\u5ea6\u6570\u786e\u5b9a\u7684\u70b9\u5171\u6709 cnt cnt \u4e2a\uff0c\u4ee4\u5176\u96c6\u5408\u4e3a V V \uff0c sum=\\sum_{i\u2208V}d[i]-1 sum=\\sum_{i\u2208V}d[i]-1 \u5bf9\u4e8e\u8fd9\u6837\u7684\u5ea6\u6570\u5e8f\u5217\uff0c\u5b83\u7684Purfer\u5e8f\u5217\u4e2d\uff0c\u5ea6\u6570\u786e\u5b9a\u7684\u70b9\u6709 C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)} C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)} \u79cd\u586b\u6cd5\uff0c\u5269\u4e0b\u7684 n-2-sum n-2-sum \u4e2a\u70b9\u53ef\u4ee5\u586b\u4efb\u610f\u4e00\u4e2a\u5ea6\u6570\u672a\u77e5\u7684\u70b9\uff08\u5728 n-cnt n-cnt \u4e2a\u70b9\u4e2d\u9009\uff09\uff0c\u6709 (n-cnt)^{n-2-sum} (n-cnt)^{n-2-sum} \u79cd\u65b9\u6848\u3002 \u603b\u65b9\u6848\u6570\u4e3a C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)}\u00d7(n-cnt)^{n-2-sum} C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)}\u00d7(n-cnt)^{n-2-sum} \u79cd BZOJ-1004:\u7ed9\u5b9am\u79cd\u7f6e\u6362\u548c3\u79cd\u989c\u8272\uff0c\u6bcf\u79cd\u989c\u8272\u7684\u6570\u91cf\u56fa\u5b9a\uff0c\u6c42\u672c\u8d28\u4e0d\u540c\u7684\u67d3\u8272\u65b9\u6848\u6570\u3002 \u7531Burnside\u5f15\u7406\uff0c\u672c\u8d28\u4e0d\u540c\u7684\u67d3\u8272\u65b9\u6848\u6570=\u6bcf\u79cd\u7f6e\u6362\u4e0b\u4e0d\u53d8\u7684\u67d3\u8272\u65b9\u6848\u6570/\u7f6e\u6362\u603b\u6570\u3002 \u8fd9\u91cc\u7684\u6d17\u724c\u7f6e\u6362\u53ea\u8981\u52a0\u4e0a\u4e00\u4e2a\u5355\u4f4d\u5143\uff0c\u5c31\u80fd\u6784\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u7f6e\u6362\u7fa4\u3002\u5bf9\u4e8e\u6bcf\u79cd\u7f6e\u6362\uff0c\u56e0\u4e3a\u6bcf\u79cd\u989c\u8272\u7684\u79cd\u7c7b\u56fa\u5b9a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7c7b\u7f6e\u6362\uff0c\u6c42\u51fa\u5faa\u73af\u8282\u540e\u5bf9\u4e09\u79cd\u989c\u8272\u505a01\u80cc\u5305\uff0c dp[sr][sg][sb] \u5c31\u662f\u5f53\u524d\u7f6e\u6362\u4e0b\u4e0d\u53d8\u7684\u67d3\u8272\u65b9\u6848\u6570\u3002","title":"2019/8/9"},{"location":"Personal%20Page/Verly/#201982","text":"BZOJ-4568:\u5728\u6811\u4e0a\u8def\u5f84(u,v)\u4e4b\u95f4\u9009\u62e9\u4e00\u4e9b\u70b9\u7684\u6743\u503c\uff0c\u4f7f\u5f02\u6216\u548c\u6700\u5927\uff1a\u5bf9\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\u4e00\u4e2a\u500d\u589e\u7684\u7ebf\u6027\u57fa\uff0c\u627eLCA\u7684\u65f6\u5019\u500d\u589e\u4e0a\u8df3\u7ef4\u62a4\u6574\u4e2a\u8def\u5f84\u7684\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6c42\u6700\u5927\u503c\u4e86\uff0c \u5e76\u4e0d\u8be6\u7ec6\u7684\u9898\u89e3 BZOJ-3122\uff1a X_{i+1}=(aX_i+b) mod p X_{i+1}=(aX_i+b) mod p \uff0c\u6c42\u6700\u5c0f\u7684i\u4f7f X_i=t X_i=t \uff1a\u63a8\u4e2a\u5f0f\u5b50\u5904\u7406\u6389\u7279\u6b8a\u60c5\u51b5\u7136\u540eBSGS\uff0c\u591a\u6821\u90a3\u9898\u662f\u8fd9\u9898\u7684\u52a0\u5f3a\u7248\u6240\u4ee5\u5199\u4e86\u4e00\u4e0b\u8fd9\u9898\uff0c \u8be6\u7ec6\u9898\u89e3","title":"2019/8/2"},{"location":"Personal%20Page/Verly/#201981","text":"BZOJ-2565:\u7ed9\u5b9a\u4e00\u4e2a\u4e32\uff0c\u627e\u5230\u6700\u957f\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u4f7f\u5b83\u7684\u5de6\u90e8X\u548c\u53f3\u90e8Y(|X|>0,|Y|>0)\u90fd\u4e3a\u56de\u6587\u4e32\uff1a\u6bd4\u8f83\u5e38\u89c4\u7684Manacher\uff0c\u6807\u8bb0\u6bcf\u4e2a#\u8282\u70b9\u5411\u5de6\u5411\u53f3\u80fd\u591f\u7ec4\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u6c42\u548c\u5373\u53ef\uff0cmanacher\u7684\u4ee5pos\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u771f\u5b9e\u957f\u5ea6\u4e3aLen[pos]-1\u3002","title":"2019/8/1"},{"location":"Personal%20Page/Verly/#2019731","text":"CF-1199F:n\u00d7n\u7684\u7f51\u683c\u56fe\u4e2d\u6709\u82e5\u5e72\u4e2a\u9ed1\u70b9\uff0c\u8986\u76d6\u6389\u4e00\u6bb5\u957f\u5ea6\u4e3a(x,y)\u7684\u5757\u7684\u82b1\u8d39\u662fmax(x,y)\uff0c\u6c42\u8986\u76d6\u6389\u6240\u6709\u9ed1\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\uff1a\u5f31\u667a\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e0d\u77e5\u9053\u8fd9\u79cd\u9898\u4e3a\u4ec0\u4e48\u653e\u5728F\uff1b CF-1199E: \u7ed9\u5b9a3n\u4e2a\u70b9\u548cm\u6761\u8fb9\u7684\u56fe\uff0c\u8981\u6c42\u627e\u52302n\u4e2a\u70b9\uff0c\u5176\u4e2d\u4e24\u4e2a\u70b9\u4ec5\u7531\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u4e0d\u5b58\u5728\u4e00\u4e2a\u70b9\u4e0e\u591a\u4e2a\u70b9\u76f8\u8fde\uff1b\u6216\u627e\u5230n\u4e2a\u70b9\uff0c\u4f7fn\u4e2a\u70b9\u4e3a\u72ec\u7acb\u96c6(\u4e24\u4e24\u4e92\u4e0d\u76f8\u8fde)\uff1a\u76f4\u63a5\u66b4\u529bvis\u627e\u8fb9\u96c6\uff0c\u5982\u679c\u80fd\u627e\u5230n\u5bf9\u5c31\u8f93\u51fa\u8fb9\u96c6\uff1b\u4e0d\u80fd\u627e\u5230\u5c31\u8bf4\u660e\u5269\u4e0b\u7684\u76f8\u4e92\u72ec\u7acb\u7684\u70b9\u96c6\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8en\uff0c\u8f93\u51fa\u70b9\u96c6\u3002","title":"2019/7/31"},{"location":"Personal%20Page/Verly/#2019730","text":"BZOJ-1283: \u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6b63\u6574\u6570\u5e8f\u5217Ci\uff0c\u6c42\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u539f\u5e8f\u5217\u4e2d\u4efb\u610f\u957f\u5ea6\u4e3am\u7684\u5b50\u4e32\u4e2d\u88ab\u9009\u51fa\u7684\u5143\u7d20\u4e0d\u8d85\u8fc7K(K,M<=100) \u4e2a\uff0c\u5e76\u4e14\u9009\u51fa\u7684\u5143\u7d20\u4e4b\u548c\u6700\u5927\u3002 \u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u9009k\u6b21\uff0c\u6bcf\u6b21\u9009\u7684\u6570\u8ddd\u79bb>=m\uff0c\u8dd1\u8d39\u7528\u6d41\u3002S\u54111\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ak\uff1bi\u5411i+1\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0c\u8d39\u7528\u4e3a0\uff1bi\u5411min(i+m,T)\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a-c[i]\uff0c\u4ee3\u8868\u9009\u8fd9\u4e2a\u70b9\uff0c\u6700\u5927\u8d39\u7528\u6d41\u5c31\u662f\u7b54\u6848\u3002","title":"2019/7/30"},{"location":"Personal%20Page/Verly/#2019729","text":"BZOJ-3931: \u6700\u77ed\u8def+\u6700\u5927\u6d41\uff0c\u6309\u9898\u610f\u6a21\u62df\uff0c\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u6700\u77ed\u8def\u7684\u8fb9\uff0c\u62c6\u70b9\u8dd1\u7f51\u7edc\u6d41\u5373\u53ef BZOJ-3624: \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u56fe\u4e0a\u670901\u4e24\u7c7b\u8fb9\uff0c\u8981\u6c42\u627e\u5230\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f0\u8fb9\u7684\u6570\u91cf\u6070\u597d\u4e3ak \u5148\u53d6\u6240\u67091\u8fb9\u5efa\u751f\u6210\u6811\uff0c\u7136\u540e\u6dfb\u52a00\u8fb9\uff0c\u8fd9\u65f6\u5019\u6dfb\u52a0\u8fdb\u76840\u8fb9\u662f\u5fc5\u987b\u6dfb\u52a0\u7684\uff1b\u91cd\u65b0\u5efa\u751f\u6210\u6811\uff0c\u5148\u52a0\u5165\u5fc5\u987b\u6dfb\u52a0\u76840\u8fb9\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u51650\u8fb9\u76f4\u5230\u5171\u6709k\u6761\uff0c\u518d\u52a01\u8fb9\uff0c\u8fd9\u6837\u5f62\u6210\u7684\u751f\u6210\u6811\u5c31\u662f\u7b54\u6848","title":"2019/7/29"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/cf%E7%BD%91%E7%BB%9C%E6%B5%81%E7%89%88%E5%88%87/","text":"links \u8bc4\u52062500+\u7248\u5207\uff0c\u4ee3\u7801\u89c1\u63d0\u4ea4 269C *2500 Link \u7ed9\u4e86\u4e00\u5f20\u7f51\u7edc\u6d41\u56fe\uff0c\u4f46\u56fe\u53ea\u6709\u6d41\u91cf\u6ca1\u6709\u65b9\u5411\uff0c\u8fd8\u539f\u51fa\u56fe\u4e0a\u6bcf\u6761\u8fb9\u7684\u65b9\u5411\u3002 \u6784\u9020\u9898\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684in,out\uff0c\u4eceS\u70b9\u5f00\u59cbBFS\uff0c\u628a\u5f53\u524d\u70b9\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u8fb9\u5168\u90e8\u7528\u4e8e\u51fa\u65b9\u5411\uff0c\u66f4\u65b0in[v]+=cap,out[v]-=cap\uff0c\u5f53in[v]==out[v]\u65f6\u628av\u52a0\u5165\u961f\u5217\uff08\u4f46\u662f\u4e0d\u8981\u628aT\u70b9\u52a0\u5165\u961f\u5217\uff09 808F *2500 Link \u7ed9\u4e86n\u5f20\u5361\u724c\uff0c\u9700\u8981\u7684\u529b\u91cf\u4e4b\u548c\u4e3ak\u3002\u5361\u724c\u7684\u529b\u91cf\u4e3ap[i]\uff0c\u6570\u5b57\u4e3ac[i]\uff0c\u7b49\u7ea7\u4e3al[i]\u3002\u5f53\u7b49\u7ea7\u5c0f\u4e8el[i]\u65f6\u65e0\u6cd5\u4f7f\u7528\u8fd9\u5f20\u5361\u724c\uff1b\u5982\u679c\u6709\u4e24\u5f20\u5361\u724c\u7684\u6570\u5b57\u4e4b\u548c\u4e3a\u7d20\u6570\uff0c\u5219\u4e0d\u80fd\u540c\u65f6\u9009\u53d6\u8fd9\u4e24\u5f20\u5361\u724c\u3002\u95ee\u6700\u5c11\u8981\u8fbe\u5230\u51e0\u7ea7\u624d\u80fd\u9009\u51fa\u529b\u91cf\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8ek\u7684\u5408\u6cd5\u724c\u7ec4\u3002 \u9664\u4e861+1\u4e4b\u5916\u5269\u4e0b\u7684\u4e24\u6570\u4e4b\u548c\u4e3a\u7d20\u6570\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u5947\u6570+\u5076\u6570\uff0c1\u53ea\u53d6\u5408\u6cd5\u7684\u6700\u5927\u4e00\u4e2a\u503c\uff0c\u6784\u5efa\u4e00\u4e2a\u4e8c\u5206\u56fe\u6c42\u6700\u5c0f\u5272\uff0c\u603b\u503c-\u6700\u5c0f\u5272\u5373\u4e3a\u5f53\u524d\u53ef\u4ee5\u6784\u5efa\u7684\u6700\u5927\u503c\uff0c\u4e8c\u5206\u7b49\u7ea7\u5373\u53ef\u6c42\u89e3\u3002 884F *2500 Link \u7ed9\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3an(\u5076\u6570)\u7684\u4e32s\uff0c\u6c42\u539f\u4e32\u7684\u4e00\u4e2a\u6392\u5217p\u4f7f a[i]!=a[n-i+1] \uff0c\u5982\u679cs[i]=p[i]\u5219\u83b7\u5f97\u7b2ci\u4f4d\u7684\u4ef7\u503cb[i]\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8d39\u7528\u6d41\u8dd1\u4e00\u4e0b\uff0cn/2\u4e2a\u70b9\uff0c\u7b2ci\u4e2a\u8868\u793ap[i]\u548cp[n-i+1]\uff0c\u6bcf\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5efa\u4e00\u4e2a\u70b9\u5411\u5b83\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u5982\u679c\u5b57\u6bcd\u4e3as[i]\u6216s[n-i+1]\u5c31\u52a0\u4e0a\u8fb9\u6743\uff08\u76f8\u7b49\u5219\u52a0\u4e0a\u8f83\u5927\u7684\uff09\uff0c\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002 1009G *2500 Link \u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u91cd\u6392\u5b57\u7b26\u4e32\u4f7f\u5176\u6ee1\u8db3\u9650\u5236\uff08\u7b2ci\u4f4d\u53ea\u80fd\u662f\u67d0\u4e2a\u6307\u5b9a\u7684\u5b57\u7b26\u96c6\uff09\uff0c\u4f7f\u5b57\u5178\u5e8f\u6700\u5c0f\u3002 \u8d2a\u5fc3\u7684\u9009\u62e9\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5e76\u4f7f\u5176\u540e\u9762\u7684\u5b57\u7b26\u6ee1\u8db3\u4e8c\u5206\u56fe\u5b8c\u7f8e\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u9075\u5faahall\u5b9a\u7406\uff0c\u72b6\u538bcheck\u4e00\u4e0b\u6bcf\u4e00\u4f4d\u7684\u9009\u62e9\u3002 \u2026\u2026\u4e0d\u662f\u7279\u522b\u61c2\uff0c\u6211\u518d\u60f3\u60f3 628F *2500 Link \u96c6\u5408\u4e2d\u6709n\u4e2a\u6570(n\u662f5\u7684\u500d\u6570)\uff0c\u6700\u5927\u7684\u6570\u5b57\u4e0d\u8d85\u8fc7b\uff0c\u6709q\u4e2a\u9650\u5236(x,y)\uff0c\u8868\u793a1-x\u4e2d\u4e00\u5171\u6709y\u4e2a\u6570\uff0c\u96c6\u5408\u4e2d\u6a215\u4e3a0,1,2,3,4\u7684\u6570\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u95ee\u8fd9\u6837\u7684\u96c6\u5408\u662f\u5426\u5b58\u5728\u3002 \u5bf9\u6bcf\u4e2a\u9650\u5236\u5efa\u70b9\uff0c\u5411\u4ee3\u8868\u6a21\u6570\u4e3a0,1,2,3,4\u7684\u70b9\u8fde\u6d41\u91cf\u4e3a\u533a\u95f4\u5185\u4e2a\u6570\u7684\u8fb9\uff0c\u5224\u65ad max_flow(S,T)==n \u5373\u53ef\u3002 78E *2500 Link \u65e0\u804a\u7684\u7801\u519c\u9898\u2026\u2026\u4e3b\u8981\u7801\u91cf\u5728\u4e8e\u5224\u65ad\u6bcf\u4e2a\u65f6\u523b\u70b9\u4e4b\u95f4\u53ef\u4e0d\u53ef\u8fbe\uff0c\u50bb\u903cdfs\uff0c\u5efa\u56fe\u5c31\u662fsb\u5efa\u56fe\uff0c\u6ca1\u52b2 1146G *2600 Link \u5728\u4e00\u6761\u8def\u4e0a\u6709\u6807\u53f7\u4e3a1-n\u7684n\u5ea7\u623f\u5b50\uff0c\u6bcf\u5ea7\u623f\u5b50\u6700\u9ad8\u4e3ah\uff0c\u82e5\u4e00\u5ea7\u623f\u5b50\u7684\u9ad8\u5ea6\u4e3ax\uff0c\u5219\u8fd9\u5ea7\u623f\u5b50\u7684\u6536\u76ca\u4e3ax*x\uff1b\u6709m\u6761\u9650\u5236\uff0c\u6bcf\u6761\u9650\u5236\u8868\u793a\u5982\u679c\u5728l-r\u4e4b\u95f4\u7684\u6240\u6709\u623f\u5b50\u7684\u6700\u5927\u9ad8\u5ea6\u8d85\u8fc7hi\uff0c\u5219\u7f5a\u6b3eci\u3002\u95ee\u6240\u6709\u623f\u5b50\u7684\u6700\u5927\u6536\u76ca\u662f\u591a\u5c11\u3002 \u6700\u5c0f\u5272\u6a21\u578b\uff0c\u5148\u5047\u8bbe\u603b\u6536\u76ca\u4e3a n*h*h \uff0c\u5bf9\u6bcf\u4e2a\u623f\u5b50\u7684\u5efa0-h\u5171h+1\u4e2a\u70b9\uff0cS\u54110\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0ci\u5411i+1\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a h*h-i*i \uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u8868\u793a\u53d6\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u6536\u76ca\uff1b\u6bcf\u4e2a\u9650\u5236\u4f5c\u4e3a\u4e00\u4e2a\u70b9\uff0c\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u7f5a\u6b3ec[i]\uff0c\u88ab\u5272\u8868\u793a\u9700\u8981\u652f\u4ed8\u7f5a\u6b3e\uff1bl,r\u4e4b\u95f4\u7684\u623f\u5b50\u6bcf\u4e2a\u8868\u793a\u9ad8\u5ea6 h[i]+1 \u5411\u8be5\u9650\u5236\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0c\u6700\u540e\u7684\u7b54\u6848\u4e3a n*h*h-max_flow(S\uff0cT)","title":"Cf\u7f51\u7edc\u6d41\u7248\u5207"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/cf%E7%BD%91%E7%BB%9C%E6%B5%81%E7%89%88%E5%88%87/#269c-2500","text":"\u7ed9\u4e86\u4e00\u5f20\u7f51\u7edc\u6d41\u56fe\uff0c\u4f46\u56fe\u53ea\u6709\u6d41\u91cf\u6ca1\u6709\u65b9\u5411\uff0c\u8fd8\u539f\u51fa\u56fe\u4e0a\u6bcf\u6761\u8fb9\u7684\u65b9\u5411\u3002 \u6784\u9020\u9898\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684in,out\uff0c\u4eceS\u70b9\u5f00\u59cbBFS\uff0c\u628a\u5f53\u524d\u70b9\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u8fb9\u5168\u90e8\u7528\u4e8e\u51fa\u65b9\u5411\uff0c\u66f4\u65b0in[v]+=cap,out[v]-=cap\uff0c\u5f53in[v]==out[v]\u65f6\u628av\u52a0\u5165\u961f\u5217\uff08\u4f46\u662f\u4e0d\u8981\u628aT\u70b9\u52a0\u5165\u961f\u5217\uff09","title":"269C *2500"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/cf%E7%BD%91%E7%BB%9C%E6%B5%81%E7%89%88%E5%88%87/#808f-2500","text":"\u7ed9\u4e86n\u5f20\u5361\u724c\uff0c\u9700\u8981\u7684\u529b\u91cf\u4e4b\u548c\u4e3ak\u3002\u5361\u724c\u7684\u529b\u91cf\u4e3ap[i]\uff0c\u6570\u5b57\u4e3ac[i]\uff0c\u7b49\u7ea7\u4e3al[i]\u3002\u5f53\u7b49\u7ea7\u5c0f\u4e8el[i]\u65f6\u65e0\u6cd5\u4f7f\u7528\u8fd9\u5f20\u5361\u724c\uff1b\u5982\u679c\u6709\u4e24\u5f20\u5361\u724c\u7684\u6570\u5b57\u4e4b\u548c\u4e3a\u7d20\u6570\uff0c\u5219\u4e0d\u80fd\u540c\u65f6\u9009\u53d6\u8fd9\u4e24\u5f20\u5361\u724c\u3002\u95ee\u6700\u5c11\u8981\u8fbe\u5230\u51e0\u7ea7\u624d\u80fd\u9009\u51fa\u529b\u91cf\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8ek\u7684\u5408\u6cd5\u724c\u7ec4\u3002 \u9664\u4e861+1\u4e4b\u5916\u5269\u4e0b\u7684\u4e24\u6570\u4e4b\u548c\u4e3a\u7d20\u6570\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u5947\u6570+\u5076\u6570\uff0c1\u53ea\u53d6\u5408\u6cd5\u7684\u6700\u5927\u4e00\u4e2a\u503c\uff0c\u6784\u5efa\u4e00\u4e2a\u4e8c\u5206\u56fe\u6c42\u6700\u5c0f\u5272\uff0c\u603b\u503c-\u6700\u5c0f\u5272\u5373\u4e3a\u5f53\u524d\u53ef\u4ee5\u6784\u5efa\u7684\u6700\u5927\u503c\uff0c\u4e8c\u5206\u7b49\u7ea7\u5373\u53ef\u6c42\u89e3\u3002","title":"808F *2500"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/cf%E7%BD%91%E7%BB%9C%E6%B5%81%E7%89%88%E5%88%87/#884f-2500","text":"\u7ed9\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3an(\u5076\u6570)\u7684\u4e32s\uff0c\u6c42\u539f\u4e32\u7684\u4e00\u4e2a\u6392\u5217p\u4f7f a[i]!=a[n-i+1] \uff0c\u5982\u679cs[i]=p[i]\u5219\u83b7\u5f97\u7b2ci\u4f4d\u7684\u4ef7\u503cb[i]\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8d39\u7528\u6d41\u8dd1\u4e00\u4e0b\uff0cn/2\u4e2a\u70b9\uff0c\u7b2ci\u4e2a\u8868\u793ap[i]\u548cp[n-i+1]\uff0c\u6bcf\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5efa\u4e00\u4e2a\u70b9\u5411\u5b83\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u5982\u679c\u5b57\u6bcd\u4e3as[i]\u6216s[n-i+1]\u5c31\u52a0\u4e0a\u8fb9\u6743\uff08\u76f8\u7b49\u5219\u52a0\u4e0a\u8f83\u5927\u7684\uff09\uff0c\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002","title":"884F *2500"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/cf%E7%BD%91%E7%BB%9C%E6%B5%81%E7%89%88%E5%88%87/#1009g-2500","text":"\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u91cd\u6392\u5b57\u7b26\u4e32\u4f7f\u5176\u6ee1\u8db3\u9650\u5236\uff08\u7b2ci\u4f4d\u53ea\u80fd\u662f\u67d0\u4e2a\u6307\u5b9a\u7684\u5b57\u7b26\u96c6\uff09\uff0c\u4f7f\u5b57\u5178\u5e8f\u6700\u5c0f\u3002 \u8d2a\u5fc3\u7684\u9009\u62e9\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5e76\u4f7f\u5176\u540e\u9762\u7684\u5b57\u7b26\u6ee1\u8db3\u4e8c\u5206\u56fe\u5b8c\u7f8e\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u9075\u5faahall\u5b9a\u7406\uff0c\u72b6\u538bcheck\u4e00\u4e0b\u6bcf\u4e00\u4f4d\u7684\u9009\u62e9\u3002 \u2026\u2026\u4e0d\u662f\u7279\u522b\u61c2\uff0c\u6211\u518d\u60f3\u60f3","title":"1009G *2500"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/cf%E7%BD%91%E7%BB%9C%E6%B5%81%E7%89%88%E5%88%87/#628f-2500","text":"\u96c6\u5408\u4e2d\u6709n\u4e2a\u6570(n\u662f5\u7684\u500d\u6570)\uff0c\u6700\u5927\u7684\u6570\u5b57\u4e0d\u8d85\u8fc7b\uff0c\u6709q\u4e2a\u9650\u5236(x,y)\uff0c\u8868\u793a1-x\u4e2d\u4e00\u5171\u6709y\u4e2a\u6570\uff0c\u96c6\u5408\u4e2d\u6a215\u4e3a0,1,2,3,4\u7684\u6570\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u95ee\u8fd9\u6837\u7684\u96c6\u5408\u662f\u5426\u5b58\u5728\u3002 \u5bf9\u6bcf\u4e2a\u9650\u5236\u5efa\u70b9\uff0c\u5411\u4ee3\u8868\u6a21\u6570\u4e3a0,1,2,3,4\u7684\u70b9\u8fde\u6d41\u91cf\u4e3a\u533a\u95f4\u5185\u4e2a\u6570\u7684\u8fb9\uff0c\u5224\u65ad max_flow(S,T)==n \u5373\u53ef\u3002","title":"628F *2500"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/cf%E7%BD%91%E7%BB%9C%E6%B5%81%E7%89%88%E5%88%87/#78e-2500","text":"\u65e0\u804a\u7684\u7801\u519c\u9898\u2026\u2026\u4e3b\u8981\u7801\u91cf\u5728\u4e8e\u5224\u65ad\u6bcf\u4e2a\u65f6\u523b\u70b9\u4e4b\u95f4\u53ef\u4e0d\u53ef\u8fbe\uff0c\u50bb\u903cdfs\uff0c\u5efa\u56fe\u5c31\u662fsb\u5efa\u56fe\uff0c\u6ca1\u52b2","title":"78E *2500"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/cf%E7%BD%91%E7%BB%9C%E6%B5%81%E7%89%88%E5%88%87/#1146g-2600","text":"\u5728\u4e00\u6761\u8def\u4e0a\u6709\u6807\u53f7\u4e3a1-n\u7684n\u5ea7\u623f\u5b50\uff0c\u6bcf\u5ea7\u623f\u5b50\u6700\u9ad8\u4e3ah\uff0c\u82e5\u4e00\u5ea7\u623f\u5b50\u7684\u9ad8\u5ea6\u4e3ax\uff0c\u5219\u8fd9\u5ea7\u623f\u5b50\u7684\u6536\u76ca\u4e3ax*x\uff1b\u6709m\u6761\u9650\u5236\uff0c\u6bcf\u6761\u9650\u5236\u8868\u793a\u5982\u679c\u5728l-r\u4e4b\u95f4\u7684\u6240\u6709\u623f\u5b50\u7684\u6700\u5927\u9ad8\u5ea6\u8d85\u8fc7hi\uff0c\u5219\u7f5a\u6b3eci\u3002\u95ee\u6240\u6709\u623f\u5b50\u7684\u6700\u5927\u6536\u76ca\u662f\u591a\u5c11\u3002 \u6700\u5c0f\u5272\u6a21\u578b\uff0c\u5148\u5047\u8bbe\u603b\u6536\u76ca\u4e3a n*h*h \uff0c\u5bf9\u6bcf\u4e2a\u623f\u5b50\u7684\u5efa0-h\u5171h+1\u4e2a\u70b9\uff0cS\u54110\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0ci\u5411i+1\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a h*h-i*i \uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u8868\u793a\u53d6\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u6536\u76ca\uff1b\u6bcf\u4e2a\u9650\u5236\u4f5c\u4e3a\u4e00\u4e2a\u70b9\uff0c\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u7f5a\u6b3ec[i]\uff0c\u88ab\u5272\u8868\u793a\u9700\u8981\u652f\u4ed8\u7f5a\u6b3e\uff1bl,r\u4e4b\u95f4\u7684\u623f\u5b50\u6bcf\u4e2a\u8868\u793a\u9ad8\u5ea6 h[i]+1 \u5411\u8be5\u9650\u5236\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0c\u6700\u540e\u7684\u7b54\u6848\u4e3a n*h*h-max_flow(S\uff0cT)","title":"1146G *2600"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/","text":"No Problem model 1 \u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\u95ee\u9898 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d 2 \u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898 \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe 3 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898 \u6700\u5c0f\u8def\u5f84\u8986\u76d6 4 \u9b54\u672f\u7403\u95ee\u9898 \u6700\u5c0f\u8def\u5f84\u8986\u76d6 5 \u5706\u684c\u95ee\u9898 \u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d 6 \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u95ee\u9898 \u6700\u591a\u4e0d\u76f8\u4ea4\u8def\u5f84 7 \u8bd5\u9898\u5e93\u95ee\u9898 \u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d 8 \u673a\u5668\u4eba\u8def\u5f84\u89c4\u5212\u95ee\u9898 ////// 9 \u65b9\u683c\u53d6\u6570\u95ee\u9898 \u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6 10 \u9910\u5dfe\u8ba1\u5212\u95ee\u9898 \u8d39\u7528\u6d41 11 \u822a\u7a7a\u8def\u7ebf\u95ee\u9898 \u8d39\u7528\u6d41 12 \u8f6f\u4ef6\u8865\u4e01\u95ee\u9898 \u6700\u77ed\u8def\u5f84 13 \u661f\u9645\u8f6c\u79fb\u95ee\u9898 \u6b8b\u91cf\u7f51\u7edc\u6700\u5927\u6d41 14 \u5b64\u5c9b\u8425\u6551\u95ee\u9898 \u5206\u5c42\u56fe\u6700\u77ed\u8def 15 \u6c7d\u8f66\u52a0\u6cb9\u884c\u9a76\u95ee\u9898 \u5206\u5c42\u56fe\u6700\u77ed\u8def 16 \u6570\u5b57\u68af\u5f62\u95ee\u9898 \u8d39\u7528\u6d41 17 \u8fd0\u8f93\u95ee\u9898 \u4e8c\u5206\u56fe\u6700\u5927\u6743\u591a\u91cd\u5339\u914d 18 \u5206\u914d\u95ee\u9898 \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d 19 \u8d1f\u8f7d\u5e73\u8861\u95ee\u9898 \u8d39\u7528\u6d41 20 \u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898 \u8d39\u7528\u6d41 21 \u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898 \u6700\u5927\u6743\u4e0d\u76f8\u4ea4\u8def\u5f84 22 \u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898 \u8d39\u7528\u6d41 23 \u706b\u661f\u63a2\u9669\u95ee\u9898 \u8d39\u7528\u6d41 24 \u9a91\u58eb\u5171\u5b58\u95ee\u9898 \u6700\u5927\u72ec\u7acb\u96c6 1.\u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\u95ee\u9898 Link \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u76f4\u63a5\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 200 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i <= m ) add ( S , i , 1 ); else add ( i , T , 1 ); } while ( scanf ( \"%d%d\" , & u , & v ) != EOF ) add ( u , v , 1 ); printf ( \"%d \\n \" , max_flow ( S , T )); return 0 ; } 2.\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898 Link \u5fc5\u987b\u9009\u62e9\u6240\u6709\u5de6\u7aef\u70b9\u624d\u80fd\u9009\u62e9\u53f3\u7aef\u70b9\u83b7\u5f97\u6536\u76ca\uff0c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u6a21\u578b\u3002\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe=\u603b\u6743\u503c\u548c-\u6700\u5c0f\u5272 \u8f93\u51fa\u65b9\u6848\u65f6\u9009\u62e9\u4e0eS/T\u76f8\u8fde\u6ee1\u6d41\u7684\u5272\u8fb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 2500 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } int n , m ; //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) break ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } int cnt = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( level [ i ] > 0 ) { if ( cnt ++ ) printf ( \" \" ); printf ( \"%d\" , i ); } } printf ( \" \\n \" ); cnt = 0 ; for ( int i = 1 + m ; i <= n + m ; i ++ ) { if ( level [ i ] > 0 ) { if ( cnt ++ ) printf ( \" \" ); printf ( \"%d\" , i - m ); } } printf ( \" \\n \" ); return flow ; } int main () { int val , sum = 0 , a [ 55 ], b [ 55 ]; char tools [ 10000 ]; scanf ( \"%d%d\" , & m , & n ); int S = 0 , T = m + n + 1 ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & val ); b [ i ] = val ; sum += val ; add ( S , i , val ); memset ( tools , 0 , sizeof tools ); cin . getline ( tools , 10000 ); int ulen = 0 , tool ; while ( sscanf ( tools + ulen , \"%d\" , & tool ) == 1 ) { add ( i , tool + m , INF ); if ( tool == 0 ) ulen ++ ; else { while ( tool ) { tool /= 10 ; ulen ++ ; } } ulen ++ ; } } for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & val ); add ( i + m , T , val ); a [ i ] = val ; } printf ( \"%d \\n \" , sum - max_flow ( S , T )); return 0 ; } 3. \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898 Link \u62c6\u70b9\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570=|G|-\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6570\uff08\uff5c\uff27\uff5c\u662f\u6709\u5411\u56fe\u4e2d\u7684\u603b\u8fb9\u6570\uff09 \u8f93\u51fa\u8def\u5f84\uff1a\u5e76\u67e5\u96c6\u7ef4\u62a4\u540c\u4e00\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u9012\u5f52\u5411\u4e0b\u627e\u6ee1\u6d41\u7684\u70b9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 400 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n ; void print ( int x ) { for ( auto e : G [ x ]) { if ( e . cap == 0 && e . to > n ) { printf ( \" %d\" , e . to - n ); print ( e . to - n ); } } } int pre [ 400 + 10 ]; int Find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = Find ( pre [ x ]); } int main () { int m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = 2 * n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { add ( S , i , 1 ); add ( i + n , T , 1 ); } for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); add ( u , v + n , 1 ); } int ans = n - max_flow ( S , T ); for ( int i = S ; i <= T ; i ++ ) pre [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) for ( auto e : G [ i ]) if ( e . to > n && e . to < T && e . cap == 0 ) pre [ e . to - n ] = Find ( i ); for ( int i = 1 ; i <= n ; i ++ ) { if ( i == Find ( i )) { printf ( \"%d\" , i ); print ( i ); printf ( \" \\n \" ); } } printf ( \"%d \\n \" , ans ); return 0 ; } 4.\u9b54\u672f\u7403\u95ee\u9898 Link \u62c6\u70b9\u5efa\u4e8c\u5206\u56fe\uff0c\u679a\u4e3e\u7b54\u6848A\uff0c\u5728\u539f\u56fe\u4e0a\u76f4\u63a5\u52a0\u70b9\u5e76\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u76f4\u63a5\u589e\u5e7f\uff0c\u6240\u6c42\u7b54\u6848\u4e3a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u5f53\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u2264n\u65f6\u5747\u4e3a\u53ef\u884c\u89e3\u3002\u5411\u524d\u53d6\u6ee1\u6d41\u8fb9\u8f93\u51fa\u8def\u5f84 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int nex [ MAX_V ]; bool vis [ MAX_V ]; int main () { int n ; scanf ( \"%d\" , & n ); int m = 0 , ans = 0 , s = 0 , t = 10000 ; for (;;) { m ++ ; for ( int i = 1 ; i < m ; i ++ ) if ( sqrt ( i + m ) == ( int ) sqrt ( i + m )) add ( i , m + 5000 , 1 ); add ( s , m , 1 ), add ( m + 5000 , t , 1 ); ans += max_flow ( s , t ); if ( m - ans > n ) break ; } printf ( \"%d \\n \" , m - 1 ); for ( int i = 1 ; i < m ; i ++ ) for ( auto x : G [ i ]) if ( x . cap == 0 ) { nex [ i ] = x . to - 5000 ; break ; } for ( int i = 1 ; i < m ; i ++ ) { if ( vis [ i ]) continue ; printf ( \"%d\" , i ); int p = nex [ i ]; while ( p != - 5000 ) { vis [ p ] = 1 ; printf ( \" %d\" , p ); p = nex [ p ]; } printf ( \" \\n \" ); } return 0 ; } 5. \u5706\u684c\u95ee\u9898 Link \u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\uff0c\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , m , x , sum = 0 ; scanf ( \"%d%d\" , & n , & m ); int s = 0 , t = n + m + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); add ( s , i , x ); sum += x ; } for ( int i = 1 + n ; i <= m + n ; i ++ ) { scanf ( \"%d\" , & x ); add ( i , t , x ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 + n ; j <= m + n ; j ++ ) add ( i , j , 1 ); if ( sum > max_flow ( s , t )) return puts ( \"0\" ), 0 ; puts ( \"1\" ); for ( int i = 1 ; i <= n ; i ++ ) { bool flag = false ; for ( auto x : G [ i ]) if ( x . cap == 0 ) { if ( flag ) printf ( \" \" ); flag = true ; if ( x . to != 0 ) printf ( \"%d\" , x . to - n ); } printf ( \" \\n \" ); } return 0 ; } 6. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u95ee\u9898 Link \u7b2c\u4e00\u95ee\u8dd1n\u65b9\u7684dp\uff0c\u7b2c\u4e8c\u95ee\u5bf9\u4e8e f[j]=f[i]+1 \u4e14 a[i]<a[j] \u7684\u70b9\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\u8dd1\u6700\u5927\u6d41\uff0c\u7b2c\u4e09\u95ee\u5c06\u70b91\u548cn\u7684\u8fb9\u6539\u4e3aINF\u8dd1\u6700\u5927\u6d41\u3002 \u6700\u957f\u957f\u5ea6\u4e3a1\u65f6\u540e\u4e24\u95ee\u76f4\u63a5\u8f93\u51fa\u4e2a\u6570\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , k ; int a [ MAX_V ], f [ MAX_V ]; int solve1 () { int S = 0 , T = 2 * n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( f [ i ] == 1 ) add ( S , i , 1 ); if ( f [ i ] == k ) add ( i + n , T , 1 ); add ( i , i + n , 1 ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] == f [ i ] + 1 ) add ( i + n , j , 1 ); int ans = max_flow ( S , T ); printf ( \"%d \\n \" , ans ); return ans ; } void solve2 () { int S = 0 , T = 2 * n + 1 , v ; for ( int i = S ; i <= T ; i ++ ) G [ i ]. clear (); for ( int i = 1 ; i <= n ; i ++ ) { v = ( i == 1 || i == n ) ? INF : 1 ; if ( f [ i ] == 1 ) add ( S , i , v ); if ( f [ i ] == k ) add ( i + n , T , v ); add ( i , i + n , v ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] == f [ i ] + 1 ) add ( i + n , j , 1 ); printf ( \"%d \\n \" , max_flow ( S , T )); } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ) { f [ i ] = 1 ; for ( int j = 1 ; j < i ; j ++ ) if ( a [ i ] >= a [ j ]) f [ i ] = max ( f [ i ], f [ j ] + 1 ); k = max ( k , f [ i ]); } printf ( \"%d \\n \" , k ); int ans = solve1 (); if ( k > 1 ) solve2 (); else printf ( \"%d \\n \" , ans ); return 0 ; } 7.\u8bd5\u9898\u5e93\u95ee\u9898 Link #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1200 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , k , t , x , sum = 0 ; scanf ( \"%d%d\" , & n , & k ); int S = 0 , T = n + k + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); add ( i + k , T , x ); sum += x ; } for ( int i = 1 ; i <= k ; i ++ ) { scanf ( \"%d\" , & t ); add ( S , i , 1 ); while ( t -- ) { scanf ( \"%d\" , & x ); add ( i , k + x , 1 ); } } if ( max_flow ( S , T ) < sum ) return 0 * puts ( \"No Solution!\" ); for ( int i = k + 1 ; i <= k + n ; i ++ ) { printf ( \"%d:\" , i - k ); for ( auto v : G [ i ]) if ( v . cap ) printf ( \" %d\" , v . to ); printf ( \" \\n \" ); } return 0 ; } 9.\u65b9\u683c\u53d6\u6570\u95ee\u9898 Link \u5bf9\u65b9\u683c\u4e0a\u7684\u70b9\u6839\u636e\u884c\u5217\u5947\u5076\u9ed1\u767d\u67d3\u8272\uff0c\u5efa\u4e8c\u5206\u56fe\uff0c\u9ed1\u70b9\u5411\u56db\u5468\u767d\u70b9\u8fde\u8fb9\uff0c\u8981\u6c42\u7684\u7b54\u6848\u662f\u6ca1\u6709\u8fb9\u76f8\u8fde\u7684\u6743\u503c\u548c\u6700\u5927\u7684\u70b9\u96c6\u3002 \u4e8c\u5206\u56fe\u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6=\u70b9\u6743\u548c-\u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u6743\u8986\u76d6\u96c6 \u8dd1\u6700\u5927\u6d41\u51cf\u4e00\u4e0b #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , m ; inline int pt ( int x , int y ) { return x * m + y ; } int main () { int x , sum = 0 ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = 1001 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { scanf ( \"%d\" , & x ); if (( i + j ) % 2 ) { add ( S , pt ( i , j ), x ); if ( j + 1 <= m ) add ( pt ( i , j ), pt ( i , j + 1 ), INF ); if ( j - 1 > 0 ) add ( pt ( i , j ), pt ( i , j - 1 ), INF ); if ( i + 1 <= n ) add ( pt ( i , j ), pt ( i + 1 , j ), INF ); if ( i - 1 > 0 ) add ( pt ( i , j ), pt ( i - 1 , j ), INF ); } else add ( pt ( i , j ), T , x ); sum += x ; } } printf ( \"%d \\n \" , sum - max_flow ( S , T )); return 0 ; } 10.\u9910\u5dfe\u8ba1\u5212\u95ee\u9898 Link \u62c6\u70b9\u5efa\u56fe\uff0c A_i A_i \u8868\u793a\u5f53\u5929\u53ef\u4ee5\u63d0\u4f9b\u7684\u9910\u5dfe\u6570\uff0c B_i B_i \u8868\u793a\u5f53\u5929\u83b7\u5f97\u7684\u9910\u5dfe\u6570\u3002 S S \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u9700\u7684\u603b\u6570x\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u5f53\u5929\u6700\u591a\u53ef\u4ee5\u63d0\u4f9bx\u4e2a\u9910\u5dfe\u3002 B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u9700\u7684\u603b\u6570x\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u5f53\u5929\u6700\u5c11\u9700\u8981\u83b7\u5f97x\u4e2a\u9910\u5dfe\u3002 S S \u5411 B_i B_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a P P \uff0c\u8868\u793a\u5728\u5f53\u5929\u8d2d\u4e70\u65b0\u9910\u5dfe\u7684\u82b1\u8d39\u3002 A_i A_i \u5411 B_{i+M} B_{i+M} \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a F F \uff0c\u8868\u793a\u5728\u7b2ci\u5929\u7ecf\u8fc7M\u5929\u7684\u5feb\u6d17\u53ef\u4ee5\u83b7\u5f97\u9910\u5dfe\u3002 A_i A_i \u5411 B_{i+N} B_{i+N} \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a S S \uff0c\u8868\u793a\u5728\u7b2ci\u5929\u7ecf\u8fc7N\u5929\u7684\u6162\u6d17\u53ef\u4ee5\u83b7\u5f97\u9910\u5dfe\u3002 \u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int main () { int n , P , M , F , N , S , x ; scanf ( \"%d%d%d%d%d%d\" , & n , & P , & M , & F , & N , & S ); int s = 0 , t = 2 * n + 1 ; ans . init ( t ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( s , i * 2 - 1 , x , 0 ); ans . addEdge ( i * 2 , t , x , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( s , i * 2 , inf , P ); for ( int i = 1 ; i < n ; i ++ ) ans . addEdge ( i * 2 - 1 , i * 2 + 1 , inf , 0 ); for ( int i = 1 ; i + M <= n ; i ++ ) ans . addEdge ( i * 2 - 1 , ( i + M ) * 2 , inf , F ); for ( int i = 1 ; i + N <= n ; i ++ ) ans . addEdge ( i * 2 - 1 , ( i + N ) * 2 , inf , S ); printf ( \"%d \\n \" , ans . mincostMaxFlow ( s , t )); return 0 ; } 11.\u822a\u7a7a\u8def\u7ebf\u95ee\u9898 Link \u5efa\u56fe\u8dd1\u8d39\u7528\u6d41\uff0c\u6839\u636e\u6d41\u91cf\u53d8\u5316\u8f93\u51fa\u8def\u5f84\u3002 #include <bits/stdc++.h> using namespace std ; const int maxn = 200 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; string name [ 15 ]; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } void printPath ( int s , int t , int n ) { cout << name [ 1 ] << endl ; for ( int x = 1 ; x != t ;) { x += n ; for ( int i : G [ x ]) { if ( edges [ i ]. to > x - n && edges [ i ]. flow > 0 ) { int u = x - n , v = edges [ i ]. to ; x = v ; if ( x == t ) break ; edges [ i ]. flow -- ; cout << name [ v ] << endl ; break ; } } } vector < int > ans ; ans . push_back ( 1 ); for ( int x = 1 ; x != t ;) { x += n ; for ( int i : G [ x ]) { if ( edges [ i ]. to > x - n && edges [ i ]. flow > 0 ) { int u = x - n , v = edges [ i ]. to ; x = v ; if ( x == t ) break ; edges [ i ]. flow -- ; ans . push_back ( v ); break ; } } } for ( int i = ans . size () - 2 ; i >= 0 ; i -- ) cout << name [ ans [ i ]] << endl ; } } ans ; int main () { int n , m ; string x , y ; map < string , int > mp ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> x ; mp [ x ] = i ; name [ i ] = x ; } int S = 0 , T = 2 * n + 1 ; ans . init ( T ); while ( m -- ) { cin >> x >> y ; int u = mp [ x ], v = mp [ y ]; if ( u > v ) swap ( u , v ); ans . addEdge ( u + n , v , 2 , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i , i + n , 1 , - 1 ); ans . addEdge ( 1 , 1 + n , 1 , 0 ); ans . addEdge ( n , n + n , 1 , 0 ); ans . addEdge ( S , 1 , 2 , 0 ); ans . addEdge ( 2 * n , T , 2 , 0 ); int res = - ans . mincostMaxFlow ( S , T ); if ( res == 0 ) return 0 * puts ( \"No Solution!\" ); cout << res << endl ; ans . printPath ( S , T , n ); return 0 ; } 12.\u8f6f\u4ef6\u8865\u4e01\u95ee\u9898 Link \u6211\u7f13\u7f13\u6253\u51fa\u4e00\u4e2a\u95ee\u53f7 \u8fd9\u662f\u4e2a\u9524\u5b50\u7684\u7f51\u7edc\u6d41\uff0c\u8fd9\u662f\u6700\u77ed\u8def\u554a \u72b6\u538b\u4e00\u4e0b\u8f6c\u79fb\u65b9\u6848\u7136\u540e\u8dd1\u4ece(1<<n)-1\u52300\u7684\u6700\u77ed\u8def #include <bits/stdc++.h> using namespace std ; const int maxn = ( 1 << 21 ); const int inf = 0x3f3f3f3f ; struct node { int b1 , b2 , f1 , f2 , w ; bool check ( int x ) { return (( x & b1 ) == b1 ) && (( x & b2 ) == 0 ); } int change ( int x ) { x ^= x & f1 ; x |= f2 ; return x ; } } a [ 105 ]; int n , m , dis [ maxn ]; void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = 0 ; i < m ; i ++ ) if ( a [ i ]. check ( u )) { int v = a [ i ]. change ( u ); if ( dis [ v ] > dis [ u ] + a [ i ]. w ) { dis [ v ] = dis [ u ] + a [ i ]. w ; que . push ({ dis [ v ], v }); } } } } int main () { char s1 [ 55 ], s2 [ 55 ]; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%s%s\" , & a [ i ]. w , s1 , s2 ); for ( int j = 0 ; j < n ; j ++ ) { if ( s1 [ j ] == '+' ) a [ i ]. b1 |= ( 1 << j ); else if ( s1 [ j ] == '-' ) a [ i ]. b2 |= ( 1 << j ); if ( s2 [ j ] == '-' ) a [ i ]. f1 |= ( 1 << j ); else if ( s2 [ j ] == '+' ) a [ i ]. f2 |= ( 1 << j ); } } dijkstra (( 1 << n ) - 1 ); printf ( \"%d \\n \" , dis [ 0 ] == inf ? 0 : dis [ 0 ]); return 0 ; } 13.\u661f\u9645\u8f6c\u79fb\u95ee\u9898 Link \u62c6\u70b9\u5efa\u56fe\uff0c\u679a\u4e3e\u5929\u6570\u3002\u5bf9\u4e8e\u7b2ci\u5929\u4e0a\u7684\u70b9x\uff0c\u4ecei-1\u5929\u7684x\u70b9\u8fde\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\uff1b\u5e76\u5bf9\u5f53\u5929\u7684\u8f6c\u79fb\u65b9\u6848\u8fde\u8fb9\uff0c\u6bcf\u6b21\u76f4\u63a5\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8dd1\u6700\u5927\u6d41\uff0c\u603b\u6d41\u91cf\u7b49\u4e8ek\u65f6\u7684\u5929\u6570\u5373\u4e3a\u7b54\u6848\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int pos [ 105 ][ 105 ], x [ 105 ], t [ 105 ]; int main () { int n , m , k ; scanf ( \"%d%d%d\" , & n , & m , & k ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & x [ i ], & t [ i ]); for ( int j = 0 ; j < t [ i ]; j ++ ) { scanf ( \"%d\" , & pos [ i ][ j ]); pos [ i ][ j ] += 2 ; } } int S = 0 , T , ans = 0 ; add ( S , 2 , k ); n += 2 ; for ( int tt = 1 ; tt <= 100 ; tt ++ ) { T = tt * n + 1 ; for ( int i = 0 ; i < m ; i ++ ) { int u = ( tt - 1 ) % t [ i ], v = tt % t [ i ]; u = pos [ i ][ u ], v = pos [ i ][ v ]; add (( tt - 1 ) * n + u , tt * n + v , x [ i ]); } for ( int i = 1 ; i <= n ; i ++ ) add (( tt - 1 ) * n + i , tt * n + i , INF ); ans += max_flow ( S , T ); if ( ans >= k ) return 0 * printf ( \"%d \\n \" , tt ); } puts ( \"0\" ); return 0 ; } 14. \u5b64\u5c9b\u8425\u6551\u95ee\u9898 Link \u72b6\u538b+\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u4ee3\u7801\u80fd\u529b\u4e22\u4eba\uff0c\u8c03\u4e00\u4e0b\u5348 #include <bits/stdc++.h> using namespace std ; const int maxn = 2e5 + 10 ; const int inf = 0x3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 20 * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int n , m , sum ; int pt ( int x , int y , int dep ) { int id = ( x - 1 ) * m + y ; return id + dep * sum ; } int mp [ 105 ][ 105 ], key [ 105 ][ 105 ], lim ; int dx [ 4 ] = { 1 , 0 , - 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , - 1 }; int main () { int p , x1 , y1 , x2 , y2 , g , k ; scanf ( \"%d%d%d\" , & n , & m , & p ); lim = ( 1 << p ); sum = n * m ; scanf ( \"%d\" , & k ); memset ( head , 0xff , sizeof dis ); while ( k -- ) { scanf ( \"%d%d%d%d%d\" , & x1 , & y1 , & x2 , & y2 , & g ); int u = pt ( x1 , y1 , 0 ), v = pt ( x2 , y2 , 0 ); if ( g == 0 ) mp [ u ][ v ] = mp [ v ][ u ] = - 1 ; else mp [ u ][ v ] = mp [ v ][ u ] = ( 1 << ( g - 1 )); } scanf ( \"%d\" , & k ); while ( k -- ) { scanf ( \"%d%d%d\" , & x1 , & y1 , & g ); key [ x1 ][ y1 ] |= ( 1 << ( g - 1 )); } for ( int i = 0 ; i < lim ; i ++ ) { for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= m ; y ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { int xx = x + dx [ k ], yy = y + dy [ k ]; if ( xx < 1 || xx > n || yy < 1 || yy > m ) continue ; if ( mp [ pt ( x , y , 0 )][ pt ( xx , yy , 0 )] == - 1 ) continue ; int op = mp [ pt ( x , y , 0 )][ pt ( xx , yy , 0 )]; if (( op & i ) == op ) add ( pt ( x , y , i ), pt ( xx , yy , i | key [ xx ][ yy ]), 1 ); } } } } int s = pt ( 1 , 1 , 0 ), t = pt ( n , m , lim - 1 ) + 1 ; for ( int i = 0 ; i < lim ; i ++ ) add ( pt ( n , m , i ), t , 0 ); dijkstra ( s ); printf ( \"%d \\n \" , dis [ t ] == inf ? - 1 : dis [ t ]); return 0 ; } 15.\u6c7d\u8f66\u52a0\u6cb9\u884c\u9a76\u95ee\u9898 Link #include <bits/stdc++.h> using namespace std ; const int maxn = 5e5 + 10 ; const int inf = 0x3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 2 * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int p [ 105 ][ 105 ], n ; int pt ( int x , int y , int dep ) { return ( x - 1 ) * n + y + dep * n * n ; } int dx [ 4 ] = { 1 , 0 , - 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , - 1 }; int main () { int k , a , b , c ; scanf ( \"%d%d%d%d%d\" , & n , & k , & a , & b , & c ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & p [ i ][ j ]); int s = 0 , t = pt ( n , n , k ) + 1 ; memset ( head , 0xff , sizeof head ); add ( s , pt ( 1 , 1 , k ), 0 ); for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= n ; y ++ ) { for ( int i = 0 ; i <= k ; i ++ ) add ( pt ( x , y , i ), pt ( x , y , k ), a + c ); for ( int i = 0 ; i < 4 ; i ++ ) { int fx = dx [ i ] + x , fy = dy [ i ] + y ; if ( fx < 1 || fx > n || fy < 1 || fy > n ) continue ; for ( int j = 1 ; j <= k ; j ++ ) { if ( p [ fx ][ fy ]) { if ( fx < x || fy < y ) add ( pt ( x , y , j ), pt ( fx , fy , k ), a + b ); else add ( pt ( x , y , j ), pt ( fx , fy , k ), a ); } else { if ( fx < x || fy < y ) add ( pt ( x , y , j ), pt ( fx , fy , j - 1 ), b ); else add ( pt ( x , y , j ), pt ( fx , fy , j - 1 ), 0 ); } } } } } for ( int i = 0 ; i <= k ; i ++ ) add ( pt ( n , n , i ), t , 0 ); dijkstra ( s ); printf ( \"%d \\n \" , dis [ t ]); return 0 ; } 16.\u6570\u5b57\u68af\u5f62\u95ee\u9898 Link \u7b2c\u4e00\u95ee\u6c42\u4e0d\u76f8\u4ea4\u8def\u5f84\uff0c\u62c6\u70b9\u4f7fi\u5230i+n\u7684\u6d41\u91cf\u4e3a1 \u7b2c\u4e8c\u95ee\u70b9\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u628a\u4e0a\u9762\u62c6\u70b9\u7684\u6d41\u91cf\u6539\u6210INF \u7b2c\u4e09\u95ee\u8fb9\u4e5f\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u628a\u52a0\u7684\u8fb9\u7684\u6d41\u91cf\u4e5f\u6539\u6210INF\uff0c\u6ce8\u610f\u6700\u4e0b\u5c42\u5230T\u7684\u8fb9\u4e5f\u8981\u6539 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , m , p , a [ 55 ][ 55 ]; void solve1 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , 1 , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , 1 , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , 1 , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , 1 , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , 1 , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , 1 , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , inf , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , inf , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve3 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , inf , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , inf , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , inf , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , inf , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d%d\" , & n , & m ); p = ( n + ( n + m - 1 )) * m / 2 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 1 ; j <= n + i ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]); solve1 (); solve2 (); solve3 (); return 0 ; } 17.\u8fd0\u8f93\u95ee\u9898 Link \u4e8c\u5206\u56fe\u6700\u5927\u6743\u591a\u91cd\u5339\u914d\uff0c\u65e0\u8111\u8d39\u7528\u6d41 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , m , a [ 105 ], b [ 105 ], cost [ 105 ][ 105 ]; void solve1 () { int S = 0 , T = n + m + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , a [ i ], 0 ); for ( int i = 1 ; i <= m ; i ++ ) ans . addEdge ( i + n , T , b [ i ], 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) ans . addEdge ( i , j + n , inf , - cost [ i ][ j ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = n + m + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , a [ i ], 0 ); for ( int i = 1 ; i <= m ; i ++ ) ans . addEdge ( i + n , T , b [ i ], 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) ans . addEdge ( i , j + n , inf , cost [ i ][ j ]); printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , & b [ i ]); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); solve2 (); solve1 (); return 0 ; } 18.\u5206\u914d\u95ee\u9898 Link \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\uff0c\u65e0\u8111\u8d39\u7528\u6d41*2 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , cost [ 105 ][ 105 ]; void solve1 () { int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans . addEdge ( i , j + n , 1 , cost [ i ][ j ]); printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans . addEdge ( i , j + n , 1 , - cost [ i ][ j ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); solve1 (); solve2 (); return 0 ; } 19.\u8d1f\u8f7d\u5e73\u8861\u95ee\u9898 Link \u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\uff0c S S \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u524d\u70b9\u539f\u6765\u7684\u5927\u5c0f\uff0c\u8d39\u7528\u4e3a0\uff1b A_i A_i \u5411 B_i B_i \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a0\uff0c\u5411 B_{i-1} B_{i-1} \u548c B_{i+1} B_{i+1} \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a1\uff0c\u5bb9\u91cf\u4e3aINF; B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u76ee\u6807\u503c\u5927\u5c0f\uff0c\u8d39\u7528\u4e3a0. #include <bits/stdc++.h> using namespace std ; const int maxn = 1000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int main () { int n , sum = 0 , x ; scanf ( \"%d\" , & n ); int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); sum += x ; ans . addEdge ( S , i , x , 0 ); } sum /= n ; for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , inf , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i , i + n , sum , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { int x = i - 1 , y = i + 1 ; if ( x < 1 ) x += n ; if ( y > n ) y -= n ; ans . addEdge ( i , x , inf , 1 ); ans . addEdge ( i , y , inf , 1 ); } printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); return 0 ; } 20.\u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898 Link \u8d39\u7528\u6d41\uff0c\u8f93\u5165\u683c\u5f0f\u4ee4\u4ebaD\u533a #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int id [ 25 ][ 25 ]; int main () { int a , b , p , q , k , x , y ; scanf ( \"%d%d%d%d\" , & a , & b , & p , & q ); int tot = 0 ; p ++ ; q ++ ; for ( int i = 1 ; i <= p ; i ++ ) for ( int j = 1 ; j <= q ; j ++ ) id [ i ][ j ] = ++ tot ; int S = 0 , T = tot + 1 ; ans . init ( T ); for ( int i = 1 ; i <= p ; i ++ ) { for ( int j = 1 ; j < q ; j ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( id [ i ][ j ], id [ i ][ j + 1 ], 1 , - x ); ans . addEdge ( id [ i ][ j ], id [ i ][ j + 1 ], inf , 0 ); } } for ( int j = 1 ; j <= q ; j ++ ) { for ( int i = 1 ; i < p ; i ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( id [ i ][ j ], id [ i + 1 ][ j ], 1 , - x ); ans . addEdge ( id [ i ][ j ], id [ i + 1 ][ j ], inf , 0 ); } } while ( a -- ) { scanf ( \"%d%d%d\" , & k , & x , & y ); ans . addEdge ( S , id [ x + 1 ][ y + 1 ], k , 0 ); } while ( b -- ) { scanf ( \"%d%d%d\" , & k , & x , & y ); ans . addEdge ( id [ x + 1 ][ y + 1 ], T , k , 0 ); } printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; } 21.\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898 Link \u62c6\u70b9\u5efa\u56fe\uff0c\u8d85\u7ea7\u6e90\u70b9 S S \u5411 S1 S1 \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a k k \uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u6700\u591a\u53d6 k k \u4e2a\u5f00\u5934\u7684\u533a\u95f4\uff1b S1 S1 \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b A_i A_i \u5411 B_i B_i \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a\u8be5\u533a\u95f4\u6743\u503c\uff0c\u8868\u793a\u53d6\u8fd9\u4e2a\u533a\u95f4\uff1b B_i B_i \u5411\u6240\u6709\u5728\u5176\u53f3\u4fa7\u4e14\u4e0e\u5b83\u4e0d\u76f8\u4ea4\u7684 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff0c\u8dd1 S S \u5230 T T \u7684\u8d39\u7528\u6d41\u3002 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int l [ 505 ], r [ 505 ], c [ 505 ]; int main () { int n , k ; scanf ( \"%d%d\" , & n , & k ); int S = 0 , T = 2 * n + 1 , S1 = T + 1 ; ans . init ( S1 ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & l [ i ], & r [ i ]); if ( l [ i ] > r [ i ]) swap ( l [ i ], r [ i ]); ans . addEdge ( i , i + n , 1 , - ( r [ i ] - l [ i ])); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) if ( r [ i ] <= l [ j ]) ans . addEdge ( i + n , j , 1 , 0 ); ans . addEdge ( S , S1 , k , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { ans . addEdge ( S1 , i , 1 , 0 ); ans . addEdge ( i + n , T , 1 , 0 ); } printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; } 22.\u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898 Link \u8ddf\u4e0a\u4e00\u9898\u6a21\u578b\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff0c\u6362\u4e86\u4e2a\u65b9\u6cd5\u3002 \u628a\u7ebf\u6bb5\u6295\u5f71\u5230X\u8f74\u4e0a\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u533a\u95f4\u96c6\u95ee\u9898\uff0c\u4f46\u662f\u56e0\u4e3a\u5b58\u5728 x=r \u8fd9\u6837\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u76f4\u63a5\u5efa\u56fe\u4f1a\u4ea7\u751f\u8d1f\u73af\uff0c\u9700\u8981\u62c6\u70b9\u3002 \u79bb\u6563\u5316\u533a\u95f4\u7aef\u70b9\uff0c\u76f8\u90bb\u7684\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a0\uff1b\u533a\u95f4\u7aef\u70b9 L[i] \u5411 R[i] \u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a -val[i] \uff0cS\u548cT\u5206\u522b\u5411\u6700\u5de6\u548c\u6700\u53f3\u7aef\u70b9\u8fde\u6d41\u91cf\u4e3ak\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\u8dd1\u8d39\u7528\u6d41\u5373\u4e3a\u7b54\u6848\u3002 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; inline int dis ( int x1 , int y1 , int x2 , int y2 ) { return sqrt ( 1ll * ( x2 - x1 ) * ( x2 - x1 ) + 1ll * ( y2 - y1 ) * ( y2 - y1 )); } int n , L [ 505 ], R [ 505 ], val [ 505 ]; map < int , int > M ; int discretization () { vector < int > v ; for ( int i = 1 ; i <= n ; i ++ ) v . push_back ( L [ i ]), v . push_back ( R [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 0 ; i < v . size (); i ++ ) M [ v [ i ]] = i + 1 ; for ( int i = 1 ; i <= n ; i ++ ) L [ i ] = M [ L [ i ]], R [ i ] = M [ R [ i ]]; return v . size (); } int main () { int k , a , b , c , d ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d%d%d\" , & a , & b , & c , & d ); val [ i ] = dis ( a , b , c , d ); L [ i ] = a * 2 , R [ i ] = c * 2 ; if ( L [ i ] > R [ i ]) swap ( L [ i ], R [ i ]); if ( L [ i ] == R [ i ]) R [ i ] ++ ; else L [ i ] ++ ; } int m = discretization (); int S = 0 , T = m + 1 ; ans . init ( T ); ans . addEdge ( S , 1 , k , 0 ), ans . addEdge ( m , T , k , 0 ); for ( int i = 1 ; i < m ; i ++ ) ans . addEdge ( i , i + 1 , inf , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( L [ i ], R [ i ], 1 , - val [ i ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; } 23.\u706b\u661f\u63a2\u9669\u95ee\u9898 Link \u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\uff0c\u8f93\u51fa\u8def\u5f84 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; int a [ 50 ][ 50 ], id [ 50 ][ 50 ]; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } void printPath ( int cnt , int n , int m ) { int p = id [ 1 ][ 1 ]; while ( p != id [ n ][ m ]) { int x = ( p - 1 ) / m , y = ( p - 1 ) % m ; for ( auto i : G [ p + n * m ]) { int tmp = edges [ i ]. to ; int xx = ( tmp - 1 ) / m , yy = ( tmp - 1 ) % m ; if ( xx <= x && yy <= y ) continue ; if ( edges [ i ]. flow > 0 ) { edges [ i ]. flow -- ; //printf(\"%d %d %d %d\\n\", edges[i].from, edges[i].to, edges[i].cap, edges[i].flow); //printf(\"%d %d\\n\", xx + 1, yy + 1); if ( xx > x ) printf ( \"%d 0 \\n \" , cnt ); else printf ( \"%d 1 \\n \" , cnt ); p = tmp ; break ; } } } } } ans ; int main () { int x , n , m ; scanf ( \"%d%d%d\" , & x , & m , & n ); int S = 0 , T = 2 * n * m + 1 , tot = 0 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]), id [ i ][ j ] = ++ tot ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( i + 1 <= n ) ans . addEdge ( id [ i ][ j ] + n * m , id [ i + 1 ][ j ], inf , 0 ); if ( j + 1 <= m ) ans . addEdge ( id [ i ][ j ] + n * m , id [ i ][ j + 1 ], inf , 0 ); if ( a [ i ][ j ] == 0 || a [ i ][ j ] == 2 ) ans . addEdge ( id [ i ][ j ], id [ i ][ j ] + n * m , inf , 0 ); if ( a [ i ][ j ] == 2 ) ans . addEdge ( id [ i ][ j ], id [ i ][ j ] + n * m , 1 , - 1 ); } } ans . addEdge ( S , id [ 1 ][ 1 ], x , 0 ); ans . addEdge ( id [ n ][ m ] + n * m , T , x , 0 ); ans . mincostMaxFlow ( S , T ); for ( int i = 1 ; i <= x ; i ++ ) ans . printPath ( i , n , m ); return 0 ; } 24.\u9a91\u58eb\u5171\u5b58\u95ee\u9898 Link \u663e\u7136\u6240\u7ed9\u6a21\u578b\u662f\u4e8c\u5206\u56fe\uff0c\u6700\u5927\u72ec\u7acb\u96c6-\u4e0d\u53ef\u9009\u7684\u8fb9\u5373\u4e3a\u7b54\u6848\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 50000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , vis [ 205 ][ 205 ]; int dx [ 8 ] = { - 2 , - 1 , - 2 , - 1 , 2 , 1 , 2 , 1 }; int dy [ 8 ] = { - 1 , - 2 , 1 , 2 , - 1 , - 2 , 1 , 2 }; int id ( int x , int y ) { return ( x - 1 ) * n + y ; } bool check ( int x , int y ) { return x > 0 && x <= n && y > 0 && y <= n && ! vis [ x ][ y ]; } int main () { int m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = n * n + 1 ; for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); vis [ u ][ v ] = 1 ; } for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= n ; y ++ ) { if ( ! check ( x , y )) continue ; if (( x + y ) % 2 ) add ( S , id ( x , y ), 1 ); else add ( id ( x , y ), T , 1 ); if (( x + y ) % 2 == 0 ) continue ; for ( int i = 0 ; i < 8 ; i ++ ) { int fx = x + dx [ i ], fy = y + dy [ i ]; if ( check ( fx , fy )) add ( id ( x , y ), id ( fx , fy ), 1 ); } } } printf ( \"%d \\n \" , n * n - max_flow ( S , T ) - m ); return 0 ; }","title":"\u7f51\u7edc\u6d4124\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#1","text":"\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u76f4\u63a5\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 200 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i <= m ) add ( S , i , 1 ); else add ( i , T , 1 ); } while ( scanf ( \"%d%d\" , & u , & v ) != EOF ) add ( u , v , 1 ); printf ( \"%d \\n \" , max_flow ( S , T )); return 0 ; }","title":"1.\u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#2","text":"\u5fc5\u987b\u9009\u62e9\u6240\u6709\u5de6\u7aef\u70b9\u624d\u80fd\u9009\u62e9\u53f3\u7aef\u70b9\u83b7\u5f97\u6536\u76ca\uff0c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u6a21\u578b\u3002\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe=\u603b\u6743\u503c\u548c-\u6700\u5c0f\u5272 \u8f93\u51fa\u65b9\u6848\u65f6\u9009\u62e9\u4e0eS/T\u76f8\u8fde\u6ee1\u6d41\u7684\u5272\u8fb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 2500 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } int n , m ; //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) break ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } int cnt = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( level [ i ] > 0 ) { if ( cnt ++ ) printf ( \" \" ); printf ( \"%d\" , i ); } } printf ( \" \\n \" ); cnt = 0 ; for ( int i = 1 + m ; i <= n + m ; i ++ ) { if ( level [ i ] > 0 ) { if ( cnt ++ ) printf ( \" \" ); printf ( \"%d\" , i - m ); } } printf ( \" \\n \" ); return flow ; } int main () { int val , sum = 0 , a [ 55 ], b [ 55 ]; char tools [ 10000 ]; scanf ( \"%d%d\" , & m , & n ); int S = 0 , T = m + n + 1 ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & val ); b [ i ] = val ; sum += val ; add ( S , i , val ); memset ( tools , 0 , sizeof tools ); cin . getline ( tools , 10000 ); int ulen = 0 , tool ; while ( sscanf ( tools + ulen , \"%d\" , & tool ) == 1 ) { add ( i , tool + m , INF ); if ( tool == 0 ) ulen ++ ; else { while ( tool ) { tool /= 10 ; ulen ++ ; } } ulen ++ ; } } for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & val ); add ( i + m , T , val ); a [ i ] = val ; } printf ( \"%d \\n \" , sum - max_flow ( S , T )); return 0 ; }","title":"2.\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#3","text":"\u62c6\u70b9\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570=|G|-\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6570\uff08\uff5c\uff27\uff5c\u662f\u6709\u5411\u56fe\u4e2d\u7684\u603b\u8fb9\u6570\uff09 \u8f93\u51fa\u8def\u5f84\uff1a\u5e76\u67e5\u96c6\u7ef4\u62a4\u540c\u4e00\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u9012\u5f52\u5411\u4e0b\u627e\u6ee1\u6d41\u7684\u70b9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 400 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n ; void print ( int x ) { for ( auto e : G [ x ]) { if ( e . cap == 0 && e . to > n ) { printf ( \" %d\" , e . to - n ); print ( e . to - n ); } } } int pre [ 400 + 10 ]; int Find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = Find ( pre [ x ]); } int main () { int m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = 2 * n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { add ( S , i , 1 ); add ( i + n , T , 1 ); } for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); add ( u , v + n , 1 ); } int ans = n - max_flow ( S , T ); for ( int i = S ; i <= T ; i ++ ) pre [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) for ( auto e : G [ i ]) if ( e . to > n && e . to < T && e . cap == 0 ) pre [ e . to - n ] = Find ( i ); for ( int i = 1 ; i <= n ; i ++ ) { if ( i == Find ( i )) { printf ( \"%d\" , i ); print ( i ); printf ( \" \\n \" ); } } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"3.  \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#4","text":"\u62c6\u70b9\u5efa\u4e8c\u5206\u56fe\uff0c\u679a\u4e3e\u7b54\u6848A\uff0c\u5728\u539f\u56fe\u4e0a\u76f4\u63a5\u52a0\u70b9\u5e76\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u76f4\u63a5\u589e\u5e7f\uff0c\u6240\u6c42\u7b54\u6848\u4e3a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u5f53\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u2264n\u65f6\u5747\u4e3a\u53ef\u884c\u89e3\u3002\u5411\u524d\u53d6\u6ee1\u6d41\u8fb9\u8f93\u51fa\u8def\u5f84 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int nex [ MAX_V ]; bool vis [ MAX_V ]; int main () { int n ; scanf ( \"%d\" , & n ); int m = 0 , ans = 0 , s = 0 , t = 10000 ; for (;;) { m ++ ; for ( int i = 1 ; i < m ; i ++ ) if ( sqrt ( i + m ) == ( int ) sqrt ( i + m )) add ( i , m + 5000 , 1 ); add ( s , m , 1 ), add ( m + 5000 , t , 1 ); ans += max_flow ( s , t ); if ( m - ans > n ) break ; } printf ( \"%d \\n \" , m - 1 ); for ( int i = 1 ; i < m ; i ++ ) for ( auto x : G [ i ]) if ( x . cap == 0 ) { nex [ i ] = x . to - 5000 ; break ; } for ( int i = 1 ; i < m ; i ++ ) { if ( vis [ i ]) continue ; printf ( \"%d\" , i ); int p = nex [ i ]; while ( p != - 5000 ) { vis [ p ] = 1 ; printf ( \" %d\" , p ); p = nex [ p ]; } printf ( \" \\n \" ); } return 0 ; }","title":"4.\u9b54\u672f\u7403\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#5","text":"\u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\uff0c\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , m , x , sum = 0 ; scanf ( \"%d%d\" , & n , & m ); int s = 0 , t = n + m + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); add ( s , i , x ); sum += x ; } for ( int i = 1 + n ; i <= m + n ; i ++ ) { scanf ( \"%d\" , & x ); add ( i , t , x ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 + n ; j <= m + n ; j ++ ) add ( i , j , 1 ); if ( sum > max_flow ( s , t )) return puts ( \"0\" ), 0 ; puts ( \"1\" ); for ( int i = 1 ; i <= n ; i ++ ) { bool flag = false ; for ( auto x : G [ i ]) if ( x . cap == 0 ) { if ( flag ) printf ( \" \" ); flag = true ; if ( x . to != 0 ) printf ( \"%d\" , x . to - n ); } printf ( \" \\n \" ); } return 0 ; }","title":"5.  \u5706\u684c\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#6","text":"\u7b2c\u4e00\u95ee\u8dd1n\u65b9\u7684dp\uff0c\u7b2c\u4e8c\u95ee\u5bf9\u4e8e f[j]=f[i]+1 \u4e14 a[i]<a[j] \u7684\u70b9\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\u8dd1\u6700\u5927\u6d41\uff0c\u7b2c\u4e09\u95ee\u5c06\u70b91\u548cn\u7684\u8fb9\u6539\u4e3aINF\u8dd1\u6700\u5927\u6d41\u3002 \u6700\u957f\u957f\u5ea6\u4e3a1\u65f6\u540e\u4e24\u95ee\u76f4\u63a5\u8f93\u51fa\u4e2a\u6570\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , k ; int a [ MAX_V ], f [ MAX_V ]; int solve1 () { int S = 0 , T = 2 * n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( f [ i ] == 1 ) add ( S , i , 1 ); if ( f [ i ] == k ) add ( i + n , T , 1 ); add ( i , i + n , 1 ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] == f [ i ] + 1 ) add ( i + n , j , 1 ); int ans = max_flow ( S , T ); printf ( \"%d \\n \" , ans ); return ans ; } void solve2 () { int S = 0 , T = 2 * n + 1 , v ; for ( int i = S ; i <= T ; i ++ ) G [ i ]. clear (); for ( int i = 1 ; i <= n ; i ++ ) { v = ( i == 1 || i == n ) ? INF : 1 ; if ( f [ i ] == 1 ) add ( S , i , v ); if ( f [ i ] == k ) add ( i + n , T , v ); add ( i , i + n , v ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] == f [ i ] + 1 ) add ( i + n , j , 1 ); printf ( \"%d \\n \" , max_flow ( S , T )); } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ) { f [ i ] = 1 ; for ( int j = 1 ; j < i ; j ++ ) if ( a [ i ] >= a [ j ]) f [ i ] = max ( f [ i ], f [ j ] + 1 ); k = max ( k , f [ i ]); } printf ( \"%d \\n \" , k ); int ans = solve1 (); if ( k > 1 ) solve2 (); else printf ( \"%d \\n \" , ans ); return 0 ; }","title":"6.  \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#7","text":"#include <bits/stdc++.h> using namespace std ; const int MAX_V = 1200 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , k , t , x , sum = 0 ; scanf ( \"%d%d\" , & n , & k ); int S = 0 , T = n + k + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); add ( i + k , T , x ); sum += x ; } for ( int i = 1 ; i <= k ; i ++ ) { scanf ( \"%d\" , & t ); add ( S , i , 1 ); while ( t -- ) { scanf ( \"%d\" , & x ); add ( i , k + x , 1 ); } } if ( max_flow ( S , T ) < sum ) return 0 * puts ( \"No Solution!\" ); for ( int i = k + 1 ; i <= k + n ; i ++ ) { printf ( \"%d:\" , i - k ); for ( auto v : G [ i ]) if ( v . cap ) printf ( \" %d\" , v . to ); printf ( \" \\n \" ); } return 0 ; }","title":"7.\u8bd5\u9898\u5e93\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#9","text":"\u5bf9\u65b9\u683c\u4e0a\u7684\u70b9\u6839\u636e\u884c\u5217\u5947\u5076\u9ed1\u767d\u67d3\u8272\uff0c\u5efa\u4e8c\u5206\u56fe\uff0c\u9ed1\u70b9\u5411\u56db\u5468\u767d\u70b9\u8fde\u8fb9\uff0c\u8981\u6c42\u7684\u7b54\u6848\u662f\u6ca1\u6709\u8fb9\u76f8\u8fde\u7684\u6743\u503c\u548c\u6700\u5927\u7684\u70b9\u96c6\u3002 \u4e8c\u5206\u56fe\u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6=\u70b9\u6743\u548c-\u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u6743\u8986\u76d6\u96c6 \u8dd1\u6700\u5927\u6d41\u51cf\u4e00\u4e0b #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , m ; inline int pt ( int x , int y ) { return x * m + y ; } int main () { int x , sum = 0 ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = 1001 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { scanf ( \"%d\" , & x ); if (( i + j ) % 2 ) { add ( S , pt ( i , j ), x ); if ( j + 1 <= m ) add ( pt ( i , j ), pt ( i , j + 1 ), INF ); if ( j - 1 > 0 ) add ( pt ( i , j ), pt ( i , j - 1 ), INF ); if ( i + 1 <= n ) add ( pt ( i , j ), pt ( i + 1 , j ), INF ); if ( i - 1 > 0 ) add ( pt ( i , j ), pt ( i - 1 , j ), INF ); } else add ( pt ( i , j ), T , x ); sum += x ; } } printf ( \"%d \\n \" , sum - max_flow ( S , T )); return 0 ; }","title":"9.\u65b9\u683c\u53d6\u6570\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#10","text":"\u62c6\u70b9\u5efa\u56fe\uff0c A_i A_i \u8868\u793a\u5f53\u5929\u53ef\u4ee5\u63d0\u4f9b\u7684\u9910\u5dfe\u6570\uff0c B_i B_i \u8868\u793a\u5f53\u5929\u83b7\u5f97\u7684\u9910\u5dfe\u6570\u3002 S S \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u9700\u7684\u603b\u6570x\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u5f53\u5929\u6700\u591a\u53ef\u4ee5\u63d0\u4f9bx\u4e2a\u9910\u5dfe\u3002 B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u9700\u7684\u603b\u6570x\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u5f53\u5929\u6700\u5c11\u9700\u8981\u83b7\u5f97x\u4e2a\u9910\u5dfe\u3002 S S \u5411 B_i B_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a P P \uff0c\u8868\u793a\u5728\u5f53\u5929\u8d2d\u4e70\u65b0\u9910\u5dfe\u7684\u82b1\u8d39\u3002 A_i A_i \u5411 B_{i+M} B_{i+M} \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a F F \uff0c\u8868\u793a\u5728\u7b2ci\u5929\u7ecf\u8fc7M\u5929\u7684\u5feb\u6d17\u53ef\u4ee5\u83b7\u5f97\u9910\u5dfe\u3002 A_i A_i \u5411 B_{i+N} B_{i+N} \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a S S \uff0c\u8868\u793a\u5728\u7b2ci\u5929\u7ecf\u8fc7N\u5929\u7684\u6162\u6d17\u53ef\u4ee5\u83b7\u5f97\u9910\u5dfe\u3002 \u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int main () { int n , P , M , F , N , S , x ; scanf ( \"%d%d%d%d%d%d\" , & n , & P , & M , & F , & N , & S ); int s = 0 , t = 2 * n + 1 ; ans . init ( t ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( s , i * 2 - 1 , x , 0 ); ans . addEdge ( i * 2 , t , x , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( s , i * 2 , inf , P ); for ( int i = 1 ; i < n ; i ++ ) ans . addEdge ( i * 2 - 1 , i * 2 + 1 , inf , 0 ); for ( int i = 1 ; i + M <= n ; i ++ ) ans . addEdge ( i * 2 - 1 , ( i + M ) * 2 , inf , F ); for ( int i = 1 ; i + N <= n ; i ++ ) ans . addEdge ( i * 2 - 1 , ( i + N ) * 2 , inf , S ); printf ( \"%d \\n \" , ans . mincostMaxFlow ( s , t )); return 0 ; }","title":"10.\u9910\u5dfe\u8ba1\u5212\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#11","text":"\u5efa\u56fe\u8dd1\u8d39\u7528\u6d41\uff0c\u6839\u636e\u6d41\u91cf\u53d8\u5316\u8f93\u51fa\u8def\u5f84\u3002 #include <bits/stdc++.h> using namespace std ; const int maxn = 200 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; string name [ 15 ]; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } void printPath ( int s , int t , int n ) { cout << name [ 1 ] << endl ; for ( int x = 1 ; x != t ;) { x += n ; for ( int i : G [ x ]) { if ( edges [ i ]. to > x - n && edges [ i ]. flow > 0 ) { int u = x - n , v = edges [ i ]. to ; x = v ; if ( x == t ) break ; edges [ i ]. flow -- ; cout << name [ v ] << endl ; break ; } } } vector < int > ans ; ans . push_back ( 1 ); for ( int x = 1 ; x != t ;) { x += n ; for ( int i : G [ x ]) { if ( edges [ i ]. to > x - n && edges [ i ]. flow > 0 ) { int u = x - n , v = edges [ i ]. to ; x = v ; if ( x == t ) break ; edges [ i ]. flow -- ; ans . push_back ( v ); break ; } } } for ( int i = ans . size () - 2 ; i >= 0 ; i -- ) cout << name [ ans [ i ]] << endl ; } } ans ; int main () { int n , m ; string x , y ; map < string , int > mp ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> x ; mp [ x ] = i ; name [ i ] = x ; } int S = 0 , T = 2 * n + 1 ; ans . init ( T ); while ( m -- ) { cin >> x >> y ; int u = mp [ x ], v = mp [ y ]; if ( u > v ) swap ( u , v ); ans . addEdge ( u + n , v , 2 , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i , i + n , 1 , - 1 ); ans . addEdge ( 1 , 1 + n , 1 , 0 ); ans . addEdge ( n , n + n , 1 , 0 ); ans . addEdge ( S , 1 , 2 , 0 ); ans . addEdge ( 2 * n , T , 2 , 0 ); int res = - ans . mincostMaxFlow ( S , T ); if ( res == 0 ) return 0 * puts ( \"No Solution!\" ); cout << res << endl ; ans . printPath ( S , T , n ); return 0 ; }","title":"11.\u822a\u7a7a\u8def\u7ebf\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#12","text":"\u6211\u7f13\u7f13\u6253\u51fa\u4e00\u4e2a\u95ee\u53f7 \u8fd9\u662f\u4e2a\u9524\u5b50\u7684\u7f51\u7edc\u6d41\uff0c\u8fd9\u662f\u6700\u77ed\u8def\u554a \u72b6\u538b\u4e00\u4e0b\u8f6c\u79fb\u65b9\u6848\u7136\u540e\u8dd1\u4ece(1<<n)-1\u52300\u7684\u6700\u77ed\u8def #include <bits/stdc++.h> using namespace std ; const int maxn = ( 1 << 21 ); const int inf = 0x3f3f3f3f ; struct node { int b1 , b2 , f1 , f2 , w ; bool check ( int x ) { return (( x & b1 ) == b1 ) && (( x & b2 ) == 0 ); } int change ( int x ) { x ^= x & f1 ; x |= f2 ; return x ; } } a [ 105 ]; int n , m , dis [ maxn ]; void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = 0 ; i < m ; i ++ ) if ( a [ i ]. check ( u )) { int v = a [ i ]. change ( u ); if ( dis [ v ] > dis [ u ] + a [ i ]. w ) { dis [ v ] = dis [ u ] + a [ i ]. w ; que . push ({ dis [ v ], v }); } } } } int main () { char s1 [ 55 ], s2 [ 55 ]; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%s%s\" , & a [ i ]. w , s1 , s2 ); for ( int j = 0 ; j < n ; j ++ ) { if ( s1 [ j ] == '+' ) a [ i ]. b1 |= ( 1 << j ); else if ( s1 [ j ] == '-' ) a [ i ]. b2 |= ( 1 << j ); if ( s2 [ j ] == '-' ) a [ i ]. f1 |= ( 1 << j ); else if ( s2 [ j ] == '+' ) a [ i ]. f2 |= ( 1 << j ); } } dijkstra (( 1 << n ) - 1 ); printf ( \"%d \\n \" , dis [ 0 ] == inf ? 0 : dis [ 0 ]); return 0 ; }","title":"12.\u8f6f\u4ef6\u8865\u4e01\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#13","text":"\u62c6\u70b9\u5efa\u56fe\uff0c\u679a\u4e3e\u5929\u6570\u3002\u5bf9\u4e8e\u7b2ci\u5929\u4e0a\u7684\u70b9x\uff0c\u4ecei-1\u5929\u7684x\u70b9\u8fde\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\uff1b\u5e76\u5bf9\u5f53\u5929\u7684\u8f6c\u79fb\u65b9\u6848\u8fde\u8fb9\uff0c\u6bcf\u6b21\u76f4\u63a5\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8dd1\u6700\u5927\u6d41\uff0c\u603b\u6d41\u91cf\u7b49\u4e8ek\u65f6\u7684\u5929\u6570\u5373\u4e3a\u7b54\u6848\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int pos [ 105 ][ 105 ], x [ 105 ], t [ 105 ]; int main () { int n , m , k ; scanf ( \"%d%d%d\" , & n , & m , & k ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & x [ i ], & t [ i ]); for ( int j = 0 ; j < t [ i ]; j ++ ) { scanf ( \"%d\" , & pos [ i ][ j ]); pos [ i ][ j ] += 2 ; } } int S = 0 , T , ans = 0 ; add ( S , 2 , k ); n += 2 ; for ( int tt = 1 ; tt <= 100 ; tt ++ ) { T = tt * n + 1 ; for ( int i = 0 ; i < m ; i ++ ) { int u = ( tt - 1 ) % t [ i ], v = tt % t [ i ]; u = pos [ i ][ u ], v = pos [ i ][ v ]; add (( tt - 1 ) * n + u , tt * n + v , x [ i ]); } for ( int i = 1 ; i <= n ; i ++ ) add (( tt - 1 ) * n + i , tt * n + i , INF ); ans += max_flow ( S , T ); if ( ans >= k ) return 0 * printf ( \"%d \\n \" , tt ); } puts ( \"0\" ); return 0 ; }","title":"13.\u661f\u9645\u8f6c\u79fb\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#14","text":"\u72b6\u538b+\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u4ee3\u7801\u80fd\u529b\u4e22\u4eba\uff0c\u8c03\u4e00\u4e0b\u5348 #include <bits/stdc++.h> using namespace std ; const int maxn = 2e5 + 10 ; const int inf = 0x3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 20 * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int n , m , sum ; int pt ( int x , int y , int dep ) { int id = ( x - 1 ) * m + y ; return id + dep * sum ; } int mp [ 105 ][ 105 ], key [ 105 ][ 105 ], lim ; int dx [ 4 ] = { 1 , 0 , - 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , - 1 }; int main () { int p , x1 , y1 , x2 , y2 , g , k ; scanf ( \"%d%d%d\" , & n , & m , & p ); lim = ( 1 << p ); sum = n * m ; scanf ( \"%d\" , & k ); memset ( head , 0xff , sizeof dis ); while ( k -- ) { scanf ( \"%d%d%d%d%d\" , & x1 , & y1 , & x2 , & y2 , & g ); int u = pt ( x1 , y1 , 0 ), v = pt ( x2 , y2 , 0 ); if ( g == 0 ) mp [ u ][ v ] = mp [ v ][ u ] = - 1 ; else mp [ u ][ v ] = mp [ v ][ u ] = ( 1 << ( g - 1 )); } scanf ( \"%d\" , & k ); while ( k -- ) { scanf ( \"%d%d%d\" , & x1 , & y1 , & g ); key [ x1 ][ y1 ] |= ( 1 << ( g - 1 )); } for ( int i = 0 ; i < lim ; i ++ ) { for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= m ; y ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { int xx = x + dx [ k ], yy = y + dy [ k ]; if ( xx < 1 || xx > n || yy < 1 || yy > m ) continue ; if ( mp [ pt ( x , y , 0 )][ pt ( xx , yy , 0 )] == - 1 ) continue ; int op = mp [ pt ( x , y , 0 )][ pt ( xx , yy , 0 )]; if (( op & i ) == op ) add ( pt ( x , y , i ), pt ( xx , yy , i | key [ xx ][ yy ]), 1 ); } } } } int s = pt ( 1 , 1 , 0 ), t = pt ( n , m , lim - 1 ) + 1 ; for ( int i = 0 ; i < lim ; i ++ ) add ( pt ( n , m , i ), t , 0 ); dijkstra ( s ); printf ( \"%d \\n \" , dis [ t ] == inf ? - 1 : dis [ t ]); return 0 ; }","title":"14. \u5b64\u5c9b\u8425\u6551\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#15","text":"#include <bits/stdc++.h> using namespace std ; const int maxn = 5e5 + 10 ; const int inf = 0x3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 2 * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int p [ 105 ][ 105 ], n ; int pt ( int x , int y , int dep ) { return ( x - 1 ) * n + y + dep * n * n ; } int dx [ 4 ] = { 1 , 0 , - 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , - 1 }; int main () { int k , a , b , c ; scanf ( \"%d%d%d%d%d\" , & n , & k , & a , & b , & c ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & p [ i ][ j ]); int s = 0 , t = pt ( n , n , k ) + 1 ; memset ( head , 0xff , sizeof head ); add ( s , pt ( 1 , 1 , k ), 0 ); for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= n ; y ++ ) { for ( int i = 0 ; i <= k ; i ++ ) add ( pt ( x , y , i ), pt ( x , y , k ), a + c ); for ( int i = 0 ; i < 4 ; i ++ ) { int fx = dx [ i ] + x , fy = dy [ i ] + y ; if ( fx < 1 || fx > n || fy < 1 || fy > n ) continue ; for ( int j = 1 ; j <= k ; j ++ ) { if ( p [ fx ][ fy ]) { if ( fx < x || fy < y ) add ( pt ( x , y , j ), pt ( fx , fy , k ), a + b ); else add ( pt ( x , y , j ), pt ( fx , fy , k ), a ); } else { if ( fx < x || fy < y ) add ( pt ( x , y , j ), pt ( fx , fy , j - 1 ), b ); else add ( pt ( x , y , j ), pt ( fx , fy , j - 1 ), 0 ); } } } } } for ( int i = 0 ; i <= k ; i ++ ) add ( pt ( n , n , i ), t , 0 ); dijkstra ( s ); printf ( \"%d \\n \" , dis [ t ]); return 0 ; }","title":"15.\u6c7d\u8f66\u52a0\u6cb9\u884c\u9a76\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#16","text":"\u7b2c\u4e00\u95ee\u6c42\u4e0d\u76f8\u4ea4\u8def\u5f84\uff0c\u62c6\u70b9\u4f7fi\u5230i+n\u7684\u6d41\u91cf\u4e3a1 \u7b2c\u4e8c\u95ee\u70b9\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u628a\u4e0a\u9762\u62c6\u70b9\u7684\u6d41\u91cf\u6539\u6210INF \u7b2c\u4e09\u95ee\u8fb9\u4e5f\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u628a\u52a0\u7684\u8fb9\u7684\u6d41\u91cf\u4e5f\u6539\u6210INF\uff0c\u6ce8\u610f\u6700\u4e0b\u5c42\u5230T\u7684\u8fb9\u4e5f\u8981\u6539 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , m , p , a [ 55 ][ 55 ]; void solve1 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , 1 , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , 1 , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , 1 , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , 1 , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , 1 , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , 1 , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , inf , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , inf , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve3 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , inf , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , inf , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , inf , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , inf , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d%d\" , & n , & m ); p = ( n + ( n + m - 1 )) * m / 2 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 1 ; j <= n + i ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]); solve1 (); solve2 (); solve3 (); return 0 ; }","title":"16.\u6570\u5b57\u68af\u5f62\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#17","text":"\u4e8c\u5206\u56fe\u6700\u5927\u6743\u591a\u91cd\u5339\u914d\uff0c\u65e0\u8111\u8d39\u7528\u6d41 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , m , a [ 105 ], b [ 105 ], cost [ 105 ][ 105 ]; void solve1 () { int S = 0 , T = n + m + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , a [ i ], 0 ); for ( int i = 1 ; i <= m ; i ++ ) ans . addEdge ( i + n , T , b [ i ], 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) ans . addEdge ( i , j + n , inf , - cost [ i ][ j ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = n + m + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , a [ i ], 0 ); for ( int i = 1 ; i <= m ; i ++ ) ans . addEdge ( i + n , T , b [ i ], 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) ans . addEdge ( i , j + n , inf , cost [ i ][ j ]); printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , & b [ i ]); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); solve2 (); solve1 (); return 0 ; }","title":"17.\u8fd0\u8f93\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#18","text":"\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\uff0c\u65e0\u8111\u8d39\u7528\u6d41*2 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , cost [ 105 ][ 105 ]; void solve1 () { int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans . addEdge ( i , j + n , 1 , cost [ i ][ j ]); printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans . addEdge ( i , j + n , 1 , - cost [ i ][ j ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); solve1 (); solve2 (); return 0 ; }","title":"18.\u5206\u914d\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#19","text":"\u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\uff0c S S \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u524d\u70b9\u539f\u6765\u7684\u5927\u5c0f\uff0c\u8d39\u7528\u4e3a0\uff1b A_i A_i \u5411 B_i B_i \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a0\uff0c\u5411 B_{i-1} B_{i-1} \u548c B_{i+1} B_{i+1} \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a1\uff0c\u5bb9\u91cf\u4e3aINF; B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u76ee\u6807\u503c\u5927\u5c0f\uff0c\u8d39\u7528\u4e3a0. #include <bits/stdc++.h> using namespace std ; const int maxn = 1000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int main () { int n , sum = 0 , x ; scanf ( \"%d\" , & n ); int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); sum += x ; ans . addEdge ( S , i , x , 0 ); } sum /= n ; for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , inf , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i , i + n , sum , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { int x = i - 1 , y = i + 1 ; if ( x < 1 ) x += n ; if ( y > n ) y -= n ; ans . addEdge ( i , x , inf , 1 ); ans . addEdge ( i , y , inf , 1 ); } printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); return 0 ; }","title":"19.\u8d1f\u8f7d\u5e73\u8861\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#20","text":"\u8d39\u7528\u6d41\uff0c\u8f93\u5165\u683c\u5f0f\u4ee4\u4ebaD\u533a #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int id [ 25 ][ 25 ]; int main () { int a , b , p , q , k , x , y ; scanf ( \"%d%d%d%d\" , & a , & b , & p , & q ); int tot = 0 ; p ++ ; q ++ ; for ( int i = 1 ; i <= p ; i ++ ) for ( int j = 1 ; j <= q ; j ++ ) id [ i ][ j ] = ++ tot ; int S = 0 , T = tot + 1 ; ans . init ( T ); for ( int i = 1 ; i <= p ; i ++ ) { for ( int j = 1 ; j < q ; j ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( id [ i ][ j ], id [ i ][ j + 1 ], 1 , - x ); ans . addEdge ( id [ i ][ j ], id [ i ][ j + 1 ], inf , 0 ); } } for ( int j = 1 ; j <= q ; j ++ ) { for ( int i = 1 ; i < p ; i ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( id [ i ][ j ], id [ i + 1 ][ j ], 1 , - x ); ans . addEdge ( id [ i ][ j ], id [ i + 1 ][ j ], inf , 0 ); } } while ( a -- ) { scanf ( \"%d%d%d\" , & k , & x , & y ); ans . addEdge ( S , id [ x + 1 ][ y + 1 ], k , 0 ); } while ( b -- ) { scanf ( \"%d%d%d\" , & k , & x , & y ); ans . addEdge ( id [ x + 1 ][ y + 1 ], T , k , 0 ); } printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; }","title":"20.\u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#21k","text":"\u62c6\u70b9\u5efa\u56fe\uff0c\u8d85\u7ea7\u6e90\u70b9 S S \u5411 S1 S1 \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a k k \uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u6700\u591a\u53d6 k k \u4e2a\u5f00\u5934\u7684\u533a\u95f4\uff1b S1 S1 \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b A_i A_i \u5411 B_i B_i \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a\u8be5\u533a\u95f4\u6743\u503c\uff0c\u8868\u793a\u53d6\u8fd9\u4e2a\u533a\u95f4\uff1b B_i B_i \u5411\u6240\u6709\u5728\u5176\u53f3\u4fa7\u4e14\u4e0e\u5b83\u4e0d\u76f8\u4ea4\u7684 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff0c\u8dd1 S S \u5230 T T \u7684\u8d39\u7528\u6d41\u3002 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int l [ 505 ], r [ 505 ], c [ 505 ]; int main () { int n , k ; scanf ( \"%d%d\" , & n , & k ); int S = 0 , T = 2 * n + 1 , S1 = T + 1 ; ans . init ( S1 ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & l [ i ], & r [ i ]); if ( l [ i ] > r [ i ]) swap ( l [ i ], r [ i ]); ans . addEdge ( i , i + n , 1 , - ( r [ i ] - l [ i ])); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) if ( r [ i ] <= l [ j ]) ans . addEdge ( i + n , j , 1 , 0 ); ans . addEdge ( S , S1 , k , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { ans . addEdge ( S1 , i , 1 , 0 ); ans . addEdge ( i + n , T , 1 , 0 ); } printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; }","title":"21.\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#22k","text":"\u8ddf\u4e0a\u4e00\u9898\u6a21\u578b\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff0c\u6362\u4e86\u4e2a\u65b9\u6cd5\u3002 \u628a\u7ebf\u6bb5\u6295\u5f71\u5230X\u8f74\u4e0a\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u533a\u95f4\u96c6\u95ee\u9898\uff0c\u4f46\u662f\u56e0\u4e3a\u5b58\u5728 x=r \u8fd9\u6837\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u76f4\u63a5\u5efa\u56fe\u4f1a\u4ea7\u751f\u8d1f\u73af\uff0c\u9700\u8981\u62c6\u70b9\u3002 \u79bb\u6563\u5316\u533a\u95f4\u7aef\u70b9\uff0c\u76f8\u90bb\u7684\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a0\uff1b\u533a\u95f4\u7aef\u70b9 L[i] \u5411 R[i] \u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a -val[i] \uff0cS\u548cT\u5206\u522b\u5411\u6700\u5de6\u548c\u6700\u53f3\u7aef\u70b9\u8fde\u6d41\u91cf\u4e3ak\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\u8dd1\u8d39\u7528\u6d41\u5373\u4e3a\u7b54\u6848\u3002 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; inline int dis ( int x1 , int y1 , int x2 , int y2 ) { return sqrt ( 1ll * ( x2 - x1 ) * ( x2 - x1 ) + 1ll * ( y2 - y1 ) * ( y2 - y1 )); } int n , L [ 505 ], R [ 505 ], val [ 505 ]; map < int , int > M ; int discretization () { vector < int > v ; for ( int i = 1 ; i <= n ; i ++ ) v . push_back ( L [ i ]), v . push_back ( R [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 0 ; i < v . size (); i ++ ) M [ v [ i ]] = i + 1 ; for ( int i = 1 ; i <= n ; i ++ ) L [ i ] = M [ L [ i ]], R [ i ] = M [ R [ i ]]; return v . size (); } int main () { int k , a , b , c , d ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d%d%d\" , & a , & b , & c , & d ); val [ i ] = dis ( a , b , c , d ); L [ i ] = a * 2 , R [ i ] = c * 2 ; if ( L [ i ] > R [ i ]) swap ( L [ i ], R [ i ]); if ( L [ i ] == R [ i ]) R [ i ] ++ ; else L [ i ] ++ ; } int m = discretization (); int S = 0 , T = m + 1 ; ans . init ( T ); ans . addEdge ( S , 1 , k , 0 ), ans . addEdge ( m , T , k , 0 ); for ( int i = 1 ; i < m ; i ++ ) ans . addEdge ( i , i + 1 , inf , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( L [ i ], R [ i ], 1 , - val [ i ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; }","title":"22.\u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#23","text":"\u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\uff0c\u8f93\u51fa\u8def\u5f84 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; int a [ 50 ][ 50 ], id [ 50 ][ 50 ]; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } void printPath ( int cnt , int n , int m ) { int p = id [ 1 ][ 1 ]; while ( p != id [ n ][ m ]) { int x = ( p - 1 ) / m , y = ( p - 1 ) % m ; for ( auto i : G [ p + n * m ]) { int tmp = edges [ i ]. to ; int xx = ( tmp - 1 ) / m , yy = ( tmp - 1 ) % m ; if ( xx <= x && yy <= y ) continue ; if ( edges [ i ]. flow > 0 ) { edges [ i ]. flow -- ; //printf(\"%d %d %d %d\\n\", edges[i].from, edges[i].to, edges[i].cap, edges[i].flow); //printf(\"%d %d\\n\", xx + 1, yy + 1); if ( xx > x ) printf ( \"%d 0 \\n \" , cnt ); else printf ( \"%d 1 \\n \" , cnt ); p = tmp ; break ; } } } } } ans ; int main () { int x , n , m ; scanf ( \"%d%d%d\" , & x , & m , & n ); int S = 0 , T = 2 * n * m + 1 , tot = 0 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]), id [ i ][ j ] = ++ tot ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( i + 1 <= n ) ans . addEdge ( id [ i ][ j ] + n * m , id [ i + 1 ][ j ], inf , 0 ); if ( j + 1 <= m ) ans . addEdge ( id [ i ][ j ] + n * m , id [ i ][ j + 1 ], inf , 0 ); if ( a [ i ][ j ] == 0 || a [ i ][ j ] == 2 ) ans . addEdge ( id [ i ][ j ], id [ i ][ j ] + n * m , inf , 0 ); if ( a [ i ][ j ] == 2 ) ans . addEdge ( id [ i ][ j ], id [ i ][ j ] + n * m , 1 , - 1 ); } } ans . addEdge ( S , id [ 1 ][ 1 ], x , 0 ); ans . addEdge ( id [ n ][ m ] + n * m , T , x , 0 ); ans . mincostMaxFlow ( S , T ); for ( int i = 1 ; i <= x ; i ++ ) ans . printPath ( i , n , m ); return 0 ; }","title":"23.\u706b\u661f\u63a2\u9669\u95ee\u9898"},{"location":"Personal%20Page/Verly/%E7%BD%91%E7%BB%9C%E6%B5%81/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/#24","text":"\u663e\u7136\u6240\u7ed9\u6a21\u578b\u662f\u4e8c\u5206\u56fe\uff0c\u6700\u5927\u72ec\u7acb\u96c6-\u4e0d\u53ef\u9009\u7684\u8fb9\u5373\u4e3a\u7b54\u6848\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 50000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , vis [ 205 ][ 205 ]; int dx [ 8 ] = { - 2 , - 1 , - 2 , - 1 , 2 , 1 , 2 , 1 }; int dy [ 8 ] = { - 1 , - 2 , 1 , 2 , - 1 , - 2 , 1 , 2 }; int id ( int x , int y ) { return ( x - 1 ) * n + y ; } bool check ( int x , int y ) { return x > 0 && x <= n && y > 0 && y <= n && ! vis [ x ][ y ]; } int main () { int m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = n * n + 1 ; for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); vis [ u ][ v ] = 1 ; } for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= n ; y ++ ) { if ( ! check ( x , y )) continue ; if (( x + y ) % 2 ) add ( S , id ( x , y ), 1 ); else add ( id ( x , y ), T , 1 ); if (( x + y ) % 2 == 0 ) continue ; for ( int i = 0 ; i < 8 ; i ++ ) { int fx = x + dx [ i ], fy = y + dy [ i ]; if ( check ( fx , fy )) add ( id ( x , y ), id ( fx , fy ), 1 ); } } } printf ( \"%d \\n \" , n * n - max_flow ( S , T ) - m ); return 0 ; }","title":"24.\u9a91\u58eb\u5171\u5b58\u95ee\u9898"},{"location":"Personal%20Page/badcw/","text":"Overview Link \u535a\u5ba2: https://www.cnblog.com/badcw/ \u4e3b\u8981\u8bb0\u5f55CF\u7b49\u5c0f\u578b\u6bd4\u8d5b CF: badcw Blog Or ProblemSet Link SegmentTree2 \u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898 \u77e9\u9635\u5feb\u901f\u5e42 KMP \u56de\u6587\u6811 To-Do List Link \u6a21\u677f\u6e05\u7406 \u4e3b\u5e2d\u6811 SOSdp \u659c\u7387\u4f18\u5316 WQS\u4e8c\u5206 \u6362\u6839dp FFT NTT \u535a\u5f08 \u7b5b \u6574\u4f53\u4e8c\u5206 CDQ\u5206\u6cbb LCT","title":"badcw"},{"location":"Personal%20Page/badcw/#overview","text":"\u535a\u5ba2: https://www.cnblog.com/badcw/ \u4e3b\u8981\u8bb0\u5f55CF\u7b49\u5c0f\u578b\u6bd4\u8d5b CF: badcw","title":"Overview"},{"location":"Personal%20Page/badcw/#blog-or-problemset","text":"SegmentTree2 \u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898 \u77e9\u9635\u5feb\u901f\u5e42 KMP \u56de\u6587\u6811","title":"Blog Or ProblemSet"},{"location":"Personal%20Page/badcw/#to-do-list","text":"\u6a21\u677f\u6e05\u7406 \u4e3b\u5e2d\u6811 SOSdp \u659c\u7387\u4f18\u5316 WQS\u4e8c\u5206 \u6362\u6839dp FFT NTT \u535a\u5f08 \u7b5b \u6574\u4f53\u4e8c\u5206 CDQ\u5206\u6cbb LCT","title":"To-Do List"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20586%20%28Div.%201%20%2B%20Div.%202%29/","text":"https://codeforces.com/contest/1220 \u8d5b\u4e2d A,B,C \uff0c\u8d5b\u540e D,E A. Cards Link \u9898\u610f\uff1a\u7ed9\u6253\u4e71\u540e\u7684\u53ea\u5305\u542b zero \u548c one \u7684\u4e32\uff0c\u6c42\u53ef\u80fd\u7684\u6700\u5927\u5b57\u5178\u5e8f01\u4e32 \u9898\u89e3\uff1a\u8bb0\u5f55 n \u7684\u4e2a\u6570\u4e3a1\u7684\u4e2a\u6570\uff0c z \u4e3a0\u7684\u4e2a\u6570\u6216\u80050\u7684\u4e2a\u6570\u4e3a (n-num(1)*3)/4 B. Multiplication Table Link \u9898\u610f\uff1a\u4e00\u4e2a\u672a\u77e5\u5e8f\u5217a\uff0c\u7ed9\u51fa\u4e00\u4e2a\u77e9\u9635\u6bcf\u4e2a\u6570\u8868\u793a a_i * a_j \uff0c\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u6ca1\u6709\u6570\u5b57\uff0c\u6c42\u5e8f\u5217 \u9898\u89e3\uff1a a_i = sqrt((a_i * a_j) * (a_i * a_k) / (a_j * a_k)) a_i = sqrt((a_i * a_j) * (a_i * a_k) / (a_j * a_k)) C. Substring Game in the Lesson Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32\uff0c\u6c42\u521d\u59cb\u6bcf\u4e2a\u70b9\u4e3a\u67d0\u4f4d\u7f6e\u65f6\u80fd\u535a\u5f08\u62d3\u5c55\u4e32\u6bd4\u5f53\u524d\u4e32\u5b57\u5178\u5e8f\u5c0f\u7684\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5148\u624b\u5982\u679c\u80fd\u52a8\u5c31\u53d6\u6700\u5c0f\u7684\u4e32\u5373\u53ef\u83b7\u80dc\u3002 D. Alex and Julian Link \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2aB\u96c6\u5408\uff0c\u5bf9\u4e8e\u5168\u4f53\u6574\u6570\u96c6\u5408\u5efa\u56fe\uff0c\u5982\u679cB\u96c6\u5408\u4e2d\u5b58\u5728 |i-j| \uff0c\u5219 i\uff0cj \u4e4b\u95f4\u6709\u8fb9\u3002\u6c42\u81f3\u5c11\u4eceB\u4e2d\u5220\u6389\u591a\u5c11\uff08\u4e14\u8981\u4efb\u610f\u65b9\u6848\uff09\u4e2a\u6570\u53ef\u4ee5\u4f7f\u5f97\u5efa\u56fe\u4e3a\u4e8c\u5206\u56fe\u3002 \u9898\u89e3\uff1a\u4e8c\u5206\u56fe\u5f53\u4e14\u4ec5\u5f53\u56fe\u4e2d\u6ca1\u6709\u5947\u73af\u3002\u8003\u8651B\u4e2d\u4e24\u4e2a\u6570x\uff0cy\uff0c\u4ee4z=gcd(x,y)\uff0cx\u2019 = x/z\uff0c y\u2018 = y/z\u3002\u5219\u5fc5\u5b9a\u5b58\u5728\u73af\u957f\u5ea6\u4e3a x'+y' \uff0c\u7531gcd\u5b9a\u4e49\u53ef\u77e5 x\u2018 \u4e0e y\u2019 \u4e92\u8d28\uff0c\u800c x'+y' \u53c8\u4e3a\u5076\u6570\uff0c\u6240\u4ee5 x\u2019 \uff0c y\u2018 \u90fd\u4e3a\u5947\u6570\uff0c\u5982\u679cx\u4e0ey\u4e2d2\u7684\u56e0\u5b50\u4e2a\u6570\u4e0d\u540c x\u2019 \u4e0e y\u2018 \u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u4e3a\u5076\u6570\u4e0d\u6ee1\u8db3\u9898\u610f\uff0c\u6240\u4ee5B\u4e2d\u4e24\u4e24\u4e4b\u95f42\u7684\u56e0\u5b50\u6570\u76f8\u540c\uff0c\u5373B\u4e2d\u6240\u6709\u5143\u7d202\u7684\u56e0\u5b50\u6570\u76f8\u540c\uff0c\u53d6\u51fa\u4efb\u610f\u6700\u5927\u7684\u542b\u76f8\u540c\u6570\u91cf2\u56e0\u5b50\u7684\u96c6\u5408\u5373\u53ef\u3002 E. Tourism Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u542b\u70b9\u6743\u65e0\u91cd\u8fb9\u65e0\u81ea\u73af\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u4e0d\u8fde\u7eed\u91cd\u590d\u7ecf\u8fc7\u540c\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e0b\u4eces\u51fa\u53d1\u80fd\u7ecf\u8fc7\u6700\u5927\u7684\u70b9\u6743\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u8003\u8651\u53f6\u5b50\uff0c\u663e\u7136\u5230\u8fbe\u53f6\u5b50\u65f6\u4f1a\u76f4\u63a5\u7ec8\u6b62\uff0c\u663e\u7136\u5728\u4e00\u4e2a\u73af\u4e0a\u4ece\u4efb\u610f\u70b9\u8fdb\u5165\u73af\u53ef\u4ee5\u4ece\u4efb\u610f\u70b9\u51fa\u73af\uff0c\u7136\u540e\u5bf9\u4e8e\u591a\u4e2a\u8054\u901a\u7684\u73af\u663e\u7136\u53ef\u4ee5\u53d6\u5230\u6240\u6709\u70b9\uff08\u4ece\u4efb\u610f\u70b9\u51fa\u53d1\u5230\u4e00\u4e2a\u73af\u7136\u540e\u56de\u5230\u8be5\u70b9\u518d\u53d6\u53e6\u5916\u7684\u73af\uff09\u3002\u552f\u4e00\u9700\u8981\u8003\u8651\u7684\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5bf9\u4e8e\u5b64\u7acb\u8fde\u5411\u53f6\u5b50\u8282\u70b9\u7684\u94fe\uff0c\u663e\u7136\u53ea\u6709\u4e00\u6761\u53ef\u4ee5\u88ab\u9009\u4e2d\uff0c\u6240\u4ee5\u53d6\u5176\u4e2d\u6700\u957f\uff08\u6307\u6743\u503c\u548c\u6700\u5927\uff09\u7684\u4e00\u6761\u5373\u53ef\u3002\u6ce8\u610f\u5982\u679c\u8d77\u70b9\u5728\u8fd9\u6837\u7684\u94fe\u4e0a\u90a3\u4e48\u8d77\u70b9\u8fd9\u6761\u94fe\u662f\u5fc5\u53d6\u7684\u6240\u4ee5\u8d77\u70b9\u5f53\u505a\u5355\u4e2a\u70b9\u7684\u73af\u770b\u5f85\u5373\u53ef\u3002\u505a\u4e00\u4e2a\u7c7btop\u5e8f\u53d6\u51fa\u6700\u5927\u94fe\u7136\u540e\u52a0\u4e0a\u6240\u6709\u73af\u5373\u662f\u7b54\u6848\u3002","title":"Codeforces Round 586 (Div. 1 + Div. 2)"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20586%20%28Div.%201%20%2B%20Div.%202%29/#a-cards","text":"\u9898\u610f\uff1a\u7ed9\u6253\u4e71\u540e\u7684\u53ea\u5305\u542b zero \u548c one \u7684\u4e32\uff0c\u6c42\u53ef\u80fd\u7684\u6700\u5927\u5b57\u5178\u5e8f01\u4e32 \u9898\u89e3\uff1a\u8bb0\u5f55 n \u7684\u4e2a\u6570\u4e3a1\u7684\u4e2a\u6570\uff0c z \u4e3a0\u7684\u4e2a\u6570\u6216\u80050\u7684\u4e2a\u6570\u4e3a (n-num(1)*3)/4","title":"A. Cards"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20586%20%28Div.%201%20%2B%20Div.%202%29/#b-multiplication-table","text":"\u9898\u610f\uff1a\u4e00\u4e2a\u672a\u77e5\u5e8f\u5217a\uff0c\u7ed9\u51fa\u4e00\u4e2a\u77e9\u9635\u6bcf\u4e2a\u6570\u8868\u793a a_i * a_j \uff0c\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u6ca1\u6709\u6570\u5b57\uff0c\u6c42\u5e8f\u5217 \u9898\u89e3\uff1a a_i = sqrt((a_i * a_j) * (a_i * a_k) / (a_j * a_k)) a_i = sqrt((a_i * a_j) * (a_i * a_k) / (a_j * a_k))","title":"B. Multiplication Table"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20586%20%28Div.%201%20%2B%20Div.%202%29/#c-substring-game-in-the-lesson","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32\uff0c\u6c42\u521d\u59cb\u6bcf\u4e2a\u70b9\u4e3a\u67d0\u4f4d\u7f6e\u65f6\u80fd\u535a\u5f08\u62d3\u5c55\u4e32\u6bd4\u5f53\u524d\u4e32\u5b57\u5178\u5e8f\u5c0f\u7684\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5148\u624b\u5982\u679c\u80fd\u52a8\u5c31\u53d6\u6700\u5c0f\u7684\u4e32\u5373\u53ef\u83b7\u80dc\u3002","title":"C. Substring Game in the Lesson"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20586%20%28Div.%201%20%2B%20Div.%202%29/#d-alex-and-julian","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2aB\u96c6\u5408\uff0c\u5bf9\u4e8e\u5168\u4f53\u6574\u6570\u96c6\u5408\u5efa\u56fe\uff0c\u5982\u679cB\u96c6\u5408\u4e2d\u5b58\u5728 |i-j| \uff0c\u5219 i\uff0cj \u4e4b\u95f4\u6709\u8fb9\u3002\u6c42\u81f3\u5c11\u4eceB\u4e2d\u5220\u6389\u591a\u5c11\uff08\u4e14\u8981\u4efb\u610f\u65b9\u6848\uff09\u4e2a\u6570\u53ef\u4ee5\u4f7f\u5f97\u5efa\u56fe\u4e3a\u4e8c\u5206\u56fe\u3002 \u9898\u89e3\uff1a\u4e8c\u5206\u56fe\u5f53\u4e14\u4ec5\u5f53\u56fe\u4e2d\u6ca1\u6709\u5947\u73af\u3002\u8003\u8651B\u4e2d\u4e24\u4e2a\u6570x\uff0cy\uff0c\u4ee4z=gcd(x,y)\uff0cx\u2019 = x/z\uff0c y\u2018 = y/z\u3002\u5219\u5fc5\u5b9a\u5b58\u5728\u73af\u957f\u5ea6\u4e3a x'+y' \uff0c\u7531gcd\u5b9a\u4e49\u53ef\u77e5 x\u2018 \u4e0e y\u2019 \u4e92\u8d28\uff0c\u800c x'+y' \u53c8\u4e3a\u5076\u6570\uff0c\u6240\u4ee5 x\u2019 \uff0c y\u2018 \u90fd\u4e3a\u5947\u6570\uff0c\u5982\u679cx\u4e0ey\u4e2d2\u7684\u56e0\u5b50\u4e2a\u6570\u4e0d\u540c x\u2019 \u4e0e y\u2018 \u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u4e3a\u5076\u6570\u4e0d\u6ee1\u8db3\u9898\u610f\uff0c\u6240\u4ee5B\u4e2d\u4e24\u4e24\u4e4b\u95f42\u7684\u56e0\u5b50\u6570\u76f8\u540c\uff0c\u5373B\u4e2d\u6240\u6709\u5143\u7d202\u7684\u56e0\u5b50\u6570\u76f8\u540c\uff0c\u53d6\u51fa\u4efb\u610f\u6700\u5927\u7684\u542b\u76f8\u540c\u6570\u91cf2\u56e0\u5b50\u7684\u96c6\u5408\u5373\u53ef\u3002","title":"D. Alex and Julian"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20586%20%28Div.%201%20%2B%20Div.%202%29/#e-tourism","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u542b\u70b9\u6743\u65e0\u91cd\u8fb9\u65e0\u81ea\u73af\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u4e0d\u8fde\u7eed\u91cd\u590d\u7ecf\u8fc7\u540c\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e0b\u4eces\u51fa\u53d1\u80fd\u7ecf\u8fc7\u6700\u5927\u7684\u70b9\u6743\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u8003\u8651\u53f6\u5b50\uff0c\u663e\u7136\u5230\u8fbe\u53f6\u5b50\u65f6\u4f1a\u76f4\u63a5\u7ec8\u6b62\uff0c\u663e\u7136\u5728\u4e00\u4e2a\u73af\u4e0a\u4ece\u4efb\u610f\u70b9\u8fdb\u5165\u73af\u53ef\u4ee5\u4ece\u4efb\u610f\u70b9\u51fa\u73af\uff0c\u7136\u540e\u5bf9\u4e8e\u591a\u4e2a\u8054\u901a\u7684\u73af\u663e\u7136\u53ef\u4ee5\u53d6\u5230\u6240\u6709\u70b9\uff08\u4ece\u4efb\u610f\u70b9\u51fa\u53d1\u5230\u4e00\u4e2a\u73af\u7136\u540e\u56de\u5230\u8be5\u70b9\u518d\u53d6\u53e6\u5916\u7684\u73af\uff09\u3002\u552f\u4e00\u9700\u8981\u8003\u8651\u7684\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5bf9\u4e8e\u5b64\u7acb\u8fde\u5411\u53f6\u5b50\u8282\u70b9\u7684\u94fe\uff0c\u663e\u7136\u53ea\u6709\u4e00\u6761\u53ef\u4ee5\u88ab\u9009\u4e2d\uff0c\u6240\u4ee5\u53d6\u5176\u4e2d\u6700\u957f\uff08\u6307\u6743\u503c\u548c\u6700\u5927\uff09\u7684\u4e00\u6761\u5373\u53ef\u3002\u6ce8\u610f\u5982\u679c\u8d77\u70b9\u5728\u8fd9\u6837\u7684\u94fe\u4e0a\u90a3\u4e48\u8d77\u70b9\u8fd9\u6761\u94fe\u662f\u5fc5\u53d6\u7684\u6240\u4ee5\u8d77\u70b9\u5f53\u505a\u5355\u4e2a\u70b9\u7684\u73af\u770b\u5f85\u5373\u53ef\u3002\u505a\u4e00\u4e2a\u7c7btop\u5e8f\u53d6\u51fa\u6700\u5927\u94fe\u7136\u540e\u52a0\u4e0a\u6240\u6709\u73af\u5373\u662f\u7b54\u6848\u3002","title":"E. Tourism"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20588%20%28Div.%202%29/","text":"https://codeforces.com/contest/1230 \u8d5b\u4e2d A,B,C,D \uff0c\u8d5b\u540e E\uff0cF A. Dawid and Bags of Candies Link \u9898\u610f\uff1a\u7ed94\u4e2a\u6570\uff0c\u6c42\u80fd\u4e0d\u80fd\u5206\u6210\u4e24\u4e2a\u96c6\u5408\u4f7f\u4e24\u4e2a\u96c6\u5408\u5185\u7684\u6570\u548c\u76f8\u7b49 \u9898\u89e3\uff1a\u53ea\u67094\u4e2a\u6570\u968f\u4fbf\u5199\u90fd\u5bf9\uff0c\u6211\u5199\u4e86\u72b6\u6001\u538b\u7f29\u679a\u4e3e\u5b50\u96c6\u3002 B. Ania and Minimizing Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u6570\u5b57\u4e32s\uff0c\u6c42\u6539\u53d8\u5176\u4e2d\u6700\u591ak\u4f4d\uff0c\u4f7f\u5176\u53d8\u6210\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u6700\u5c0f\u6570\u5b57 \u9898\u89e3\uff1a\u76f4\u63a5\u5206\u4e00\u4e0b\u7c7b\uff0c\u5176\u4e2d\u9996\u4f4d\u5982\u679c\u8981\u6539\u53d8\u5c31\u53ea\u80fd\u662f1\u4f4d\u6570\u3002 C. Anadi and Domino Link \u9898\u610f\uff1a\u6700\u591a7\u4e2a\u70b921\u6761\u8fb9\uff0c\u6c42\u5176\u4e2d\u8fb9\u5305\u542b\u6240\u7ed9\u768421\u6761\u8fb9\u4e2d\u6700\u591a\u591a\u5c11\u79cd\u3002 \u9898\u89e3\uff1a\u9898\u610f\u6740\uff0c\u76f4\u63a5\u7206\u641c\u679a\u4e3e7\u4e2a\u70b9\u7684\u989c\u8272\u5373\u53ef\u3002 D. Marcin and Training Camp Link \u9898\u610f\uff1a\u6bcf\u4e2a\u4eba\u6709\u4e24\u4e2a\u5c5e\u6027a\u548cb\uff0ca\u662f\u5b83\u6280\u80fd\u70b9\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0cb\u662f\u5b83\u7684\u6743\u503c\uff0c\u5b9a\u4e49\u5982\u679cx\u7684a\u6709y\u7684a\u4e2d\u4e0d\u5b58\u5728\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5219x>y\u3002\u73b0\u5728\u6c42\u4e00\u4e2a\u96c6\u5408\u4f7f\u5f97\u96c6\u5408\u4e2d\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u4eba\u5927\u4e8e\u5176\u4ed6\u6240\u6709\u4eba\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u96c6\u5408\u7684b\u6743\u503c\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u6613\u5f97\u591a\u4e2a\u4ebaa\u76f8\u7b49\u65f6\u624d\u80fd\u6ee1\u8db3\u9898\u610f\uff0c\u7136\u540e\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\u5e76\u5408\u5e76\uff0c\u7136\u540e\u6c42\u51fa\u4ed6\u4eec\u6ee1\u8db3\u9898\u610f\u7684a\u503c\u7684\u5b50\u96c6\u548c\u5373\u662f\u7b54\u6848\u3002 E. Kamil and Making a Stream Link \u9898\u610f\uff1a\u6c42\u4e00\u68f5\u6811\u4e0agcd(link(u, v))\u7684\u548c\uff0cu\u662fv\u7684\u7956\u5148\u3002 \u9898\u89e3\uff1a\u4ece\u4e0a\u5f80\u4e0b\u9012\u5f52\uff0c\u6bcf\u4e2a\u6570\u7684\u56e0\u5b50\u6570\u662fLOG\u7ea7\u522b\u6240\u4ee5\u5efa\u7acb\u4e00\u4e2avector\u6216\u8005map\u5b58\u4e0b\u6765\u7b97\u5c31\u53ef\u4ee5\u4e86\uff0c\u590d\u6742\u5ea6 O(nlogn) \u6216 O(nlognlogn) \u3002 F. Konrad and Company Evaluation Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u4e00\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u90fd\u671d\u5916\u8fde\uff08\u6539\u53d8\u65b9\u5411\uff09\uff0c\u6bcf\u6b21\u6c42 \\sum in[i] * out[i] \\sum in[i] * out[i] \u9898\u89e3\uff1a\u66b4\u529b\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u5165\u8fb9\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e00\u4e2a\u70b9\u5c06\u5176\u5165\u8fb9\u6e05\u7a7a\u5e76\u53cd\u5411\u8fde\u63a5\u5373\u53ef\u3002\u590d\u6742\u5ea6\u53ef\u8fc7\uff0c\u5177\u4f53\u7b97\u4e0d\u6e05\uff0c\u9898\u89e3\u8bf4\u662f O(q*sqrt(m)) \u3002","title":"Codeforces Round 588 (Div. 2)"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20588%20%28Div.%202%29/#a-dawid-and-bags-of-candies","text":"\u9898\u610f\uff1a\u7ed94\u4e2a\u6570\uff0c\u6c42\u80fd\u4e0d\u80fd\u5206\u6210\u4e24\u4e2a\u96c6\u5408\u4f7f\u4e24\u4e2a\u96c6\u5408\u5185\u7684\u6570\u548c\u76f8\u7b49 \u9898\u89e3\uff1a\u53ea\u67094\u4e2a\u6570\u968f\u4fbf\u5199\u90fd\u5bf9\uff0c\u6211\u5199\u4e86\u72b6\u6001\u538b\u7f29\u679a\u4e3e\u5b50\u96c6\u3002","title":"A. Dawid and Bags of Candies"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20588%20%28Div.%202%29/#b-ania-and-minimizing","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u6570\u5b57\u4e32s\uff0c\u6c42\u6539\u53d8\u5176\u4e2d\u6700\u591ak\u4f4d\uff0c\u4f7f\u5176\u53d8\u6210\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u6700\u5c0f\u6570\u5b57 \u9898\u89e3\uff1a\u76f4\u63a5\u5206\u4e00\u4e0b\u7c7b\uff0c\u5176\u4e2d\u9996\u4f4d\u5982\u679c\u8981\u6539\u53d8\u5c31\u53ea\u80fd\u662f1\u4f4d\u6570\u3002","title":"B. Ania and Minimizing"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20588%20%28Div.%202%29/#c-anadi-and-domino","text":"\u9898\u610f\uff1a\u6700\u591a7\u4e2a\u70b921\u6761\u8fb9\uff0c\u6c42\u5176\u4e2d\u8fb9\u5305\u542b\u6240\u7ed9\u768421\u6761\u8fb9\u4e2d\u6700\u591a\u591a\u5c11\u79cd\u3002 \u9898\u89e3\uff1a\u9898\u610f\u6740\uff0c\u76f4\u63a5\u7206\u641c\u679a\u4e3e7\u4e2a\u70b9\u7684\u989c\u8272\u5373\u53ef\u3002","title":"C. Anadi and Domino"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20588%20%28Div.%202%29/#d-marcin-and-training-camp","text":"\u9898\u610f\uff1a\u6bcf\u4e2a\u4eba\u6709\u4e24\u4e2a\u5c5e\u6027a\u548cb\uff0ca\u662f\u5b83\u6280\u80fd\u70b9\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0cb\u662f\u5b83\u7684\u6743\u503c\uff0c\u5b9a\u4e49\u5982\u679cx\u7684a\u6709y\u7684a\u4e2d\u4e0d\u5b58\u5728\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5219x>y\u3002\u73b0\u5728\u6c42\u4e00\u4e2a\u96c6\u5408\u4f7f\u5f97\u96c6\u5408\u4e2d\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u4eba\u5927\u4e8e\u5176\u4ed6\u6240\u6709\u4eba\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u96c6\u5408\u7684b\u6743\u503c\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u6613\u5f97\u591a\u4e2a\u4ebaa\u76f8\u7b49\u65f6\u624d\u80fd\u6ee1\u8db3\u9898\u610f\uff0c\u7136\u540e\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\u5e76\u5408\u5e76\uff0c\u7136\u540e\u6c42\u51fa\u4ed6\u4eec\u6ee1\u8db3\u9898\u610f\u7684a\u503c\u7684\u5b50\u96c6\u548c\u5373\u662f\u7b54\u6848\u3002","title":"D. Marcin and Training Camp"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20588%20%28Div.%202%29/#e-kamil-and-making-a-stream","text":"\u9898\u610f\uff1a\u6c42\u4e00\u68f5\u6811\u4e0agcd(link(u, v))\u7684\u548c\uff0cu\u662fv\u7684\u7956\u5148\u3002 \u9898\u89e3\uff1a\u4ece\u4e0a\u5f80\u4e0b\u9012\u5f52\uff0c\u6bcf\u4e2a\u6570\u7684\u56e0\u5b50\u6570\u662fLOG\u7ea7\u522b\u6240\u4ee5\u5efa\u7acb\u4e00\u4e2avector\u6216\u8005map\u5b58\u4e0b\u6765\u7b97\u5c31\u53ef\u4ee5\u4e86\uff0c\u590d\u6742\u5ea6 O(nlogn) \u6216 O(nlognlogn) \u3002","title":"E. Kamil and Making a Stream"},{"location":"Personal%20Page/badcw/Codeforces/Codeforces%20Round%20588%20%28Div.%202%29/#f-konrad-and-company-evaluation","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u4e00\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u90fd\u671d\u5916\u8fde\uff08\u6539\u53d8\u65b9\u5411\uff09\uff0c\u6bcf\u6b21\u6c42 \\sum in[i] * out[i] \\sum in[i] * out[i] \u9898\u89e3\uff1a\u66b4\u529b\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u5165\u8fb9\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e00\u4e2a\u70b9\u5c06\u5176\u5165\u8fb9\u6e05\u7a7a\u5e76\u53cd\u5411\u8fde\u63a5\u5373\u53ef\u3002\u590d\u6742\u5ea6\u53ef\u8fc7\uff0c\u5177\u4f53\u7b97\u4e0d\u6e05\uff0c\u9898\u89e3\u8bf4\u662f O(q*sqrt(m)) \u3002","title":"F. Konrad and Company Evaluation"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/","text":"url F - Counter Strike Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u5e26\u6743\u7269\u54c1\u6c42\u53d6\u6cd5\u65b9\u6848\u6570\uff0c\u9700\u8981\u4fdd\u8bc1\u53d6\u7684\u7269\u54c1\u5e73\u5747\u6743\u503c\u5927\u4e8ek\u4e14\u53d6\u7684\u7269\u54c1\u662f\u8fde\u7eed\u7684 pre[i] - pre[j] > k * (i - j + 1) \\\\ (a[i] - k) + (a[i + 1] - k) + \\dots + (a[j] - k) > 0 \\\\ i > j \\&\\& newpre[i] > newpre[j] \\\\ pre[i] - pre[j] > k * (i - j + 1) \\\\ (a[i] - k) + (a[i + 1] - k) + \\dots + (a[j] - k) > 0 \\\\ i > j \\&\\& newpre[i] > newpre[j] \\\\ \u5373\u6c42\u6b63\u5e8f\u5bf9\u4e2a\u6570 G - Rectangles Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u4e8c\u7ef4\u533a\u95f4\uff0cm\u6b21\u8be2\u95ee\u9762\u79ef\u5e76 n\u8f83\u5c0f\u76f4\u63a5\u533a\u95f4\u5e76\u5373\u53ef\uff0c\u7531\u4e8e\u662f\u6574\u578b\u9762\u79ef\uff0c\u9700\u8981\u4ed4\u7ec6\u5bf9\u533a\u95f4\u79bb\u6563\u5316\uff0c\u611f\u89c9\u53ef\u4ee5\u7384\u5b66\u4f18\u5316\u4e00\u4e0b\u5efa\u6811\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u51fa\u7684\u79bb\u8c31\uff0c\u5e76\u4e0d\u63a8\u8350\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u6574\u578b\u7684\u9762\u79ef\u5e76\u3002 H - Ping pong Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u6570\u5b57\uff0c\u6c42\u4e09\u5143\u9006\u5e8f\u5bf9\u548c\u4e09\u5143\u6b63\u5e8f\u5bf9\u6570\u91cf\u548c \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6b63\u53cd\u6c42\u51fa\u6b63\u9006\u5e8f\u5bf9\u6570\u91cf\u4e58\u52a0\u5373\u53ef \u5f88\u5751\u7684\u4e00\u70b9\u662f\u5b83\u5e76\u6ca1\u6709\u8bf4a\u5e8f\u5217\u662fn\u7684\u6392\u5217 I - Lost Cows Link \u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u6392\u5217\u4e2d\u6bcf\u4e2a\u70b9\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5c0f\u4e8e\u5b83\u7684\u70b9\uff0c\u6784\u9020\u51fa\u6b64\u6392\u5217 \u4ece\u540e\u5f80\u524d\u679a\u4e3e\u5373\u53ef\uff0c\u6bcf\u6b21\u4e8c\u5206\u4e00\u4e2a\u6700\u5c0f\u70b9\u4f7f\u5f97\u524d\u7f00\u548c\u7b26\u5408\u9898\u610f\u5373\u53ef J - Billboard Link \u9898\u610f\uff1a\u7ed9 h*w h*w \u7684\u77e9\u9635\uff0c\u8981\u628a n n \u4ef6\u7269\u54c1\u586b\u5165\uff0c\u6bcf\u4ef6\u7269\u54c1\u7684\u5927\u5c0f\u662f 1*w_i 1*w_i \uff0c\u6bcf\u6b21\u8d2a\u5fc3\u7684\u627e\u6700\u4e0a\u3001\u6700\u5de6\u7684\u70b9\uff0c\u5982\u679c\u80fd\u586b\u5165\u5219\u8f93\u51fa\u884c\u53f7\u3002 \u7ecf\u5178\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u5373\u53ef\uff0c\u627e\u51fa\u53ef\u4ee5\u6539\u7684\u6700\u5de6\u533a\u95f4\uff0c\u6bd4\u8f83\u7c7b\u4f3c\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c K - Memory Control Link \u9898\u610f\uff1a\u6709\u4e00\u4e2a\u5168\u7a7a\u5730\u5740\uff0c4\u79cd\u64cd\u4f5c\uff1a 1. \u6e05\u7a7a\u6574\u4e2a\u5e8f\u5217\uff0c\u8f93\u51fa\u201cReset Now\u201d 2. \u53d6\u51fa\u6700\u5de6\u7aef\u7684\u8fde\u7eedx\u4e2a\u7a7a\u5730\u5740\uff0c\u8f93\u51fa\u201cNew at A\u201d\u6216\u8005\u201cReject New\u201d 3. \u6e05\u7a7a\u5305\u542bx\u7684\u8fde\u7eed\u5730\u5740\u5757\uff0c\u8f93\u51fa\u201cFree from A to B\u201d\u6216\u8005\u201cReject Free\u201d 4. \u8f93\u51fa\u7b2cx\u4e2a\u8fde\u7eed\u5730\u5740\u5757\u7684\u5de6\u7aef\u70b9\uff0c\u8f93\u51fa\u201cGet at A\u201d\u6216\u8005\u201cReject Get\u201d \u5c31\u662fhotel\u7684\u5347\u7ea7\u7248\uff0c\u5177\u4f53\u6765\u8bf4\uff1a - \u7ef4\u62a4\u6700\u5927\u8fde\u7eed\u53ef\u7528\u533a\u95f4\uff08lsum,rsum,mxsum\uff09 - \u7ef4\u62a4\u5df2\u9009\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff08lpos,rpos\uff09 - \u7ef4\u62a4\u5de6\u7aef\u70b9\u4e2a\u6570\uff08val\uff09 1\u64cd\u4f5c\u6574\u4e2a\u533a\u95f4\u6e05\u7a7alazy 2\u64cd\u4f5c\u53d6\u51fa\u6700\u5de6\u7aef\u7684\u4e0d\u5c0f\u4e8ex\u7684\u7a7a\u5730\u5740 3\u64cd\u4f5c\u53d6\u51fax\u7684\u5de6\u53f3\u7aef\u70b9\u5e76\u66f4\u65b0 4\u64cd\u4f5c\u7ebf\u6bb5\u6811\u4e0a\u5206\u6cbb\u5373\u53ef L - Man Down Link \u9898\u610f\uff1a\u662f\u7537\u4eba\u5c31\u4e0b\u4e00\u767e\u5c42\uff0c\u6bcf\u4e2a\u677f\u5b50\u6709\u6743\u503c\uff0c\u6389\u843d\u4e0b\u6765\u52a0\u6743\uff0c\u6c42\u6700\u7ec8\u6700\u5927\u6743\u503c\uff0c\u82e5\u662f\u8d1f\u6570\u8f93\u51fa-1\uff0c\u521d\u59cb\u5728\u6700\u9ad8\u70b9\uff0c\u6709\u6700\u9ad8\u7684\u677f\u5b50\u7684\u6743\u503c+100 \u6309\u9006\u5e8f\u8fdb\u884cDAG\u4e0adp\uff0c\u6bcf\u6b21\u628a\u4e00\u4e2a\u677f\u5b50\u7684\u5de6\u53f3\u7aef\u70b9\u4e2d\u5927\u7684\u90a3\u4e2a\u6743\u503c\u52a0\u5230\u677f\u5b50\u533a\u95f4\u4e0a\u5373\u53ef \u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e00\u76f4tle\uff0c\u91cd\u5199\u4e00\u904d\u8fc7\u4e86 M - Multiply game Link \u9898\u610f\uff1a\u533a\u95f4\u79ef\u3001\u5355\u70b9\u4fee\u6539 \u50bb\u903c\u9898 N - Posters Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u6709\u77e9\u5f62\u5b54\u7684\u77e9\u5f62\uff0c\u6c42\u8986\u76d6\u9762\u79ef\u5e76 \u6c99\u6bd4\u63d0 O - Light Link","title":"SegmentTree2"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#f-counter-strike","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u5e26\u6743\u7269\u54c1\u6c42\u53d6\u6cd5\u65b9\u6848\u6570\uff0c\u9700\u8981\u4fdd\u8bc1\u53d6\u7684\u7269\u54c1\u5e73\u5747\u6743\u503c\u5927\u4e8ek\u4e14\u53d6\u7684\u7269\u54c1\u662f\u8fde\u7eed\u7684 pre[i] - pre[j] > k * (i - j + 1) \\\\ (a[i] - k) + (a[i + 1] - k) + \\dots + (a[j] - k) > 0 \\\\ i > j \\&\\& newpre[i] > newpre[j] \\\\ pre[i] - pre[j] > k * (i - j + 1) \\\\ (a[i] - k) + (a[i + 1] - k) + \\dots + (a[j] - k) > 0 \\\\ i > j \\&\\& newpre[i] > newpre[j] \\\\ \u5373\u6c42\u6b63\u5e8f\u5bf9\u4e2a\u6570","title":"F - Counter Strike"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#g-rectangles","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u4e8c\u7ef4\u533a\u95f4\uff0cm\u6b21\u8be2\u95ee\u9762\u79ef\u5e76 n\u8f83\u5c0f\u76f4\u63a5\u533a\u95f4\u5e76\u5373\u53ef\uff0c\u7531\u4e8e\u662f\u6574\u578b\u9762\u79ef\uff0c\u9700\u8981\u4ed4\u7ec6\u5bf9\u533a\u95f4\u79bb\u6563\u5316\uff0c\u611f\u89c9\u53ef\u4ee5\u7384\u5b66\u4f18\u5316\u4e00\u4e0b\u5efa\u6811\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u51fa\u7684\u79bb\u8c31\uff0c\u5e76\u4e0d\u63a8\u8350\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u6574\u578b\u7684\u9762\u79ef\u5e76\u3002","title":"G - Rectangles"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#h-ping-pong","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u6570\u5b57\uff0c\u6c42\u4e09\u5143\u9006\u5e8f\u5bf9\u548c\u4e09\u5143\u6b63\u5e8f\u5bf9\u6570\u91cf\u548c \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6b63\u53cd\u6c42\u51fa\u6b63\u9006\u5e8f\u5bf9\u6570\u91cf\u4e58\u52a0\u5373\u53ef \u5f88\u5751\u7684\u4e00\u70b9\u662f\u5b83\u5e76\u6ca1\u6709\u8bf4a\u5e8f\u5217\u662fn\u7684\u6392\u5217","title":"H - Ping pong"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#i-lost-cows","text":"\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u6392\u5217\u4e2d\u6bcf\u4e2a\u70b9\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5c0f\u4e8e\u5b83\u7684\u70b9\uff0c\u6784\u9020\u51fa\u6b64\u6392\u5217 \u4ece\u540e\u5f80\u524d\u679a\u4e3e\u5373\u53ef\uff0c\u6bcf\u6b21\u4e8c\u5206\u4e00\u4e2a\u6700\u5c0f\u70b9\u4f7f\u5f97\u524d\u7f00\u548c\u7b26\u5408\u9898\u610f\u5373\u53ef","title":"I - Lost Cows"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#j-billboard","text":"\u9898\u610f\uff1a\u7ed9 h*w h*w \u7684\u77e9\u9635\uff0c\u8981\u628a n n \u4ef6\u7269\u54c1\u586b\u5165\uff0c\u6bcf\u4ef6\u7269\u54c1\u7684\u5927\u5c0f\u662f 1*w_i 1*w_i \uff0c\u6bcf\u6b21\u8d2a\u5fc3\u7684\u627e\u6700\u4e0a\u3001\u6700\u5de6\u7684\u70b9\uff0c\u5982\u679c\u80fd\u586b\u5165\u5219\u8f93\u51fa\u884c\u53f7\u3002 \u7ecf\u5178\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u5373\u53ef\uff0c\u627e\u51fa\u53ef\u4ee5\u6539\u7684\u6700\u5de6\u533a\u95f4\uff0c\u6bd4\u8f83\u7c7b\u4f3c\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c","title":"J - Billboard"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#k-memory-control","text":"\u9898\u610f\uff1a\u6709\u4e00\u4e2a\u5168\u7a7a\u5730\u5740\uff0c4\u79cd\u64cd\u4f5c\uff1a 1. \u6e05\u7a7a\u6574\u4e2a\u5e8f\u5217\uff0c\u8f93\u51fa\u201cReset Now\u201d 2. \u53d6\u51fa\u6700\u5de6\u7aef\u7684\u8fde\u7eedx\u4e2a\u7a7a\u5730\u5740\uff0c\u8f93\u51fa\u201cNew at A\u201d\u6216\u8005\u201cReject New\u201d 3. \u6e05\u7a7a\u5305\u542bx\u7684\u8fde\u7eed\u5730\u5740\u5757\uff0c\u8f93\u51fa\u201cFree from A to B\u201d\u6216\u8005\u201cReject Free\u201d 4. \u8f93\u51fa\u7b2cx\u4e2a\u8fde\u7eed\u5730\u5740\u5757\u7684\u5de6\u7aef\u70b9\uff0c\u8f93\u51fa\u201cGet at A\u201d\u6216\u8005\u201cReject Get\u201d \u5c31\u662fhotel\u7684\u5347\u7ea7\u7248\uff0c\u5177\u4f53\u6765\u8bf4\uff1a - \u7ef4\u62a4\u6700\u5927\u8fde\u7eed\u53ef\u7528\u533a\u95f4\uff08lsum,rsum,mxsum\uff09 - \u7ef4\u62a4\u5df2\u9009\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff08lpos,rpos\uff09 - \u7ef4\u62a4\u5de6\u7aef\u70b9\u4e2a\u6570\uff08val\uff09 1\u64cd\u4f5c\u6574\u4e2a\u533a\u95f4\u6e05\u7a7alazy 2\u64cd\u4f5c\u53d6\u51fa\u6700\u5de6\u7aef\u7684\u4e0d\u5c0f\u4e8ex\u7684\u7a7a\u5730\u5740 3\u64cd\u4f5c\u53d6\u51fax\u7684\u5de6\u53f3\u7aef\u70b9\u5e76\u66f4\u65b0 4\u64cd\u4f5c\u7ebf\u6bb5\u6811\u4e0a\u5206\u6cbb\u5373\u53ef","title":"K - Memory Control"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#l-man-down","text":"\u9898\u610f\uff1a\u662f\u7537\u4eba\u5c31\u4e0b\u4e00\u767e\u5c42\uff0c\u6bcf\u4e2a\u677f\u5b50\u6709\u6743\u503c\uff0c\u6389\u843d\u4e0b\u6765\u52a0\u6743\uff0c\u6c42\u6700\u7ec8\u6700\u5927\u6743\u503c\uff0c\u82e5\u662f\u8d1f\u6570\u8f93\u51fa-1\uff0c\u521d\u59cb\u5728\u6700\u9ad8\u70b9\uff0c\u6709\u6700\u9ad8\u7684\u677f\u5b50\u7684\u6743\u503c+100 \u6309\u9006\u5e8f\u8fdb\u884cDAG\u4e0adp\uff0c\u6bcf\u6b21\u628a\u4e00\u4e2a\u677f\u5b50\u7684\u5de6\u53f3\u7aef\u70b9\u4e2d\u5927\u7684\u90a3\u4e2a\u6743\u503c\u52a0\u5230\u677f\u5b50\u533a\u95f4\u4e0a\u5373\u53ef \u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e00\u76f4tle\uff0c\u91cd\u5199\u4e00\u904d\u8fc7\u4e86","title":"L - Man Down"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#m-multiply-game","text":"\u9898\u610f\uff1a\u533a\u95f4\u79ef\u3001\u5355\u70b9\u4fee\u6539 \u50bb\u903c\u9898","title":"M - Multiply game"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#n-posters","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u6709\u77e9\u5f62\u5b54\u7684\u77e9\u5f62\uff0c\u6c42\u8986\u76d6\u9762\u79ef\u5e76 \u6c99\u6bd4\u63d0","title":"N - Posters"},{"location":"Personal%20Page/badcw/SegmentTree/SegmentTree2/#o-light","text":"","title":"O - Light"},{"location":"Personal%20Page/badcw/%E4%B8%BB%E5%B8%AD%E6%A0%91/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8/","text":"\u4e3b\u5e2d\u6811 Link \u7b97\u6cd5\u7b80\u8ff0 Link \u4e5f\u53eb\u505a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u82f1\u6587\u8bd1\u540d\uff0c\u4e3b\u8981\u7528\u6765\u4f7f\u7528\u524d\u7f00\u548c\u5bf9\u6743\u503c\u7ebf\u6bb5\u6811\u8fdb\u884c\u4f18\u5316\u6765\u5904\u7406\u533a\u95f4\u4fe1\u606f \u7b97\u6cd5\u5b9e\u73b0 Link \u5bf9\u4e8e\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5982\u679c\u5206 n n \u6b21\u5bf9\u5176\u4e2d\u67d0\u4e2a\u70b9\u8fdb\u884c\u4fee\u6539\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5f62\u5f0f\u7684\u4e3b\u5e2d\u6811 \u5927\u5927\u51cf\u5c11\u4e86\u6570\u636e\u5197\u4f59\uff0c\u6bcf\u6b21\u4fee\u6539\u6700\u591a\u589e\u52a0 log log \u7ea7\u522b\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u4e00\u534a\u6765\u8bf4\u4e5f\u9700\u8981\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6765\u505a\uff0c\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u4fee\u6539\u603b\u521d\u59cb\u5316\u8282\u70b9\u6570\u91cf\u7ea7\u4e3a O(nlog(n)*4) O(nlog(n)*4) \uff0c\u6bcf\u6b21\u67e5\u8be2\u70b9\u7684\u6570\u91cf\u7ea7\u7531\u524d\u7f00\u548c\u601d\u60f3\u8fdb\u884c\u5dee\u5206\uff0c\u590d\u6742\u5ea6\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u76f8\u540c\uff0c\u4e3a O(log(n)) O(log(n)) \uff0c\u6240\u4ee5\u4e3b\u5e2d\u6811\u5176\u5b9e\u548c\u7ebf\u6bb5\u6811\u6709\u76f8\u540c\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u7a7a\u95f4\u4e0a\u9700\u8981\u591a\u4e00\u4e2a log log \u6a21\u677f\u4ee3\u7801 Link Luogu P3834 struct node { int val ; int lnode , rnode ; } p [ maxn * 20 ]; int rt [ maxn ], tot ; int a [ maxn ]; vector < int > xpos ; void update ( int l , int r , int pre , int & now , int x ) { now = ++ tot ; p [ now ] = p [ pre ]; p [ now ]. val ++ ; if ( l == r ) return ; int mid = l + r >> 1 ; if ( x <= mid ) update ( l , mid , p [ pre ]. lnode , p [ now ]. lnode , x ); else update ( mid + 1 , r , p [ pre ]. rnode , p [ now ]. rnode , x ); } int query ( int l , int r , int le , int re , int k ) { if ( l == r ) return xpos [ l - 1 ]; int now = p [ p [ re ]. lnode ]. val - p [ p [ le ]. lnode ]. val ; int mid = l + r >> 1 ; if ( k <= now ) return query ( l , mid , p [ le ]. lnode , p [ re ]. lnode , k ); else return query ( mid + 1 , r , p [ le ]. rnode , p [ re ]. rnode , k - now ); } int main ( int argc , char * argv []) { int n , m ; scanf ( \"%d%d\" , & n , & m ); xpos . resize ( n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & xpos [ i ]); a [ i + 1 ] = xpos [ i ]; } sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); tot = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = lower_bound ( xpos . begin (), xpos . end (), a [ i ]) - xpos . begin () + 1 ; update ( 1 , ( int ) xpos . size (), rt [ i - 1 ], rt [ i ], a [ i ]); } while ( m -- ) { int le , re , k ; scanf ( \"%d%d%d\" , & le , & re , & k ); printf ( \"%d \\n \" , query ( 1 , ( int ) xpos . size (), rt [ le - 1 ], rt [ re ], k )); } return 0 ; } \u4f8b\u9898 Link Luogu P3834 Link \u9759\u6001\u533a\u95f4K\u5c0f Luogu P3567 Link \u9759\u6001\u533a\u95f4\u591a\u4e8e\u4e00\u534a\u7684\u6570 \u7531\u4e8e\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\u6700\u591a\u6709\u4e00\u4e2a\u6ee1\u8db3\u9898\u610f\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u627e\u4e0b\u53bb\u590d\u6742\u5ea6\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u4ecd\u7136\u4e00\u81f4 Note /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/4/23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct node { int val , l , r ; } p [ maxn * 20 ]; int rt [ maxn ], tot ; int n , m ; void update ( int l , int r , int pre , int & now , int k ) { now = ++ tot ; p [ now ] = p [ pre ]; p [ now ]. val ++ ; if ( l == r ) return ; int mid = l + r >> 1 ; if ( k <= mid ) update ( l , mid , p [ pre ]. l , p [ now ]. l , k ); else update ( mid + 1 , r , p [ pre ]. r , p [ now ]. r , k ); } int query ( int l , int r , int le , int re , int k ) { if ( l == r ) return l ; int mid = l + r >> 1 ; int nowl = p [ p [ re ]. l ]. val - p [ p [ le ]. l ]. val ; int nowr = p [ p [ re ]. r ]. val - p [ p [ le ]. r ]. val ; if ( k < 2 * nowl ) return query ( l , mid , p [ le ]. l , p [ re ]. l , k ); else if ( k < 2 * nowr ) return query ( mid + 1 , r , p [ le ]. r , p [ re ]. r , k ); else return 1 ; } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 , x ; i < n ; ++ i ) { scanf ( \"%d\" , & x ); update ( 1 , n + 1 , rt [ i ], rt [ i + 1 ], x + 1 ); } while ( m -- ) { int le , re ; scanf ( \"%d%d\" , & le , & re ); printf ( \"%d \\n \" , query ( 1 , n + 1 , rt [ le - 1 ], rt [ re ], re - le + 1 ) - 1 ); } return 0 ; }","title":"\u4e3b\u5e2d\u6811\u5165\u95e8"},{"location":"Personal%20Page/badcw/%E4%B8%BB%E5%B8%AD%E6%A0%91/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8/#_1","text":"","title":"\u4e3b\u5e2d\u6811"},{"location":"Personal%20Page/badcw/%E4%B8%BB%E5%B8%AD%E6%A0%91/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8/#_2","text":"\u4e5f\u53eb\u505a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u82f1\u6587\u8bd1\u540d\uff0c\u4e3b\u8981\u7528\u6765\u4f7f\u7528\u524d\u7f00\u548c\u5bf9\u6743\u503c\u7ebf\u6bb5\u6811\u8fdb\u884c\u4f18\u5316\u6765\u5904\u7406\u533a\u95f4\u4fe1\u606f","title":"\u7b97\u6cd5\u7b80\u8ff0"},{"location":"Personal%20Page/badcw/%E4%B8%BB%E5%B8%AD%E6%A0%91/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8/#_3","text":"\u5bf9\u4e8e\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5982\u679c\u5206 n n \u6b21\u5bf9\u5176\u4e2d\u67d0\u4e2a\u70b9\u8fdb\u884c\u4fee\u6539\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5f62\u5f0f\u7684\u4e3b\u5e2d\u6811 \u5927\u5927\u51cf\u5c11\u4e86\u6570\u636e\u5197\u4f59\uff0c\u6bcf\u6b21\u4fee\u6539\u6700\u591a\u589e\u52a0 log log \u7ea7\u522b\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u4e00\u534a\u6765\u8bf4\u4e5f\u9700\u8981\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6765\u505a\uff0c\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u4fee\u6539\u603b\u521d\u59cb\u5316\u8282\u70b9\u6570\u91cf\u7ea7\u4e3a O(nlog(n)*4) O(nlog(n)*4) \uff0c\u6bcf\u6b21\u67e5\u8be2\u70b9\u7684\u6570\u91cf\u7ea7\u7531\u524d\u7f00\u548c\u601d\u60f3\u8fdb\u884c\u5dee\u5206\uff0c\u590d\u6742\u5ea6\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u76f8\u540c\uff0c\u4e3a O(log(n)) O(log(n)) \uff0c\u6240\u4ee5\u4e3b\u5e2d\u6811\u5176\u5b9e\u548c\u7ebf\u6bb5\u6811\u6709\u76f8\u540c\u7684\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u7a7a\u95f4\u4e0a\u9700\u8981\u591a\u4e00\u4e2a log log","title":"\u7b97\u6cd5\u5b9e\u73b0"},{"location":"Personal%20Page/badcw/%E4%B8%BB%E5%B8%AD%E6%A0%91/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8/#_4","text":"Luogu P3834 struct node { int val ; int lnode , rnode ; } p [ maxn * 20 ]; int rt [ maxn ], tot ; int a [ maxn ]; vector < int > xpos ; void update ( int l , int r , int pre , int & now , int x ) { now = ++ tot ; p [ now ] = p [ pre ]; p [ now ]. val ++ ; if ( l == r ) return ; int mid = l + r >> 1 ; if ( x <= mid ) update ( l , mid , p [ pre ]. lnode , p [ now ]. lnode , x ); else update ( mid + 1 , r , p [ pre ]. rnode , p [ now ]. rnode , x ); } int query ( int l , int r , int le , int re , int k ) { if ( l == r ) return xpos [ l - 1 ]; int now = p [ p [ re ]. lnode ]. val - p [ p [ le ]. lnode ]. val ; int mid = l + r >> 1 ; if ( k <= now ) return query ( l , mid , p [ le ]. lnode , p [ re ]. lnode , k ); else return query ( mid + 1 , r , p [ le ]. rnode , p [ re ]. rnode , k - now ); } int main ( int argc , char * argv []) { int n , m ; scanf ( \"%d%d\" , & n , & m ); xpos . resize ( n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & xpos [ i ]); a [ i + 1 ] = xpos [ i ]; } sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); tot = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = lower_bound ( xpos . begin (), xpos . end (), a [ i ]) - xpos . begin () + 1 ; update ( 1 , ( int ) xpos . size (), rt [ i - 1 ], rt [ i ], a [ i ]); } while ( m -- ) { int le , re , k ; scanf ( \"%d%d%d\" , & le , & re , & k ); printf ( \"%d \\n \" , query ( 1 , ( int ) xpos . size (), rt [ le - 1 ], rt [ re ], k )); } return 0 ; }","title":"\u6a21\u677f\u4ee3\u7801"},{"location":"Personal%20Page/badcw/%E4%B8%BB%E5%B8%AD%E6%A0%91/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8/#_5","text":"","title":"\u4f8b\u9898"},{"location":"Personal%20Page/badcw/%E4%B8%BB%E5%B8%AD%E6%A0%91/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8/#luogu-p3834","text":"\u9759\u6001\u533a\u95f4K\u5c0f","title":"Luogu P3834"},{"location":"Personal%20Page/badcw/%E4%B8%BB%E5%B8%AD%E6%A0%91/%E4%B8%BB%E5%B8%AD%E6%A0%91%E5%85%A5%E9%97%A8/#luogu-p3567","text":"\u9759\u6001\u533a\u95f4\u591a\u4e8e\u4e00\u534a\u7684\u6570 \u7531\u4e8e\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\u6700\u591a\u6709\u4e00\u4e2a\u6ee1\u8db3\u9898\u610f\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u627e\u4e0b\u53bb\u590d\u6742\u5ea6\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u4ecd\u7136\u4e00\u81f4 Note /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/4/23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct node { int val , l , r ; } p [ maxn * 20 ]; int rt [ maxn ], tot ; int n , m ; void update ( int l , int r , int pre , int & now , int k ) { now = ++ tot ; p [ now ] = p [ pre ]; p [ now ]. val ++ ; if ( l == r ) return ; int mid = l + r >> 1 ; if ( k <= mid ) update ( l , mid , p [ pre ]. l , p [ now ]. l , k ); else update ( mid + 1 , r , p [ pre ]. r , p [ now ]. r , k ); } int query ( int l , int r , int le , int re , int k ) { if ( l == r ) return l ; int mid = l + r >> 1 ; int nowl = p [ p [ re ]. l ]. val - p [ p [ le ]. l ]. val ; int nowr = p [ p [ re ]. r ]. val - p [ p [ le ]. r ]. val ; if ( k < 2 * nowl ) return query ( l , mid , p [ le ]. l , p [ re ]. l , k ); else if ( k < 2 * nowr ) return query ( mid + 1 , r , p [ le ]. r , p [ re ]. r , k ); else return 1 ; } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 , x ; i < n ; ++ i ) { scanf ( \"%d\" , & x ); update ( 1 , n + 1 , rt [ i ], rt [ i + 1 ], x + 1 ); } while ( m -- ) { int le , re ; scanf ( \"%d%d\" , & le , & re ); printf ( \"%d \\n \" , query ( 1 , n + 1 , rt [ le - 1 ], rt [ re ], re - le + 1 ) - 1 ); } return 0 ; }","title":"Luogu P3567"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","text":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898 Link \u72b6\u6001\u538b\u7f29dp\u5e38\u7528\u6765\u5904\u7406\u91cf\u7ea7\u5f88\u5c0f\u7684np\u95ee\u9898 \u7531\u6b64\u8fd8\u53ef\u4ee5\u884d\u751f\u51fa\u8f6e\u5ed3\u7ebfdp\u53ca\u5728\u6b64\u4e4b\u4e0a\u7684\u63d2\u5934dp \u72b6\u6001\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u4e2d\u6709\u4e00\u4e9b\u5c0f\u64cd\u4f5c\u60f3\u5206\u4eab\u4e00\u4e0b\uff1a 1\u3001\u679a\u4e3e\u4e8c\u8fdb\u5236\u72b6\u6001\u5b50\u96c6 Link //for(int i = 0; i != s; i = (i-s)&s) void print ( int x ) { if ( x < 2 ) printf ( \"%d\" , x ); else { print ( x >> 1 ); print ( x % 2 ); } } int main () { int s = 0 B1111 ; for ( int i = 0 ; i != s ; i = ( i - s ) & s ) { print ( i ); printf ( \" \\n \" ); } } /*\u8f93\u51fa\u4e3a\uff1a 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 */ \u5f88\u65b9\u4fbf\u800c\u4e14\u662f\u5347\u5e8f 2\u3001\u72b6\u6001\u7684\u5404\u79cd\u57fa\u672c\u64cd\u4f5c Link // \u6240\u6709\u4f4d\u4e3a1 ( 1 << n ) - 1 //\u6ce8\u610f\u4f4d\u8fd0\u7b97\u6bd4\u4e00\u6b21\u8fd0\u7b97\u4f18\u5148\u7ea7\u4f4e\u6240\u4ee5\u8981\u52a0\u62ec\u53f7 // \u5224\u65ad\u7b2ci\u4f4d stat & ( 1 << i ) // lowbit\uff0c\u72b6\u6001\u4e2d\u6700\u9760\u8fd1\u672b\u5c3e\u76841 i & - i // \u6c42\u72b6\u6001\u4e2d\u542b\u6709\u7684\u9009\u4e2d\u6570\u91cf\uff0c\u76f8\u5f53\u4e8e\u6c42\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570 int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( stat & ( 1 << i )) c ++ ; // \u6216\u8005\u76f4\u63a5\u9884\u5904\u7406\uff0c\u8fd9\u91cc\u7528\u5230\u4e86lowbit for ( int i = 0 ; i < ( 1 << n ); ++ i ) c [ i ] = c [ i ^ ( i & - i )] + 1 ; // \u679a\u4e3e\u9012\u63a8\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u5b9e\u968f\u4fbf\u5199\u5c31\u662f\u4e86 for ( int i = 0 ; i < n ; ++ i ) { if (( stat & ( 1 << i )) == 0 ) { int newstat = stat | ( 1 << i ); } } 3\u3001\u8f6e\u5ed3\u7ebfdp\u5165\u95e8 Link \u8bf4\u5230\u8f6e\u5ed3\u7ebfdp\u5c31\u662f\u90a3\u4e2a\u65b9\u683c\u586b\u5145\u95ee\u9898\uff0c\u6c42\u75281*2\u7684\u65b9\u683c\u586b\u6ee1n\u00d7m\u7684\u65b9\u6848\u6570\u3002 \u3010poj 2411\u3011 \u8fd9\u91cc\u662f\u57fa\u7840\u90e8\u5206\uff0c\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7 \u8bbe\u8ba1 dp[i][j][k] dp[i][j][k] \u662f\u7b2ci\u884c\u7b2cj\u5217\uff0c\u4e0a\u65b9\u72b6\u6001\u4e3ak\u7684\u65b9\u6848\u6570 \u6700\u540e\u6c42\u89e3\u7684\u662f dp[n][m][(1<<m)-1] dp[n][m][(1<<m)-1] 0000xxx xxxx000 \u8fd9\u6837\u4e00\u5f20\u56fe\uff0c\u8868\u793a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217\uff0c\u90a3\u4e48\u5b83\u6240\u9700\u8981\u7684\u72b6\u6001\u4e3a\u6807x\u7684\u4f4d\u7f6e\u662f\u5426\u586b\u5145\uff0c\u5f80\u4e0b\u9012\u63a8\u5c06\u7b2c2\u884c\u7b2c5\u5217\u586b\u5145\u4e00\u4e2a\u7ad6\u7740\u7684\u65b9\u683c\u7684\u8bdd\u5c31\u662f\uff1a int newstat = stat >> 1 | ( 1 << m - 1 ) | 1 \u5176\u4e2d stat>>1 \u5c31\u662f\u628a\u72b6\u6001\u53d8\u6210\u4e86 00000xx xxxxx00 \u53bb\u6389\u4e86\u5934\u4f4d\uff0c\u589e\u52a0\u4e86\u4e00\u4f4d\uff0c\u8fd9\u5c31\u662f\u8f6e\u5ed3\u7ebfdp\uff0c\u7c7b\u4f3c\u4e00\u4e2a\u53d6\u7a97\u53e3shift\u7684\u8fc7\u7a0b\u3002\u6807x\u7684\u4f4d\u7f6e\u4e5f\u5c31\u662f\u8f6e\u5ed3\u7ebf\u3002 \u65b9\u683c\u586b\u5145\u95ee\u9898\u7684\u5177\u4f53\u89e3\u7b54\u662f\uff1a 1\u3001\u6bcf\u6b21\u679a\u4e3e\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u4e00\u662f\u6b64\u4f4d\u7f6e\u4e0d\u586b\uff0c\u4e8c\u662f\u6b64\u4f4d\u7f6e\u586b\u7ad6\u7740\u76841\u00d72\u4e5f\u5c31\u662f\u4e0a\u4e00\u884c\u540c\u5217\u548c\u6b64\u4f4d\u7f6e\uff0c\u4e09\u662f\u586b\u6a2a\u7740\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u5217\u540c\u884c\u548c\u6b64\u4f4d\u7f6e 2\u3001\u5982\u679c\u8f6e\u5ed3\u7ebf\u4e2d\u4e0a\u4e00\u884c\u540c\u5217\u7684\u4f4d\u7f6e\u4e3a\u7a7a\u5fc5\u987b\u8981\u586b\u4e0a\u4e0d\u7136\u4e4b\u540e\u5c31\u6ca1\u6709\u65b9\u6cd5\u53ef\u4ee5\u5c06\u90a3\u4e2a\u4f4d\u7f6e\u8865\u4e0a\u6240\u4ee5\u662f if (( stat & 2 ) == 0 ) { int newstat = stat >> 1 | ( 1 << m - 1 ) | 1 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; //i,j-1\u770b\u60c5\u51b5\u6539\u52a8\uff0c\u662f\u5b83\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u4f4d\u7f6e continue ; } \u6ce8\u610f\u6b64\u65f6\u8981\u4e0d\u662f\u7b2c\u4e00\u884c\uff0c\u6839\u636e\u4f60\u4ece1\u8fd8\u662f0\u5f00\u59cb\u8bb0\u5f55\u884c\u6570\u53ef\u80fd\u6709\u8d1f\u4e0b\u6807\u7684\u98ce\u9669\u6240\u4ee5\u5224\u65ad\u4e00\u4e0bi\u662f\u5426\u5927\u4e8e\u5f00\u59cb\u884c\u4e0b\u6807 3\u3001\u5982\u679c\u4e0d\u662f\u4ee5\u4e0a\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e0d\u586b int newstat = stat >> 1 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; 4\u3001\u5982\u679c\u5de6\u8fb9\u4e3a\u7a7a\u53ef\u4ee5\u586b if (( stat & ( 1 << m - 1 )) == 0 ) { int newstat = stat >> 1 | 3 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; } \u5f53\u7136\u4ee5\u4e0a\u53ea\u662f\u89e3\u91ca\u6027\u7684\u5199\u6cd5\uff0c\u771f\u8981\u505a\u9898\u7684\u8bdd\u663e\u7136\u53ef\u4ee5\u52a0\u4e2a\u6eda\u52a8\u6570\u7ec4\uff0c\u5b83\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4e0e\u4e0a\u4e00\u4e2a\u72b6\u6001\u76f8\u5173\uff0c\u800c\u4e14\u5199\u8d77\u6765\u53cd\u800c\u66f4\u7b80\u5355\u3002 \u6211\u4e60\u60ef\u6765\u8bb2\u662f\u628a\u6700\u8fdc\u4f4d\u770b\u505a0\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53f3\u6ea2 0000xxx xxxx000 \u7b80\u5355\u6765\u8bb2\u6bd4\u5982\u8fd9\u4e2a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217 \u90a3\u4e48\u5b83\u72b6\u6001\u5c31\u8981\u53bb\u8868\u793a\u6807\u201cx\u201d\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u628a\u5b83\u6b63\u4e0a\u65b9\uff08\u4e5f\u5c31\u662f1\uff0c5\uff09\u90a3\u4e2a\u70b9\u770b\u505a\u662f\u72b6\u6001\u7684\u6700\u540e\u4e00\u4f4d\u4e5f\u5c31\u662f0\u4f4d\uff0c\u5728\u5f80\u4e0b\u9012\u63a8\u7684\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u591f int newstat = stat >> 1 | ( 1 << m - 1 ) \u76f4\u63a5\u5f97\u51fa\u4e0b\u4e00\u7ec4\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u8003\u8651\u6ea2\u51fa\u4f4d \u5982\u679c\u53cd\u7740\u8bbe\u8ba1\u72b6\u538b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u6765\u51cf\u53bb\u6ea2\u51fa\u4f4d \u4e00\u9053\u9898\uff1acodeforces 903F \u5927\u610f\uff1a\u7ed9\u4e00\u4e2a4\u00d7m\u7684\u77e9\u9635\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e3ax\uff0c\u9700\u8981\u75281\u00d71\uff0c 2\u00d72\uff0c3\u00d73\uff0c 4\u00d74\u7684\u683c\u5b50\u5c06\u5176\u586b\u5145\u4f7f\u5f97\u6240\u6709x\u4f4d\u7f6e\u90fd\u8981\u88ab\u8986\u76d6\u3002\u6bcf\u79cd\u683c\u5b50\u6709\u4e00\u4e2a\u4ee3\u4ef7\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002 \u663e\u7136\u6b64\u9898\u8f6e\u5ed3\u7ebf\u5927\u5c0f\u4e3a4*4\u4e5f\u5c31\u662f\u524d16\u4e2a\u683c\u5b50\uff0c\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u4e0b\u5f80\u4e0a\u9012\u63a8\u5373\u53ef\u3002 \u552f\u4e00\u4e0d\u597d\u5904\u7406\u7684\u662f\u8fd9\u4e2a\u4ee3\u4ef7\u95ee\u9898\u3002 \u5f3a\u70c8\u63a8\u8350\u8bfb\u4e00\u4e0bdotorya\u7684\u4ee3\u7801\uff0c\u7b80\u76f4\u795e\u4f5c\uff0c\u8bfb\u5230\u5c31\u662f\u8d5a\u5230 // https://codeforces.com/contest/903/submission/33174261 int A [ 5 ]; int val [ 5 ]; char in [ 4 ][ 1050 ]; int nxt [ 65536 ][ 120 ]; int cost [ 120 ]; int dp [ 1050 ][ 4096 ]; int main () { int N , i , j , k , l , m ; scanf ( \"%d\" , & N ); for ( i = 1 ; i <= 4 ; i ++ ) scanf ( \"%d\" , & A [ i ]); for ( i = 0 ; i < 4 ; i ++ ) scanf ( \"%s\" , in [ i ]); for ( i = 1 ; i <= 4 ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) for ( k = 0 ; k < i ; k ++ ) val [ i ] |= 1 << ( 4 * j + k ); } int p = 0 ; for ( i = 0 ; i <= 1 ; i ++ ) { for ( j = 0 ; j <= 2 ; j ++ ) { for ( k = 0 ; k <= 3 ; k ++ ) { for ( l = 0 ; l <= 4 ; l ++ ) { int totc = A [ i ] + A [ j ] + A [ k ] + A [ l ]; cost [ p ] = totc ; int v = ( val [ i ] << 3 ) | ( val [ j ] << 2 ) | ( val [ k ] << 1 ) | val [ l ]; for ( m = 0 ; m < 65536 ; m ++ ) nxt [ m ][ p ] = m & ~ v ; p ++ ; } } } } memset ( dp , 0x3f , sizeof ( dp )); int st = 0 ; for ( i = 0 ; i < 1 ; i ++ ) { for ( j = 0 ; j < 4 ; j ++ ) { st = st * 2 ; if ( in [ j ][ i ] == '*' ) st ++ ; } } for ( i = 0 ; i < 120 ; i ++ ) dp [ 0 ][ nxt [ st ][ i ]] = min ( dp [ 0 ][ nxt [ st ][ i ]], cost [ i ]); for ( i = 1 ; i < N ; i ++ ) { int v = 0 ; for ( j = 0 ; j < 4 ; j ++ ) v = v * 2 + ( int )( in [ j ][ i ] == '*' ); for ( j = 0 ; j < 4096 ; j ++ ) { if ( dp [ i - 1 ][ j ] > 1000000 ) continue ; l = j * 16 + v ; for ( k = 0 ; k < 120 ; k ++ ) { int x = nxt [ l ][ k ]; if ( x < 4096 ) dp [ i ][ x ] = min ( dp [ i ][ x ], dp [ i - 1 ][ j ] + cost [ k ]); } } } return ! printf ( \"%d \\n \" , dp [ N - 1 ][ 0 ]); } \u9996\u5148 val[1\uff5e4] val[1\uff5e4] \u8868\u793a\u4e861\u00d71\u52304\u00d74\u7684\u65b9\u683c\u586b\u5145\u7684\u8f6e\u5ed3\u7ebf\u5f62\u72b6 \u7136\u540e\u9884\u5904\u7406\u4e2d\u7684\u4e00\u4e2a nxt \u6570\u7ec4\u662f\u771f\u7684\u7cbe\u9ad3\uff0c net[m][p] net[m][p] \u8868\u793a\u7684\u662f\u628am\u72b6\u6001\u7ecf\u8fc7p\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u72b6\u6001\uff0cp\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u7684\u4ee3\u4ef7\u4e3a cost[p] cost[p] \uff0c\u7531\u4e8e\u72b6\u538bdp\u8fd9\u79cd\u4e1c\u897f\u771f\u7684\u662f\u4e0d\u80fd\u8868\u793a\u5f88\u591a\u72b6\u6001\uff0c\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u4e5f\u4f1a\u5f88\u5c0f\uff0c\u8fd9\u6837\u7684\u9884\u5904\u7406\u4e0d\u4ec5\u53ef\u4ee5\u5f88\u597d\u7684\u63d0\u9ad8\u4ee3\u7801\u8fd0\u884c\u6548\u7387\u8fd8\u53ef\u4ee5\u51cf\u4f4e\u6211\u4eec\u7684\u7f16\u5199\u96be\u5ea6\u3002 \u6ce8\u610f\u4ed6\u8fd9\u91cc\u8f6c\u79fb\u65b9\u5f0f\u7684\u603b\u6570\u7684\u95ee\u9898\uff0c\u5176\u5b9e\u6211\u4eec\u8bf416\u4e2a\u683c\u5b50\u75281~4\u7684\u65b9\u683c\u586b\u6ee1\u6700\u591a\u751a\u81f3\u9700\u898116\u4e2a1*1\uff0c\u4f46\u662f4\u4e2a1\u00d7 1\u5fc5\u7136\u662f\u53ea\u4e0e\u524d\u4e00\u5217\u76f8\u5173\u8054\uff0c\u6240\u4ee5\u6700\u591a4\u4e2a\u5c31\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u95ee\u9898p\u7684\u72b6\u6001\u6570\u5c31\u662f 1\u00d72\u00d73\u00d74=24 1\u00d72\u00d73\u00d74=24 \u79cd\uff0c\u867d\u7136\u4e0d\u660e\u767d\u4ed6\u4e3a\u4f55\u8981\u5199\u6210120\u79cd\u4f46\u662f\u8fd9\u4e2anxt\u6570\u7ec4\u7684\u4f18\u8d8a\u6027\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u7b97\u540e\u9762\u7684p\u4e0d\u505a\u5904\u7406\uff0c\u5b83\u4ecd\u7136\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3anxt\u6570\u7ec4\u9ed8\u8ba4\u6307\u54110\uff0c\u518d\u600e\u4e48\u778e\u5f04\u5b83\u6700\u7ec80\u65e2\u4e0d\u662f\u7b54\u6848\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u4e2d\u95f4\u72b6\u6001\uff0c\u540c\u65f6\u4ee3\u4ef7\u4e5f\u662f0\u3002 \u7136\u540e\u53ef\u4ee5\u8bf4\u540e\u9762\u968f\u4fbf\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u90fd\u662f\u53ef\u4ee5\u5199\u7684\u4e86\uff0c\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002 4\u3001\u63d2\u5934dp Link \u7b49\u54ea\u5929\u4f1a\u624b\u6495\u4e86\u518d\u5199 \u5927\u6982\u6b65\u9aa4\u662f\uff1a\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf->\u8bbe\u8ba1\u63d2\u5934\u7f16\u7801->\u8003\u8651hashmap\u7684\u5b58\u50a8->\u8bbe\u8ba1\u72b6\u6001\u8f6c\u79fb->\u5f00\u59cb\u4e0a\u624b \u8fd9\u4e2a\u7b97\u6cd5\u8ba9\u6211\u89c9\u5f97\u5728\u505a\u7a0b\u5e8f\u8bbe\u8ba1\u800c\u4e0d\u662f\u7b97\u6cd5\u8bbe\u8ba1\u3002 5\u3001\u72b6\u538bdp\u5176\u4ed6\u7ec6\u8282 Link \u987a\u5e8f\u95ee\u9898\uff1a \u4f8b\u9898\uff1a https://www.cometoj.com/contest/52/problem/C \u5f88\u7cbe\u9ad3\u7684\u4e00\u9898\uff0c\u6c42\u89e3\u6240\u6709\u5408\u6cd5\u6392\u5217\u7684\u9006\u5e8f\u5bf9 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u7684\u6743\u503c\u548c \u672c\u6765\u72b6\u538b\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u76f8\u5f53\u56f0\u96be\uff0c\u56e0\u4e3a\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u5e26\u987a\u5e8f\u7684\u9009\u62e9\u95ee\u9898\uff0c\u4e00\u822c\u6765\u8bb2\u66b4\u529b\u662f\u9636\u4e58\u7ea7\u522b\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u79cd\u95ee\u9898\u5c31\u548c\u72b6\u538bdp\u89e3\u51b3\u65c5\u884c\u5546\u95ee\u9898\u4e00\u6837\uff0c\u5c06\u9636\u4e58\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u6307\u6570\u7ea7\u3002 \u5176\u5b9e\u53ef\u4ee5\u5bf9\u5df2\u9009\u62e9\u7684\u4f4d\u7f6e\u8fdb\u884c\u72b6\u538b\uff0c\u7136\u540e\u6dfb\u52a0\u5e8f\u5217\u5c31\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u8003\u8651\u987a\u5e8f\u3002 \u7528\u4e00\u4e2a dp[1<<maxn] dp[1<<maxn] \u8868\u793a\u67d0\u79cd\u9009\u62e9\u4e0b\u7684\u6743\u503c\u8d21\u732e \u8fd9\u6837\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u539f\u56e0\u662f\u5176\u5b9e\u5b83\u72b6\u6001\u4e2d1\u7684\u4e2a\u6570\u5c31\u662f\u5f53\u524d\u53d6\u7684\u6570\u7684\u5927\u5c0f-1\u3002 \u8003\u8651\u8f6c\u79fb\u65b9\u4e58\uff1a dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) \u5176\u4e2ds\u2019\u8868\u793as\u7684\u5b50\u96c6\uff0ct\u8868\u793as\u2019\u4e2d1\u7684\u4e2a\u6570\uff08\u5373\u5f53\u524d\u53d6\u7684\u6570-1\uff09\uff0cpre\u8868\u793a\u6bd4t\u5c0f\u7684\u67d0\u4e2a\u6570 \u770b\u4f3c\u4e0d\u53ef\u89e3\uff0c\u5176\u5b9e\u7531\u4e8e\u786e\u5b9a\u4e86\u4ece\u5c0f\u5230\u5927\u653e\u6570\u7684\u987a\u5e8f\uff0c\u5b83\u771f\u6b63\u6bcf\u79cd\u60c5\u51b5\u7684\u987a\u5e8f\u53cd\u800c\u53d8\u5f97\u4e0d\u90a3\u4e48\u91cd\u8981\u4e86\u3002 \u8bb0\u5f55 g[1<<maxn] g[1<<maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u7684\u53ef\u80fd\u6392\u5217\u4e2a\u6570 t[1<<maxn][maxn] t[1<<maxn][maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u4e0b\u67d0\u4f4d\u7f6e\u4e0a\u6240\u6709\u6392\u5217\u53ef\u80fd\u6027\u7684\u503c\u7684\u548c\u3002 \u7531\u4e8e\u4e0b\u4e00\u79cd\u72b6\u6001\u7684\u6570\u6bd4\u5df2\u6dfb\u52a0\u7684\u6570\u90fd\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u662f\u5305\u542b\u5728\u503c\u5185\u4e14\u5728\u5f53\u524d\u4f4d\u7f6e\u540e\u9762\u7684\u6570\u90fd\u662f\u9006\u5e8f\u5bf9\u3002 \u8f6c\u79fb\u5c31\u53d8\u7b80\u5355\u4e86 \u8bbes\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u4e3ay\uff0c\u679a\u4e3e\u5230\u7684\u4f4d\u7f6e\uff08 s\\bigoplus s' s\\bigoplus s' \uff09\u4e3ax \u5219\u6709 \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \u770b\u7684\u6709\u70b9\u4e91\u91cc\u96fe\u91cc\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709\u5b50\u96c6\u7684\u60c5\u51b5\u90fd\u7d2f\u52a0\u5230\u4e00\u8d77\uff0ct\u6570\u7ec4\u5c31\u662f\u7528\u6765\u50a8\u5b58\u6bcf\u4f4d\u4e0a\u5b50\u96c6\u6240\u6709\u60c5\u51b5\u7684\u6570\u5b57\u548c\u3002\u7136\u540e\u6bcf\u6b21\u628a\u5b83\u540e\u9762\u7684\u548c\u52a0\u5230dp\u6570\u7ec4\u5373\u53ef \u7ef4\u62a4g\u6570\u7ec4\u662f\u4e3a\u4e86\u66f4\u65b0t\u6570\u7ec4\uff0c\u6240\u4ee5\u6574\u4e2a\u4e00\u6765\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u5957\u8def\uff1a \u5bf9\u4e00\u4e2a\u5e26\u987a\u5e8f\u548c\u6743\u503c\u7684\u72b6\u538bdp\uff0c\u5f80\u5f80\u9700\u8981\u7ef4\u62a4\u4e09\u4e2a\u6743\u503c\uff1a\u72b6\u6001\u7684\u53ef\u80fd\u6027\u4e2a\u6570\u3001\u72b6\u6001\u4e0a\u6bcf\u4e00\u4f4d\u7684\u6743\u503c\u548c\u3001\u72b6\u6001\u672c\u8eab\u4ee3\u8868\u7684\u586b\u5145\u65b9\u5f0f\u3002 \u4e00\u9053\u65b0\u9898\uff1acodeforces 1152F1 \u5927\u610f\uff1a\u6709n\u4e2a\u7269\u54c1\uff0c\u4f60\u53ef\u4ee5\u9009k\u4e2a\uff0c\u6bcf\u6b21\u9009\u62e9\u7684\u662f\u4e4b\u524d\u6ca1\u6709\u9009\u8fc7\u800c\u4e14\u8bbe\u4e0a\u4e00\u4e2a\u7684\u4f4d\u7f6e\u4e3ax\uff0c\u5f53\u524d\u7269\u54c1\u53ea\u80fd\u5728 1~x+m 1~x+m \u4e4b\u95f4\u9009\u62e9\uff0c\u6c42\u9009k\u4e2a\u7684\u65b9\u6848\u6570 \u53c8\u662f\u6307\u5b9a\u4e86\u987a\u5e8f\uff0c\u5982\u679c\u786e\u5b9a\uff08\u5750\u6807\uff09\u4ece\u5c0f\u5f80\u5927\u53d6\uff0c\u90a3\u4e48\u5f53\u524d\u8981\u53d6\u7684\u70b9\u53ea\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5\u6709\u5173\uff0c\u8fd9\u4e2a\u70b9\u8981\u4e48\u76f4\u63a5\u662f\u6700\u540e\u4e00\u4e2a\u53d6\uff0c\u8981\u4e48\u4e4b\u524dm\u4f4d\u6709\u53d6\u8fc7\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u662f\u5b83\u4eec\u8f6c\u79fb\u8fc7\u6765\u3002 \u76f4\u63a5\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u4e3a\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5 dp[i][j][k] dp[i][j][k] \u8868\u793a\u524di\u4e2a\u7269\u54c1\uff0c\u53d6\u4e86j\u4e2a\uff0ci-k\u5230i\u7684\u53d6\u6570\u60c5\u51b5\u4e3ak\u7684\u65b9\u6848\u6570\u3002 dp[i + 1][j][stat>>1] += dp[i][j][stat] dp[i + 1][j][stat>>1] += dp[i][j][stat] \u8868\u793a\u4e0d\u53d6\u76f4\u63a5\u628a\u8f6e\u5ed3\u7ebf\u79fb\u4f4d dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) \u8868\u793a\u53d6\u6700\u540e\u4e00\u4e2a\uff0c\u65b9\u6848\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u60c5\u51b5\u76f8\u5173 \u6b64\u9898large\u7248\u672c\u7684n\u8303\u56f4\u6269\u5927\u5230\u4e861e9\uff0c\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u4e0d\u600e\u4e48\u5e38\u89c1\u7684\u64cd\u4f5c\uff1a\u8f6e\u5ed3\u7ebf+\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4e00\u822c\u6765\u8bb2\u8f6e\u5ed3\u7ebf\u7684\u7b2c\u4e00\u7ef4\u662f\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4ee3\u66ff\u7684\uff0c\u56e0\u4e3a\u5f80\u5f80\u786e\u5b9a\u4e86\u679a\u4e3e\u987a\u5e8f\u4e4b\u540e\u6bcf\u4e00\u4f4d\u5176\u5b9e\u5c31\u53ea\u4e0e\u524d\u4e00\u4f4d\u6709\u5173\uff0c\u6240\u4ee5\u51fa\u6210\u77e9\u9635\u5feb\u901f\u5e42\u4e5f\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u5f88\u602a\u5f02\u7684\u662f\u5c31\u7b97\u4e0d\u7b97\u7b2c\u4e00\u7ef4\uff0c\u5b83\u8fd8\u6709\u4e00\u7ef4\u53d6\u7684\u6570\u91cf\u548c\u4e00\u4e2amask\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\u77e9\u9635\u5feb\u901f\u5e42\u9700\u8981\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u77e9\u9635\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u4e09\u7ef4\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4f17\u6240\u5468\u77e5\u77e9\u9635\u5230\u4e8c\u7ef4\u9012\u63a8\u57fa\u672c\u65e0\u89e3\uff0c\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0c\u4f46\u662f\u672c\u9898\u7684m\u9650\u5236\u5728\u4e864\u4ee5\u5185\u800c\u4e14k\u572812\u4ee5\u5185\u3002\u5c06\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u6309mapindex\u7f29\u6210\u4e00\u7ef4\u4e4b\u540e\u77e9\u9635\u5927\u5c0f\u4e5f\u53ea\u6709 12*(1<<4) 12*(1<<4) \uff0c\u603b\u4f53\u590d\u6742\u5ea6\u5c31\u662f O(logn*(k*(1<<m))^3) O(logn*(k*(1<<m))^3) \uff0c\u8fd8\u662f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185 \u6b64\u9898large\u7248\u672c\u7684\u9012\u63a8\u77e9\u9635\u786e\u5b9e\u4e0d\u592a\u597d\u8ba1\u7b97\uff0c\u5177\u4f53\u65b9\u5f0f\u89c1 \u77e9\u9635\u5feb\u901f\u5e42 6\u3001\u5206\u8fa8\u72b6\u538bdp\u548c\u8d39\u7528\u6d41 Link \u4f17\u6240\u5468\u77e5\u8d39\u7528\u6d41\u548c\u72b6\u538bdp\u90fd\u662f\u7528\u6765\u89e3\u51b3\u5c0f\u8303\u56f4\u6570\u636e\u7684np\u95ee\u9898\u7684\u3002\u90a3\u4e48\u5f53\u62ff\u5230\u4e00\u4e2a\u9898\u770b\u7684\u6570\u636e\u8303\u56f420\u751a\u81f310\u4ee5\u5185\u600e\u6837\u5206\u8fa8\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002 \u72b6\u538bdp\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff1a\u53d6\u8fd8\u662f\u4e0d\u53d6\uff0c\u80fd\u4e0d\u80fd\u53d6\u3002 \u8d39\u7528\u6d41\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\uff1a\u4e00\u822c\u4e0d\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u95ee\u9898\u3002 \u90a3\u4e48\u9996\u5148\u5e94\u8be5\u770b\u662f\u5426\u662f\u7ebf\u6027\u6216\u987a\u5e8f\u65e0\u5173\u7684\u95ee\u9898\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u770b\u662f\u5426\u7b26\u5408\u53d6\u4e0d\u53d6\u768401\u89c4\u5219\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u72b6\u538b\u57fa\u672c\u65e0\u6cd5\u89e3\u51b3\uff0c\u8003\u8651\u8d39\u7528\u6d41\u548c\u7206\u641c\u3002","title":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#dp","text":"\u72b6\u6001\u538b\u7f29dp\u5e38\u7528\u6765\u5904\u7406\u91cf\u7ea7\u5f88\u5c0f\u7684np\u95ee\u9898 \u7531\u6b64\u8fd8\u53ef\u4ee5\u884d\u751f\u51fa\u8f6e\u5ed3\u7ebfdp\u53ca\u5728\u6b64\u4e4b\u4e0a\u7684\u63d2\u5934dp \u72b6\u6001\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u4e2d\u6709\u4e00\u4e9b\u5c0f\u64cd\u4f5c\u60f3\u5206\u4eab\u4e00\u4e0b\uff1a","title":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#1","text":"//for(int i = 0; i != s; i = (i-s)&s) void print ( int x ) { if ( x < 2 ) printf ( \"%d\" , x ); else { print ( x >> 1 ); print ( x % 2 ); } } int main () { int s = 0 B1111 ; for ( int i = 0 ; i != s ; i = ( i - s ) & s ) { print ( i ); printf ( \" \\n \" ); } } /*\u8f93\u51fa\u4e3a\uff1a 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 */ \u5f88\u65b9\u4fbf\u800c\u4e14\u662f\u5347\u5e8f","title":"1\u3001\u679a\u4e3e\u4e8c\u8fdb\u5236\u72b6\u6001\u5b50\u96c6"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#2","text":"// \u6240\u6709\u4f4d\u4e3a1 ( 1 << n ) - 1 //\u6ce8\u610f\u4f4d\u8fd0\u7b97\u6bd4\u4e00\u6b21\u8fd0\u7b97\u4f18\u5148\u7ea7\u4f4e\u6240\u4ee5\u8981\u52a0\u62ec\u53f7 // \u5224\u65ad\u7b2ci\u4f4d stat & ( 1 << i ) // lowbit\uff0c\u72b6\u6001\u4e2d\u6700\u9760\u8fd1\u672b\u5c3e\u76841 i & - i // \u6c42\u72b6\u6001\u4e2d\u542b\u6709\u7684\u9009\u4e2d\u6570\u91cf\uff0c\u76f8\u5f53\u4e8e\u6c42\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570 int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( stat & ( 1 << i )) c ++ ; // \u6216\u8005\u76f4\u63a5\u9884\u5904\u7406\uff0c\u8fd9\u91cc\u7528\u5230\u4e86lowbit for ( int i = 0 ; i < ( 1 << n ); ++ i ) c [ i ] = c [ i ^ ( i & - i )] + 1 ; // \u679a\u4e3e\u9012\u63a8\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u5b9e\u968f\u4fbf\u5199\u5c31\u662f\u4e86 for ( int i = 0 ; i < n ; ++ i ) { if (( stat & ( 1 << i )) == 0 ) { int newstat = stat | ( 1 << i ); } }","title":"2\u3001\u72b6\u6001\u7684\u5404\u79cd\u57fa\u672c\u64cd\u4f5c"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#3dp","text":"\u8bf4\u5230\u8f6e\u5ed3\u7ebfdp\u5c31\u662f\u90a3\u4e2a\u65b9\u683c\u586b\u5145\u95ee\u9898\uff0c\u6c42\u75281*2\u7684\u65b9\u683c\u586b\u6ee1n\u00d7m\u7684\u65b9\u6848\u6570\u3002 \u3010poj 2411\u3011 \u8fd9\u91cc\u662f\u57fa\u7840\u90e8\u5206\uff0c\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7 \u8bbe\u8ba1 dp[i][j][k] dp[i][j][k] \u662f\u7b2ci\u884c\u7b2cj\u5217\uff0c\u4e0a\u65b9\u72b6\u6001\u4e3ak\u7684\u65b9\u6848\u6570 \u6700\u540e\u6c42\u89e3\u7684\u662f dp[n][m][(1<<m)-1] dp[n][m][(1<<m)-1] 0000xxx xxxx000 \u8fd9\u6837\u4e00\u5f20\u56fe\uff0c\u8868\u793a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217\uff0c\u90a3\u4e48\u5b83\u6240\u9700\u8981\u7684\u72b6\u6001\u4e3a\u6807x\u7684\u4f4d\u7f6e\u662f\u5426\u586b\u5145\uff0c\u5f80\u4e0b\u9012\u63a8\u5c06\u7b2c2\u884c\u7b2c5\u5217\u586b\u5145\u4e00\u4e2a\u7ad6\u7740\u7684\u65b9\u683c\u7684\u8bdd\u5c31\u662f\uff1a int newstat = stat >> 1 | ( 1 << m - 1 ) | 1 \u5176\u4e2d stat>>1 \u5c31\u662f\u628a\u72b6\u6001\u53d8\u6210\u4e86 00000xx xxxxx00 \u53bb\u6389\u4e86\u5934\u4f4d\uff0c\u589e\u52a0\u4e86\u4e00\u4f4d\uff0c\u8fd9\u5c31\u662f\u8f6e\u5ed3\u7ebfdp\uff0c\u7c7b\u4f3c\u4e00\u4e2a\u53d6\u7a97\u53e3shift\u7684\u8fc7\u7a0b\u3002\u6807x\u7684\u4f4d\u7f6e\u4e5f\u5c31\u662f\u8f6e\u5ed3\u7ebf\u3002 \u65b9\u683c\u586b\u5145\u95ee\u9898\u7684\u5177\u4f53\u89e3\u7b54\u662f\uff1a 1\u3001\u6bcf\u6b21\u679a\u4e3e\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u4e00\u662f\u6b64\u4f4d\u7f6e\u4e0d\u586b\uff0c\u4e8c\u662f\u6b64\u4f4d\u7f6e\u586b\u7ad6\u7740\u76841\u00d72\u4e5f\u5c31\u662f\u4e0a\u4e00\u884c\u540c\u5217\u548c\u6b64\u4f4d\u7f6e\uff0c\u4e09\u662f\u586b\u6a2a\u7740\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u5217\u540c\u884c\u548c\u6b64\u4f4d\u7f6e 2\u3001\u5982\u679c\u8f6e\u5ed3\u7ebf\u4e2d\u4e0a\u4e00\u884c\u540c\u5217\u7684\u4f4d\u7f6e\u4e3a\u7a7a\u5fc5\u987b\u8981\u586b\u4e0a\u4e0d\u7136\u4e4b\u540e\u5c31\u6ca1\u6709\u65b9\u6cd5\u53ef\u4ee5\u5c06\u90a3\u4e2a\u4f4d\u7f6e\u8865\u4e0a\u6240\u4ee5\u662f if (( stat & 2 ) == 0 ) { int newstat = stat >> 1 | ( 1 << m - 1 ) | 1 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; //i,j-1\u770b\u60c5\u51b5\u6539\u52a8\uff0c\u662f\u5b83\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u4f4d\u7f6e continue ; } \u6ce8\u610f\u6b64\u65f6\u8981\u4e0d\u662f\u7b2c\u4e00\u884c\uff0c\u6839\u636e\u4f60\u4ece1\u8fd8\u662f0\u5f00\u59cb\u8bb0\u5f55\u884c\u6570\u53ef\u80fd\u6709\u8d1f\u4e0b\u6807\u7684\u98ce\u9669\u6240\u4ee5\u5224\u65ad\u4e00\u4e0bi\u662f\u5426\u5927\u4e8e\u5f00\u59cb\u884c\u4e0b\u6807 3\u3001\u5982\u679c\u4e0d\u662f\u4ee5\u4e0a\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e0d\u586b int newstat = stat >> 1 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; 4\u3001\u5982\u679c\u5de6\u8fb9\u4e3a\u7a7a\u53ef\u4ee5\u586b if (( stat & ( 1 << m - 1 )) == 0 ) { int newstat = stat >> 1 | 3 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; } \u5f53\u7136\u4ee5\u4e0a\u53ea\u662f\u89e3\u91ca\u6027\u7684\u5199\u6cd5\uff0c\u771f\u8981\u505a\u9898\u7684\u8bdd\u663e\u7136\u53ef\u4ee5\u52a0\u4e2a\u6eda\u52a8\u6570\u7ec4\uff0c\u5b83\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4e0e\u4e0a\u4e00\u4e2a\u72b6\u6001\u76f8\u5173\uff0c\u800c\u4e14\u5199\u8d77\u6765\u53cd\u800c\u66f4\u7b80\u5355\u3002 \u6211\u4e60\u60ef\u6765\u8bb2\u662f\u628a\u6700\u8fdc\u4f4d\u770b\u505a0\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53f3\u6ea2 0000xxx xxxx000 \u7b80\u5355\u6765\u8bb2\u6bd4\u5982\u8fd9\u4e2a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217 \u90a3\u4e48\u5b83\u72b6\u6001\u5c31\u8981\u53bb\u8868\u793a\u6807\u201cx\u201d\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u628a\u5b83\u6b63\u4e0a\u65b9\uff08\u4e5f\u5c31\u662f1\uff0c5\uff09\u90a3\u4e2a\u70b9\u770b\u505a\u662f\u72b6\u6001\u7684\u6700\u540e\u4e00\u4f4d\u4e5f\u5c31\u662f0\u4f4d\uff0c\u5728\u5f80\u4e0b\u9012\u63a8\u7684\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u591f int newstat = stat >> 1 | ( 1 << m - 1 ) \u76f4\u63a5\u5f97\u51fa\u4e0b\u4e00\u7ec4\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u8003\u8651\u6ea2\u51fa\u4f4d \u5982\u679c\u53cd\u7740\u8bbe\u8ba1\u72b6\u538b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u6765\u51cf\u53bb\u6ea2\u51fa\u4f4d \u4e00\u9053\u9898\uff1acodeforces 903F \u5927\u610f\uff1a\u7ed9\u4e00\u4e2a4\u00d7m\u7684\u77e9\u9635\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e3ax\uff0c\u9700\u8981\u75281\u00d71\uff0c 2\u00d72\uff0c3\u00d73\uff0c 4\u00d74\u7684\u683c\u5b50\u5c06\u5176\u586b\u5145\u4f7f\u5f97\u6240\u6709x\u4f4d\u7f6e\u90fd\u8981\u88ab\u8986\u76d6\u3002\u6bcf\u79cd\u683c\u5b50\u6709\u4e00\u4e2a\u4ee3\u4ef7\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002 \u663e\u7136\u6b64\u9898\u8f6e\u5ed3\u7ebf\u5927\u5c0f\u4e3a4*4\u4e5f\u5c31\u662f\u524d16\u4e2a\u683c\u5b50\uff0c\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u4e0b\u5f80\u4e0a\u9012\u63a8\u5373\u53ef\u3002 \u552f\u4e00\u4e0d\u597d\u5904\u7406\u7684\u662f\u8fd9\u4e2a\u4ee3\u4ef7\u95ee\u9898\u3002 \u5f3a\u70c8\u63a8\u8350\u8bfb\u4e00\u4e0bdotorya\u7684\u4ee3\u7801\uff0c\u7b80\u76f4\u795e\u4f5c\uff0c\u8bfb\u5230\u5c31\u662f\u8d5a\u5230 // https://codeforces.com/contest/903/submission/33174261 int A [ 5 ]; int val [ 5 ]; char in [ 4 ][ 1050 ]; int nxt [ 65536 ][ 120 ]; int cost [ 120 ]; int dp [ 1050 ][ 4096 ]; int main () { int N , i , j , k , l , m ; scanf ( \"%d\" , & N ); for ( i = 1 ; i <= 4 ; i ++ ) scanf ( \"%d\" , & A [ i ]); for ( i = 0 ; i < 4 ; i ++ ) scanf ( \"%s\" , in [ i ]); for ( i = 1 ; i <= 4 ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) for ( k = 0 ; k < i ; k ++ ) val [ i ] |= 1 << ( 4 * j + k ); } int p = 0 ; for ( i = 0 ; i <= 1 ; i ++ ) { for ( j = 0 ; j <= 2 ; j ++ ) { for ( k = 0 ; k <= 3 ; k ++ ) { for ( l = 0 ; l <= 4 ; l ++ ) { int totc = A [ i ] + A [ j ] + A [ k ] + A [ l ]; cost [ p ] = totc ; int v = ( val [ i ] << 3 ) | ( val [ j ] << 2 ) | ( val [ k ] << 1 ) | val [ l ]; for ( m = 0 ; m < 65536 ; m ++ ) nxt [ m ][ p ] = m & ~ v ; p ++ ; } } } } memset ( dp , 0x3f , sizeof ( dp )); int st = 0 ; for ( i = 0 ; i < 1 ; i ++ ) { for ( j = 0 ; j < 4 ; j ++ ) { st = st * 2 ; if ( in [ j ][ i ] == '*' ) st ++ ; } } for ( i = 0 ; i < 120 ; i ++ ) dp [ 0 ][ nxt [ st ][ i ]] = min ( dp [ 0 ][ nxt [ st ][ i ]], cost [ i ]); for ( i = 1 ; i < N ; i ++ ) { int v = 0 ; for ( j = 0 ; j < 4 ; j ++ ) v = v * 2 + ( int )( in [ j ][ i ] == '*' ); for ( j = 0 ; j < 4096 ; j ++ ) { if ( dp [ i - 1 ][ j ] > 1000000 ) continue ; l = j * 16 + v ; for ( k = 0 ; k < 120 ; k ++ ) { int x = nxt [ l ][ k ]; if ( x < 4096 ) dp [ i ][ x ] = min ( dp [ i ][ x ], dp [ i - 1 ][ j ] + cost [ k ]); } } } return ! printf ( \"%d \\n \" , dp [ N - 1 ][ 0 ]); } \u9996\u5148 val[1\uff5e4] val[1\uff5e4] \u8868\u793a\u4e861\u00d71\u52304\u00d74\u7684\u65b9\u683c\u586b\u5145\u7684\u8f6e\u5ed3\u7ebf\u5f62\u72b6 \u7136\u540e\u9884\u5904\u7406\u4e2d\u7684\u4e00\u4e2a nxt \u6570\u7ec4\u662f\u771f\u7684\u7cbe\u9ad3\uff0c net[m][p] net[m][p] \u8868\u793a\u7684\u662f\u628am\u72b6\u6001\u7ecf\u8fc7p\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u72b6\u6001\uff0cp\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u7684\u4ee3\u4ef7\u4e3a cost[p] cost[p] \uff0c\u7531\u4e8e\u72b6\u538bdp\u8fd9\u79cd\u4e1c\u897f\u771f\u7684\u662f\u4e0d\u80fd\u8868\u793a\u5f88\u591a\u72b6\u6001\uff0c\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u4e5f\u4f1a\u5f88\u5c0f\uff0c\u8fd9\u6837\u7684\u9884\u5904\u7406\u4e0d\u4ec5\u53ef\u4ee5\u5f88\u597d\u7684\u63d0\u9ad8\u4ee3\u7801\u8fd0\u884c\u6548\u7387\u8fd8\u53ef\u4ee5\u51cf\u4f4e\u6211\u4eec\u7684\u7f16\u5199\u96be\u5ea6\u3002 \u6ce8\u610f\u4ed6\u8fd9\u91cc\u8f6c\u79fb\u65b9\u5f0f\u7684\u603b\u6570\u7684\u95ee\u9898\uff0c\u5176\u5b9e\u6211\u4eec\u8bf416\u4e2a\u683c\u5b50\u75281~4\u7684\u65b9\u683c\u586b\u6ee1\u6700\u591a\u751a\u81f3\u9700\u898116\u4e2a1*1\uff0c\u4f46\u662f4\u4e2a1\u00d7 1\u5fc5\u7136\u662f\u53ea\u4e0e\u524d\u4e00\u5217\u76f8\u5173\u8054\uff0c\u6240\u4ee5\u6700\u591a4\u4e2a\u5c31\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u95ee\u9898p\u7684\u72b6\u6001\u6570\u5c31\u662f 1\u00d72\u00d73\u00d74=24 1\u00d72\u00d73\u00d74=24 \u79cd\uff0c\u867d\u7136\u4e0d\u660e\u767d\u4ed6\u4e3a\u4f55\u8981\u5199\u6210120\u79cd\u4f46\u662f\u8fd9\u4e2anxt\u6570\u7ec4\u7684\u4f18\u8d8a\u6027\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u7b97\u540e\u9762\u7684p\u4e0d\u505a\u5904\u7406\uff0c\u5b83\u4ecd\u7136\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3anxt\u6570\u7ec4\u9ed8\u8ba4\u6307\u54110\uff0c\u518d\u600e\u4e48\u778e\u5f04\u5b83\u6700\u7ec80\u65e2\u4e0d\u662f\u7b54\u6848\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u4e2d\u95f4\u72b6\u6001\uff0c\u540c\u65f6\u4ee3\u4ef7\u4e5f\u662f0\u3002 \u7136\u540e\u53ef\u4ee5\u8bf4\u540e\u9762\u968f\u4fbf\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u90fd\u662f\u53ef\u4ee5\u5199\u7684\u4e86\uff0c\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002","title":"3\u3001\u8f6e\u5ed3\u7ebfdp\u5165\u95e8"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#4dp","text":"\u7b49\u54ea\u5929\u4f1a\u624b\u6495\u4e86\u518d\u5199 \u5927\u6982\u6b65\u9aa4\u662f\uff1a\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf->\u8bbe\u8ba1\u63d2\u5934\u7f16\u7801->\u8003\u8651hashmap\u7684\u5b58\u50a8->\u8bbe\u8ba1\u72b6\u6001\u8f6c\u79fb->\u5f00\u59cb\u4e0a\u624b \u8fd9\u4e2a\u7b97\u6cd5\u8ba9\u6211\u89c9\u5f97\u5728\u505a\u7a0b\u5e8f\u8bbe\u8ba1\u800c\u4e0d\u662f\u7b97\u6cd5\u8bbe\u8ba1\u3002","title":"4\u3001\u63d2\u5934dp"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#5dp","text":"\u987a\u5e8f\u95ee\u9898\uff1a \u4f8b\u9898\uff1a https://www.cometoj.com/contest/52/problem/C \u5f88\u7cbe\u9ad3\u7684\u4e00\u9898\uff0c\u6c42\u89e3\u6240\u6709\u5408\u6cd5\u6392\u5217\u7684\u9006\u5e8f\u5bf9 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u7684\u6743\u503c\u548c \u672c\u6765\u72b6\u538b\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u76f8\u5f53\u56f0\u96be\uff0c\u56e0\u4e3a\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u5e26\u987a\u5e8f\u7684\u9009\u62e9\u95ee\u9898\uff0c\u4e00\u822c\u6765\u8bb2\u66b4\u529b\u662f\u9636\u4e58\u7ea7\u522b\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u79cd\u95ee\u9898\u5c31\u548c\u72b6\u538bdp\u89e3\u51b3\u65c5\u884c\u5546\u95ee\u9898\u4e00\u6837\uff0c\u5c06\u9636\u4e58\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u6307\u6570\u7ea7\u3002 \u5176\u5b9e\u53ef\u4ee5\u5bf9\u5df2\u9009\u62e9\u7684\u4f4d\u7f6e\u8fdb\u884c\u72b6\u538b\uff0c\u7136\u540e\u6dfb\u52a0\u5e8f\u5217\u5c31\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u8003\u8651\u987a\u5e8f\u3002 \u7528\u4e00\u4e2a dp[1<<maxn] dp[1<<maxn] \u8868\u793a\u67d0\u79cd\u9009\u62e9\u4e0b\u7684\u6743\u503c\u8d21\u732e \u8fd9\u6837\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u539f\u56e0\u662f\u5176\u5b9e\u5b83\u72b6\u6001\u4e2d1\u7684\u4e2a\u6570\u5c31\u662f\u5f53\u524d\u53d6\u7684\u6570\u7684\u5927\u5c0f-1\u3002 \u8003\u8651\u8f6c\u79fb\u65b9\u4e58\uff1a dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) \u5176\u4e2ds\u2019\u8868\u793as\u7684\u5b50\u96c6\uff0ct\u8868\u793as\u2019\u4e2d1\u7684\u4e2a\u6570\uff08\u5373\u5f53\u524d\u53d6\u7684\u6570-1\uff09\uff0cpre\u8868\u793a\u6bd4t\u5c0f\u7684\u67d0\u4e2a\u6570 \u770b\u4f3c\u4e0d\u53ef\u89e3\uff0c\u5176\u5b9e\u7531\u4e8e\u786e\u5b9a\u4e86\u4ece\u5c0f\u5230\u5927\u653e\u6570\u7684\u987a\u5e8f\uff0c\u5b83\u771f\u6b63\u6bcf\u79cd\u60c5\u51b5\u7684\u987a\u5e8f\u53cd\u800c\u53d8\u5f97\u4e0d\u90a3\u4e48\u91cd\u8981\u4e86\u3002 \u8bb0\u5f55 g[1<<maxn] g[1<<maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u7684\u53ef\u80fd\u6392\u5217\u4e2a\u6570 t[1<<maxn][maxn] t[1<<maxn][maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u4e0b\u67d0\u4f4d\u7f6e\u4e0a\u6240\u6709\u6392\u5217\u53ef\u80fd\u6027\u7684\u503c\u7684\u548c\u3002 \u7531\u4e8e\u4e0b\u4e00\u79cd\u72b6\u6001\u7684\u6570\u6bd4\u5df2\u6dfb\u52a0\u7684\u6570\u90fd\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u662f\u5305\u542b\u5728\u503c\u5185\u4e14\u5728\u5f53\u524d\u4f4d\u7f6e\u540e\u9762\u7684\u6570\u90fd\u662f\u9006\u5e8f\u5bf9\u3002 \u8f6c\u79fb\u5c31\u53d8\u7b80\u5355\u4e86 \u8bbes\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u4e3ay\uff0c\u679a\u4e3e\u5230\u7684\u4f4d\u7f6e\uff08 s\\bigoplus s' s\\bigoplus s' \uff09\u4e3ax \u5219\u6709 \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \u770b\u7684\u6709\u70b9\u4e91\u91cc\u96fe\u91cc\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709\u5b50\u96c6\u7684\u60c5\u51b5\u90fd\u7d2f\u52a0\u5230\u4e00\u8d77\uff0ct\u6570\u7ec4\u5c31\u662f\u7528\u6765\u50a8\u5b58\u6bcf\u4f4d\u4e0a\u5b50\u96c6\u6240\u6709\u60c5\u51b5\u7684\u6570\u5b57\u548c\u3002\u7136\u540e\u6bcf\u6b21\u628a\u5b83\u540e\u9762\u7684\u548c\u52a0\u5230dp\u6570\u7ec4\u5373\u53ef \u7ef4\u62a4g\u6570\u7ec4\u662f\u4e3a\u4e86\u66f4\u65b0t\u6570\u7ec4\uff0c\u6240\u4ee5\u6574\u4e2a\u4e00\u6765\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u5957\u8def\uff1a \u5bf9\u4e00\u4e2a\u5e26\u987a\u5e8f\u548c\u6743\u503c\u7684\u72b6\u538bdp\uff0c\u5f80\u5f80\u9700\u8981\u7ef4\u62a4\u4e09\u4e2a\u6743\u503c\uff1a\u72b6\u6001\u7684\u53ef\u80fd\u6027\u4e2a\u6570\u3001\u72b6\u6001\u4e0a\u6bcf\u4e00\u4f4d\u7684\u6743\u503c\u548c\u3001\u72b6\u6001\u672c\u8eab\u4ee3\u8868\u7684\u586b\u5145\u65b9\u5f0f\u3002 \u4e00\u9053\u65b0\u9898\uff1acodeforces 1152F1 \u5927\u610f\uff1a\u6709n\u4e2a\u7269\u54c1\uff0c\u4f60\u53ef\u4ee5\u9009k\u4e2a\uff0c\u6bcf\u6b21\u9009\u62e9\u7684\u662f\u4e4b\u524d\u6ca1\u6709\u9009\u8fc7\u800c\u4e14\u8bbe\u4e0a\u4e00\u4e2a\u7684\u4f4d\u7f6e\u4e3ax\uff0c\u5f53\u524d\u7269\u54c1\u53ea\u80fd\u5728 1~x+m 1~x+m \u4e4b\u95f4\u9009\u62e9\uff0c\u6c42\u9009k\u4e2a\u7684\u65b9\u6848\u6570 \u53c8\u662f\u6307\u5b9a\u4e86\u987a\u5e8f\uff0c\u5982\u679c\u786e\u5b9a\uff08\u5750\u6807\uff09\u4ece\u5c0f\u5f80\u5927\u53d6\uff0c\u90a3\u4e48\u5f53\u524d\u8981\u53d6\u7684\u70b9\u53ea\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5\u6709\u5173\uff0c\u8fd9\u4e2a\u70b9\u8981\u4e48\u76f4\u63a5\u662f\u6700\u540e\u4e00\u4e2a\u53d6\uff0c\u8981\u4e48\u4e4b\u524dm\u4f4d\u6709\u53d6\u8fc7\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u662f\u5b83\u4eec\u8f6c\u79fb\u8fc7\u6765\u3002 \u76f4\u63a5\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u4e3a\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5 dp[i][j][k] dp[i][j][k] \u8868\u793a\u524di\u4e2a\u7269\u54c1\uff0c\u53d6\u4e86j\u4e2a\uff0ci-k\u5230i\u7684\u53d6\u6570\u60c5\u51b5\u4e3ak\u7684\u65b9\u6848\u6570\u3002 dp[i + 1][j][stat>>1] += dp[i][j][stat] dp[i + 1][j][stat>>1] += dp[i][j][stat] \u8868\u793a\u4e0d\u53d6\u76f4\u63a5\u628a\u8f6e\u5ed3\u7ebf\u79fb\u4f4d dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) \u8868\u793a\u53d6\u6700\u540e\u4e00\u4e2a\uff0c\u65b9\u6848\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u60c5\u51b5\u76f8\u5173 \u6b64\u9898large\u7248\u672c\u7684n\u8303\u56f4\u6269\u5927\u5230\u4e861e9\uff0c\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u4e0d\u600e\u4e48\u5e38\u89c1\u7684\u64cd\u4f5c\uff1a\u8f6e\u5ed3\u7ebf+\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4e00\u822c\u6765\u8bb2\u8f6e\u5ed3\u7ebf\u7684\u7b2c\u4e00\u7ef4\u662f\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4ee3\u66ff\u7684\uff0c\u56e0\u4e3a\u5f80\u5f80\u786e\u5b9a\u4e86\u679a\u4e3e\u987a\u5e8f\u4e4b\u540e\u6bcf\u4e00\u4f4d\u5176\u5b9e\u5c31\u53ea\u4e0e\u524d\u4e00\u4f4d\u6709\u5173\uff0c\u6240\u4ee5\u51fa\u6210\u77e9\u9635\u5feb\u901f\u5e42\u4e5f\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u5f88\u602a\u5f02\u7684\u662f\u5c31\u7b97\u4e0d\u7b97\u7b2c\u4e00\u7ef4\uff0c\u5b83\u8fd8\u6709\u4e00\u7ef4\u53d6\u7684\u6570\u91cf\u548c\u4e00\u4e2amask\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\u77e9\u9635\u5feb\u901f\u5e42\u9700\u8981\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u77e9\u9635\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u4e09\u7ef4\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4f17\u6240\u5468\u77e5\u77e9\u9635\u5230\u4e8c\u7ef4\u9012\u63a8\u57fa\u672c\u65e0\u89e3\uff0c\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0c\u4f46\u662f\u672c\u9898\u7684m\u9650\u5236\u5728\u4e864\u4ee5\u5185\u800c\u4e14k\u572812\u4ee5\u5185\u3002\u5c06\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u6309mapindex\u7f29\u6210\u4e00\u7ef4\u4e4b\u540e\u77e9\u9635\u5927\u5c0f\u4e5f\u53ea\u6709 12*(1<<4) 12*(1<<4) \uff0c\u603b\u4f53\u590d\u6742\u5ea6\u5c31\u662f O(logn*(k*(1<<m))^3) O(logn*(k*(1<<m))^3) \uff0c\u8fd8\u662f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185 \u6b64\u9898large\u7248\u672c\u7684\u9012\u63a8\u77e9\u9635\u786e\u5b9e\u4e0d\u592a\u597d\u8ba1\u7b97\uff0c\u5177\u4f53\u65b9\u5f0f\u89c1 \u77e9\u9635\u5feb\u901f\u5e42","title":"5\u3001\u72b6\u538bdp\u5176\u4ed6\u7ec6\u8282"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9dp%E7%9A%84%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/#6dp","text":"\u4f17\u6240\u5468\u77e5\u8d39\u7528\u6d41\u548c\u72b6\u538bdp\u90fd\u662f\u7528\u6765\u89e3\u51b3\u5c0f\u8303\u56f4\u6570\u636e\u7684np\u95ee\u9898\u7684\u3002\u90a3\u4e48\u5f53\u62ff\u5230\u4e00\u4e2a\u9898\u770b\u7684\u6570\u636e\u8303\u56f420\u751a\u81f310\u4ee5\u5185\u600e\u6837\u5206\u8fa8\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002 \u72b6\u538bdp\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff1a\u53d6\u8fd8\u662f\u4e0d\u53d6\uff0c\u80fd\u4e0d\u80fd\u53d6\u3002 \u8d39\u7528\u6d41\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\uff1a\u4e00\u822c\u4e0d\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u95ee\u9898\u3002 \u90a3\u4e48\u9996\u5148\u5e94\u8be5\u770b\u662f\u5426\u662f\u7ebf\u6027\u6216\u987a\u5e8f\u65e0\u5173\u7684\u95ee\u9898\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u770b\u662f\u5426\u7b26\u5408\u53d6\u4e0d\u53d6\u768401\u89c4\u5219\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u72b6\u538b\u57fa\u672c\u65e0\u6cd5\u89e3\u51b3\uff0c\u8003\u8651\u8d39\u7528\u6d41\u548c\u7206\u641c\u3002","title":"6\u3001\u5206\u8fa8\u72b6\u538bdp\u548c\u8d39\u7528\u6d41"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82dp/","text":"\u77e9\u9635\u5feb\u901f\u5e42 Link \u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u80fd\u7528\u6eda\u52a8\u4f18\u5316\u7684\u524d\u540e\u9879\u5173\u8054\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff0c\u800c\u4e14\u4e00\u822c\u9012\u63a8\u9879\u6570\u8fc7\u5927\u4f7f\u7528\u666e\u901a\u679a\u4e3e\u4e0d\u80fd\u89e3\u51b3\u3002 \u590d\u6742\u5ea6\uff1a \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u57fa\u672c\u601d\u60f3\u548c\u524d\u7f6e\u6280\u80fd\uff1a\u77e9\u9635\u4e58\u6cd5 1\u3001\u77e9\u9635\u5feb\u901f\u5e42\u7684\u57fa\u672c\u8fc7\u7a0b Link \u6784\u9020\u521d\u59cb\u77e9\u9635 \u6784\u9020\u9012\u63a8\u77e9\u9635 \u9012\u63a8\u77e9\u9635\u4f7f\u7528\u5feb\u901f\u5e42\u7b97\u6cd5\u9012\u63a8\u51fa\u7ed3\u679c\u77e9\u9635 \u521d\u59cb\u77e9\u9635\u4e0e\u7ed3\u679c\u77e9\u9635\u76f8\u4e58\u5f97\u5230\u6700\u7ec8\u7ed3\u679c \u51e0\u5927\u7279\u70b9 \u521d\u59cb\u77e9\u9635\u53ea\u6709\u4e00\u884c\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u4e00\u5217\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7684\u65b9\u4fbf\u6027\u548c\u4e60\u60ef\u95ee\u9898\u5e38\u91c7\u7528\u4e00\u884c\uff09\uff0c\u5217\u6570\u7531\u9012\u63a8\u5f0f\u51b3\u5b9a \u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\uff0c\u884c\u5217\u6570\u4e0e\u521d\u59cb\u77e9\u9635\u5217\u6570\u76f8\u540c \u5feb\u901f\u5e42\u771f\u7684\u662f\u5feb\u901f\u5e42\uff0c\u5c31\u662f\u6309\u7167\u500d\u589e\u7684\u601d\u60f3\u5c06\u9012\u63a8\u77e9\u9635\u53d8\u6210n\u6b21\u65b9\uff0c\u7531\u4e8e\u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\u6240\u4ee5\u662f\u5b58\u5728\u6b21\u65b9\u7684\u3002 \u7531\u4e8e\u5feb\u901f\u5e42\u4e00\u5f00\u59cb\u9700\u8981\u4e00\u4e2a\u5e7a\u5143\u4f5c\u4e3a\u521d\u59cb\u7ed3\u679c\uff0c\u5e38\u5e38\u76f4\u63a5\u628a\u521d\u59cb\u77e9\u9635\u66ff\u6362\u4e0a\u53bb\uff0c\u5e26\u5165\u8ba1\u7b97\uff0c\u6700\u7ec8\u5feb\u901f\u5e42\u7684\u7ed3\u679c\u5c31\u662f\u89e3\u3002 2\u3001\u4f8b\u9898 Link \u6c42\u5927fib\u6570 Link \u4f17\u6240\u5468\u77e5 fib[i]=fib[i-1]+fib[i-2] \uff0c\u6240\u4ee5\u76f4\u63a5\u6784\u9020\u4e0a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u50cf\u8fd9\u79cd\u7b80\u5355\u7684\u52a0\u51cf\u9012\u63a8\u7684\u8bdd\u7ef4\u6570\u5c31\u53ef\u4ee5\u7b49\u4e8e\u9012\u63a8\u5f0f\u4e2d\u7684\u9879\u6570 \u521d\u59cb\u77e9\u9635 fib[0] = 1, fib[1] = 1 \uff0c\u9012\u63a8\u77e9\u9635 \\begin{bmatrix} 0&1\\\\ 1&1\\\\ \\end{bmatrix} \u90fd\u77e5\u9053\u5de6\u884c\u4e58\u53f3\u5217\uff0c\u6240\u4ee5\u53f3\u8fb9\u7684\u7b2c\u4e00\u5217\u548c\u5de6\u8fb9\u7684\u7b2c\u4e00\u884c\u5c31\u6784\u6210\u4e86\u4e0b\u4e00\u4e2a\u9012\u63a8\u7684\u6570\uff0c\u4ece fib[0] fib[1] \u53d8\u6210 fib[1] fib[2] \uff0c\u8fd9\u6837\u4ee5\u6765\u5c31\u53ef\u4ee5\u5199\u51fa\u9012\u63a8\u77e9\u9635\u4e86\u3002 \u6c42 f[n] = f[n-1] + n^3 f[n] = f[n-1] + n^3 Link \u5177\u4f53\u662f\u4e0d\u662f\u6211\u4e5f\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f46\u662f\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff0c\u50cf\u8fd9\u79cd\u5e26\u975e\u5e38\u6570\u6b21\u65b9\u7684\u4e1c\u897f\u8bb2\u4e2a\u9053\u7406\u786e\u5b9e\u6bd4\u8f83\u96be\u6784\u9020\u9012\u63a8\u77e9\u9635 \u7531\u4e8e (n+1)^3=n^3+3*n^2+3*n+1 (n+1)^3=n^3+3*n^2+3*n+1 \uff0c\u4e0d\u4f1a\u53ef\u4ee5\u5b66\u4e8c\u9879\u5f0f\u5b9a\u7406 \u6784\u9020 \\begin{cases} p[n]=1 \\\\ g1[n]=g1[n-1]*3+p[n-1] \\\\ g2[n]=g2[n-1]*3+g1[n-1] \\\\ g3[n]=g3[n-1]+g2[n] \\\\ f[n]=f[n-1]+g3[n-1] \\end{cases} \u5373\u53ef\u3002 \u6c42\u9ad8\u7ef4\u77e9\u9635\u7684\u77e9\u9635\u5feb\u901f\u5e42 Link \u5177\u4f53\u6765\u8bb2\u662f\u521d\u59cb\u77e9\u9635\u4e0d\u6b62\u4e00\u7ef4 \u6709\u6ca1\u6709\u89e3\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u8fd9\u662f\u4e2a\u663e\u7136\u4e0d\u662f\u51e0\u4e2a\u5c0f\u65f6\u80fd\u5199\u51fa\u6765\u7684\u7b97\u6cd5\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u6210\u6307\u6570\u7ea7\u66b4\u6da8 \u5177\u4f53\u6765\u8bb2\u5c31\u662f\u628a\u4e8c\u7ef4\u53d8\u6210\u4e00\u7ef4\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u7f16\u53f7\u4e4b\u540e\u5c06\u77e9\u9635\u5316\u6210\u4e00\u7ef4\u518d\u6c42\u89e3\u3002(codeforces 1152F2) 3\u3001\u6a21\u677f Link \u4e00\u5957\u81ea\u7528\u7684\u6a21\u677f\uff0c\u4e0d\u7b97\u7b80\u4fbf\u4f46\u662f\u6bd5\u7adf\u4eb2\u624b\u5199\u7684\u5f88\u719f\u6089\u3002 const int maxn = 10 ; const int mod = 1e9 + 7 ; int sz ; struct matrix { ll gg [ maxn ][ maxn ]; matrix () { memset ( gg , 0 , sizeof ( gg ));} void show () { printf ( \"* \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%lld \" , gg [ i ][ j ]); } printf ( \" \\n \" ); } } int tr () { int res = 0 ; // for (int i = 0; i < n; ++i) { // res += gg[i][i]; // } return res ; } } t1 , res ; int n , m , k ; //a * b\uff0c x\u4e3aa\u7684\u5217\u6570\uff0c y\u4e3ab\u7684\u884c\u6570\uff0ck\u4e3aa\u7684\u884c\u548cb\u7684\u5217\u6570 matrix multiply ( matrix a , matrix b , int x , int y , int kk ) { matrix temp ; //\u6784\u9020\u51fd\u6570\u6e05\u96f6 memset ( temp . gg , 0 , sizeof ( temp . gg )); for ( int i = 0 ; i < x ; ++ i ) { for ( int j = 0 ; j < y ; ++ j ) { for ( int k = 0 ; k < kk ; ++ k ) { temp . gg [ i ][ j ] = ( temp . gg [ i ][ j ] + a . gg [ i ][ k ] * b . gg [ k ][ j ]) % mod ; } } } return temp ; } void quickSolve ( ll k ) { while ( k > 0 ) { if ( k & 1 ) { res = multiply ( res , t1 , 1 , sz , sz ); } t1 = multiply ( t1 , t1 , sz , sz , sz ); k >>= 1 ; } }","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82dp/#_1","text":"\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u80fd\u7528\u6eda\u52a8\u4f18\u5316\u7684\u524d\u540e\u9879\u5173\u8054\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff0c\u800c\u4e14\u4e00\u822c\u9012\u63a8\u9879\u6570\u8fc7\u5927\u4f7f\u7528\u666e\u901a\u679a\u4e3e\u4e0d\u80fd\u89e3\u51b3\u3002 \u590d\u6742\u5ea6\uff1a \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u57fa\u672c\u601d\u60f3\u548c\u524d\u7f6e\u6280\u80fd\uff1a\u77e9\u9635\u4e58\u6cd5","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82dp/#1","text":"\u6784\u9020\u521d\u59cb\u77e9\u9635 \u6784\u9020\u9012\u63a8\u77e9\u9635 \u9012\u63a8\u77e9\u9635\u4f7f\u7528\u5feb\u901f\u5e42\u7b97\u6cd5\u9012\u63a8\u51fa\u7ed3\u679c\u77e9\u9635 \u521d\u59cb\u77e9\u9635\u4e0e\u7ed3\u679c\u77e9\u9635\u76f8\u4e58\u5f97\u5230\u6700\u7ec8\u7ed3\u679c \u51e0\u5927\u7279\u70b9 \u521d\u59cb\u77e9\u9635\u53ea\u6709\u4e00\u884c\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u4e00\u5217\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7684\u65b9\u4fbf\u6027\u548c\u4e60\u60ef\u95ee\u9898\u5e38\u91c7\u7528\u4e00\u884c\uff09\uff0c\u5217\u6570\u7531\u9012\u63a8\u5f0f\u51b3\u5b9a \u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\uff0c\u884c\u5217\u6570\u4e0e\u521d\u59cb\u77e9\u9635\u5217\u6570\u76f8\u540c \u5feb\u901f\u5e42\u771f\u7684\u662f\u5feb\u901f\u5e42\uff0c\u5c31\u662f\u6309\u7167\u500d\u589e\u7684\u601d\u60f3\u5c06\u9012\u63a8\u77e9\u9635\u53d8\u6210n\u6b21\u65b9\uff0c\u7531\u4e8e\u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\u6240\u4ee5\u662f\u5b58\u5728\u6b21\u65b9\u7684\u3002 \u7531\u4e8e\u5feb\u901f\u5e42\u4e00\u5f00\u59cb\u9700\u8981\u4e00\u4e2a\u5e7a\u5143\u4f5c\u4e3a\u521d\u59cb\u7ed3\u679c\uff0c\u5e38\u5e38\u76f4\u63a5\u628a\u521d\u59cb\u77e9\u9635\u66ff\u6362\u4e0a\u53bb\uff0c\u5e26\u5165\u8ba1\u7b97\uff0c\u6700\u7ec8\u5feb\u901f\u5e42\u7684\u7ed3\u679c\u5c31\u662f\u89e3\u3002","title":"1\u3001\u77e9\u9635\u5feb\u901f\u5e42\u7684\u57fa\u672c\u8fc7\u7a0b"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82dp/#2","text":"","title":"2\u3001\u4f8b\u9898"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82dp/#fib","text":"\u4f17\u6240\u5468\u77e5 fib[i]=fib[i-1]+fib[i-2] \uff0c\u6240\u4ee5\u76f4\u63a5\u6784\u9020\u4e0a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u50cf\u8fd9\u79cd\u7b80\u5355\u7684\u52a0\u51cf\u9012\u63a8\u7684\u8bdd\u7ef4\u6570\u5c31\u53ef\u4ee5\u7b49\u4e8e\u9012\u63a8\u5f0f\u4e2d\u7684\u9879\u6570 \u521d\u59cb\u77e9\u9635 fib[0] = 1, fib[1] = 1 \uff0c\u9012\u63a8\u77e9\u9635 \\begin{bmatrix} 0&1\\\\ 1&1\\\\ \\end{bmatrix} \u90fd\u77e5\u9053\u5de6\u884c\u4e58\u53f3\u5217\uff0c\u6240\u4ee5\u53f3\u8fb9\u7684\u7b2c\u4e00\u5217\u548c\u5de6\u8fb9\u7684\u7b2c\u4e00\u884c\u5c31\u6784\u6210\u4e86\u4e0b\u4e00\u4e2a\u9012\u63a8\u7684\u6570\uff0c\u4ece fib[0] fib[1] \u53d8\u6210 fib[1] fib[2] \uff0c\u8fd9\u6837\u4ee5\u6765\u5c31\u53ef\u4ee5\u5199\u51fa\u9012\u63a8\u77e9\u9635\u4e86\u3002","title":"\u6c42\u5927fib\u6570"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82dp/#fn-fn-1-n3fn-fn-1-n3","text":"\u5177\u4f53\u662f\u4e0d\u662f\u6211\u4e5f\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f46\u662f\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff0c\u50cf\u8fd9\u79cd\u5e26\u975e\u5e38\u6570\u6b21\u65b9\u7684\u4e1c\u897f\u8bb2\u4e2a\u9053\u7406\u786e\u5b9e\u6bd4\u8f83\u96be\u6784\u9020\u9012\u63a8\u77e9\u9635 \u7531\u4e8e (n+1)^3=n^3+3*n^2+3*n+1 (n+1)^3=n^3+3*n^2+3*n+1 \uff0c\u4e0d\u4f1a\u53ef\u4ee5\u5b66\u4e8c\u9879\u5f0f\u5b9a\u7406 \u6784\u9020 \\begin{cases} p[n]=1 \\\\ g1[n]=g1[n-1]*3+p[n-1] \\\\ g2[n]=g2[n-1]*3+g1[n-1] \\\\ g3[n]=g3[n-1]+g2[n] \\\\ f[n]=f[n-1]+g3[n-1] \\end{cases} \u5373\u53ef\u3002","title":"\u6c42f[n] = f[n-1] + n^3f[n] = f[n-1] + n^3"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82dp/#_2","text":"\u5177\u4f53\u6765\u8bb2\u662f\u521d\u59cb\u77e9\u9635\u4e0d\u6b62\u4e00\u7ef4 \u6709\u6ca1\u6709\u89e3\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u8fd9\u662f\u4e2a\u663e\u7136\u4e0d\u662f\u51e0\u4e2a\u5c0f\u65f6\u80fd\u5199\u51fa\u6765\u7684\u7b97\u6cd5\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u6210\u6307\u6570\u7ea7\u66b4\u6da8 \u5177\u4f53\u6765\u8bb2\u5c31\u662f\u628a\u4e8c\u7ef4\u53d8\u6210\u4e00\u7ef4\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u7f16\u53f7\u4e4b\u540e\u5c06\u77e9\u9635\u5316\u6210\u4e00\u7ef4\u518d\u6c42\u89e3\u3002(codeforces 1152F2)","title":"\u6c42\u9ad8\u7ef4\u77e9\u9635\u7684\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal%20Page/badcw/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82dp/#3","text":"\u4e00\u5957\u81ea\u7528\u7684\u6a21\u677f\uff0c\u4e0d\u7b97\u7b80\u4fbf\u4f46\u662f\u6bd5\u7adf\u4eb2\u624b\u5199\u7684\u5f88\u719f\u6089\u3002 const int maxn = 10 ; const int mod = 1e9 + 7 ; int sz ; struct matrix { ll gg [ maxn ][ maxn ]; matrix () { memset ( gg , 0 , sizeof ( gg ));} void show () { printf ( \"* \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%lld \" , gg [ i ][ j ]); } printf ( \" \\n \" ); } } int tr () { int res = 0 ; // for (int i = 0; i < n; ++i) { // res += gg[i][i]; // } return res ; } } t1 , res ; int n , m , k ; //a * b\uff0c x\u4e3aa\u7684\u5217\u6570\uff0c y\u4e3ab\u7684\u884c\u6570\uff0ck\u4e3aa\u7684\u884c\u548cb\u7684\u5217\u6570 matrix multiply ( matrix a , matrix b , int x , int y , int kk ) { matrix temp ; //\u6784\u9020\u51fd\u6570\u6e05\u96f6 memset ( temp . gg , 0 , sizeof ( temp . gg )); for ( int i = 0 ; i < x ; ++ i ) { for ( int j = 0 ; j < y ; ++ j ) { for ( int k = 0 ; k < kk ; ++ k ) { temp . gg [ i ][ j ] = ( temp . gg [ i ][ j ] + a . gg [ i ][ k ] * b . gg [ k ][ j ]) % mod ; } } } return temp ; } void quickSolve ( ll k ) { while ( k > 0 ) { if ( k & 1 ) { res = multiply ( res , t1 , 1 , sz , sz ); } t1 = multiply ( t1 , t1 , sz , sz , sz ); k >>= 1 ; } }","title":"3\u3001\u6a21\u677f"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/","text":"kmp\u7b97\u6cd5 Link \u89c9\u5f97\u81ea\u5df1\u5b57\u7b26\u4e32\u592a\u83dc\u4e86\u8ddf\u7740\u7b97\u5bfc\u91cd\u5b66\u4e00\u904d \u7b97\u6cd5\u7b80\u8ff0 Link \u5229\u7528next\u6570\u7ec4\u7ebf\u6027\u7684\u89e3\u51b3\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898 \u5b9a\u4e49\u539f\u4e32 T[1...n] \uff0c\u6a21\u5f0f\u4e32 P\uff08pattern\uff09[1...m] \uff0c\u82e5\u51fa\u73b0 T[s+1...s+m] = P[1...m] \u5219\u79f0\u6b64\u4e3a\u4e00\u6b21\u6210\u529f\u7684\u5339\u914d\uff0cs\u79f0\u4f5c\u6709\u6548\u504f\u79fb\u3002 \u66b4\u529b\u590d\u6742\u5ea6\u662f O\uff08n\u00d7m\uff09 \u5373\u5bf9\u4e8e\u539f\u4e32\u7684\u6bcf\u4e2a\u5b50\u4e32\u505a\u4e00\u6b21\u5faa\u73af\u7684\u5339\u914d\u3002 \u7b97\u6cd5\u5b9e\u73b0 Link next\u6570\u7ec4\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u5f0f\u4e32 P \uff0c\u5b83\u7684\u524d i \u9879\u79f0\u4f5c P_i \uff0c next[i] \u5c31\u8868\u793a\u6700\u5927\u7684 next[i] \u4f7f\u5f97 P_{next[i]} \u662f P_i \u7684\u540e\u7f00\uff0c\u5b9a\u4e49 next[0] \u4e3a-1 \u4f8b\u5982\u4e32 ababaca \u7684next\u6570\u7ec41\u52307\u9879\u4e3a\uff1a 0012301 \u5df2\u77e5 P[1...q] \u4e0e T[s+1...s+q] \u5339\u914d\uff0c\u800c P[q+1] != T[s+q+1] \uff0c\u5219\u5c06 T \u540e\u79fb\u4e00\u4f4d\u7684\u540c\u65f6\u5c06 q \u53d8\u4e3a next[q] \u5373\u53ef\u53d1\u73b0 P[1...next[q]] \u4e0e T[s'+1, s'+k] \u5339\u914d\uff08\u5176\u4e2d s'+k = s+q \uff09\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5 O(m) \u9884\u5904\u7406 O(n) \u8ba1\u7b97\u7ed3\u679c\u4e86\u3002 getNext\u4ee3\u7801\uff1a int nex [ maxm ]; void getNext ( char * s , int len ) { int i = 0 , j = - 1 ; nex [ i ] = j ; while ( i < len ) { if ( j == - 1 || s [ i ] == s [ j ]) nex [ ++ i ] = ++ j ; else j = nex [ j ]; } } \u5339\u914d\u4ee3\u7801\uff1a // a\u4e3a\u539f\u4e32\uff0cb\u4e3a\u6a21\u5f0f\u4e32\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u6a21\u5f0f\u4e32\u7684\u4f4d\u7f6e\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1 int KMP ( char * a , char * b , int n , int m ) { getNext ( b , m ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( j == - 1 || a [ i ] == b [ j ]) ++ i , ++ j ; else j = nxt [ j ]; } return j == m ? i - m + 1 : - 1 ; } \u4f8b\u9898 Link \uff08\u7531\u4e8e\u672c\u6587\u64b0\u5199\u65f6vjudge\u6302\u4e86\uff0c\u6ca1\u6709\u5728vj\u4e0a\u6302\u9898\uff09 https://vjudge.net/contest/328570 luoguP3375 Link \u9898\u610f\uff1a\u6c42\u51fa\u6240\u6709\u6a21\u5f0f\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5e76\u8f93\u51fanext\u6570\u7ec4 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1atest.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/22/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} // nxt[0]\u8868\u793a\u5931\u914d\u5230\u5b8c\u5168\u4e0d\u5339\u914d int nxt [ maxn ]; void getNext ( char * s , int len ) { int i = 0 , j = - 1 ; nxt [ i ] = j ; while ( i < len ) { if ( j == - 1 || s [ i ] == s [ j ]) nxt [ ++ i ] = ++ j ; else j = nxt [ j ]; } } // a\u4e3a\u539f\u4e32\uff0cb\u4e3a\u6a21\u5f0f\u4e32\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u6a21\u5f0f\u4e32\u7684\u4f4d\u7f6e\uff08\u8d77\u70b9\u4e3a1\uff09\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1 int KMP ( char * a , char * b , int n , int m ) { getNext ( b , m ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( j == - 1 || a [ i ] == b [ j ]) ++ i , ++ j ; else j = nxt [ j ]; if ( j == m ) { printf ( \"%d \\n \" , i - m + 1 ); j = nxt [ j ]; } } return j == m ? i - m + 1 : - 1 ; } char s [ maxn ], p [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%s%s\" , s , p ); int lens = strlen ( s ), lenp = strlen ( p ); KMP ( s , p , lens , lenp ); for ( int i = 1 ; i <= lenp ; ++ i ) printf ( \"%d%c\" , nxt [ i ], i == lenp ? '\\n' : ' ' ); return 0 ; } A - Oulipo Link \u9898\u610f\uff1a\u6c42p\u5728s\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u9898\u89e3\uff1akmp\u626b\u626b\u626b O(n) B - Number Sequence Link \u9898\u610f\uff1a\u6c42p\u5728s\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807 \u9898\u89e3\uff1akmp\u626b\u5230\u7b2c\u4e00\u6b21j=m\u505c C - Period Link \u9898\u610f\uff1a\u7ed9\u5b9as\uff0c\u6c42s\u7684\u6bcf\u4e2a\u524d\u7f00\u7684\u6700\u5c0f\u5faa\u73af\u8282\u4f7f\u5f97\u4efb\u610f\u4e2a\u8fd9\u6837\u7684\u5faa\u73af\u8282\u5e76\u884c\u62fc\u6210\u8fd9\u4e2a\u524d\u7f00\uff0c\u5176\u4e2d\u524d\u7f00\u672c\u8eab\u4e0d\u7b97\u3002 \u9898\u89e3\uff1akmp\u6c42\u6700\u5c0f\u5faa\u73af\u8282\uff0c len - nxt[len] \u5c31\u662f\u8be5\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282\u5927\u5c0f\u3002\u5224\u4e00\u4e0b\u80fd\u6574\u9664\u5373\u662f\u89e3\u3002 D - Power Strings Link \u9898\u610f\uff1a\u7ed9\u5b9as\u6c42\u6700\u5927\u5faa\u73af\u6b21\u6570 \u9898\u89e3\uff1akmp\u6c42\u6700\u5c0f\u5faa\u73af\u8282 F - Cyclic Nacklace Link \u9898\u610f\uff1a\u6c42\u6700\u5c11\u8865\u591a\u5c11\u5b57\u7b26\u4f7f\u539f\u4e32\u6210\u4e3a\u5faa\u73af\u4e32 \u9898\u89e3\uff1a\u6c42\u51fa\u6700\u5c0f\u5faa\u73af\u8282\u7136\u540e\u968f\u4fbf\u5199\u4e00\u4e0b G - Simpsons\u2019 Hidden Talents Link \u9898\u610f\uff1a\u7ed9s\u548cp\u4e32\uff0c\u6c42p\u4e32\u7684\u524d\u7f00\u7b49\u4e8es\u7684\u540e\u7f00\u7684\u6700\u5927\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u6c42\u51fap\u4e32\u7684next\u6570\u7ec4\uff0c\u5bf9\u7740s\u8dd1\u4e00\u904d\uff0c\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u8f93\u51fa\u5f53\u524dj\u5373\u53ef\u3002 H - Milking Grid Link \u9898\u610f\uff1a\u7ed9\u4e8c\u7ef4\u4e32s\uff0c\u6c42\u6700\u5c0f\u7684\u5de6\u4e0a\u89d2\u77e9\u9635\u4f7f\u5f97\u5b83\u662f\u6574\u4e2a\u77e9\u9635\u7684\u4e00\u4e2a\u5faa\u73af\u8282\u3002 \u9898\u89e3\uff1a\u884c\u5217\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u8003\u8651\u5355\u7ef4\u7684\u4e32\u5373\u53ef\u3002\u7528hash\u5c06\u884c\u6216\u5217\u5904\u7406\u6210\u5355\u4e2a\u5b57\u7b26\u5373\u53ef\u3002\u6700\u5c0f\u503c\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002 I - Theme Section Link \u9898\u610f\uff1a\u7ed9\u4e32s\u6c42\u62c6\u5206\u5f62\u5982XAXBX\u7684\u6700\u957fX\u7684\u957f\u5ea6 \u9898\u89e3\uff1anxt\u6570\u7ec4\u6c42\u51fa\u6765\u540e\uff0c\u9996\u5c3e\u90fd\u662fX\u5373nxt\u4ece\u5c3e\u90e8\u5f80\u524d\u8df3\uff0c\u7136\u540e\u6c42\u51fa\u90a3\u6bb5\u533a\u95f4\u5185\u4e2d\u95f4\u6709nxt\u4e0e\u5f53\u524d\u957f\u5ea6\u76f8\u7b49\u7684\u70b9\u5373\u662f\u7b54\u6848\u3002 J - A Secret Link \u9898\u610f\uff1a\u7ed9s\u548cp\u6c42p\u7684\u6240\u6709\u540e\u7f00\u5728s\u4e2d\u51fa\u73b0\u7684\u4e2a\u6570\u00d7p\u7684\u540e\u7f00\u957f\u5ea6\u7684\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u5bf9s\u548cp\u90fd\u7ffb\u8f6c\uff0c\u6c42s\u7684\u6bcf\u4e2a\u524d\u7f00\u5bf9p\u7684\u524d\u7f00\u7684\u6700\u5927\u5339\u914d\u5ea6\uff0c\u4fdd\u5b58\u5728\u540e\u7f00\u6570\u7ec4\u4e2d\uff0c\u5bf9\u540e\u7f00\u6570\u7ec4\u5012\u7740\u5f80\u524d\u7ebf\u6027\u626b\u4e00\u6b21\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\uff0c\u56e0\u4e3a\u540e\u7f00\u7684i\u5982\u679c\u6709\u5339\u914d\u5fc5\u80fd\u5339\u914d\u5230nxt[i]\uff0c\u6240\u4ee5\u52a0\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u5904\u540e\u7f00\u6570\u7ec4\u53ea\u662f\u53d6\u5b83\u5b57\u9762\u610f\u601d\u3002 K - Bazinga Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u4e32\uff0c\u6c42\u6700\u5927\u4e0b\u6807\u6ee1\u8db3\u524d\u9762\u7684\u4e32\u6709\u4e0d\u662f\u5b83\u7684\u5b50\u4e32\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u5982\u679cs_i\u662fs_{i+1}\u7684\u5b50\u4e32\uff0c\u5bf9s_{i+1}\u53ca\u4ee5\u540e\u7684\u4e32\u90fd\u4e0es_i\u65e0\u5173\uff0c\u6240\u4ee5\u505a\u4e00\u4e2a\u526a\u679d\u5373\u53ef\uff0c\u6700\u574f\u60c5\u51b5\u4e5f\u53ea\u6709 O(n*len)","title":"Kmp"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#kmp","text":"\u89c9\u5f97\u81ea\u5df1\u5b57\u7b26\u4e32\u592a\u83dc\u4e86\u8ddf\u7740\u7b97\u5bfc\u91cd\u5b66\u4e00\u904d","title":"kmp\u7b97\u6cd5"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#_1","text":"\u5229\u7528next\u6570\u7ec4\u7ebf\u6027\u7684\u89e3\u51b3\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898 \u5b9a\u4e49\u539f\u4e32 T[1...n] \uff0c\u6a21\u5f0f\u4e32 P\uff08pattern\uff09[1...m] \uff0c\u82e5\u51fa\u73b0 T[s+1...s+m] = P[1...m] \u5219\u79f0\u6b64\u4e3a\u4e00\u6b21\u6210\u529f\u7684\u5339\u914d\uff0cs\u79f0\u4f5c\u6709\u6548\u504f\u79fb\u3002 \u66b4\u529b\u590d\u6742\u5ea6\u662f O\uff08n\u00d7m\uff09 \u5373\u5bf9\u4e8e\u539f\u4e32\u7684\u6bcf\u4e2a\u5b50\u4e32\u505a\u4e00\u6b21\u5faa\u73af\u7684\u5339\u914d\u3002","title":"\u7b97\u6cd5\u7b80\u8ff0"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#_2","text":"next\u6570\u7ec4\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u5f0f\u4e32 P \uff0c\u5b83\u7684\u524d i \u9879\u79f0\u4f5c P_i \uff0c next[i] \u5c31\u8868\u793a\u6700\u5927\u7684 next[i] \u4f7f\u5f97 P_{next[i]} \u662f P_i \u7684\u540e\u7f00\uff0c\u5b9a\u4e49 next[0] \u4e3a-1 \u4f8b\u5982\u4e32 ababaca \u7684next\u6570\u7ec41\u52307\u9879\u4e3a\uff1a 0012301 \u5df2\u77e5 P[1...q] \u4e0e T[s+1...s+q] \u5339\u914d\uff0c\u800c P[q+1] != T[s+q+1] \uff0c\u5219\u5c06 T \u540e\u79fb\u4e00\u4f4d\u7684\u540c\u65f6\u5c06 q \u53d8\u4e3a next[q] \u5373\u53ef\u53d1\u73b0 P[1...next[q]] \u4e0e T[s'+1, s'+k] \u5339\u914d\uff08\u5176\u4e2d s'+k = s+q \uff09\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5 O(m) \u9884\u5904\u7406 O(n) \u8ba1\u7b97\u7ed3\u679c\u4e86\u3002 getNext\u4ee3\u7801\uff1a int nex [ maxm ]; void getNext ( char * s , int len ) { int i = 0 , j = - 1 ; nex [ i ] = j ; while ( i < len ) { if ( j == - 1 || s [ i ] == s [ j ]) nex [ ++ i ] = ++ j ; else j = nex [ j ]; } } \u5339\u914d\u4ee3\u7801\uff1a // a\u4e3a\u539f\u4e32\uff0cb\u4e3a\u6a21\u5f0f\u4e32\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u6a21\u5f0f\u4e32\u7684\u4f4d\u7f6e\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1 int KMP ( char * a , char * b , int n , int m ) { getNext ( b , m ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( j == - 1 || a [ i ] == b [ j ]) ++ i , ++ j ; else j = nxt [ j ]; } return j == m ? i - m + 1 : - 1 ; }","title":"\u7b97\u6cd5\u5b9e\u73b0"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#_3","text":"\uff08\u7531\u4e8e\u672c\u6587\u64b0\u5199\u65f6vjudge\u6302\u4e86\uff0c\u6ca1\u6709\u5728vj\u4e0a\u6302\u9898\uff09 https://vjudge.net/contest/328570","title":"\u4f8b\u9898"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#luogup3375","text":"\u9898\u610f\uff1a\u6c42\u51fa\u6240\u6709\u6a21\u5f0f\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5e76\u8f93\u51fanext\u6570\u7ec4 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1atest.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/22/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} // nxt[0]\u8868\u793a\u5931\u914d\u5230\u5b8c\u5168\u4e0d\u5339\u914d int nxt [ maxn ]; void getNext ( char * s , int len ) { int i = 0 , j = - 1 ; nxt [ i ] = j ; while ( i < len ) { if ( j == - 1 || s [ i ] == s [ j ]) nxt [ ++ i ] = ++ j ; else j = nxt [ j ]; } } // a\u4e3a\u539f\u4e32\uff0cb\u4e3a\u6a21\u5f0f\u4e32\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u6a21\u5f0f\u4e32\u7684\u4f4d\u7f6e\uff08\u8d77\u70b9\u4e3a1\uff09\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1 int KMP ( char * a , char * b , int n , int m ) { getNext ( b , m ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( j == - 1 || a [ i ] == b [ j ]) ++ i , ++ j ; else j = nxt [ j ]; if ( j == m ) { printf ( \"%d \\n \" , i - m + 1 ); j = nxt [ j ]; } } return j == m ? i - m + 1 : - 1 ; } char s [ maxn ], p [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%s%s\" , s , p ); int lens = strlen ( s ), lenp = strlen ( p ); KMP ( s , p , lens , lenp ); for ( int i = 1 ; i <= lenp ; ++ i ) printf ( \"%d%c\" , nxt [ i ], i == lenp ? '\\n' : ' ' ); return 0 ; }","title":"luoguP3375"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#a-oulipo","text":"\u9898\u610f\uff1a\u6c42p\u5728s\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u9898\u89e3\uff1akmp\u626b\u626b\u626b O(n)","title":"A - Oulipo"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#b-number-sequence","text":"\u9898\u610f\uff1a\u6c42p\u5728s\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807 \u9898\u89e3\uff1akmp\u626b\u5230\u7b2c\u4e00\u6b21j=m\u505c","title":"B - Number Sequence"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#c-period","text":"\u9898\u610f\uff1a\u7ed9\u5b9as\uff0c\u6c42s\u7684\u6bcf\u4e2a\u524d\u7f00\u7684\u6700\u5c0f\u5faa\u73af\u8282\u4f7f\u5f97\u4efb\u610f\u4e2a\u8fd9\u6837\u7684\u5faa\u73af\u8282\u5e76\u884c\u62fc\u6210\u8fd9\u4e2a\u524d\u7f00\uff0c\u5176\u4e2d\u524d\u7f00\u672c\u8eab\u4e0d\u7b97\u3002 \u9898\u89e3\uff1akmp\u6c42\u6700\u5c0f\u5faa\u73af\u8282\uff0c len - nxt[len] \u5c31\u662f\u8be5\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282\u5927\u5c0f\u3002\u5224\u4e00\u4e0b\u80fd\u6574\u9664\u5373\u662f\u89e3\u3002","title":"C - Period"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#d-power-strings","text":"\u9898\u610f\uff1a\u7ed9\u5b9as\u6c42\u6700\u5927\u5faa\u73af\u6b21\u6570 \u9898\u89e3\uff1akmp\u6c42\u6700\u5c0f\u5faa\u73af\u8282","title":"D - Power Strings"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#f-cyclic-nacklace","text":"\u9898\u610f\uff1a\u6c42\u6700\u5c11\u8865\u591a\u5c11\u5b57\u7b26\u4f7f\u539f\u4e32\u6210\u4e3a\u5faa\u73af\u4e32 \u9898\u89e3\uff1a\u6c42\u51fa\u6700\u5c0f\u5faa\u73af\u8282\u7136\u540e\u968f\u4fbf\u5199\u4e00\u4e0b","title":"F - Cyclic Nacklace"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#g-simpsons-hidden-talents","text":"\u9898\u610f\uff1a\u7ed9s\u548cp\u4e32\uff0c\u6c42p\u4e32\u7684\u524d\u7f00\u7b49\u4e8es\u7684\u540e\u7f00\u7684\u6700\u5927\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u6c42\u51fap\u4e32\u7684next\u6570\u7ec4\uff0c\u5bf9\u7740s\u8dd1\u4e00\u904d\uff0c\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u8f93\u51fa\u5f53\u524dj\u5373\u53ef\u3002","title":"G - Simpsons\u2019 Hidden Talents"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#h-milking-grid","text":"\u9898\u610f\uff1a\u7ed9\u4e8c\u7ef4\u4e32s\uff0c\u6c42\u6700\u5c0f\u7684\u5de6\u4e0a\u89d2\u77e9\u9635\u4f7f\u5f97\u5b83\u662f\u6574\u4e2a\u77e9\u9635\u7684\u4e00\u4e2a\u5faa\u73af\u8282\u3002 \u9898\u89e3\uff1a\u884c\u5217\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u8003\u8651\u5355\u7ef4\u7684\u4e32\u5373\u53ef\u3002\u7528hash\u5c06\u884c\u6216\u5217\u5904\u7406\u6210\u5355\u4e2a\u5b57\u7b26\u5373\u53ef\u3002\u6700\u5c0f\u503c\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002","title":"H - Milking Grid"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#i-theme-section","text":"\u9898\u610f\uff1a\u7ed9\u4e32s\u6c42\u62c6\u5206\u5f62\u5982XAXBX\u7684\u6700\u957fX\u7684\u957f\u5ea6 \u9898\u89e3\uff1anxt\u6570\u7ec4\u6c42\u51fa\u6765\u540e\uff0c\u9996\u5c3e\u90fd\u662fX\u5373nxt\u4ece\u5c3e\u90e8\u5f80\u524d\u8df3\uff0c\u7136\u540e\u6c42\u51fa\u90a3\u6bb5\u533a\u95f4\u5185\u4e2d\u95f4\u6709nxt\u4e0e\u5f53\u524d\u957f\u5ea6\u76f8\u7b49\u7684\u70b9\u5373\u662f\u7b54\u6848\u3002","title":"I - Theme Section"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#j-a-secret","text":"\u9898\u610f\uff1a\u7ed9s\u548cp\u6c42p\u7684\u6240\u6709\u540e\u7f00\u5728s\u4e2d\u51fa\u73b0\u7684\u4e2a\u6570\u00d7p\u7684\u540e\u7f00\u957f\u5ea6\u7684\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u5bf9s\u548cp\u90fd\u7ffb\u8f6c\uff0c\u6c42s\u7684\u6bcf\u4e2a\u524d\u7f00\u5bf9p\u7684\u524d\u7f00\u7684\u6700\u5927\u5339\u914d\u5ea6\uff0c\u4fdd\u5b58\u5728\u540e\u7f00\u6570\u7ec4\u4e2d\uff0c\u5bf9\u540e\u7f00\u6570\u7ec4\u5012\u7740\u5f80\u524d\u7ebf\u6027\u626b\u4e00\u6b21\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\uff0c\u56e0\u4e3a\u540e\u7f00\u7684i\u5982\u679c\u6709\u5339\u914d\u5fc5\u80fd\u5339\u914d\u5230nxt[i]\uff0c\u6240\u4ee5\u52a0\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u5904\u540e\u7f00\u6570\u7ec4\u53ea\u662f\u53d6\u5b83\u5b57\u9762\u610f\u601d\u3002","title":"J - A Secret"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#k-bazinga","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u4e32\uff0c\u6c42\u6700\u5927\u4e0b\u6807\u6ee1\u8db3\u524d\u9762\u7684\u4e32\u6709\u4e0d\u662f\u5b83\u7684\u5b50\u4e32\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u5982\u679cs_i\u662fs_{i+1}\u7684\u5b50\u4e32\uff0c\u5bf9s_{i+1}\u53ca\u4ee5\u540e\u7684\u4e32\u90fd\u4e0es_i\u65e0\u5173\uff0c\u6240\u4ee5\u505a\u4e00\u4e2a\u526a\u679d\u5373\u53ef\uff0c\u6700\u574f\u60c5\u51b5\u4e5f\u53ea\u6709 O(n*len)","title":"K - Bazinga"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/","text":"\u56de\u6587\u6811 Link \u7b97\u6cd5\u7b80\u8ff0 Link \u5229\u7528fail\u6307\u9488\u7ebf\u6027\u5730\u89e3\u51b3\u4e00\u5207\u56de\u6587\u4e32\u8ba1\u6570\u95ee\u9898\u3002 \u522b\u79f0\uff1a\u56de\u6587\u81ea\u52a8\u673a\u3001PAM \u662f\u53ef\u4ee5\u5b8c\u5168\u66ff\u4ee3Maracher\u7b97\u6cd5\u7684\u4e0a\u4f4d\u7b97\u6cd5\uff0c\u9664\u4e86\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4f18\u4e8eMaracher\u7b97\u6cd5\u3002 \u7b97\u6cd5\u5b9e\u73b0 Link \u57fa\u7840\u9700\u8981\u7684\u6570\u7ec4\u5982\u4e0b int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6210\uff0cN\u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 \u56de\u6587\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u4ee3\u8868\u4e00\u4e2a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\uff0c\u5176\u4e2d0\u8282\u70b9\u8868\u793a\u7a7a\u957f\u56de\u6587\u4e32\uff0c1\u8868\u793a\u5947\u6570\u7a7a\u957f\u56de\u6587\u4e32\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u3002 \u5728\u56de\u6587\u6811\u4e2d\u589e\u52a0\u65b0\u8282\u70b9 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; cnt [ p ] = 0 ; num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } \u521d\u59cb\u5316\u56de\u6587\u6811 void init () { //\u521d\u59cb\u5316 p = 0 ; newnode ( 0 ); // \u5076\u6570\u7a7a\u4e32 newnode ( - 1 ); // \u5947\u6570\u7a7a\u4e32 last = 0 ; n = 0 ; S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; // \u5076\u6570\u7a7a\u4e32\u7684fail\u6307\u9488\u6307\u5411\u5947\u6570\u7a7a\u4e32 } \u83b7\u53d6\u5931\u914dfail\u6307\u9488 int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } \u5f80\u56de\u6587\u4e32\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 void add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } last = next [ cur ][ c ]; // last\u6307\u9488\u8868\u793a\u5f53\u524d\u65b0\u589e\u56de\u6587\u4e32\u7684\u4f4d\u7f6e } \u590d\u6742\u5ea6\u8bc1\u660e Link \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u4e32\uff0c\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7n\uff0c\u6700\u591a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\u4e2a\u6570\u4e0d\u8d85\u8fc7n\uff0c\u76f8\u540c\u56de\u6587\u4e32\u4e2a\u6570\u4e0d\u8d85\u8fc7n\uff0c\u6574\u4e2a\u7b97\u6cd5\u7c7b\u4f3ckmp\u5339\u914d\u7684\u5931\u914d\u8fd0\u7b97\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n*\u5b57\u7b26\u96c6\u5927\u5c0f) \u4f8b\u9898 Link https://vjudge.net/contest/292544 A - Palisection Link \u9898\u610f\uff1a\u6c42\u4e00\u4e2a\u4e32\u6240\u6709\u56de\u6587\u5b50\u4e32\u4e24\u4e24\u76f8\u4ea4\u7684\u5bf9\u6570 \u9898\u89e3\uff1a\u6b63\u5411\u5efa\u7acb\u56de\u6587\u6811\uff0c\u4fdd\u5b58\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 a \uff0c\u518d\u53cd\u5411\u5efa\u7acb\u56de\u6587\u6811\u4fdd\u5b58\u540e\u7f00\u56de\u6587\u4e32\u4e2a\u6570 b \uff0c\u5219\u603b\u6570\u4e3a sum*(sum-1)/2 - \\sum {a_i * b_{i+1}} sum*(sum-1)/2 - \\sum {a_i * b_{i+1}} \uff0c\u6ce8\u610f\u6b64\u9898\u5361\u4e86\u56de\u6587\u6811\u5185\u5b58\uff0c\u9700\u8981\u4e00\u4e9b\u5947\u6280\u6deb\u5de7\u7528\u65f6\u95f4\u6362\u53d6\u7a7a\u95f4\u3002 \u4f7f\u7528vector\u4fdd\u5b58next\u6570\u7ec4\u4ee5\u7b80\u5316\u7a7a\u95f4\uff0cfirst\u662f\u5b57\u7b26\uff0csecond\u662f\u503c\u5373\u53ef\u3002 vector < pair < int , int > > next [ maxn ]; \u5404\u79cd\u64cd\u4f5c\u90fd\u4f1a\u53d8\u5f97\u590d\u6742\u4e00\u4e9b\u4f46\u662f\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u7b97\u6ee1\u4e5f\u5c31\u662f\u591a\u4e86\u4e2a\u5b57\u7b26\u96c6\u7684\u5e38\u6570\u3002 B - Palindromes and Super Abilities Link \u9898\u610f\uff1a\u6c42\u524d\u7f00\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u76f4\u63a5\u5efa\u7acb\u56de\u6587\u6811\u7684\u8fc7\u7a0b\u4e2d\u8f93\u51fap-2\u5373\u53ef C - CA Loves Palindromic Link \u9898\u610f\uff1a\u6c42\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u4e32\u957f1000\uff0c\u5bf9\u6240\u6709\u7684\u5b50\u4e32\u5efa\u7acb\u56de\u6587\u6811\u4fdd\u5b58p-2\uff0c\u5bf9\u8be2\u95ee\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u3002 D - \u56de\u6587\u4e32 Link \u9898\u610f\uff1a\u6c42\u67d0\u79cd\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u00d7\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5efa\u7acb\u56de\u6587\u6811\u540e\u5bf9p-2\u4e2a\u8282\u70b9\u8ba1\u7b97len\u00d7cnt\u7684\u6700\u5927\u503c\u3002 E - Trie in Tina Town Link \u9898\u610f\uff1a\u7ed9\u4e00\u68f5trie\uff0c\u6c42\u4ece\u67d0\u4e2a\u70b9\u5230\u5b83\u67d0\u4e2a\u5b50\u8282\u70b9\u4e3a\u56de\u6587\u4e32\u7684\u957f\u5ea6\u548c\u3002 \u9898\u89e3\uff1adfs\u65f6\u5e26\u56de\u9000\u7684\u5efa\u7acb\u56de\u6587\u6811\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u5e26\u4fee\uff08popback\u548cpushback\uff09\u7684\u6c42\u4e00\u4e2a\u4e32\u7684\u56de\u6587\u4e32\u957f\u5ea6\u00d7\u51fa\u73b0\u6b21\u6570\u7684\u548c\u3002\u8fd9\u4e2a\u95ee\u9898\u53ea\u9700\u8981\u628alast\u6539\u4e3a\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u957f\u5ea6\u5efa\u7acb\u4e0d\u540c\u7684last\uff0c\u7136\u540e\u52a8\u6001\u7684\u7edf\u8ba1\u6240\u6709len\u7684\u548c\u5373\u53ef\u3002 F - \u6700\u957f\u53cc\u56de\u6587\u4e32 Link \u9898\u610f\uff1a\u7ed9\u4e32s\uff0c\u6c42x\uff0cy\u90fd\u4e3a\u56de\u6587\u4e32\u4e14x+y\u4e3as\u7684\u5b50\u4e32\u4e2d len(x+y) \u7684\u6700\u5927\u503c \u9898\u89e3\uff1a\u6b63\u53cd\u5efa\u7acb\u56de\u6587\u6811\u6c42\u548c G - \u62c9\u62c9\u961f\u6392\u7ec3 Link \u9898\u610f\uff1a\u6c42\u524dm\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u79ef\u3002 \u9898\u89e3\uff1a\u6c42\u51fa\u6240\u6709\u975e\u91cd\u56de\u6587\u5b50\u4e32\u53ca\u6570\u91cf\u3001\u957f\u5ea6\u3002\u4fdd\u5b58\u5230\u6570\u7ec4\u6700\u591a\u53ea\u6709\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6n\u9879\u3002 H - Harry and magic string Link \u9898\u610f\uff1a\u7ed9\u4e32s\uff0c\u6c42\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u5b50\u56de\u6587\u4e32\u7684\u5bf9\u6570\u3002 \u9898\u89e3\uff1a\u6b63\u53cd\u5efa\u7acb\u56de\u6587\u6811\u6c42\u524d\u540e\u7f00\uff0c\u79ef\u548c\u5373\u53ef\u3002 I - Victor and String Link \u9898\u610f\uff1a\u9996\u5148\u662f\u4e00\u4e2a\u7a7a\u4e32s\uff0cm\u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4ee5\u4e0b\u56db\u79cd - 1\u3001pushback - 2\u3001pushfront - 3\u3001\u6c42\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 - 4\u3001\u6c42\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u5199\u4e00\u4e2a\u652f\u6301\u524d\u540e\u63d2\u7684\u56de\u6587\u6811\u5c31\u53ef\u4ee5\u4e86\uff0c\u5177\u4f53\u65b9\u6cd5\u7c7b\u4f3c\u6811\u4e0a\u56de\u6587\u6811\u90a3\u9898\uff0c\u5efa\u7acb\u4e24\u4e2alast\uff0c\u5206\u522b\u8868\u793a\u524d\u7f00\u94fe\u548c\u540e\u7f00\u94fe\uff0c\u8ba9\u63d2\u5165\u64cd\u4f5c\u90fd\u53d8\u6210\u4e00\u822c\u7684add\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53\u5f53\u524d\u6574\u4e2a\u4e32\u4e3a\u56de\u6587\u4e32\u65f6\u4f1a\u5bfc\u81f4\u4e24\u4e2alast\u7ffb\u8f6c\uff0c\u9700\u8981\u628a\u67d0\u4e00\u4e2a\u8c03\u56de\u539f\u70b9\u3002 J - The Problem to Slow Down You Link \u9898\u610f\uff1a\u7ed9\u4e24\u4e2a\u4e32\uff0c\u6c42\u5176\u4e2d\u76f8\u540c\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u56de\u6587\u6811\u672c\u8d28\u4ecd\u7136\u662f\u81ea\u52a8\u673a\uff0c\u6240\u4ee5\u6ee1\u8db3trie\u6811\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u4e32\u6765\u8bf4\u4ed6\u4eec\u7684\u76f8\u540c\u56de\u6587\u5b50\u4e32\u5fc5\u7136\u662f\u540c\u6784\u7684\u90e8\u5206trie\u6811\u3002\u6240\u4ee5\u76f4\u63a5dfs\u904d\u5386trie\u6811\u5c06\u76f8\u540c\u8282\u70b9\u7684cnt\u79ef\u548c\u5373\u53ef\u3002 K - Virus synthesis Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32s\uff0c\u6c42\u4ece\u7a7a\u4e32\u5f00\u59cb\uff0c\u53ef\u4ee5pushback\u6216pushfront\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u5c06\u5f53\u524d\u4e32\u5de6\u590d\u5236\u7ffb\u8f6c\u6216\u53f3\u590d\u5236\u7ffb\u8f6c\uff0c\u5f97\u5230\u5f53\u524d\u4e32\u81f3\u5c11\u9700\u8981\u591a\u5c11\u6b65\u3002 \u9898\u89e3\uff1a\u4e0d\u4f1a\u5199 L - Palindromic Substring Link M - Contest Page Link N - Palindromes and Super Abilities 2 Link","title":"\u56de\u6587\u6811"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#_1","text":"","title":"\u56de\u6587\u6811"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#_2","text":"\u5229\u7528fail\u6307\u9488\u7ebf\u6027\u5730\u89e3\u51b3\u4e00\u5207\u56de\u6587\u4e32\u8ba1\u6570\u95ee\u9898\u3002 \u522b\u79f0\uff1a\u56de\u6587\u81ea\u52a8\u673a\u3001PAM \u662f\u53ef\u4ee5\u5b8c\u5168\u66ff\u4ee3Maracher\u7b97\u6cd5\u7684\u4e0a\u4f4d\u7b97\u6cd5\uff0c\u9664\u4e86\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4f18\u4e8eMaracher\u7b97\u6cd5\u3002","title":"\u7b97\u6cd5\u7b80\u8ff0"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#_3","text":"\u57fa\u7840\u9700\u8981\u7684\u6570\u7ec4\u5982\u4e0b int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6210\uff0cN\u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 \u56de\u6587\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u4ee3\u8868\u4e00\u4e2a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\uff0c\u5176\u4e2d0\u8282\u70b9\u8868\u793a\u7a7a\u957f\u56de\u6587\u4e32\uff0c1\u8868\u793a\u5947\u6570\u7a7a\u957f\u56de\u6587\u4e32\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u3002 \u5728\u56de\u6587\u6811\u4e2d\u589e\u52a0\u65b0\u8282\u70b9 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; cnt [ p ] = 0 ; num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } \u521d\u59cb\u5316\u56de\u6587\u6811 void init () { //\u521d\u59cb\u5316 p = 0 ; newnode ( 0 ); // \u5076\u6570\u7a7a\u4e32 newnode ( - 1 ); // \u5947\u6570\u7a7a\u4e32 last = 0 ; n = 0 ; S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; // \u5076\u6570\u7a7a\u4e32\u7684fail\u6307\u9488\u6307\u5411\u5947\u6570\u7a7a\u4e32 } \u83b7\u53d6\u5931\u914dfail\u6307\u9488 int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } \u5f80\u56de\u6587\u4e32\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 void add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } last = next [ cur ][ c ]; // last\u6307\u9488\u8868\u793a\u5f53\u524d\u65b0\u589e\u56de\u6587\u4e32\u7684\u4f4d\u7f6e }","title":"\u7b97\u6cd5\u5b9e\u73b0"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#_4","text":"\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u4e32\uff0c\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7n\uff0c\u6700\u591a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\u4e2a\u6570\u4e0d\u8d85\u8fc7n\uff0c\u76f8\u540c\u56de\u6587\u4e32\u4e2a\u6570\u4e0d\u8d85\u8fc7n\uff0c\u6574\u4e2a\u7b97\u6cd5\u7c7b\u4f3ckmp\u5339\u914d\u7684\u5931\u914d\u8fd0\u7b97\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n*\u5b57\u7b26\u96c6\u5927\u5c0f)","title":"\u590d\u6742\u5ea6\u8bc1\u660e"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#_5","text":"https://vjudge.net/contest/292544","title":"\u4f8b\u9898"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#a-palisection","text":"\u9898\u610f\uff1a\u6c42\u4e00\u4e2a\u4e32\u6240\u6709\u56de\u6587\u5b50\u4e32\u4e24\u4e24\u76f8\u4ea4\u7684\u5bf9\u6570 \u9898\u89e3\uff1a\u6b63\u5411\u5efa\u7acb\u56de\u6587\u6811\uff0c\u4fdd\u5b58\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 a \uff0c\u518d\u53cd\u5411\u5efa\u7acb\u56de\u6587\u6811\u4fdd\u5b58\u540e\u7f00\u56de\u6587\u4e32\u4e2a\u6570 b \uff0c\u5219\u603b\u6570\u4e3a sum*(sum-1)/2 - \\sum {a_i * b_{i+1}} sum*(sum-1)/2 - \\sum {a_i * b_{i+1}} \uff0c\u6ce8\u610f\u6b64\u9898\u5361\u4e86\u56de\u6587\u6811\u5185\u5b58\uff0c\u9700\u8981\u4e00\u4e9b\u5947\u6280\u6deb\u5de7\u7528\u65f6\u95f4\u6362\u53d6\u7a7a\u95f4\u3002 \u4f7f\u7528vector\u4fdd\u5b58next\u6570\u7ec4\u4ee5\u7b80\u5316\u7a7a\u95f4\uff0cfirst\u662f\u5b57\u7b26\uff0csecond\u662f\u503c\u5373\u53ef\u3002 vector < pair < int , int > > next [ maxn ]; \u5404\u79cd\u64cd\u4f5c\u90fd\u4f1a\u53d8\u5f97\u590d\u6742\u4e00\u4e9b\u4f46\u662f\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u7b97\u6ee1\u4e5f\u5c31\u662f\u591a\u4e86\u4e2a\u5b57\u7b26\u96c6\u7684\u5e38\u6570\u3002","title":"A - Palisection"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#b-palindromes-and-super-abilities","text":"\u9898\u610f\uff1a\u6c42\u524d\u7f00\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u76f4\u63a5\u5efa\u7acb\u56de\u6587\u6811\u7684\u8fc7\u7a0b\u4e2d\u8f93\u51fap-2\u5373\u53ef","title":"B - Palindromes and Super Abilities"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#c-ca-loves-palindromic","text":"\u9898\u610f\uff1a\u6c42\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u4e32\u957f1000\uff0c\u5bf9\u6240\u6709\u7684\u5b50\u4e32\u5efa\u7acb\u56de\u6587\u6811\u4fdd\u5b58p-2\uff0c\u5bf9\u8be2\u95ee\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u3002","title":"C - CA Loves Palindromic"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#d-","text":"\u9898\u610f\uff1a\u6c42\u67d0\u79cd\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u00d7\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5efa\u7acb\u56de\u6587\u6811\u540e\u5bf9p-2\u4e2a\u8282\u70b9\u8ba1\u7b97len\u00d7cnt\u7684\u6700\u5927\u503c\u3002","title":"D - \u56de\u6587\u4e32"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#e-trie-in-tina-town","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u68f5trie\uff0c\u6c42\u4ece\u67d0\u4e2a\u70b9\u5230\u5b83\u67d0\u4e2a\u5b50\u8282\u70b9\u4e3a\u56de\u6587\u4e32\u7684\u957f\u5ea6\u548c\u3002 \u9898\u89e3\uff1adfs\u65f6\u5e26\u56de\u9000\u7684\u5efa\u7acb\u56de\u6587\u6811\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u5e26\u4fee\uff08popback\u548cpushback\uff09\u7684\u6c42\u4e00\u4e2a\u4e32\u7684\u56de\u6587\u4e32\u957f\u5ea6\u00d7\u51fa\u73b0\u6b21\u6570\u7684\u548c\u3002\u8fd9\u4e2a\u95ee\u9898\u53ea\u9700\u8981\u628alast\u6539\u4e3a\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u957f\u5ea6\u5efa\u7acb\u4e0d\u540c\u7684last\uff0c\u7136\u540e\u52a8\u6001\u7684\u7edf\u8ba1\u6240\u6709len\u7684\u548c\u5373\u53ef\u3002","title":"E - Trie in Tina Town"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#f-","text":"\u9898\u610f\uff1a\u7ed9\u4e32s\uff0c\u6c42x\uff0cy\u90fd\u4e3a\u56de\u6587\u4e32\u4e14x+y\u4e3as\u7684\u5b50\u4e32\u4e2d len(x+y) \u7684\u6700\u5927\u503c \u9898\u89e3\uff1a\u6b63\u53cd\u5efa\u7acb\u56de\u6587\u6811\u6c42\u548c","title":"F - \u6700\u957f\u53cc\u56de\u6587\u4e32"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#g-","text":"\u9898\u610f\uff1a\u6c42\u524dm\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u79ef\u3002 \u9898\u89e3\uff1a\u6c42\u51fa\u6240\u6709\u975e\u91cd\u56de\u6587\u5b50\u4e32\u53ca\u6570\u91cf\u3001\u957f\u5ea6\u3002\u4fdd\u5b58\u5230\u6570\u7ec4\u6700\u591a\u53ea\u6709\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6n\u9879\u3002","title":"G - \u62c9\u62c9\u961f\u6392\u7ec3"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#h-harry-and-magic-string","text":"\u9898\u610f\uff1a\u7ed9\u4e32s\uff0c\u6c42\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u5b50\u56de\u6587\u4e32\u7684\u5bf9\u6570\u3002 \u9898\u89e3\uff1a\u6b63\u53cd\u5efa\u7acb\u56de\u6587\u6811\u6c42\u524d\u540e\u7f00\uff0c\u79ef\u548c\u5373\u53ef\u3002","title":"H - Harry and magic string"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#i-victor-and-string","text":"\u9898\u610f\uff1a\u9996\u5148\u662f\u4e00\u4e2a\u7a7a\u4e32s\uff0cm\u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4ee5\u4e0b\u56db\u79cd - 1\u3001pushback - 2\u3001pushfront - 3\u3001\u6c42\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 - 4\u3001\u6c42\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u5199\u4e00\u4e2a\u652f\u6301\u524d\u540e\u63d2\u7684\u56de\u6587\u6811\u5c31\u53ef\u4ee5\u4e86\uff0c\u5177\u4f53\u65b9\u6cd5\u7c7b\u4f3c\u6811\u4e0a\u56de\u6587\u6811\u90a3\u9898\uff0c\u5efa\u7acb\u4e24\u4e2alast\uff0c\u5206\u522b\u8868\u793a\u524d\u7f00\u94fe\u548c\u540e\u7f00\u94fe\uff0c\u8ba9\u63d2\u5165\u64cd\u4f5c\u90fd\u53d8\u6210\u4e00\u822c\u7684add\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53\u5f53\u524d\u6574\u4e2a\u4e32\u4e3a\u56de\u6587\u4e32\u65f6\u4f1a\u5bfc\u81f4\u4e24\u4e2alast\u7ffb\u8f6c\uff0c\u9700\u8981\u628a\u67d0\u4e00\u4e2a\u8c03\u56de\u539f\u70b9\u3002","title":"I - Victor and String"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#j-the-problem-to-slow-down-you","text":"\u9898\u610f\uff1a\u7ed9\u4e24\u4e2a\u4e32\uff0c\u6c42\u5176\u4e2d\u76f8\u540c\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u56de\u6587\u6811\u672c\u8d28\u4ecd\u7136\u662f\u81ea\u52a8\u673a\uff0c\u6240\u4ee5\u6ee1\u8db3trie\u6811\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u4e32\u6765\u8bf4\u4ed6\u4eec\u7684\u76f8\u540c\u56de\u6587\u5b50\u4e32\u5fc5\u7136\u662f\u540c\u6784\u7684\u90e8\u5206trie\u6811\u3002\u6240\u4ee5\u76f4\u63a5dfs\u904d\u5386trie\u6811\u5c06\u76f8\u540c\u8282\u70b9\u7684cnt\u79ef\u548c\u5373\u53ef\u3002","title":"J - The Problem to Slow Down You"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#k-virus-synthesis","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32s\uff0c\u6c42\u4ece\u7a7a\u4e32\u5f00\u59cb\uff0c\u53ef\u4ee5pushback\u6216pushfront\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u5c06\u5f53\u524d\u4e32\u5de6\u590d\u5236\u7ffb\u8f6c\u6216\u53f3\u590d\u5236\u7ffb\u8f6c\uff0c\u5f97\u5230\u5f53\u524d\u4e32\u81f3\u5c11\u9700\u8981\u591a\u5c11\u6b65\u3002 \u9898\u89e3\uff1a\u4e0d\u4f1a\u5199","title":"K - Virus synthesis"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#l-palindromic-substring","text":"","title":"L - Palindromic Substring"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#m-contest-page","text":"","title":"M - Contest Page"},{"location":"Personal%20Page/badcw/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87%E6%A0%91/#n-palindromes-and-super-abilities-2","text":"","title":"N - Palindromes and Super Abilities 2"},{"location":"Training%20Logs/Template/","text":"Name Date Solved A B C D E F G H I J Contest Name 9999/1/1 0/0 O \u00d8 . O . . . O O . A. Link solved by: xx 00:00(-x) upsolved by: Code #include <bits/stdc++.h> using namespace std ; int main () { cout << \"Hello World!\" << endl ; return 0 }","title":"Template"},{"location":"Training%20Logs/Template/#a","text":"solved by: xx 00:00(-x) upsolved by: Code #include <bits/stdc++.h> using namespace std ; int main () { cout << \"Hello World!\" << endl ; return 0 }","title":"A."},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanchang%20Regional/","text":"Name Date Solved A B C D E F G H I J K L M 2019 ICPC Asia Nanchang Regional 2019/12/11 5/13 . O O . O . O . . . . O . B. A Funny Bipartite Graph Link \u7ed9\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc73\u3002\u8981\u6c42\u9009\u53d6\u56fe\u4e2d\u7684\u4e00\u4e9b\u8fb9\uff0c\u6765\u6784\u9020\u4e00\u5f20\u65b0\u56fe\uff0c\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a \u5de6\u4fa7\u7684\u67d0\u4e9b\u70b9\u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u65b0\u56fe\u4e2d\uff1b \u53f3\u4fa7\u7684\u6240\u6709\u70b9\u5fc5\u987b\u540c\u65f6\u51fa\u73b0\u5728\u65b0\u56fe\u4e2d\uff1b \u5de6\u4fa7\u7684\u70b9\u6709\u6743\u503cw[i]\uff0c\u5728\u65b0\u56fe\u4e2d\u7684\u82b1\u8d39\u4e3a w^{d} w^{d} \uff0c\u5176\u4e2dd\u4e3a\u8be5\u70b9\u7684\u5ea6\u6570\uff1b \u6c42\u6784\u5efa\u4e00\u5f20\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u56fe\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u9898\u89e3\uff1a\u6b63\u89e3\u662fdp\uff0c\u6211\u968f\u4fbfdfs\u5e38\u89c4\u526a\u4e00\u4e0b\u679d\u5c31\u8fc7\u4e86\u566b C. And and Pair Link \u7ed9\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570n\uff0c\u6c42\u6ee1\u8db3\u5982\u4e0b\u9650\u5236\u7684\u70b9\u5bf9 (i,j) (i,j) \u7684\u6570\u91cf\uff1a 0\u2264j\u2264i\u2264n 0\u2264j\u2264i\u2264n i\\&n=i i\\&n=i i\\&j=0 i\\&j=0 \u5176\u4e2dn\u7684\u4f4d\u6570\u2264 10^5 10^5 \u9898\u89e3\uff1a\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6570n\u7684\u6bcf\u4e2a\u4ee51\u5f00\u5934\u7684\u540e\u7f00\uff0c\u5b83\u7684\u7b54\u6848\u4e3a 3^x+2^y 3^x+2^y \uff0c\u5176\u4e2d x x \u8868\u793a\u540e\u7f00\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570\uff0c y y \u8868\u793a0\u7684\u4e2a\u6570\uff0c\u6c42\u548c+1\uff08\u8868\u793a0,0\u7684\u8d21\u732e\uff09\u5373\u53ef\u3002 E. Bob\u2019s Problem Link \u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u56fe\u4e0a\u7684\u8fb9\u5206\u4e3a\u9ed1\u8fb9\u548c\u767d\u8fb9\u4e24\u7c7b\u3002\u8981\u6c42\u6784\u9020\u4e00\u5f20\u65b0\u56fe\uff0c\u5176\u4e2d\u767d\u8fb9\u7684\u6570\u91cf\u4e0d\u8d85\u8fc7k\uff0c\u4f7f\u65b0\u56fe\u4e2d\u7684\u70b9\u4e24\u4e24\u53ef\u8fbe\uff0c\u6c42\u80fd\u6784\u9020\u51fa\u7684\u65b0\u56fe\u7684\u6700\u5927\u8fb9\u6743\u3002 \u9898\u89e3\uff1a\u9996\u5148\u8fde\u4e0a\u6240\u6709\u9ed1\u8fb9\uff0c\u5bf9\u767d\u8fb9\u8dd1\u6700\u5927\u751f\u6210\u6811\uff0c\u5982\u679c\u4e0d\u5230k\u5219\u8d2a\u5fc3\u5730\u53d6\u6ca1\u6709\u53d6\u7684\u767d\u8fb9\u3002\u8bb0\u5f97\u5224\u56fe\u662f\u5426\u8fde\u901a\u3002 G. Eating Plan Link \u7ed9\u4e00\u4e2a\u5e8f\u5217a\uff0ca\u4e3a1-n\u7684\u67d0\u4e2a\u6392\u5217\uff0c b_i=a_i! b_i=a_i! \u4e00\u5171\u7ed9\u51fam\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u8be5\u5e8f\u5217\u6700\u77ed\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u4e32( (b_l+b_{l+1}+...+b_r)\\%t \u2265k (b_l+b_{l+1}+...+b_r)\\%t \u2265k )\u7684\u5b50\u4e32\u957f\u5ea6\uff0c\u5176\u4e2dt=998857459\u3002 \u9898\u89e3\uff1a\u62c6\u5206\u4e00\u4e0b\u7d20\u56e0\u5b50\u53ef\u4ee5\u5f97\u5230 t=461\u00d7773\u00d72803 t=461\u00d7773\u00d72803 \uff0c\u4e5f\u5c31\u662f\u5f53 a_i\u22652803 a_i\u22652803 \u65f6\uff0c a_i\uff01\\%t=0 a_i\uff01\\%t=0 .\u6240\u4ee5for\u4e00\u4e0b\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b50\u4e32\u548c\u7684\u6700\u5c0f\u957f\u5ea6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u4e8c\u5206\u67e5\u627e\u4e00\u4e0b\u5c31\u884c\u3002 L. Who is the Champion Link N \u652f\u7403\u961f\u8fdb\u884c\u8db3\u7403\u6bd4\u8d5b,\u6bcf\u4e24\u652f\u7403\u961f\u5747\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b,\u80dc\u65b9\u79ef\u4e09\u5206,\u8d1f\u65b9\u79ef\u96f6\u5206,\u82e5\u6253\u5e73\u5219\u4e24\u961f\u5747\u79ef\u4e00\u5206\u3002\u6309\u7167\u79ef\u5206\u4e0e\u51c0\u80dc\u7403\u8fdb\u884c\u6392\u540d,\u95ee\u6700\u540e\u54ea\u652f\u7403\u961f\u83b7\u5f97\u51a0\u519b,\u82e5\u65e0\u6cd5\u51b3\u51fa\u51a0\u519b\u5219\u8f93\u51fa\u201cplay-offs\u2019\u2019\u3002 \u7b7e\u5230\u9898\uff0c\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002","title":"2019 ICPC Asia Nanchang Regional"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanchang%20Regional/#b-a-funny-bipartite-graph","text":"\u7ed9\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc73\u3002\u8981\u6c42\u9009\u53d6\u56fe\u4e2d\u7684\u4e00\u4e9b\u8fb9\uff0c\u6765\u6784\u9020\u4e00\u5f20\u65b0\u56fe\uff0c\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a \u5de6\u4fa7\u7684\u67d0\u4e9b\u70b9\u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u65b0\u56fe\u4e2d\uff1b \u53f3\u4fa7\u7684\u6240\u6709\u70b9\u5fc5\u987b\u540c\u65f6\u51fa\u73b0\u5728\u65b0\u56fe\u4e2d\uff1b \u5de6\u4fa7\u7684\u70b9\u6709\u6743\u503cw[i]\uff0c\u5728\u65b0\u56fe\u4e2d\u7684\u82b1\u8d39\u4e3a w^{d} w^{d} \uff0c\u5176\u4e2dd\u4e3a\u8be5\u70b9\u7684\u5ea6\u6570\uff1b \u6c42\u6784\u5efa\u4e00\u5f20\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u56fe\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u9898\u89e3\uff1a\u6b63\u89e3\u662fdp\uff0c\u6211\u968f\u4fbfdfs\u5e38\u89c4\u526a\u4e00\u4e0b\u679d\u5c31\u8fc7\u4e86\u566b","title":"B. A Funny Bipartite Graph"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanchang%20Regional/#c-and-and-pair","text":"\u7ed9\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570n\uff0c\u6c42\u6ee1\u8db3\u5982\u4e0b\u9650\u5236\u7684\u70b9\u5bf9 (i,j) (i,j) \u7684\u6570\u91cf\uff1a 0\u2264j\u2264i\u2264n 0\u2264j\u2264i\u2264n i\\&n=i i\\&n=i i\\&j=0 i\\&j=0 \u5176\u4e2dn\u7684\u4f4d\u6570\u2264 10^5 10^5 \u9898\u89e3\uff1a\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6570n\u7684\u6bcf\u4e2a\u4ee51\u5f00\u5934\u7684\u540e\u7f00\uff0c\u5b83\u7684\u7b54\u6848\u4e3a 3^x+2^y 3^x+2^y \uff0c\u5176\u4e2d x x \u8868\u793a\u540e\u7f00\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570\uff0c y y \u8868\u793a0\u7684\u4e2a\u6570\uff0c\u6c42\u548c+1\uff08\u8868\u793a0,0\u7684\u8d21\u732e\uff09\u5373\u53ef\u3002","title":"C. And and Pair"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanchang%20Regional/#e-bobs-problem","text":"\u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u56fe\u4e0a\u7684\u8fb9\u5206\u4e3a\u9ed1\u8fb9\u548c\u767d\u8fb9\u4e24\u7c7b\u3002\u8981\u6c42\u6784\u9020\u4e00\u5f20\u65b0\u56fe\uff0c\u5176\u4e2d\u767d\u8fb9\u7684\u6570\u91cf\u4e0d\u8d85\u8fc7k\uff0c\u4f7f\u65b0\u56fe\u4e2d\u7684\u70b9\u4e24\u4e24\u53ef\u8fbe\uff0c\u6c42\u80fd\u6784\u9020\u51fa\u7684\u65b0\u56fe\u7684\u6700\u5927\u8fb9\u6743\u3002 \u9898\u89e3\uff1a\u9996\u5148\u8fde\u4e0a\u6240\u6709\u9ed1\u8fb9\uff0c\u5bf9\u767d\u8fb9\u8dd1\u6700\u5927\u751f\u6210\u6811\uff0c\u5982\u679c\u4e0d\u5230k\u5219\u8d2a\u5fc3\u5730\u53d6\u6ca1\u6709\u53d6\u7684\u767d\u8fb9\u3002\u8bb0\u5f97\u5224\u56fe\u662f\u5426\u8fde\u901a\u3002","title":"E. Bob's Problem"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanchang%20Regional/#g-eating-plan","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217a\uff0ca\u4e3a1-n\u7684\u67d0\u4e2a\u6392\u5217\uff0c b_i=a_i! b_i=a_i! \u4e00\u5171\u7ed9\u51fam\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u8be5\u5e8f\u5217\u6700\u77ed\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u4e32( (b_l+b_{l+1}+...+b_r)\\%t \u2265k (b_l+b_{l+1}+...+b_r)\\%t \u2265k )\u7684\u5b50\u4e32\u957f\u5ea6\uff0c\u5176\u4e2dt=998857459\u3002 \u9898\u89e3\uff1a\u62c6\u5206\u4e00\u4e0b\u7d20\u56e0\u5b50\u53ef\u4ee5\u5f97\u5230 t=461\u00d7773\u00d72803 t=461\u00d7773\u00d72803 \uff0c\u4e5f\u5c31\u662f\u5f53 a_i\u22652803 a_i\u22652803 \u65f6\uff0c a_i\uff01\\%t=0 a_i\uff01\\%t=0 .\u6240\u4ee5for\u4e00\u4e0b\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b50\u4e32\u548c\u7684\u6700\u5c0f\u957f\u5ea6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u4e8c\u5206\u67e5\u627e\u4e00\u4e0b\u5c31\u884c\u3002","title":"G. Eating Plan"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanchang%20Regional/#l-who-is-the-champion","text":"N \u652f\u7403\u961f\u8fdb\u884c\u8db3\u7403\u6bd4\u8d5b,\u6bcf\u4e24\u652f\u7403\u961f\u5747\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b,\u80dc\u65b9\u79ef\u4e09\u5206,\u8d1f\u65b9\u79ef\u96f6\u5206,\u82e5\u6253\u5e73\u5219\u4e24\u961f\u5747\u79ef\u4e00\u5206\u3002\u6309\u7167\u79ef\u5206\u4e0e\u51c0\u80dc\u7403\u8fdb\u884c\u6392\u540d,\u95ee\u6700\u540e\u54ea\u652f\u7403\u961f\u83b7\u5f97\u51a0\u519b,\u82e5\u65e0\u6cd5\u51b3\u51fa\u51a0\u519b\u5219\u8f93\u51fa\u201cplay-offs\u2019\u2019\u3002 \u7b7e\u5230\u9898\uff0c\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002","title":"L. Who is the Champion"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanjing%20Regional%20Contest/","text":"Name Date solved A B C D E F G H I J K 2019 ICPC Asia Nanjing Regional Contest 2019/10/27 6 O . O . . O . \u00d8 . \u00d8 O A. A Hard Problem Link \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u627e\u5230\u4e00\u4e2a\u6b63\u6574\u6570k, \u4f7f\u5bf9\u4e8e{1, 2, 3, \u2026, n} \u7684\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\u4e2d\u90fd\u81f3\u5c11\u5b58\u5728\u4e00\u7ec4\u6570(u,v)\uff0c\u4f7fu\u80fd\u88abv\u6574\u9664\u3002 \u6700\u5927\u7684\u4e24\u4e24\u4e0d\u4e92\u4e3a\u56e0\u5b50\u7684\u60c5\u51b5\u662f\u53d6\u5927\u4e8e\u7b49\u4e8e \\lceil {n \\over 2}\\rceil \\lceil {n \\over 2}\\rceil \u7684\u6240\u6709\u6570\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u53d6\u4e00\u4e2a\u6570\uff0c\u4e00\u5b9a\u662f\u67d0\u539f\u96c6\u5408\u4e2d\u67d0\u4e00\u4e2a\u6570\u7684\u00bd\uff0c\u7b54\u6848\u662f \\lceil {n \\over 2}\\rceil + 1 \\lceil {n \\over 2}\\rceil + 1 C. Digital Path Link \u7ed9\u4e00\u4e2an\u00d7m\u7684\u77e9\u9635\uff0c\u77e9\u9635\u5185\u503c\u7684\u5927\u5c0f\u4e3a[-10 7,10 7]\u3002\u5176\u4e2d\u4e00\u6761\u5408\u6cd5\u7684\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\uff1a\u76f8\u90bb\u4e24\u6b65\u7684\u683c\u5b50\u4e4b\u95f4\u6709\u8fb9\u76f8\u90bb\uff0c\u4e14\u5f53\u524d\u683c\u5b50\u6570\u503c\u4e3a\u4e0a\u4e00\u6b65+1\uff0c\u5e76\u4e14\u4e0d\u80fd\u7ee7\u7eed\u6269\u5c55\u3002\u95ee\u8be5\u77e9\u9635\u4e2d\u6709\u591a\u5c11\u6761\u5408\u6cd5\u8def\u5f84\u3002 dp[i][j][k] \u8868\u793ai\u884cj\u5217\u7684\u70b9\u6709\u591a\u5c11\u6761\u4ee5\u5b83\u7ed3\u675f\u7684\u8def\u5f84\uff0ck\u8868\u793a\u8def\u5f84\u7684\u957f\u5ea6\u4e3a2,3, >=4\u7684\u8def\u5f84\u79cd\u7c7b\uff0c\u6bcf\u6b21\u5411\u56db\u5468\u66f4\u65b0\u6269\u5c55\uff0c\u5982\u679c\u90fd\u4e0d\u80fd\u6269\u5c55\u8868\u793a\u8def\u5f84\u4ee5\u5b83\u4e3a\u7ed3\u5c3e\uff0c\u8bb0\u5f55\u7b54\u6848\u3002 F. Paper Grading Link \u5bf9\u5e8f\u5217\u548c\u4ea4\u6362\u64cd\u4f5c\u5206\u5757\uff0c\u5f53\u64cd\u4f5c\u8fbe\u5230\u5757\u5927\u5c0f\u65f6rebuild\u5373\u53ef\uff0c\u5e8f\u5217\u7684\u5757\u5185\u4f7f\u7528\u5b57\u5178\u6811\u7ef4\u62a4\u5373\u53ef\u3002\u64cd\u4f5c\u4e0d\u5230\u5757\u5927\u5c0f\u65f6\u5355\u72ec\u8ba1\u7b97swap\u540e\u7684\u589e\u91cf\u548c\u51cf\u91cf\u7684\u8d21\u732e\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(nsqrt(n)) O(nsqrt(n)) \u6b63\u89e3\u597d\u50cf\u662fhash+\u4e8c\u7ef4\u6570\u70b9\uff0c\u590d\u6742\u5ea6 O(nlog^2(n)) O(nlog^2(n)) H. Prince and Princess Link \u738b\u5b50\u60f3\u5411\u516c\u4e3b\u6c42\u5a5a\u3002\u5bab\u4e2d\u6709\u4e09\u7c7b\u4eba\uff0c\u4ee5\u516c\u4e3b\u4e3a\u9996\u8d5e\u6210\u5a5a\u793c\u7684\u4eba\uff0c\u53cd\u5bf9\u5a5a\u793c\u7684\u4eba\uff0c\u4e0d\u5173\u5fc3\u7684\u4eba\uff0c\u4ed6\u4eec\u7684\u4eba\u6570\u4e3aa\uff0cb\uff0cc(a>0, b,c\u22650)\u3002\u738b\u5b50\u77e5\u9053\u4e09\u7c7b\u4eba\u7684\u6570\u91cf\uff0c\u8fd9\u4e9b\u4eba\u5206\u522b\u5446\u5728\u5404\u81ea\u7684\u623f\u95f4\uff0c\u738b\u5b50\u53ef\u4ee5\u5411\u623f\u95f4\u5185\u7684\u4eba\u63d0\u4ee5\u4e0b\u4e09\u7c7b\u95ee\u9898\uff1a \u4f60\u662f\u8c01 \u5728X\u623f\u95f4\u5185\u7684\u4eba\u662f\u8c01 \u516c\u4e3b\u5728\u54ea\u4e2a\u623f\u95f4 \u6240\u6709\u4eba\u90fd\u4f1a\u56de\u7b54\u95ee\u9898\uff0c\u4f46\u8d5e\u6210\u5a5a\u793c\u7684\u4eba\u4f1a\u544a\u8bc9\u4ed6\u6b63\u786e\u7684\u7b54\u6848\uff0c\u53cd\u5bf9\u5a5a\u793c\u7684\u4eba\u4f1a\u544a\u8bc9\u4ed6\u9519\u8bef\u7684\u7b54\u6848\uff0c\u4e0d\u5173\u5fc3\u7684\u4eba\u4f1a\u968f\u673a\u7ed9\u51fa\u56de\u7b54\u3002\u738b\u5b50\u8981\u81f3\u5c11\u95ee\u51e0\u4e2a\u95ee\u9898\uff0c\u624d\u80fd\u627e\u5230\u516c\u4e3b\u6240\u5728\u7684\u623f\u95f4\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u8f93\u51fa-1. \u6700\u574f\u60c5\u51b5\u4e0b\u628ac\u770b\u505ab\uff0c\u5982\u679cb+c>a\uff0c\u90a3\u4e48\u738b\u5b50\u6ca1\u6709\u529e\u6cd5\u627e\u5230\u516c\u4e3b\u3002\u5426\u5219\u95ee2*(b+c)+1\u4e2a\u4eba\u201c\u516c\u4e3b\u5728\u54ea\u4e2a\u623f\u95f4\u201d\u5c31\u80fd\u627e\u5230\u516c\u4e3b\u3002 \u7279\u52241,0,0\u4e3a0\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u623f\u95f4\uff0c\u8fd9\u4e2a\u623f\u95f4\u91cc\u9762\u4e00\u5b9a\u662f\u516c\u4e3b\u3002 J. Spy Link A,B\u5404\u6709n\u652f\u961f\uff0c\u5176\u4e2dA\u7684\u961f\u4f0d\u80fd\u529b\u503c\u5df2\u7ecf\u786e\u5b9a\u3002B\u6709\u4e24\u7c7b\u4eba\uff0c\u8981\u628a\u4e00\u7c7b\u4eba\u548c\u53e6\u4e00\u7c7b\u4eba\u642d\u914d\uff0c\u80fd\u529b\u503c\u4e3a\u4e24\u8005\u7684\u80fd\u529b\u503c\u4e4b\u548c\u3002\u642d\u914d\u5b8c\u540e\u5c06A,B\u7684\u961f\u4f0d\u968f\u673a\u6392\u5217\u5bf9\u6218\uff0c\u5982\u679cA\u7684\u7b2ci\u4e2a\u961f\u4f0d\u80fd\u529b\u503c\u5c0f\u4e8eB\u548c\u5b83\u5bf9\u6218\u7684\u961f\u4f0d\uff0c\u5219B\u53ef\u4ee5\u83b7\u5f97\u5206\u6570val[i]\u3002\u8f93\u51fa\u7ec4\u961f\u540eB\u7684\u6700\u5927\u5f97\u5206\u7684\u671f\u671b\u00d7n\u3002 \u5bf9\u671f\u671b\u5f0f\u5b50\u5316\u7b80\u4e4b\u540e\u5c31\u662f\u88f8\u7684\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\uff0cB\u7684a[i]\u548cb[j]\u8fde\u8fb9\u7684\u8fb9\u6743\u4e3a \\sum_{k=1}^n{a[i]+b[j]>c[k]?val[k]:0} \\sum_{k=1}^n{a[i]+b[j]>c[k]?val[k]:0} \u3002\u8fd9\u9898\u5361\u4e86KMdfs\u677f\u5b50\u3002 K. Triangle Link \u7ed9\u4e86\u4e09\u89d2\u5f62\u4e09\u4e2a\u70b9\u7684\u5750\u6807\u548c\u70b9P\uff0c\u8981\u6c42\u627e\u4e00\u4e2a\u70b9Q\uff0c\u4f7f\u7ebf\u6bb5PQ\u5e73\u5206\u4e09\u89d2\u5f62\u7684\u9762\u79ef\uff0cP,Q\u90fd\u5728\u4e09\u89d2\u5f62\u8fb9\u4e0a\u3002 \u4e8c\u5206100\u6b21\u53ef\u8fc7\uff0c\u76f4\u63a5\u7b97\u7684\u8bdd\u7528sin\u4f1a\u5361\u7cbe\u5ea6\uff0c\u5f0f\u5b50\u91cc\u9762sin\u53ef\u4ee5\u5316\u7b80\u6389\uff0c\u63a8\u51fa\u6765\u7684\u7b54\u6848\u503c\u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\u3002","title":"2019 ICPC Asia Nanjing Regional Contest"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanjing%20Regional%20Contest/#a-a-hard-problem","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u627e\u5230\u4e00\u4e2a\u6b63\u6574\u6570k, \u4f7f\u5bf9\u4e8e{1, 2, 3, \u2026, n} \u7684\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\u4e2d\u90fd\u81f3\u5c11\u5b58\u5728\u4e00\u7ec4\u6570(u,v)\uff0c\u4f7fu\u80fd\u88abv\u6574\u9664\u3002 \u6700\u5927\u7684\u4e24\u4e24\u4e0d\u4e92\u4e3a\u56e0\u5b50\u7684\u60c5\u51b5\u662f\u53d6\u5927\u4e8e\u7b49\u4e8e \\lceil {n \\over 2}\\rceil \\lceil {n \\over 2}\\rceil \u7684\u6240\u6709\u6570\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u53d6\u4e00\u4e2a\u6570\uff0c\u4e00\u5b9a\u662f\u67d0\u539f\u96c6\u5408\u4e2d\u67d0\u4e00\u4e2a\u6570\u7684\u00bd\uff0c\u7b54\u6848\u662f \\lceil {n \\over 2}\\rceil + 1 \\lceil {n \\over 2}\\rceil + 1","title":"A. A Hard Problem"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanjing%20Regional%20Contest/#c-digital-path","text":"\u7ed9\u4e00\u4e2an\u00d7m\u7684\u77e9\u9635\uff0c\u77e9\u9635\u5185\u503c\u7684\u5927\u5c0f\u4e3a[-10 7,10 7]\u3002\u5176\u4e2d\u4e00\u6761\u5408\u6cd5\u7684\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\uff1a\u76f8\u90bb\u4e24\u6b65\u7684\u683c\u5b50\u4e4b\u95f4\u6709\u8fb9\u76f8\u90bb\uff0c\u4e14\u5f53\u524d\u683c\u5b50\u6570\u503c\u4e3a\u4e0a\u4e00\u6b65+1\uff0c\u5e76\u4e14\u4e0d\u80fd\u7ee7\u7eed\u6269\u5c55\u3002\u95ee\u8be5\u77e9\u9635\u4e2d\u6709\u591a\u5c11\u6761\u5408\u6cd5\u8def\u5f84\u3002 dp[i][j][k] \u8868\u793ai\u884cj\u5217\u7684\u70b9\u6709\u591a\u5c11\u6761\u4ee5\u5b83\u7ed3\u675f\u7684\u8def\u5f84\uff0ck\u8868\u793a\u8def\u5f84\u7684\u957f\u5ea6\u4e3a2,3, >=4\u7684\u8def\u5f84\u79cd\u7c7b\uff0c\u6bcf\u6b21\u5411\u56db\u5468\u66f4\u65b0\u6269\u5c55\uff0c\u5982\u679c\u90fd\u4e0d\u80fd\u6269\u5c55\u8868\u793a\u8def\u5f84\u4ee5\u5b83\u4e3a\u7ed3\u5c3e\uff0c\u8bb0\u5f55\u7b54\u6848\u3002","title":"C. Digital Path"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanjing%20Regional%20Contest/#f-paper-grading","text":"\u5bf9\u5e8f\u5217\u548c\u4ea4\u6362\u64cd\u4f5c\u5206\u5757\uff0c\u5f53\u64cd\u4f5c\u8fbe\u5230\u5757\u5927\u5c0f\u65f6rebuild\u5373\u53ef\uff0c\u5e8f\u5217\u7684\u5757\u5185\u4f7f\u7528\u5b57\u5178\u6811\u7ef4\u62a4\u5373\u53ef\u3002\u64cd\u4f5c\u4e0d\u5230\u5757\u5927\u5c0f\u65f6\u5355\u72ec\u8ba1\u7b97swap\u540e\u7684\u589e\u91cf\u548c\u51cf\u91cf\u7684\u8d21\u732e\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(nsqrt(n)) O(nsqrt(n)) \u6b63\u89e3\u597d\u50cf\u662fhash+\u4e8c\u7ef4\u6570\u70b9\uff0c\u590d\u6742\u5ea6 O(nlog^2(n)) O(nlog^2(n))","title":"F. Paper Grading"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanjing%20Regional%20Contest/#h-prince-and-princess","text":"\u738b\u5b50\u60f3\u5411\u516c\u4e3b\u6c42\u5a5a\u3002\u5bab\u4e2d\u6709\u4e09\u7c7b\u4eba\uff0c\u4ee5\u516c\u4e3b\u4e3a\u9996\u8d5e\u6210\u5a5a\u793c\u7684\u4eba\uff0c\u53cd\u5bf9\u5a5a\u793c\u7684\u4eba\uff0c\u4e0d\u5173\u5fc3\u7684\u4eba\uff0c\u4ed6\u4eec\u7684\u4eba\u6570\u4e3aa\uff0cb\uff0cc(a>0, b,c\u22650)\u3002\u738b\u5b50\u77e5\u9053\u4e09\u7c7b\u4eba\u7684\u6570\u91cf\uff0c\u8fd9\u4e9b\u4eba\u5206\u522b\u5446\u5728\u5404\u81ea\u7684\u623f\u95f4\uff0c\u738b\u5b50\u53ef\u4ee5\u5411\u623f\u95f4\u5185\u7684\u4eba\u63d0\u4ee5\u4e0b\u4e09\u7c7b\u95ee\u9898\uff1a \u4f60\u662f\u8c01 \u5728X\u623f\u95f4\u5185\u7684\u4eba\u662f\u8c01 \u516c\u4e3b\u5728\u54ea\u4e2a\u623f\u95f4 \u6240\u6709\u4eba\u90fd\u4f1a\u56de\u7b54\u95ee\u9898\uff0c\u4f46\u8d5e\u6210\u5a5a\u793c\u7684\u4eba\u4f1a\u544a\u8bc9\u4ed6\u6b63\u786e\u7684\u7b54\u6848\uff0c\u53cd\u5bf9\u5a5a\u793c\u7684\u4eba\u4f1a\u544a\u8bc9\u4ed6\u9519\u8bef\u7684\u7b54\u6848\uff0c\u4e0d\u5173\u5fc3\u7684\u4eba\u4f1a\u968f\u673a\u7ed9\u51fa\u56de\u7b54\u3002\u738b\u5b50\u8981\u81f3\u5c11\u95ee\u51e0\u4e2a\u95ee\u9898\uff0c\u624d\u80fd\u627e\u5230\u516c\u4e3b\u6240\u5728\u7684\u623f\u95f4\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u8f93\u51fa-1. \u6700\u574f\u60c5\u51b5\u4e0b\u628ac\u770b\u505ab\uff0c\u5982\u679cb+c>a\uff0c\u90a3\u4e48\u738b\u5b50\u6ca1\u6709\u529e\u6cd5\u627e\u5230\u516c\u4e3b\u3002\u5426\u5219\u95ee2*(b+c)+1\u4e2a\u4eba\u201c\u516c\u4e3b\u5728\u54ea\u4e2a\u623f\u95f4\u201d\u5c31\u80fd\u627e\u5230\u516c\u4e3b\u3002 \u7279\u52241,0,0\u4e3a0\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u623f\u95f4\uff0c\u8fd9\u4e2a\u623f\u95f4\u91cc\u9762\u4e00\u5b9a\u662f\u516c\u4e3b\u3002","title":"H. Prince and Princess"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanjing%20Regional%20Contest/#j-spy","text":"A,B\u5404\u6709n\u652f\u961f\uff0c\u5176\u4e2dA\u7684\u961f\u4f0d\u80fd\u529b\u503c\u5df2\u7ecf\u786e\u5b9a\u3002B\u6709\u4e24\u7c7b\u4eba\uff0c\u8981\u628a\u4e00\u7c7b\u4eba\u548c\u53e6\u4e00\u7c7b\u4eba\u642d\u914d\uff0c\u80fd\u529b\u503c\u4e3a\u4e24\u8005\u7684\u80fd\u529b\u503c\u4e4b\u548c\u3002\u642d\u914d\u5b8c\u540e\u5c06A,B\u7684\u961f\u4f0d\u968f\u673a\u6392\u5217\u5bf9\u6218\uff0c\u5982\u679cA\u7684\u7b2ci\u4e2a\u961f\u4f0d\u80fd\u529b\u503c\u5c0f\u4e8eB\u548c\u5b83\u5bf9\u6218\u7684\u961f\u4f0d\uff0c\u5219B\u53ef\u4ee5\u83b7\u5f97\u5206\u6570val[i]\u3002\u8f93\u51fa\u7ec4\u961f\u540eB\u7684\u6700\u5927\u5f97\u5206\u7684\u671f\u671b\u00d7n\u3002 \u5bf9\u671f\u671b\u5f0f\u5b50\u5316\u7b80\u4e4b\u540e\u5c31\u662f\u88f8\u7684\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\uff0cB\u7684a[i]\u548cb[j]\u8fde\u8fb9\u7684\u8fb9\u6743\u4e3a \\sum_{k=1}^n{a[i]+b[j]>c[k]?val[k]:0} \\sum_{k=1}^n{a[i]+b[j]>c[k]?val[k]:0} \u3002\u8fd9\u9898\u5361\u4e86KMdfs\u677f\u5b50\u3002","title":"J. Spy"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Nanjing%20Regional%20Contest/#k-triangle","text":"\u7ed9\u4e86\u4e09\u89d2\u5f62\u4e09\u4e2a\u70b9\u7684\u5750\u6807\u548c\u70b9P\uff0c\u8981\u6c42\u627e\u4e00\u4e2a\u70b9Q\uff0c\u4f7f\u7ebf\u6bb5PQ\u5e73\u5206\u4e09\u89d2\u5f62\u7684\u9762\u79ef\uff0cP,Q\u90fd\u5728\u4e09\u89d2\u5f62\u8fb9\u4e0a\u3002 \u4e8c\u5206100\u6b21\u53ef\u8fc7\uff0c\u76f4\u63a5\u7b97\u7684\u8bdd\u7528sin\u4f1a\u5361\u7cbe\u5ea6\uff0c\u5f0f\u5b50\u91cc\u9762sin\u53ef\u4ee5\u5316\u7b80\u6389\uff0c\u63a8\u51fa\u6765\u7684\u7b54\u6848\u503c\u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\u3002","title":"K. Triangle"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Xuzhou%20Regional/","text":"Name Date Solved A B C D E F G H I J K L M 2019 ICPC Asia Xuzhou Regional 2019/12/7 6/12 O . O . \u00d8 O . . . . . O \u00d8 \u6709\u4e00\u8bf4\u4e00\uff0c\u5b8c\u5168\u662f\u5728\u778e\u6253\uff08 \u73b0\u573a\u8fc7240+\u7684\u4e24\u4e2a\u94c1\u724c\u9898\u4e0d\u4f1a\u5199\uff0c\u8fd8\u4e0a\u53bb\u51b2sam\uff08\uff1f \u5565\u73a9\u610f\u554a A. Cat Link \u6bcf\u6b21\u8be2\u95ee\u4e00\u7ec4 L,R,S L,R,S \uff0c\u95ee\u6700\u957f\u7684 l\u2295(l+1)\u2295(l+2)\u2295\u2026\u2026\u2295(r-2)\u2295(r-1)\u2295r<=S(L\u2264l\u2264r\u2264R) l\u2295(l+1)\u2295(l+2)\u2295\u2026\u2026\u2295(r-2)\u2295(r-1)\u2295r<=S(L\u2264l\u2264r\u2264R) \u7684l,r\u533a\u95f4\u957f\u5ea6\u662f\u591a\u5c11\u3002 \u56e0\u4e3a 4k\u22954k+1\u22954k+2\u22954k+3=0 4k\u22954k+1\u22954k+2\u22954k+3=0 \uff0c\u6240\u4ee5\u53ea\u8981\u679a\u4e3e\u5de6\u53f3\u7aef\u70b9\u5c31\u597d\u3002 C. <3 numbers Link \u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a L,R L,R \uff0c\u95eeL,R\u533a\u95f4\u7684\u7d20\u6570\u4e2a\u6570x\u662f\u5426\u6ee1\u8db3 \\frac{x}{R-L+1}< \\frac{1}{3} \\frac{x}{R-L+1}< \\frac{1}{3} \u9898\u89e3\uff1a\u7531\u4e8e\u7d20\u6570\u5bc6\u5ea6\uff0c\u5927\u8303\u56f4\u76f4\u63a5\u8f93\u51faYES\uff0c \u5c0f\u8303\u56f4\u66b4\u529b\u5224\u4e00\u4e0b\u3002 E. Multiply Link \u7ed9\u51fa n n \u4e2a\u6570 a_i a_i \uff0c\u4ee4 Z=a_1!\u00d7a_2!\u00d7..\u00d7a_n! Z=a_1!\u00d7a_2!\u00d7..\u00d7a_n! \u73b0\u5728\u7ed9\u51fa X,Y X,Y ,\u4ee4 b_i=Z\u00d7X^i b_i=Z\u00d7X^i \uff0c\u8981\u6c42\u627e\u5230\u6700\u5927\u7684 i i \uff0c\u4f7f b_i|Y! b_i|Y! \u9898\u89e3\uff1aPollard_Rho\u5206\u89e3\u51faX\u7684\u6bcf\u4e2a\u8d28\u56e0\u6570\u53ca\u5176\u4e2a\u6570\uff0c\u8ba1\u7b97\u5176\u5728 \\frac{Y!}{Z} \\frac{Y!}{Z} \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u53d6\u6240\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u5176\u4e2dn!\u7684\u56e0\u5b50\u4e2a\u6570\u4e3a \\frac{n}{p}+\\frac{n}{p^2}+\\dots+\\frac{n}{p^k} \\frac{n}{p}+\\frac{n}{p^2}+\\dots+\\frac{n}{p^k} . F. The Answer to the Ultimate Question of Life, The Universe, and Everything. Link \u662f42\uff01 \u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa x(x\u2264200) x(x\u2264200) \uff0c\u8f93\u51fa a,b,c(-5000\u2264a,b,c\u22645000) a,b,c(-5000\u2264a,b,c\u22645000) \uff0c\u4f7f a^3+b^3+c^3=x a^3+b^3+c^3=x \uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa impossible . \u9898\u89e3\uff1ax\u6bd4\u8f83\u5c0f\uff0c\u8003\u8651\u6253\u8868\uff0c\u679a\u4e3e\u524d\u4e24\u7ef4\u4e8c\u5206\u7b2c\u4e09\u7ef4\u5373\u53ef\u3002 L. Loli, Yen-Jen, and a cool problem Link \u7ed9\u51fa\u4e00\u4e2aTrie\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa x_i,L_i x_i,L_i \uff0c\u95ee\u4eceTrie\u4e0a\u7b2c x_i x_i \u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5411\u7236\u8282\u70b9\u4e0a\u8df3 L_i-1 L_i-1 \u6b21\u7684\u70b9\u4e3a\u8d77\u70b9\uff0c x_i x_i \u4e3a\u7ec8\u70b9\u7684\u5b57\u7b26\u4e32\u5728Trie\u4e0a\u5171\u51fa\u73b0\u591a\u5c11\u6b21\u3002 \u9898\u89e3\uff1a\u5bf9\u539fTrie dfs\u5efa\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u500d\u589e\u5411\u4e0a\u8df3\u5bfb\u627e\u6700\u5927\u7684\u5408\u6cd5\u7956\u5148\uff0c\u5b83\u7684size\u5373\u4e3a\u7b54\u6848\u3002 M. Kill the tree Link \u7ed9\u5b9a\u4e00\u68f5\u4ee51\u4e3a\u6839\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u6c42\u6bcf\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\u3002\u5982\u679c\u6709\u591a\u4e2a\u91cd\u5fc3\uff0c\u5219\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u3002 \u9898\u89e3\uff1a\u4ee5\u4e00\u4e2a\u5df2\u77e5\u6240\u6709\u5b50\u6811\u91cd\u5fc3\u7684\u70b9\u4e3a\u6839\uff0c\u5b83\u7684\u91cd\u5fc3\u5fc5\u5728\u5176\u91cd\u513f\u5b50\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u3002\u4ece\u91cd\u513f\u5b50\u4e0a\u8df3\u5230\u5f53\u524d\u7684root\uff0c\u5982\u679c\u6700\u5927\u5b50\u6811\u7684\u70b9\u6570\u2264\u5b50\u6811\u603b\u8282\u70b9\u6570/2\uff0c\u5219\u8be5\u8282\u70b9\u4e3a\u8be5\u5b50\u6811\u91cd\u5fc3\u3002\u5bf9\u4e8e\u4ee5\u6240\u6709\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u679a\u4e3e\u8def\u5f84\u4e0a\u8df3\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\u3002 \u56e0\u4e3a\u6811\u7684\u91cd\u5fc3\u662f\u76f8\u90bb\u7684\uff0c\u5982\u679c\u6709\u591a\u4e2a\u91cd\u5fc3\uff0c\u53ea\u8981check\u5f53\u524d\u91cd\u5fc3\u7684\u7236\u8282\u70b9\u662f\u5426\u4e5f\u662f\u91cd\u5fc3\u5373\u53ef\u3002","title":"2019 ICPC Asia Xuzhou Regional"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Xuzhou%20Regional/#a-cat","text":"\u6bcf\u6b21\u8be2\u95ee\u4e00\u7ec4 L,R,S L,R,S \uff0c\u95ee\u6700\u957f\u7684 l\u2295(l+1)\u2295(l+2)\u2295\u2026\u2026\u2295(r-2)\u2295(r-1)\u2295r<=S(L\u2264l\u2264r\u2264R) l\u2295(l+1)\u2295(l+2)\u2295\u2026\u2026\u2295(r-2)\u2295(r-1)\u2295r<=S(L\u2264l\u2264r\u2264R) \u7684l,r\u533a\u95f4\u957f\u5ea6\u662f\u591a\u5c11\u3002 \u56e0\u4e3a 4k\u22954k+1\u22954k+2\u22954k+3=0 4k\u22954k+1\u22954k+2\u22954k+3=0 \uff0c\u6240\u4ee5\u53ea\u8981\u679a\u4e3e\u5de6\u53f3\u7aef\u70b9\u5c31\u597d\u3002","title":"A. Cat"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Xuzhou%20Regional/#c-3-numbers","text":"\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a L,R L,R \uff0c\u95eeL,R\u533a\u95f4\u7684\u7d20\u6570\u4e2a\u6570x\u662f\u5426\u6ee1\u8db3 \\frac{x}{R-L+1}< \\frac{1}{3} \\frac{x}{R-L+1}< \\frac{1}{3} \u9898\u89e3\uff1a\u7531\u4e8e\u7d20\u6570\u5bc6\u5ea6\uff0c\u5927\u8303\u56f4\u76f4\u63a5\u8f93\u51faYES\uff0c \u5c0f\u8303\u56f4\u66b4\u529b\u5224\u4e00\u4e0b\u3002","title":"C. &lt;3 numbers"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Xuzhou%20Regional/#e-multiply","text":"\u7ed9\u51fa n n \u4e2a\u6570 a_i a_i \uff0c\u4ee4 Z=a_1!\u00d7a_2!\u00d7..\u00d7a_n! Z=a_1!\u00d7a_2!\u00d7..\u00d7a_n! \u73b0\u5728\u7ed9\u51fa X,Y X,Y ,\u4ee4 b_i=Z\u00d7X^i b_i=Z\u00d7X^i \uff0c\u8981\u6c42\u627e\u5230\u6700\u5927\u7684 i i \uff0c\u4f7f b_i|Y! b_i|Y! \u9898\u89e3\uff1aPollard_Rho\u5206\u89e3\u51faX\u7684\u6bcf\u4e2a\u8d28\u56e0\u6570\u53ca\u5176\u4e2a\u6570\uff0c\u8ba1\u7b97\u5176\u5728 \\frac{Y!}{Z} \\frac{Y!}{Z} \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u53d6\u6240\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u5176\u4e2dn!\u7684\u56e0\u5b50\u4e2a\u6570\u4e3a \\frac{n}{p}+\\frac{n}{p^2}+\\dots+\\frac{n}{p^k} \\frac{n}{p}+\\frac{n}{p^2}+\\dots+\\frac{n}{p^k} .","title":"E. Multiply"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Xuzhou%20Regional/#f-the-answer-to-the-ultimate-question-of-life-the-universe-and-everything","text":"\u662f42\uff01 \u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa x(x\u2264200) x(x\u2264200) \uff0c\u8f93\u51fa a,b,c(-5000\u2264a,b,c\u22645000) a,b,c(-5000\u2264a,b,c\u22645000) \uff0c\u4f7f a^3+b^3+c^3=x a^3+b^3+c^3=x \uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa impossible . \u9898\u89e3\uff1ax\u6bd4\u8f83\u5c0f\uff0c\u8003\u8651\u6253\u8868\uff0c\u679a\u4e3e\u524d\u4e24\u7ef4\u4e8c\u5206\u7b2c\u4e09\u7ef4\u5373\u53ef\u3002","title":"F. The Answer to the Ultimate Question of Life, The Universe, and Everything."},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Xuzhou%20Regional/#l-loli-yen-jen-and-a-cool-problem","text":"\u7ed9\u51fa\u4e00\u4e2aTrie\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa x_i,L_i x_i,L_i \uff0c\u95ee\u4eceTrie\u4e0a\u7b2c x_i x_i \u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5411\u7236\u8282\u70b9\u4e0a\u8df3 L_i-1 L_i-1 \u6b21\u7684\u70b9\u4e3a\u8d77\u70b9\uff0c x_i x_i \u4e3a\u7ec8\u70b9\u7684\u5b57\u7b26\u4e32\u5728Trie\u4e0a\u5171\u51fa\u73b0\u591a\u5c11\u6b21\u3002 \u9898\u89e3\uff1a\u5bf9\u539fTrie dfs\u5efa\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u500d\u589e\u5411\u4e0a\u8df3\u5bfb\u627e\u6700\u5927\u7684\u5408\u6cd5\u7956\u5148\uff0c\u5b83\u7684size\u5373\u4e3a\u7b54\u6848\u3002","title":"L. Loli, Yen-Jen, and a cool problem"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20Asia%20Xuzhou%20Regional/#m-kill-the-tree","text":"\u7ed9\u5b9a\u4e00\u68f5\u4ee51\u4e3a\u6839\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u6c42\u6bcf\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\u3002\u5982\u679c\u6709\u591a\u4e2a\u91cd\u5fc3\uff0c\u5219\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u3002 \u9898\u89e3\uff1a\u4ee5\u4e00\u4e2a\u5df2\u77e5\u6240\u6709\u5b50\u6811\u91cd\u5fc3\u7684\u70b9\u4e3a\u6839\uff0c\u5b83\u7684\u91cd\u5fc3\u5fc5\u5728\u5176\u91cd\u513f\u5b50\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u3002\u4ece\u91cd\u513f\u5b50\u4e0a\u8df3\u5230\u5f53\u524d\u7684root\uff0c\u5982\u679c\u6700\u5927\u5b50\u6811\u7684\u70b9\u6570\u2264\u5b50\u6811\u603b\u8282\u70b9\u6570/2\uff0c\u5219\u8be5\u8282\u70b9\u4e3a\u8be5\u5b50\u6811\u91cd\u5fc3\u3002\u5bf9\u4e8e\u4ee5\u6240\u6709\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u679a\u4e3e\u8def\u5f84\u4e0a\u8df3\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\u3002 \u56e0\u4e3a\u6811\u7684\u91cd\u5fc3\u662f\u76f8\u90bb\u7684\uff0c\u5982\u679c\u6709\u591a\u4e2a\u91cd\u5fc3\uff0c\u53ea\u8981check\u5f53\u524d\u91cd\u5fc3\u7684\u7236\u8282\u70b9\u662f\u5426\u4e5f\u662f\u91cd\u5fc3\u5373\u53ef\u3002","title":"M. Kill the tree"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20EC-Final/","text":"Name Date solved A B C D E F G H I J K L M 2019 ICPC EC-Final 2019/12/15 3 O . . . O . . . . . . . O \u8d5b\u540e\u603b\u7ed3 Link \u56e0\u4e3a\u98de\u673a\u665a\u70b9\u8d76\u4e0a\u4e86\u98de\u673a\uff0c\u7136\u540e\u6d77\u5e95\u635e\u5f88\u597d\u5403\u3001\u635e\u9762\u5e08\u5085\u5f88np\u3002 \u7136\u540e\u5e26\u4e0a\u4e86\u6b66\u5927\u53d1\u7684\u5c0f\u9ec4\u9e2d\uff0c\u7136\u540e\u5c0f\u9ec4\u9e2d\u5199\u4ee3\u7801\u53ea\u8fc7\u4e86\u4e09\u4e2a\u9898\u3002 \u79e6\u9f99\u8111\u762b\uff0c\u65c1\u8fb9\u7684\u623f\u5b50\u90fd\u50cf\u9b3c\u5c4b\u3002 \u786c\u5ea7\u7eaf\u8111\u762b\uff0c10.5h\u7684\u786c\u5ea7\u4e3a\u5565\u4e0d2h\u98de\u56de\u6765\u5c82\u4e0d\u7f8e\u54c9\u3002 \u8d5b\u4e2d\u5b9e\u9a8c\u8bfe\u88ab\u5224\u5b9a0\u5206\uff0c\u56de\u53bb\u8fd8\u8981\u8003\u8bd5\u3002 \u9762\u524d\u6e21\u6e21\u9e1f\u5495\u4e86\u70ed\u8eab\u8d5b\u7136\u540e\u6b63\u8d5b\u6740\u75af\u4e86\u3002 \u603b\u4f53\u6765\u8bf4\u6b63\u8d5b\u7eaf\u5c5e\u68a6\u6e38\uff0cA\u7b7e\u5230\u8fd8\u7b97\u6b63\u5e38\uff0c\u7136\u540eM\u9898\u633a\u50bb\u7684\uff0c\u66b4\u529b\u5c31\u80fd\u8fc7\uff0c\u7136\u540e\u8fd8\u60f3DAGdp\u7136\u540e\u8fd8\u8d21\u732e\u4e86\u4e00\u53d1\u7f5a\u65f6\uff0c\u66b4\u529b\u4e4b\u540e\u6ca1\u5f00ll\u53c8\u8d21\u732e\u4e00\u53d1\u7f5a\u65f6\u3002E\u9898\u961f\u53cb\u5199\u5410\u4e86\uff0c\u8fd8\u91cd\u542f\u4e86\u56db\u6b21\u673a\u5668\uff0cCLion\u65e0\u5185\u5b58\u4fdd\u62a4\u786e\u5b9e\u96be\u9876\uff08\u6240\u4ee5dfs\u4e3a\u4ec0\u4e48\u80fd\u5199\u70b8\u5462\uff09\u3002\u7136\u540eG\u9898\u4e00\u76f4\u4ee5\u4e3a\u8111\u762b\u6a21\u62df\uff0c\u7136\u540e\u8d5b\u540e\u53d1\u73b0\u9898\u610f\u8bfb\u9519\u4e86\uff0c\u5176\u5b9e\u8d5b\u4e2d\u5df2\u7ecf\u5199\u7684\u5dee\u4e0d\u591a\u4e86\u3002H\u9898\u5176\u5b9e\u4e5f\u770b\u51fa\u6b63\u89e3\u4e86\uff0c\u5fd8\u8bb0\u52a0\u968f\u673a\uff0c\u7ed3\u679cTLE\u4e0d\u60f3\u6539\u4e86\uff0c\u7136\u540e\u8d5b\u540e\u544a\u8bc9\u6211\u771f\u7684\u662f\u6b63\u89e3\u3002\u4e94\u9898\u7b7e\u5230\u8fc7\u4e86\u7a33\u94f6\u51b2\u91d1\uff0c\u7ed3\u679c\u6700\u540e\u4e09\u9898\u722c\u4e86\u3002 \u7136\u540e\u5c31\u68a6\u6e383\u9898EC\u90fd\u80fd\u6253\u4e86\u4e2a\u61a8\u6279\u94dc\u724c\uff0c\u60f3\u628a\u5956\u724c\u6254\u8fdb\u5783\u573e\u6876\u3002 \u7136\u540e\u65e0\u6eda\u699c\u3001\u542c\u67d0\u7262\u5382\u4e00\u5171\u8bb2\u4e863\u4e2a\u5c0f\u65f6\u3001\u8fd8\u4e0d\u5982\u65e9\u8d70\u4e86\uff0c\u724c\u90fd\u4e0d\u60f3\u8981\u3002\u7136\u540e\u6e05\u534e\u559c\u63d0\u8d5b\u5b63\u7b2c\u4e00\u679a\u94dc\u724c\uff08\u4eba\u5de5\u53d1\u724c\u5ff5\u9519\u4e86\uff09\u3002","title":"2019 ICPC EC Final"},{"location":"Training%20Logs/2019%20ICPC%20Regional/2019%20ICPC%20EC-Final/#_1","text":"\u56e0\u4e3a\u98de\u673a\u665a\u70b9\u8d76\u4e0a\u4e86\u98de\u673a\uff0c\u7136\u540e\u6d77\u5e95\u635e\u5f88\u597d\u5403\u3001\u635e\u9762\u5e08\u5085\u5f88np\u3002 \u7136\u540e\u5e26\u4e0a\u4e86\u6b66\u5927\u53d1\u7684\u5c0f\u9ec4\u9e2d\uff0c\u7136\u540e\u5c0f\u9ec4\u9e2d\u5199\u4ee3\u7801\u53ea\u8fc7\u4e86\u4e09\u4e2a\u9898\u3002 \u79e6\u9f99\u8111\u762b\uff0c\u65c1\u8fb9\u7684\u623f\u5b50\u90fd\u50cf\u9b3c\u5c4b\u3002 \u786c\u5ea7\u7eaf\u8111\u762b\uff0c10.5h\u7684\u786c\u5ea7\u4e3a\u5565\u4e0d2h\u98de\u56de\u6765\u5c82\u4e0d\u7f8e\u54c9\u3002 \u8d5b\u4e2d\u5b9e\u9a8c\u8bfe\u88ab\u5224\u5b9a0\u5206\uff0c\u56de\u53bb\u8fd8\u8981\u8003\u8bd5\u3002 \u9762\u524d\u6e21\u6e21\u9e1f\u5495\u4e86\u70ed\u8eab\u8d5b\u7136\u540e\u6b63\u8d5b\u6740\u75af\u4e86\u3002 \u603b\u4f53\u6765\u8bf4\u6b63\u8d5b\u7eaf\u5c5e\u68a6\u6e38\uff0cA\u7b7e\u5230\u8fd8\u7b97\u6b63\u5e38\uff0c\u7136\u540eM\u9898\u633a\u50bb\u7684\uff0c\u66b4\u529b\u5c31\u80fd\u8fc7\uff0c\u7136\u540e\u8fd8\u60f3DAGdp\u7136\u540e\u8fd8\u8d21\u732e\u4e86\u4e00\u53d1\u7f5a\u65f6\uff0c\u66b4\u529b\u4e4b\u540e\u6ca1\u5f00ll\u53c8\u8d21\u732e\u4e00\u53d1\u7f5a\u65f6\u3002E\u9898\u961f\u53cb\u5199\u5410\u4e86\uff0c\u8fd8\u91cd\u542f\u4e86\u56db\u6b21\u673a\u5668\uff0cCLion\u65e0\u5185\u5b58\u4fdd\u62a4\u786e\u5b9e\u96be\u9876\uff08\u6240\u4ee5dfs\u4e3a\u4ec0\u4e48\u80fd\u5199\u70b8\u5462\uff09\u3002\u7136\u540eG\u9898\u4e00\u76f4\u4ee5\u4e3a\u8111\u762b\u6a21\u62df\uff0c\u7136\u540e\u8d5b\u540e\u53d1\u73b0\u9898\u610f\u8bfb\u9519\u4e86\uff0c\u5176\u5b9e\u8d5b\u4e2d\u5df2\u7ecf\u5199\u7684\u5dee\u4e0d\u591a\u4e86\u3002H\u9898\u5176\u5b9e\u4e5f\u770b\u51fa\u6b63\u89e3\u4e86\uff0c\u5fd8\u8bb0\u52a0\u968f\u673a\uff0c\u7ed3\u679cTLE\u4e0d\u60f3\u6539\u4e86\uff0c\u7136\u540e\u8d5b\u540e\u544a\u8bc9\u6211\u771f\u7684\u662f\u6b63\u89e3\u3002\u4e94\u9898\u7b7e\u5230\u8fc7\u4e86\u7a33\u94f6\u51b2\u91d1\uff0c\u7ed3\u679c\u6700\u540e\u4e09\u9898\u722c\u4e86\u3002 \u7136\u540e\u5c31\u68a6\u6e383\u9898EC\u90fd\u80fd\u6253\u4e86\u4e2a\u61a8\u6279\u94dc\u724c\uff0c\u60f3\u628a\u5956\u724c\u6254\u8fdb\u5783\u573e\u6876\u3002 \u7136\u540e\u65e0\u6eda\u699c\u3001\u542c\u67d0\u7262\u5382\u4e00\u5171\u8bb2\u4e863\u4e2a\u5c0f\u65f6\u3001\u8fd8\u4e0d\u5982\u65e9\u8d70\u4e86\uff0c\u724c\u90fd\u4e0d\u60f3\u8981\u3002\u7136\u540e\u6e05\u534e\u559c\u63d0\u8d5b\u5b63\u7b2c\u4e00\u679a\u94dc\u724c\uff08\u4eba\u5de5\u53d1\u724c\u5ff5\u9519\u4e86\uff09\u3002","title":"\u8d5b\u540e\u603b\u7ed3"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/","text":"2019 Multi-University Training Contest 1 Link Date Solved A B C D E F G H I J K L M 2019/7/22 6/13 \u00d8 O . \u00d8 O . . . \u00d8 . . . \u00d8 A. Blank Link \u75280123\u6784\u9020\u4e00\u4e2a\u5e8f\u5217\uff0c\u6709m\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u63cf\u8ff0\u7684\u662f l \u5230 r \u5185\u6070\u597d\u6709 k \u79cd\u6570\uff0c\u6c42\u65b9\u6848\u6570\u3002 dp[i][j][k][t] \u8868\u793a\u8bbe0123\u5206\u522b\u51fa\u73b0\u7684\u6700\u540e\u4f4d\u7f6e\u4e3a i_,j_,k_,t_ \uff0c\u90a3\u4e48\u5c06\u8fd9\u56db\u4e2a\u4f4d\u7f6e\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\u5f97\u5230 i,j,k,t \uff0c\u6240\u8868\u793a\u7684\u5408\u6cd5\u65b9\u6848\u6570\u3002\u7531\u4e8e\u6bcf\u4e2a\u5730\u65b9\u90fd\u8981\u586b\u6570\uff0c\u5176\u5b9e i \u5fc5\u7136\u662f\u5f53\u524d\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u679a\u4e3e\u4e00\u7ef4 i \uff0c\u7136\u540e\u9012\u63a8\u5f0f\u5f88\u8f7b\u6613\u7684\u63a8\u51fa\u6765\uff0c\u5982\u4e0b\uff1a \\begin{cases} dp[i -1][j][k][t] \\to dp[i][j][k][t]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][j][k]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][j][t]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][k][t]\\\\ \\end{cases} \u6ce8\u610f\u8981\u53bb\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u5bf9\u6bcf\u4e2ar\u8bb0\u5f55\u6240\u6709\u7684 (l,k) \uff0c\u7136\u540e\u679a\u4e3ei\u5230r\u65f6\uff0c\u5982\u679c 1(\u5f53\u524d\u4f4d\u5fc5\u6709\u4e00\u79cd\u6570)+(j\\ge l) + (k \\ge l) + (t \\ge l) \\neq k \u5c31\u628a\u8be5\u72b6\u6001\u6539\u4e3a0\u3002 \u7136\u540e\u5c31\u6ce8\u610f\u4e00\u4e0b\u591a\u7ec4\u6e05\u96f6\u7684\u7ec6\u8282\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 105 ; const int mod = 998244353 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct mint { int n ; mint ( int n_ = 0 ) : n ( n_ ) {} }; mint operator + ( mint a , mint b ) { return ( a . n += b . n ) >= mod ? a . n - mod : a . n ; } mint operator - ( mint a , mint b ) { return ( a . n -= b . n ) < 0 ? a . n + mod : a . n ; } mint operator * ( mint a , mint b ) { return 1LL * a . n * b . n % mod ; } mint & operator += ( mint & a , mint b ) { return a = a + b ; } mint & operator -= ( mint & a , mint b ) { return a = a - b ; } mint & operator *= ( mint & a , mint b ) { return a = a * b ; } ostream & operator << ( ostream & o , mint a ) { return o << a . n ; } ll mul2 ( ll x , ll y , ll p ) { ll res = ( x * y - ( ll )(( long double ) x / p * y + 1.0e-8 ) * p ); return res < 0 ? res + p : res ; } mint dp [ 2 ][ maxn ][ maxn ][ maxn ]; int n , m ; vector < pair < int , int > > lim [ maxn ]; int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"my.out\", \"w\", stdout); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) lim [ i ]. clear (); for ( int i = 1 , u , v , w ; i <= m ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); lim [ v ]. emplace_back ( u , w ); } int now = 0 ; mint res = 0 ; dp [ 1 ][ 0 ][ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { dp [ now ][ j ][ k ][ t ] = 0 ; } } } for ( int j = 0 ; j < i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { dp [ now ][ j ][ k ][ t ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ j ][ k ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ k ][ t ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ j ][ t ] += dp [ ! now ][ j ][ k ][ t ]; } } } for ( int j = 0 ; j < i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { for ( auto x : lim [ i ]) { if ( 1 + ( j >= x . first ) + ( k >= x . first ) + ( t >= x . first ) != x . second ) { dp [ now ][ j ][ k ][ t ] = 0 ; } } if ( i == n ) { res += dp [ now ][ j ][ k ][ t ]; } } } } now = ! now ; } printf ( \"%d \\n \" , res . n ); } return 0 ; } B. Operation Link \u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6027\u57fa\uff0c\u63d2\u5165\u64cd\u4f5c\u4e3a\u7ee7\u627f\u4e0a\u4e00\u4e2a\u70b9\u7684\u7ebf\u6027\u57fa\u5e76\u63d2\u5165\u5f53\u524d\u70b9\u7684\u503c\u3002 \u7ef4\u62a4\u6bcf\u4e2a\u57fa\u5e95\u7ec4\u6210\u7684\u70b9g[i]\uff0c\u5728\u672a\u77e5L\u7684\u60c5\u51b5\u4e0b\u4f7f\u67e5\u8be2LR\u5c3d\u53ef\u80fd\u5927\uff0c\u8003\u8651\u8d2a\u5fc3\uff0c\u4f7f\u7ec4\u6210\u7ebf\u6027\u57fa\u7684\u70b9\u5c3d\u53ef\u80fd\u9760\u8fd1\u5f53\u524d\u70b9\u3002 \u5177\u4f53\u64cd\u4f5c\u4e3a\uff0c\u5bf9\u4e8e\u67d0\u4e00\u4f4d\u7684\u70b9g[i]\uff0c\u5982\u679cpos>g[i]\uff0c\u5219\u628apos\u4e0eg[i]\u4ea4\u6362\uff0c\u4f7fpos\u6210\u4e3a\u7ebf\u6027\u57fa\u7684\u57fa\u5e95\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u67e5\u8be2\u7b2cR\u4e2a\u7ebf\u6027\u57fa\u6240\u6709pos\u5927\u4e8eL\u7684\u57fa\u5e95\u80fd\u7ec4\u6210\u7684\u6700\u5927\u503c\u3002 Code Link #include <bits/stdc++.h> using namespace std ; const int maxn = 1e6 + 10 ; int n ; inline int getpos ( int x , int lasans ) { return ( x ^ lasans ) % n + 1 ; } struct LinearBasis { int f [ 30 ], g [ 30 ]; void ins ( int x , int pos ) { for ( int i = 29 ; ~ i ; i -- ) { if (( x >> i ) & 1 ) { if ( f [ i ]) { if ( g [ i ] <= pos ) { x ^= f [ i ]; f [ i ] ^= x ; swap ( g [ i ], pos ); } else x ^= f [ i ]; } else { f [ i ] = x ; g [ i ] = pos ; break ; } } } } int query ( int l ) { int res = 0 ; for ( int i = 29 ; ~ i ; i -- ) if ( g [ i ] >= l ) res = max ( res , res ^ f [ i ]); return res ; } } base [ maxn ]; int main () { int t , q , op , l , r , x ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & q ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); base [ i ] = base [ i - 1 ]; base [ i ]. ins ( x , i ); } int ans = 0 ; while ( q -- ) { scanf ( \"%d\" , & op ); if ( op == 0 ) { scanf ( \"%d%d\" , & l , & r ); l = getpos ( l , ans ), r = getpos ( r , ans ); if ( l > r ) swap ( l , r ); printf ( \"%d \\n \" , ans = base [ r ]. query ( l )); } else { scanf ( \"%d\" , & x ); n ++ ; base [ n ] = base [ n - 1 ], base [ n ]. ins ( x ^ ans , n ); } } } return 0 ; } D. Vacation Link \u8003\u8651 O(n) O(n) \u7684\u89e3\u6cd5\u3002 \u5bf9\u4e8e\u67d0\u4e00\u8f86\u8f66 x x \uff0c\u8ba1\u7b97\u5b83\u5230\u8fbe\u8ddd\u79bb\u505c\u8f66\u7ebf0\u70b9\u5411\u53f3\u8ddd\u79bb\u4e3a \\sum_{i=1}^x l_i\u200b \\sum_{i=1}^x l_i\u200b \u7684\u65f6\u95f4\uff0c\u6700\u5927\u503c\u5373\u4e3a\u7b54\u6848\u3002 \u4e3a\u4ec0\u4e48 \uff1a\u56e0\u4e3a\u5982\u679c\u67d0\u4e00\u8f86\u8f66\u6ca1\u6709\u5230\u8fbe\u8fd9\u4e2a\u70b9\uff0c\u5b83\u540e\u9762\u7684\u8f66\u80af\u5b9a\u88ab\u5b83\u5835\u4f4f\u4e86\uff0c\u4e5f\u5c31\u5bfc\u81f40\u8f66\u4e0d\u80fd\u5230\u8fbe\u505c\u8f66\u7ebf\u3002\u6240\u4ee5\u6bcf\u8f86\u8f66\u90fd\u8d85\u8fc7\u4e86\u5b83\u5bf9\u5e94\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u95f4\u5c31\u662f\u7b54\u6848\u3002 Code Link #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; int l [ maxn ], s [ maxn ], v [ maxn ]; int main () { int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & l [ i ]); for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & s [ i ]); for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & v [ i ]); long long L = 0 ; double ans = 1.0 * s [ 0 ] / v [ 0 ], tm ; for ( int i = 1 ; i <= n ; i ++ ) { L += l [ i ]; tm = 1.0 * ( L + s [ i ]) / v [ i ]; ans = max ( ans , tm ); } printf ( \"%f \\n \" , ans ); } return 0 ; } E. Path Link \u8dd1\u51fa\u6700\u77ed\u8def\uff0c\u53d6\u80fd\u591f\u7ec4\u6210\u6700\u77ed\u8def\u7684\u6240\u6709\u8fb9\uff0c\u5efa\u65b0\u56fe\u6c42\u6700\u5c0f\u5272\u3002 Code Link #include <bits/stdc++.h> #define int long long using namespace std ; const int maxn = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edges { int to , cap , rev ; }; struct Dinic { vector < edges > G [ maxn ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ maxn ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ maxn ]; //\u5f53\u524d\u5f27 void init () { for ( int i = 1 ; i < maxn ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edges ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edges ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edges & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edges & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } } dinic ; struct Edge { int nex , to , tot , w ; } edge [ maxn ]; struct Dijkstra { int head [ maxn ], dis [ maxn ], cnt ; void init () { memset ( head , 0xff , sizeof head ); cnt = 0 ; } void add ( int u , int v , int w ) { if ( u == v ) return ; int p = - 1 ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) if ( edge [ i ]. to == v ) { p = i ; break ; } if ( ~ p ) { if ( w < edge [ p ]. w ) edge [ p ]. w = w , edge [ p ]. tot = 1 ; else if ( w == edge [ p ]. w ) edge [ p ]. tot ++ ; return ; } edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; edge [ cnt ]. tot = 1 ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); dinic . add ( u , v , w * edge [ i ]. tot ); } else if ( dis [ u ] + w == dis [ v ]) dinic . add ( u , v , w * edge [ i ]. tot ); } } } } G ; signed main () { int t , n , m , u , v , w ; scanf ( \"%lld\" , & t ); while ( t -- ) { scanf ( \"%lld%lld\" , & n , & m ); G . init (); dinic . init (); while ( m -- ) { scanf ( \"%lld%lld%lld\" , & u , & v , & w ); G . add ( u , v , w ); } G . dijkstra ( 1 ); printf ( \"%lld \\n \" , dinic . max_flow ( 1 , n )); } return 0 ; } F. Typewriter Link \u4ee4 dp[i] \u8868\u793a\u6253\u51fa\u524di\u4e2a\u5b57\u7b26\u7684\u82b1\u8d39\u3002\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c dp[i]=dp[i-1]+p \uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u8003\u8651\u6709\u4e00\u4e2a\u6700\u5c0f\u7684 j j \uff0c\u4f7f s(j+1,i) s(j+1,i) \u662f s(1,j) s(1,j) \u7684\u5b50\u4e32\uff0c\u6b64\u65f6\u82b1\u8d39\u4e3a dp[i]=dp[j]+q \uff0c\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b dp[i]=min(dp[i-1]+p,dp[j]+q) dp[i]=min(dp[i-1]+p,dp[j]+q) <span><span class=\"MathJax_Preview\">dp[i]=min(dp[i-1]+p,dp[j]+q)</span><script type=\"math/tex\">dp[i]=min(dp[i-1]+p,dp[j]+q) \u5bf9\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u8003\u8651\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7ef4\u62a4\u4e32 s(1,j) s(1,j) \uff0c\u5f53SAM\u5185\u4e0d\u5b58\u5728 s(j+1,i) s(j+1,i) \u65f6\u4e0d\u65ad\u5f80\u540e\u6dfb\u52a0\u5b57\u7b26\u5e76\u4f7f j=j+1 \uff0c\u76f4\u5230\u627e\u5230\u4e32 s(j+1,i) s(j+1,i) \uff0c\u590d\u6742\u5ea6 O(n) O(n) \u3002 Code Link #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e5 + 10 ; char s [ maxn ]; ll p , q , dp [ maxn ]; struct SuffixAutomation { int last , cnt ; int ch [ maxn << 1 ][ 26 ], fa [ maxn << 1 ], len [ maxn << 1 ]; void init () { last = cnt = 1 ; memset ( ch [ 1 ], 0 , sizeof ch [ 1 ]); fa [ 1 ] = len [ 1 ] = 0 ; } int inline newnode () { ++ cnt ; memset ( ch [ cnt ], 0 , sizeof ch [ cnt ]); fa [ cnt ] = len [ cnt ] = 0 ; return cnt ; } void ins ( int c ) { int p = last , np = newnode (); last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = newnode (); len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } } ll solve () { int n = strlen ( s ); init (); ins ( s [ 0 ] - 'a' ); dp [ 0 ] = p ; int pos = 1 , j = 0 ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] = dp [ i - 1 ] + p ; for (;;) { while ( pos != 1 && len [ fa [ pos ]] >= i - j - 1 ) pos = fa [ pos ]; if ( ch [ pos ][ s [ i ] - 'a' ]) { pos = ch [ pos ][ s [ i ] - 'a' ]; break ; } else ins ( s [ ++ j ] - 'a' ); } dp [ i ] = min ( dp [ i ], dp [ j ] + q ); } return dp [ n - 1 ]; } } sam ; int main () { while ( scanf ( \"%s\" , s ) != EOF ) { scanf ( \"%lld%lld\" , & p , & q ); printf ( \"%lld \\n \" , sam . solve ()); } return 0 ; } I. String Link \u9010\u4f4d\u6784\u9020\u7b54\u6848\uff0c\u8d2a\u5fc3\u5730\u52a0\u5165\u80fd\u591f\u52a0\u5165\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\uff08\u5224\u65ad\u52a0\u5165\u4e4b\u540e\u5269\u4e0b\u7684\u540e\u7f00\u4e2d\u6bcf\u79cd\u5b57\u7b26\u7684\u6570\u76ee\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff09\u3002 Code Link #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; char s [ maxn ], s1 [ maxn ]; int cnt [ maxn ][ 26 ], l [ 26 ], r [ 26 ], used [ 26 ]; vector < int > g [ 26 ]; int main () { int n , m ; while ( scanf ( \"%s%d\" , s , & m ) != EOF ) { n = strlen ( s ); for ( int i = 0 ; i < 26 ; i ++ ) scanf ( \"%d%d\" , & l [ i ], & r [ i ]); memset ( used , 0 , sizeof used ); memset ( cnt , 0 , sizeof cnt ); for ( int i = 0 ; i < 26 ; i ++ ) g [ i ]. clear (); for ( int i = 0 ; i < n ; i ++ ) g [ s [ i ] - 'a' ]. push_back ( i ); for ( int i = n - 1 ; i >= 0 ; i -- ) for ( int j = 0 ; j < 26 ; j ++ ) cnt [ i ][ j ] = cnt [ i + 1 ][ j ] + ( s [ i ] == 'a' + j ); vector < int >:: iterator head [ 26 ]; for ( int i = 0 ; i < 26 ; i ++ ) head [ i ] = g [ i ]. begin (); int last = - 1 , now = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( used [ j ] == r [ j ]) continue ; while ( head [ j ] != g [ j ]. end () && ( * head [ j ]) <= last ) head [ j ] ++ ; if ( head [ j ] == g [ j ]. end ()) continue ; bool flag = true ; int sum = 0 , pos = * head [ j ]; used [ j ] ++ ; for ( int k = 0 ; k < 26 ; k ++ ) { if ( cnt [ pos + 1 ][ k ] + used [ k ] < l [ k ]) flag = false ; sum += max ( l [ k ] - used [ k ], 0 ); } if ( sum > m - i - 1 ) flag = false ; sum = 0 ; for ( int k = 0 ; k < 26 ; k ++ ) sum += min ( cnt [ pos + 1 ][ k ], r [ k ] - used [ k ]); if ( sum < m - i - 1 ) flag = false ; if ( ! flag ) used [ j ] -- ; else { s1 [ i ] = 'a' + j ; last = pos ; now ++ ; break ; } } if ( now == i ) break ; } s1 [ m ] = 0 ; if ( now < m ) printf ( \"-1 \\n \" ); else printf ( \"%s \\n \" , s1 ); } return 0 ; } M. Code Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u70b9\uff0c\u6c42\u611f\u77e5\u673a\u662f\u5426\u6709\u89e3\uff08\u5373\u80fd\u5426\u4e8c\u5206\u7c7b\uff0c\u7528\u4e00\u6761\u76f4\u7ebf\u5c06\u4e24\u79cd\u70b9\u5206\u5f00\uff09 \u9898\u89e3\uff1a\u5206\u522b\u6c42\u4e24\u7c7b\u7684\u51f8\u5305\uff0c\u5224\u662f\u5426\u51f8\u5305\u76f8\u4ea4\uff0c\u65b9\u6cd5\u662f\u679a\u4e3e\u51f8\u5305\u5185\u7684\u6bcf\u4e2a\u70b9\u770b\u662f\u5426\u5728\u53e6\u4e2a\u51f8\u5305\u5185\uff0c\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u70b9\u4e24\u51f8\u5305\u5c31\u76f8\u4ea4\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #pragma GCC optimize(\"Ofast\") #pragma GCC optimize (\"unroll-loops\") #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\") #pragma comment(linker, \"/STACK:102400000,102400000\") using namespace std ; const int maxn = 1e6 + 5 ; #define mp make_pair #define fi first #define se second #define pb push_back typedef double db ; const db eps = 1e-6 ; const db pi = acos ( - 1 ); int sign ( db k ){ if ( k > eps ) return 1 ; else if ( k <- eps ) return - 1 ; return 0 ; } int cmp ( db k1 , db k2 ){ return sign ( k1 - k2 );} int inmid ( db k1 , db k2 , db k3 ){ return sign ( k1 - k3 ) * sign ( k2 - k3 ) <= 0 ;} // k3 \u5728 [k1,k2] \u5185 struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} int operator == ( const point & k1 ) const { return cmp ( x , k1 . x ) == 0 && cmp ( y , k1 . y ) == 0 ;} // \u9006\u65f6\u9488\u65cb\u8f6c point turn ( db k1 ){ return ( point ){ x * cos ( k1 ) - y * sin ( k1 ), x * sin ( k1 ) + y * cos ( k1 )};} point turn90 (){ return ( point ){ - y , x };} bool operator < ( const point k1 ) const { int a = cmp ( x , k1 . x ); if ( a ==- 1 ) return 1 ; else if ( a == 1 ) return 0 ; else return cmp ( y , k1 . y ) ==- 1 ; } db abs (){ return sqrt ( x * x + y * y );} db abs2 (){ return x * x + y * y ;} db dis ( point k1 ){ return (( * this ) - k1 ). abs ();} point unit (){ db w = abs (); return ( point ){ x / w , y / w };} void scan (){ double k1 , k2 ; scanf ( \"%lf%lf\" , & k1 , & k2 ); x = k1 ; y = k2 ;} void print (){ printf ( \"%.11lf %.11lf \\n \" , x , y );} db getw (){ return atan2 ( y , x );} point getdel (){ if ( sign ( x ) ==- 1 || ( sign ( x ) == 0 && sign ( y ) ==- 1 )) return ( * this ) * ( - 1 ); else return ( * this );} int getP () const { return sign ( y ) == 1 || ( sign ( y ) == 0 && sign ( x ) ==- 1 );} }; int inmid ( point k1 , point k2 , point k3 ){ return inmid ( k1 . x , k2 . x , k3 . x ) && inmid ( k1 . y , k2 . y , k3 . y );} db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} int onS ( point k1 , point k2 , point q ){ return inmid ( k1 , k2 , q ) && sign ( cross ( k1 - q , k2 - k1 )) == 0 ;} vector < point > ConvexHull ( vector < point > A , int flag = 1 ){ // flag=0 \u4e0d\u4e25\u683c flag=1 \u4e25\u683c int n = A . size (); vector < point > ans ( n * 2 ); sort ( A . begin (), A . end ()); int now =- 1 ; for ( int i = 0 ; i < A . size (); i ++ ){ while ( now > 0 && sign ( cross ( ans [ now ] - ans [ now - 1 ], A [ i ] - ans [ now - 1 ])) < flag ) now -- ; ans [ ++ now ] = A [ i ]; } int pre = now ; for ( int i = n - 2 ; i >= 0 ; i -- ){ while ( now > pre && sign ( cross ( ans [ now ] - ans [ now - 1 ], A [ i ] - ans [ now - 1 ])) < flag ) now -- ; ans [ ++ now ] = A [ i ]; } ans . resize ( now ); return ans ; } //\u5feb\u901f\u5224\u65ad\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185 int contain ( vector < point > A , point q ){ // 2 \u5185\u90e8 1 \u8fb9\u754c 0 \u5916\u90e8 int pd = 0 ; A . push_back ( A [ 0 ]); for ( int i = 1 ; i < A . size (); i ++ ){ point u = A [ i - 1 ], v = A [ i ]; if ( onS ( u , v , q )) return 1 ; if ( cmp ( u . y , v . y ) > 0 ) swap ( u , v ); if ( cmp ( u . y , q . y ) >= 0 || cmp ( v . y , q . y ) < 0 ) continue ; if ( sign ( cross ( u - v , q - v )) < 0 ) pd ^= 1 ; } return pd << 1 ; } int main () { int n , T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); int op ; vector < point > t1 , t2 ; point x ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lf%lf\" , & x . x , & x . y ); scanf ( \"%d\" , & op ); if ( op == 1 ) t1 . push_back ( x ); else t2 . push_back ( x ); } t1 = ConvexHull ( t1 ); t2 = ConvexHull ( t2 ); int flag = 1 ; for ( auto i : t1 ) { if ( contain ( t2 , i )) { flag = 0 ; break ; } } for ( auto j : t2 ) { if ( contain ( t1 , j )) { flag = 0 ; break ; } } printf ( \"%s \\n \" , flag ? \"Successful!\" : \"Infinite loop!\" ); } return 0 ; }","title":"2019 Multi University Training Contest 1"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#2019-multi-university-training-contest-1","text":"Date Solved A B C D E F G H I J K L M 2019/7/22 6/13 \u00d8 O . \u00d8 O . . . \u00d8 . . . \u00d8","title":"2019 Multi-University Training Contest 1"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#a-blank","text":"\u75280123\u6784\u9020\u4e00\u4e2a\u5e8f\u5217\uff0c\u6709m\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u63cf\u8ff0\u7684\u662f l \u5230 r \u5185\u6070\u597d\u6709 k \u79cd\u6570\uff0c\u6c42\u65b9\u6848\u6570\u3002 dp[i][j][k][t] \u8868\u793a\u8bbe0123\u5206\u522b\u51fa\u73b0\u7684\u6700\u540e\u4f4d\u7f6e\u4e3a i_,j_,k_,t_ \uff0c\u90a3\u4e48\u5c06\u8fd9\u56db\u4e2a\u4f4d\u7f6e\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\u5f97\u5230 i,j,k,t \uff0c\u6240\u8868\u793a\u7684\u5408\u6cd5\u65b9\u6848\u6570\u3002\u7531\u4e8e\u6bcf\u4e2a\u5730\u65b9\u90fd\u8981\u586b\u6570\uff0c\u5176\u5b9e i \u5fc5\u7136\u662f\u5f53\u524d\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u679a\u4e3e\u4e00\u7ef4 i \uff0c\u7136\u540e\u9012\u63a8\u5f0f\u5f88\u8f7b\u6613\u7684\u63a8\u51fa\u6765\uff0c\u5982\u4e0b\uff1a \\begin{cases} dp[i -1][j][k][t] \\to dp[i][j][k][t]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][j][k]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][j][t]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][k][t]\\\\ \\end{cases} \u6ce8\u610f\u8981\u53bb\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u5bf9\u6bcf\u4e2ar\u8bb0\u5f55\u6240\u6709\u7684 (l,k) \uff0c\u7136\u540e\u679a\u4e3ei\u5230r\u65f6\uff0c\u5982\u679c 1(\u5f53\u524d\u4f4d\u5fc5\u6709\u4e00\u79cd\u6570)+(j\\ge l) + (k \\ge l) + (t \\ge l) \\neq k \u5c31\u628a\u8be5\u72b6\u6001\u6539\u4e3a0\u3002 \u7136\u540e\u5c31\u6ce8\u610f\u4e00\u4e0b\u591a\u7ec4\u6e05\u96f6\u7684\u7ec6\u8282\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 105 ; const int mod = 998244353 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct mint { int n ; mint ( int n_ = 0 ) : n ( n_ ) {} }; mint operator + ( mint a , mint b ) { return ( a . n += b . n ) >= mod ? a . n - mod : a . n ; } mint operator - ( mint a , mint b ) { return ( a . n -= b . n ) < 0 ? a . n + mod : a . n ; } mint operator * ( mint a , mint b ) { return 1LL * a . n * b . n % mod ; } mint & operator += ( mint & a , mint b ) { return a = a + b ; } mint & operator -= ( mint & a , mint b ) { return a = a - b ; } mint & operator *= ( mint & a , mint b ) { return a = a * b ; } ostream & operator << ( ostream & o , mint a ) { return o << a . n ; } ll mul2 ( ll x , ll y , ll p ) { ll res = ( x * y - ( ll )(( long double ) x / p * y + 1.0e-8 ) * p ); return res < 0 ? res + p : res ; } mint dp [ 2 ][ maxn ][ maxn ][ maxn ]; int n , m ; vector < pair < int , int > > lim [ maxn ]; int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"my.out\", \"w\", stdout); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) lim [ i ]. clear (); for ( int i = 1 , u , v , w ; i <= m ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); lim [ v ]. emplace_back ( u , w ); } int now = 0 ; mint res = 0 ; dp [ 1 ][ 0 ][ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { dp [ now ][ j ][ k ][ t ] = 0 ; } } } for ( int j = 0 ; j < i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { dp [ now ][ j ][ k ][ t ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ j ][ k ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ k ][ t ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ j ][ t ] += dp [ ! now ][ j ][ k ][ t ]; } } } for ( int j = 0 ; j < i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { for ( auto x : lim [ i ]) { if ( 1 + ( j >= x . first ) + ( k >= x . first ) + ( t >= x . first ) != x . second ) { dp [ now ][ j ][ k ][ t ] = 0 ; } } if ( i == n ) { res += dp [ now ][ j ][ k ][ t ]; } } } } now = ! now ; } printf ( \"%d \\n \" , res . n ); } return 0 ; }","title":"A. Blank"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#b-operation","text":"\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6027\u57fa\uff0c\u63d2\u5165\u64cd\u4f5c\u4e3a\u7ee7\u627f\u4e0a\u4e00\u4e2a\u70b9\u7684\u7ebf\u6027\u57fa\u5e76\u63d2\u5165\u5f53\u524d\u70b9\u7684\u503c\u3002 \u7ef4\u62a4\u6bcf\u4e2a\u57fa\u5e95\u7ec4\u6210\u7684\u70b9g[i]\uff0c\u5728\u672a\u77e5L\u7684\u60c5\u51b5\u4e0b\u4f7f\u67e5\u8be2LR\u5c3d\u53ef\u80fd\u5927\uff0c\u8003\u8651\u8d2a\u5fc3\uff0c\u4f7f\u7ec4\u6210\u7ebf\u6027\u57fa\u7684\u70b9\u5c3d\u53ef\u80fd\u9760\u8fd1\u5f53\u524d\u70b9\u3002 \u5177\u4f53\u64cd\u4f5c\u4e3a\uff0c\u5bf9\u4e8e\u67d0\u4e00\u4f4d\u7684\u70b9g[i]\uff0c\u5982\u679cpos>g[i]\uff0c\u5219\u628apos\u4e0eg[i]\u4ea4\u6362\uff0c\u4f7fpos\u6210\u4e3a\u7ebf\u6027\u57fa\u7684\u57fa\u5e95\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u67e5\u8be2\u7b2cR\u4e2a\u7ebf\u6027\u57fa\u6240\u6709pos\u5927\u4e8eL\u7684\u57fa\u5e95\u80fd\u7ec4\u6210\u7684\u6700\u5927\u503c\u3002","title":"B. Operation"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#code","text":"#include <bits/stdc++.h> using namespace std ; const int maxn = 1e6 + 10 ; int n ; inline int getpos ( int x , int lasans ) { return ( x ^ lasans ) % n + 1 ; } struct LinearBasis { int f [ 30 ], g [ 30 ]; void ins ( int x , int pos ) { for ( int i = 29 ; ~ i ; i -- ) { if (( x >> i ) & 1 ) { if ( f [ i ]) { if ( g [ i ] <= pos ) { x ^= f [ i ]; f [ i ] ^= x ; swap ( g [ i ], pos ); } else x ^= f [ i ]; } else { f [ i ] = x ; g [ i ] = pos ; break ; } } } } int query ( int l ) { int res = 0 ; for ( int i = 29 ; ~ i ; i -- ) if ( g [ i ] >= l ) res = max ( res , res ^ f [ i ]); return res ; } } base [ maxn ]; int main () { int t , q , op , l , r , x ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & q ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); base [ i ] = base [ i - 1 ]; base [ i ]. ins ( x , i ); } int ans = 0 ; while ( q -- ) { scanf ( \"%d\" , & op ); if ( op == 0 ) { scanf ( \"%d%d\" , & l , & r ); l = getpos ( l , ans ), r = getpos ( r , ans ); if ( l > r ) swap ( l , r ); printf ( \"%d \\n \" , ans = base [ r ]. query ( l )); } else { scanf ( \"%d\" , & x ); n ++ ; base [ n ] = base [ n - 1 ], base [ n ]. ins ( x ^ ans , n ); } } } return 0 ; }","title":"Code"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#d-vacation","text":"\u8003\u8651 O(n) O(n) \u7684\u89e3\u6cd5\u3002 \u5bf9\u4e8e\u67d0\u4e00\u8f86\u8f66 x x \uff0c\u8ba1\u7b97\u5b83\u5230\u8fbe\u8ddd\u79bb\u505c\u8f66\u7ebf0\u70b9\u5411\u53f3\u8ddd\u79bb\u4e3a \\sum_{i=1}^x l_i\u200b \\sum_{i=1}^x l_i\u200b \u7684\u65f6\u95f4\uff0c\u6700\u5927\u503c\u5373\u4e3a\u7b54\u6848\u3002 \u4e3a\u4ec0\u4e48 \uff1a\u56e0\u4e3a\u5982\u679c\u67d0\u4e00\u8f86\u8f66\u6ca1\u6709\u5230\u8fbe\u8fd9\u4e2a\u70b9\uff0c\u5b83\u540e\u9762\u7684\u8f66\u80af\u5b9a\u88ab\u5b83\u5835\u4f4f\u4e86\uff0c\u4e5f\u5c31\u5bfc\u81f40\u8f66\u4e0d\u80fd\u5230\u8fbe\u505c\u8f66\u7ebf\u3002\u6240\u4ee5\u6bcf\u8f86\u8f66\u90fd\u8d85\u8fc7\u4e86\u5b83\u5bf9\u5e94\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u95f4\u5c31\u662f\u7b54\u6848\u3002","title":"D. Vacation"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#code_1","text":"#include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; int l [ maxn ], s [ maxn ], v [ maxn ]; int main () { int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & l [ i ]); for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & s [ i ]); for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & v [ i ]); long long L = 0 ; double ans = 1.0 * s [ 0 ] / v [ 0 ], tm ; for ( int i = 1 ; i <= n ; i ++ ) { L += l [ i ]; tm = 1.0 * ( L + s [ i ]) / v [ i ]; ans = max ( ans , tm ); } printf ( \"%f \\n \" , ans ); } return 0 ; }","title":"Code"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#e-path","text":"\u8dd1\u51fa\u6700\u77ed\u8def\uff0c\u53d6\u80fd\u591f\u7ec4\u6210\u6700\u77ed\u8def\u7684\u6240\u6709\u8fb9\uff0c\u5efa\u65b0\u56fe\u6c42\u6700\u5c0f\u5272\u3002","title":"E. Path"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#code_2","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int maxn = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edges { int to , cap , rev ; }; struct Dinic { vector < edges > G [ maxn ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ maxn ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ maxn ]; //\u5f53\u524d\u5f27 void init () { for ( int i = 1 ; i < maxn ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edges ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edges ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edges & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edges & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } } dinic ; struct Edge { int nex , to , tot , w ; } edge [ maxn ]; struct Dijkstra { int head [ maxn ], dis [ maxn ], cnt ; void init () { memset ( head , 0xff , sizeof head ); cnt = 0 ; } void add ( int u , int v , int w ) { if ( u == v ) return ; int p = - 1 ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) if ( edge [ i ]. to == v ) { p = i ; break ; } if ( ~ p ) { if ( w < edge [ p ]. w ) edge [ p ]. w = w , edge [ p ]. tot = 1 ; else if ( w == edge [ p ]. w ) edge [ p ]. tot ++ ; return ; } edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; edge [ cnt ]. tot = 1 ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); dinic . add ( u , v , w * edge [ i ]. tot ); } else if ( dis [ u ] + w == dis [ v ]) dinic . add ( u , v , w * edge [ i ]. tot ); } } } } G ; signed main () { int t , n , m , u , v , w ; scanf ( \"%lld\" , & t ); while ( t -- ) { scanf ( \"%lld%lld\" , & n , & m ); G . init (); dinic . init (); while ( m -- ) { scanf ( \"%lld%lld%lld\" , & u , & v , & w ); G . add ( u , v , w ); } G . dijkstra ( 1 ); printf ( \"%lld \\n \" , dinic . max_flow ( 1 , n )); } return 0 ; }","title":"Code"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#f-typewriter","text":"\u4ee4 dp[i] \u8868\u793a\u6253\u51fa\u524di\u4e2a\u5b57\u7b26\u7684\u82b1\u8d39\u3002\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c dp[i]=dp[i-1]+p \uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u8003\u8651\u6709\u4e00\u4e2a\u6700\u5c0f\u7684 j j \uff0c\u4f7f s(j+1,i) s(j+1,i) \u662f s(1,j) s(1,j) \u7684\u5b50\u4e32\uff0c\u6b64\u65f6\u82b1\u8d39\u4e3a dp[i]=dp[j]+q \uff0c\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b dp[i]=min(dp[i-1]+p,dp[j]+q) dp[i]=min(dp[i-1]+p,dp[j]+q) <span><span class=\"MathJax_Preview\">dp[i]=min(dp[i-1]+p,dp[j]+q)</span><script type=\"math/tex\">dp[i]=min(dp[i-1]+p,dp[j]+q) \u5bf9\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u8003\u8651\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7ef4\u62a4\u4e32 s(1,j) s(1,j) \uff0c\u5f53SAM\u5185\u4e0d\u5b58\u5728 s(j+1,i) s(j+1,i) \u65f6\u4e0d\u65ad\u5f80\u540e\u6dfb\u52a0\u5b57\u7b26\u5e76\u4f7f j=j+1 \uff0c\u76f4\u5230\u627e\u5230\u4e32 s(j+1,i) s(j+1,i) \uff0c\u590d\u6742\u5ea6 O(n) O(n) \u3002","title":"F. Typewriter"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#code_3","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e5 + 10 ; char s [ maxn ]; ll p , q , dp [ maxn ]; struct SuffixAutomation { int last , cnt ; int ch [ maxn << 1 ][ 26 ], fa [ maxn << 1 ], len [ maxn << 1 ]; void init () { last = cnt = 1 ; memset ( ch [ 1 ], 0 , sizeof ch [ 1 ]); fa [ 1 ] = len [ 1 ] = 0 ; } int inline newnode () { ++ cnt ; memset ( ch [ cnt ], 0 , sizeof ch [ cnt ]); fa [ cnt ] = len [ cnt ] = 0 ; return cnt ; } void ins ( int c ) { int p = last , np = newnode (); last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = newnode (); len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } } ll solve () { int n = strlen ( s ); init (); ins ( s [ 0 ] - 'a' ); dp [ 0 ] = p ; int pos = 1 , j = 0 ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] = dp [ i - 1 ] + p ; for (;;) { while ( pos != 1 && len [ fa [ pos ]] >= i - j - 1 ) pos = fa [ pos ]; if ( ch [ pos ][ s [ i ] - 'a' ]) { pos = ch [ pos ][ s [ i ] - 'a' ]; break ; } else ins ( s [ ++ j ] - 'a' ); } dp [ i ] = min ( dp [ i ], dp [ j ] + q ); } return dp [ n - 1 ]; } } sam ; int main () { while ( scanf ( \"%s\" , s ) != EOF ) { scanf ( \"%lld%lld\" , & p , & q ); printf ( \"%lld \\n \" , sam . solve ()); } return 0 ; }","title":"Code"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#i-string","text":"\u9010\u4f4d\u6784\u9020\u7b54\u6848\uff0c\u8d2a\u5fc3\u5730\u52a0\u5165\u80fd\u591f\u52a0\u5165\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\uff08\u5224\u65ad\u52a0\u5165\u4e4b\u540e\u5269\u4e0b\u7684\u540e\u7f00\u4e2d\u6bcf\u79cd\u5b57\u7b26\u7684\u6570\u76ee\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff09\u3002","title":"I. String"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#code_4","text":"#include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; char s [ maxn ], s1 [ maxn ]; int cnt [ maxn ][ 26 ], l [ 26 ], r [ 26 ], used [ 26 ]; vector < int > g [ 26 ]; int main () { int n , m ; while ( scanf ( \"%s%d\" , s , & m ) != EOF ) { n = strlen ( s ); for ( int i = 0 ; i < 26 ; i ++ ) scanf ( \"%d%d\" , & l [ i ], & r [ i ]); memset ( used , 0 , sizeof used ); memset ( cnt , 0 , sizeof cnt ); for ( int i = 0 ; i < 26 ; i ++ ) g [ i ]. clear (); for ( int i = 0 ; i < n ; i ++ ) g [ s [ i ] - 'a' ]. push_back ( i ); for ( int i = n - 1 ; i >= 0 ; i -- ) for ( int j = 0 ; j < 26 ; j ++ ) cnt [ i ][ j ] = cnt [ i + 1 ][ j ] + ( s [ i ] == 'a' + j ); vector < int >:: iterator head [ 26 ]; for ( int i = 0 ; i < 26 ; i ++ ) head [ i ] = g [ i ]. begin (); int last = - 1 , now = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( used [ j ] == r [ j ]) continue ; while ( head [ j ] != g [ j ]. end () && ( * head [ j ]) <= last ) head [ j ] ++ ; if ( head [ j ] == g [ j ]. end ()) continue ; bool flag = true ; int sum = 0 , pos = * head [ j ]; used [ j ] ++ ; for ( int k = 0 ; k < 26 ; k ++ ) { if ( cnt [ pos + 1 ][ k ] + used [ k ] < l [ k ]) flag = false ; sum += max ( l [ k ] - used [ k ], 0 ); } if ( sum > m - i - 1 ) flag = false ; sum = 0 ; for ( int k = 0 ; k < 26 ; k ++ ) sum += min ( cnt [ pos + 1 ][ k ], r [ k ] - used [ k ]); if ( sum < m - i - 1 ) flag = false ; if ( ! flag ) used [ j ] -- ; else { s1 [ i ] = 'a' + j ; last = pos ; now ++ ; break ; } } if ( now == i ) break ; } s1 [ m ] = 0 ; if ( now < m ) printf ( \"-1 \\n \" ); else printf ( \"%s \\n \" , s1 ); } return 0 ; }","title":"Code"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%201/#m-code","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u70b9\uff0c\u6c42\u611f\u77e5\u673a\u662f\u5426\u6709\u89e3\uff08\u5373\u80fd\u5426\u4e8c\u5206\u7c7b\uff0c\u7528\u4e00\u6761\u76f4\u7ebf\u5c06\u4e24\u79cd\u70b9\u5206\u5f00\uff09 \u9898\u89e3\uff1a\u5206\u522b\u6c42\u4e24\u7c7b\u7684\u51f8\u5305\uff0c\u5224\u662f\u5426\u51f8\u5305\u76f8\u4ea4\uff0c\u65b9\u6cd5\u662f\u679a\u4e3e\u51f8\u5305\u5185\u7684\u6bcf\u4e2a\u70b9\u770b\u662f\u5426\u5728\u53e6\u4e2a\u51f8\u5305\u5185\uff0c\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u70b9\u4e24\u51f8\u5305\u5c31\u76f8\u4ea4\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #pragma GCC optimize(\"Ofast\") #pragma GCC optimize (\"unroll-loops\") #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\") #pragma comment(linker, \"/STACK:102400000,102400000\") using namespace std ; const int maxn = 1e6 + 5 ; #define mp make_pair #define fi first #define se second #define pb push_back typedef double db ; const db eps = 1e-6 ; const db pi = acos ( - 1 ); int sign ( db k ){ if ( k > eps ) return 1 ; else if ( k <- eps ) return - 1 ; return 0 ; } int cmp ( db k1 , db k2 ){ return sign ( k1 - k2 );} int inmid ( db k1 , db k2 , db k3 ){ return sign ( k1 - k3 ) * sign ( k2 - k3 ) <= 0 ;} // k3 \u5728 [k1,k2] \u5185 struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} int operator == ( const point & k1 ) const { return cmp ( x , k1 . x ) == 0 && cmp ( y , k1 . y ) == 0 ;} // \u9006\u65f6\u9488\u65cb\u8f6c point turn ( db k1 ){ return ( point ){ x * cos ( k1 ) - y * sin ( k1 ), x * sin ( k1 ) + y * cos ( k1 )};} point turn90 (){ return ( point ){ - y , x };} bool operator < ( const point k1 ) const { int a = cmp ( x , k1 . x ); if ( a ==- 1 ) return 1 ; else if ( a == 1 ) return 0 ; else return cmp ( y , k1 . y ) ==- 1 ; } db abs (){ return sqrt ( x * x + y * y );} db abs2 (){ return x * x + y * y ;} db dis ( point k1 ){ return (( * this ) - k1 ). abs ();} point unit (){ db w = abs (); return ( point ){ x / w , y / w };} void scan (){ double k1 , k2 ; scanf ( \"%lf%lf\" , & k1 , & k2 ); x = k1 ; y = k2 ;} void print (){ printf ( \"%.11lf %.11lf \\n \" , x , y );} db getw (){ return atan2 ( y , x );} point getdel (){ if ( sign ( x ) ==- 1 || ( sign ( x ) == 0 && sign ( y ) ==- 1 )) return ( * this ) * ( - 1 ); else return ( * this );} int getP () const { return sign ( y ) == 1 || ( sign ( y ) == 0 && sign ( x ) ==- 1 );} }; int inmid ( point k1 , point k2 , point k3 ){ return inmid ( k1 . x , k2 . x , k3 . x ) && inmid ( k1 . y , k2 . y , k3 . y );} db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} int onS ( point k1 , point k2 , point q ){ return inmid ( k1 , k2 , q ) && sign ( cross ( k1 - q , k2 - k1 )) == 0 ;} vector < point > ConvexHull ( vector < point > A , int flag = 1 ){ // flag=0 \u4e0d\u4e25\u683c flag=1 \u4e25\u683c int n = A . size (); vector < point > ans ( n * 2 ); sort ( A . begin (), A . end ()); int now =- 1 ; for ( int i = 0 ; i < A . size (); i ++ ){ while ( now > 0 && sign ( cross ( ans [ now ] - ans [ now - 1 ], A [ i ] - ans [ now - 1 ])) < flag ) now -- ; ans [ ++ now ] = A [ i ]; } int pre = now ; for ( int i = n - 2 ; i >= 0 ; i -- ){ while ( now > pre && sign ( cross ( ans [ now ] - ans [ now - 1 ], A [ i ] - ans [ now - 1 ])) < flag ) now -- ; ans [ ++ now ] = A [ i ]; } ans . resize ( now ); return ans ; } //\u5feb\u901f\u5224\u65ad\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185 int contain ( vector < point > A , point q ){ // 2 \u5185\u90e8 1 \u8fb9\u754c 0 \u5916\u90e8 int pd = 0 ; A . push_back ( A [ 0 ]); for ( int i = 1 ; i < A . size (); i ++ ){ point u = A [ i - 1 ], v = A [ i ]; if ( onS ( u , v , q )) return 1 ; if ( cmp ( u . y , v . y ) > 0 ) swap ( u , v ); if ( cmp ( u . y , q . y ) >= 0 || cmp ( v . y , q . y ) < 0 ) continue ; if ( sign ( cross ( u - v , q - v )) < 0 ) pd ^= 1 ; } return pd << 1 ; } int main () { int n , T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); int op ; vector < point > t1 , t2 ; point x ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lf%lf\" , & x . x , & x . y ); scanf ( \"%d\" , & op ); if ( op == 1 ) t1 . push_back ( x ); else t2 . push_back ( x ); } t1 = ConvexHull ( t1 ); t2 = ConvexHull ( t2 ); int flag = 1 ; for ( auto i : t1 ) { if ( contain ( t2 , i )) { flag = 0 ; break ; } } for ( auto j : t2 ) { if ( contain ( t1 , j )) { flag = 0 ; break ; } } printf ( \"%s \\n \" , flag ? \"Successful!\" : \"Infinite loop!\" ); } return 0 ; }","title":"M. Code"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/","text":"2019 Multi-University Training Contest 2 Link Date Solved A B C D E F G H I J K L 2019/7/24 6/12 . . . . O . . \u00d8 \u00d8 O \u00d8 \u00d8 E. Everything Is Generated In Equal Probability Link \u66b4\u529b\u8dd1\u51fa\u524d\u4e24\u9879\uff0c\u6309\u9898\u610f\u6a21\u62df\u9898\u76ee\u7ed9\u7684\u968f\u673a\u7b97\u6cd5\u7b97\u51fa\u7b2c3,4\u9879\uff0c\u4e22\u8fdbOEIS\u627e\u89c4\u5f8b\u5f97\u5230\u901a\u9879\u3002 \u524d5\u9879\u5206\u522b\u662f0,\u2153,8/9,5/3,8/3\uff0c\u628a\u5206\u6bcd\u901a\u5206\u62109\u4e4b\u540e\u7684\u5206\u5b50\u5e8f\u5217\u662f0,3,8,15,24\uff0c\u90a3\u4e48\u901a\u9879\u5c31\u662f F(i)=\\frac{(i+1)(i-1)}{9} F(i)=\\frac{(i+1)(i-1)}{9} <span><span class=\"MathJax_Preview\">F(i)=\\frac{(i+1)(i-1)}{9}</span><script type=\"math/tex\">F(i)=\\frac{(i+1)(i-1)}{9} Code Link Random Link #include <bits/stdc++.h> #define random(a,b) ((a)+rand()%((b)-(a)+1)) using namespace std ; int ip ( int a [], int len ) { int cnt = 0 ; for ( int i = 0 ; i < len ; i ++ ) for ( int j = i + 1 ; j < len ; j ++ ) if ( a [ i ] > a [ j ]) cnt ++ ; return cnt ; } int cal ( int a [], int len ) { int cnt = 0 ; if ( len > 0 ) { cnt = ip ( a , len ); int x = random ( 0 , ( 1 << ( len + 1 )) - 1 ); int tmp [ 10 ], len1 = 0 ; for ( int i = 0 ; i < len ; i ++ ) if (( x >> i ) & 1 ) tmp [ len1 ++ ] = a [ i ]; cnt += cal ( tmp , len1 ); } return cnt ; } int a [ 10 ], b [ 10 ]; int main () { int tm = 90000 ; int n = 5 ; for ( int i = 0 ; i < 10 ; i ++ ) a [ i ] = i + 1 ; long long cnt = 0 ; for ( int i = 0 ; i < tm ; i ++ ) { int len = random ( 1 , n ); for ( int j = 0 ; j < len ; j ++ ) b [ j ] = a [ j ]; random_shuffle ( b , b + len ); cnt += cal ( b , len ); } printf ( \"%lld \\n \" , cnt ); return 0 ; } Solution Link #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int mod = 998244353 ; ll inv ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int main () { long long n ; while ( scanf ( \"%lld\" , & n ) != EOF ) printf ( \"%lld \\n \" , ( n + 1 ) * ( n - 1 ) % mod * inv ( 9 ) % mod ); return 0 ; } H. Harmonious Army Link \u51fa\u4e86\u4e00\u4e07\u904d\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff0c\u7136\u800c\u6bd4\u8d5b\u7684\u65f6\u5019\u770b\u90fd\u6ca1\u770b\u8fd9\u9898\u3002 \u5927\u6982BZOJ2127\uff0cBZOJ2132\uff0cBZOJ3894\u90fd\u662f\u8fd9\u4e2a\u6a21\u578b\u7684\u9898\u3002 \u5bf9\u8fd9\u4e2a\u6a21\u578b\u5efa\u50cf\u4e0a\u56fe\u8fd9\u6837\u7684\u7f51\u7edc\u6d41\uff0c\u6211\u4eec\u4ee4 S=A+B+C S=A+B+C \u8868\u793a\u4e09\u79cd\u6536\u76ca\u7684\u548c\uff0c\u56fe\u4e0a\u6bcf\u4e00\u79cd\u5272\u6cd5\u8868\u793a\u51cf\u53bb\u4e00\u90e8\u5206\u7684\u6536\u76ca\uff0c\u5047\u8bbe\u5f53\u524d\u5272\u96c6\u4e4b\u548c\u4e3a X X \uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u7f51\u7edc\u4f7fS-\u5272\u96c6=\u5f53\u524d\u9009\u6cd5\u7684\u6536\u76ca\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u5272\u96c6\u4e3a{a,b}\u65f6\u8868\u793a\u4e24\u4eba\u9009\u7684\u90fd\u662fMages\uff0c\u6536\u76ca\u4e3aC\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-C=A+B S-C=A+B \uff0c\u6709 a+b=A+B a+b=A+B \u5272\u96c6\u4e3a{c,d}\u65f6\u8868\u793a\u4e24\u4eba\u9009\u7684\u90fd\u662fWarriors\uff0c\u6536\u76ca\u4e3aA\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-A=B+C S-A=B+C \uff0c\u6709 c+d=B+C c+d=B+C \u5272\u96c6\u4e3a{a,e,d}\u6216\u8005{b,e,c}\u65f6\u8868\u793a\u4e00\u4e2a\u4eba\u9009Mage\uff0c\u53e6\u4e00\u4e2a\u4eba\u9009Warrior\uff0c\u6536\u76ca\u4e3aB\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-B=A+C S-B=A+C \uff0c\u6709 a+e+d=A+C a+e+d=A+C , b+e+c=A+C b+e+c=A+C \u4e0d\u59a8\u4ee4a=b,c=d,\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4\u89e3 a=b=(A+B)/2 a=b=(A+B)/2 \uff0c c=d=(C+D)/2 c=d=(C+D)/2 \uff0c e=-B+(A+C)/2 e=-B+(A+C)/2 \u5bf9\u4e8e\u6bcf\u4e00\u7ec4(x,y)\u5efa\u8fd9\u6837\u7684\u7f51\u7edc\u8dd1\u6700\u5c0f\u5272\uff0c\u7528\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u4e3a\u4e86\u907f\u514d\u5efa\u56fe\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5c0f\u6570\u53ef\u4ee5\u628a\u6240\u6709\u6743\u503cx2\uff0c\u8f93\u51fa\u65f6\u518d/2 Code Link #include <bits/stdc++.h> #define int long long using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f3f3f3f3f ; struct Dinic { //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void init ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } } ans ; int w1 [ 510 ], w2 [ 510 ]; signed main () { int n , m , u , v , a , b , c ; while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF ) { int S = 0 , T = n + 1 ; ans . init ( T ); for ( int i = 0 ; i <= T ; i ++ ) w1 [ i ] = w2 [ i ] = 0 ; int res = 0 ; while ( m -- ) { scanf ( \"%lld%lld%lld%lld%lld\" , & u , & v , & a , & b , & c ); res += 2 * ( a + b + c ); w1 [ u ] += a + b ; w1 [ v ] += a + b ; w2 [ u ] += b + c ; w2 [ v ] += b + c ; ans . add ( u , v , a + c - 2 * b ); ans . add ( v , u , a + c - 2 * b ); } for ( int i = 1 ; i <= n ; i ++ ) { ans . add ( S , i , w1 [ i ]); ans . add ( i , T , w2 [ i ]); } res -= ans . max_flow ( S , T ); res /= 2 ; printf ( \"%lld \\n \" , res ); } return 0 ; } I. I Love Palindrome String Link \u9898\u610f\uff1a\u6c42\u6240\u6709\u957f\u5ea6\u4e3a1\uff5en\u7684\u5b50\u4e32\u6ee1\u8db3 S_i^j S_i^j \u548c S_i^{(i+j)/2} S_i^{(i+j)/2} \u4e3a\u56de\u6587\u4e32\u7684\u4e2a\u6570 \u9898\u89e3\uff1a\u5bf9\u6240\u6709\u56de\u6587\u4e32\u6765\u8bf4\uff0c\u5b83\u524d\u534a\u6bb5\u662f\u5426\u662f\u56de\u6587\u4e32\u90fd\u662f\u786e\u5b9a\u662f\uff0c\u6240\u4ee5\u56de\u6587\u6811\u7ef4\u62a4\u6240\u6709\u672c\u8d28\u4e0d\u540c\u4e32\uff0c\u6bcf\u589e\u52a0\u4e00\u4e2a\u8282\u70b9\u5c31\u8ba1\u7b97\u8fd9\u4e2a\u8282\u70b9\u7684\u524d\u534a\u6bb5\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0a\u4e00\u624bhash\u5feb\u901f\u5224\u65ad\uff0c\u7136\u540e\u5982\u679c\u662f\uff0c\u8be5\u672c\u8d28\u4e32\u7684\u957f\u5ea6\u5c31\u8981\u52a0\u4e2a\u5b83\u4e2a\u6570\u7684\u6743\u503c\uff0c\u6700\u540e\u6574\u5408\u8d77\u6765\u5373\u53ef\uff0c\u590d\u6742\u5ea6 O(n) O(n) \u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1009.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 3e5 + 5 ; const int mod = 51123987 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} typedef unsigned long long ull ; struct mhash { ull base [ maxn ]; ull hash_index [ maxn ]; ull seed ; //31, 131 void inithash ( ull seedt = 31 ) { base [ 0 ] = 1 ; seed = seedt ; for ( int i = 1 ; i < maxn ; ++ i ) base [ i ] = base [ i - 1 ] * seed ; } void hash ( char * p , int n ) { // from 1 to n hash_index [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) hash_index [ i ] = hash_index [ i - 1 ] * seed + p [ i ] - 'a' ; } ull gethash ( int s , int e ) { return hash_index [ e ] - hash_index [ s - 1 ] * base [ e - s + 1 ]; } } pre , last ; int n ; char s [ maxn ]; char s1 [ maxn ]; bool check ( int l , int r ) { return pre . gethash ( l , r ) == last . gethash ( n - r + 1 , n - l + 1 ) && pre . gethash ( l , ( l + r ) / 2 ) == last . gethash ( n - ( l + r ) / 2 + 1 , n - l + 1 ); } const int N = 26 ; struct Palindromic_Tree { // vector<pair<int, int> > next[maxn]; int ok [ maxn ]; int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6784\u6210 int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int cnt [ maxn ]{}; //\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u7684\u4e2a\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0c\u6700\u540ecount()\u51fd\u6570\u8dd1\u4e00\u904d\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 // next[p].clear(); for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; cnt [ p ] = 0 ; num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } void init () { //\u521d\u59cb\u5316 n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; } int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } int add ( int c , int pos ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e // int x = find(cur, c); // if (!x) { if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 // x = now; // fail[now] = find(get_fail(fail[cur]), c); // next[cur].emplace_back(make_pair(c, now)); fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u4fbf\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; ok [ now ] = check ( pos - len [ now ] + 1 , pos ); } // last = x; last = next [ cur ][ c ]; cnt [ last ] ++ ; return num [ last ]; } void count () { for ( int i = p - 1 ; i >= 0 ; -- i ) cnt [ fail [ i ]] += cnt [ i ]; //\u7236\u4eb2\u7d2f\u52a0\u513f\u5b50\u7684cnt\uff0c\u56e0\u4e3a\u5982\u679cfail[v]=u\uff0c\u5219u\u4e00\u5b9a\u662fv\u7684\u5b50\u56de\u6587\u4e32\uff01 } } solve ; int ttans [ maxn ]; int main ( int argc , char * argv []) { pre . inithash (); last . inithash (); while ( scanf ( \"%s\" , s + 1 ) != EOF ) { n = strlen ( s + 1 ); for ( int i = 1 ; i <= n ; ++ i ) s1 [ n - i + 1 ] = s [ i ]; pre . hash ( s , n ); last . hash ( s1 , n ); solve . init (); for ( int i = 1 ; i <= n ; ++ i ) solve . add ( s [ i ] - 'a' , i ); solve . count (); for ( int i = 1 ; i <= n ; ++ i ) ttans [ i ] = 0 ; for ( int i = 2 ; i <= solve . p ; ++ i ) { ttans [ solve . len [ i ]] += solve . cnt [ i ] * solve . ok [ i ]; } for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d%c\" , ttans [ i ], i == n ? '\\n' : ' ' ); } return 0 ; } J. Just Skip The Problem Link \u9898\u610f\uff1a\u8981\u786e\u5b9a\u4e00\u4e2a2\u8fdb\u5236\u4f4d\u4e3an\u7684\u6570x\uff0c\u6c42\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u53ef\u4ee5\u56de\u7b54\u5b83&x\u662f\u5426\u4e3a0\u3002\u95ee\u6240\u6709\u7684\u6700\u5c11\u6b21\u6570\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3\uff1a\u63a8\u4e00\u63a8\u663e\u7136\u6bcf\u6b21\u95ee\u5b83\u67d0\u4e2a2\u8fdb\u5236\u4f4d\u5c31\u884c\uff0c\u6700\u5c11n\u6b21\uff0c\u7136\u540e\u5c31\u662fn\u4e2a\u6570\u7684\u5168\u6392\u5217\uff0c\u7531\u4e8e\u6a21\u6570\u53ea\u6709 1e6+3 \uff0c\u76f4\u63a5\u63a8\u524d 1e6+3 \u9879\u7684\u9636\u4e58\uff0c\u540e\u9762\u5168\u662f0\u5373\u53ef\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 4 ; const int mod = 1e6 + 3 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll jie [ maxn ] = { 1 }; int main ( int argc , char * argv []) { for ( int i = 1 ; i < maxn ; ++ i ) jie [ i ] = jie [ i - 1 ] * i % mod ; int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { printf ( \"%lld \\n \" , n < maxn ? jie [ n ] : 0ll ); } return 0 ; } K. Keen On Everything But Triangle Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u6c42l\u5230r\u4e2d\u4f7f\u7528\u4e09\u4e2a\u6570\u5b57\u80fd\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u4e2d\u7684\u6700\u957f\u5468\u957f\u3002 \u9898\u89e3\uff1a\u9996\u5148\u4e86\u89e3\u5230\u8fd9\u4e09\u6761\u8fb9\u5fc5\u7136\u662f\uff08\u6570\u503c\u5927\u5c0f\u4e0a\uff09\u76f8\u90bb\u7684\u4e09\u4e2a\u3002\u53cd\u8bc1\u6cd5\u6613\u8bc1\uff0c\u5c31\u76f4\u63a5\u662f\u4e00\u5b9a\u6709\u66f4\u76f8\u90bb\u7684\u6570\u53ef\u4ee5\u4f7f\u5f97\u7b54\u6848\u66f4\u5927\uff0c\u7136\u540e\u8003\u8651\u4ece\u5c0f\u5230\u5927\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u663e\u7136 1 1 2 3 5 8 ... \u8fd9\u4e2a\u5e8f\u5217\u662f\u6700\u5c0f\u7684\u80fd\u6784\u4e0d\u6210\u4e09\u89d2\u5f62\u7684\u5e8f\u5217\uff0c\u800c\u6211\u4eec\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\u9012\u589e\u5de8\u5feb\uff0c\u63a8\u51fa\u6765\u5927\u698244\u9879\u5c31\u8d85\u8fc71e9\u4e86\uff0c\u7136\u540e\u5c31\u7ef4\u62a4\u533a\u95f4\u524d44\u9879\u5927\u503c\u5373\u53ef\u3002\u672c\u6765\u5199\u4e86\u4e00\u6ce2\u5de8\u4f18\u7f8e\u7684\u7ebf\u6bb5\u6811+\u83ab\u961f\uff0c\u7136\u540e\u5c31\u66b4\u6bd9\u5728\u83ab\u961f\u7684\u6839\u53f7\u590d\u6742\u5ea6\u4e0b\u4e86\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1011.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-24 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int val [ maxn << 2 ][ 45 ]; int a [ maxn ]; int res [ 45 ], tp [ 45 ]; int le , re , k ; int n , m ; inline void pushup ( int * a , int * b ) { int i = 0 , j = 0 , now = 0 ; while ( now < 45 ) { if ( a [ i ] > b [ j ]) { res [ now ++ ] = a [ i ++ ]; } else res [ now ++ ] = b [ j ++ ]; } } inline void build ( int rt , int l , int r ) { if ( l == r ) { val [ rt ][ 0 ] = a [ l ]; for ( int i = 1 ; i < 45 ; ++ i ) val [ rt ][ i ] = 0 ; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); pushup ( val [ rt << 1 ], val [ rt << 1 | 1 ]); for ( int i = 0 ; i < 45 ; ++ i ) val [ rt ][ i ] = res [ i ]; } inline void query ( int rt , int l , int r ) { if ( le <= l && r <= re ) { pushup ( tp , val [ rt ]); for ( int i = 0 ; i < 45 ; ++ i ) tp [ i ] = res [ i ]; return ; } int mid = l + r >> 1 ; if ( le <= mid ) query ( rt << 1 , l , mid ); if ( re > mid ) query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { // freopen(\"data1.in\", \"r\", stdin); while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } build ( 1 , 1 , n ); while ( m -- ) { scanf ( \"%d%d\" , & le , & re ); for ( int i = 0 ; i < 45 ; ++ i ) tp [ i ] = 0 ; query ( 1 , 1 , n ); ll tt = - 1 ; for ( int i = 0 ; i < 43 ; ++ i ) { if ( tp [ i + 2 ] == 0 ) break ; if ( tp [ i + 1 ] + tp [ i + 2 ] > tp [ i ]) { tt = ( ll ) tp [ i ] + tp [ i + 1 ] + tp [ i + 2 ]; break ; } } printf ( \"%lld \\n \" , tt ); // fflush(stdout); } } return 0 ; } L. Longest Subarray Link \u9898\u610f\uff1a\u7ed9nck\uff0c\u8868\u793a\u5e8f\u5217\u957f\u5ea6\u4e3an\uff0c\u5e8f\u5217\u4e2d\u5143\u7d20\u96c6\u4e3ac\uff0c\u8981\u6c42\u6700\u957f\u7684\u5b50\u5e8f\u5217\u4f7f\u5f97\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u5143\u7d20\u4e2a\u6570\u8981\u4e48\u662f0\u8981\u4e48\u4e0d\u5c0f\u4e8ek\u3002 \u9898\u89e3\uff1a\u8fd9\u4e5f\u592a\u5bb9\u6613\u53bb\u60f3dp\u89e3\u6cd5\u4e86\u5427\uff0c\u7136\u540e\u53d1\u73b0\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0cc\u7ef4dp\u3002\u7136\u540e\u8003\u8651\u7ef4\u62a4\u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\u6bcf\u4e2a\u6570\u7684\u80fd\u7528\u7684\u533a\u95f4\uff0c\u663e\u7136\u9664\u4e86\u53f3\u7aef\u70b9\u5f53\u524d\u7684\u503c\uff0c\u5176\u4ed6\u503c\u7684\u533a\u95f4\u4e0e\u4e0a\u4e00\u4e2a\u53f3\u7aef\u70b9\u76f8\u540c\uff0c\u591a\u4e00\u4e2a\u5728\u5f53\u524d\u533a\u95f4\u80fd\u53d6\uff0c\u6240\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u80fd\u53d6\u591a\u5c11\u4e2a\u503c\uff0c\u5f53\u524d\u70b9\u9996\u5148\u52a0\u4e0ac-1\u4e2a\u503c\uff0c\u7136\u540e\u8003\u8651\u5f53\u524d\u503c\u7684\u533a\u95f4\u53d8\u5316\uff0c\u4e00\u4e2a\u662f0\u533a\u95f4\u88ab\u53bb\u6389\u4e86\uff0c\u6240\u4ee5\u4ece\u5f53\u524d\u70b9\u503c\u7684\u4e0a\u4e00\u4e2a\u5230\u5f53\u524d\u70b9-1\u533a\u95f4-1\uff0c\u518d\u4e00\u4e2a\u662f\u5f53\u524d\u70b9\u7684\u524dk\u4e2a\u591a\u4e86\u4e00\u4e2a\uff0c\u6240\u4ee5\u4ecek-1\u5230k\u533a\u95f4+1\uff0c\u7136\u540e\u627e\u6700\u5de6\u8fb9\u503c\u4e3ac\u7684\u70b9\u4e0e\u5f53\u524d\u70b9\u4f5c\u5dee\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5e38\u7528\u4e8e\u7ebf\u6bb5\u6811\uff0c\u5b9e\u9645\u4e0a\u548c\u5355\u70b9\u67e5\u8be2\u4e00\u4e2a\u590d\u6742\u5ea6\u3002\u5c31\u662f\u4f18\u5148\u5de6\u513f\u5b50\uff0c\u5982\u679c\u5de6\u513f\u5b50\u6709\u89e3\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\uff0c\u5426\u5219\u8fd4\u56de\u53f3\u513f\u5b50\uff0c\u5b9e\u9645\u4e0a\u6211\u7ef4\u62a4\u6700\u5927\u503c\u4e4b\u540e\u5b83\u6709\u6ca1\u6709\u89e3\u5f88\u5bb9\u6613\u3002\u8fd9\u4e2a\u9898\u6700\u597d\u662f\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u5728\u54ea\u51fa\u73b0\uff0c\u7136\u540e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u5730\u65b9\u76f4\u63a5\u8bbe\u4e3a0\uff0c\u5426\u5219\u6709\u70b9\u96be\u4ee5\u5904\u7406\u8fb9\u754c\uff0c\u6211re\u4e86\u4e00\u9762\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1012.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-24 * ================================================================*/ #include <bits/stdc++.h> #pragma comment(linker, \"/STACK:102400000,102400000\") #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll val [ maxn << 2 ], lazy [ maxn << 2 ]; int le , re ; vector < int > pos [ maxn ]; ll k ; int n , m , C ; inline void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } inline void build ( int rt , int l , int r ) { val [ rt ] = lazy [ rt ] = 0 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } inline void update ( int rt , int l , int r ) { if ( re < le || le <= 0 ) return ; if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } pushdown ( rt ); int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline int query ( int rt , int l , int r ) { if ( val [ rt ] < C ) return - 1 ; if ( l == r ) { return l ; } pushdown ( rt ); int mid = l + r >> 1 ; int res = query ( rt << 1 , l , mid ); if ( res != - 1 ) return res ; return query ( rt << 1 | 1 , mid + 1 , r ); } int main () { while ( scanf ( \"%d%d%d\" , & n , & C , & m ) != EOF ) { for ( int i = 1 ; i <= C ; ++ i ) { pos [ i ]. clear (); } build ( 1 , 1 , n ); int res = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) { scanf ( \"%d\" , & x ); le = re = i ; k = C - 1 ; update ( 1 , 1 , n ); if ( pos [ x ]. size ()) le = pos [ x ]. back () + 1 ; else le = 1 ; re = i - 1 ; k = - 1 ; if ( le <= re ) update ( 1 , 1 , n ); pos [ x ]. push_back ( i ); int p = pos [ x ]. size () - m - 1 ; if ( p >= 0 ) { le = pos [ x ][ p ] + 1 ; re = pos [ x ][ p + 1 ]; k = 1 ; update ( 1 , 1 , n ); } else if ( p == - 1 && ! pos [ x ]. empty ()) { le = 1 ; re = pos [ x ][ 0 ]; k = 1 ; update ( 1 , 1 , n ); } int tmp = query ( 1 , 1 , n ); if ( tmp != - 1 ) res = max ( res , i - tmp + 1 ); } printf ( \"%d \\n \" , res ); } return 0 ; }","title":"2019 Multi-University Training Contest 2"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#2019-multi-university-training-contest-2","text":"Date Solved A B C D E F G H I J K L 2019/7/24 6/12 . . . . O . . \u00d8 \u00d8 O \u00d8 \u00d8","title":"2019 Multi-University Training Contest 2"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#e-everything-is-generated-in-equal-probability","text":"\u66b4\u529b\u8dd1\u51fa\u524d\u4e24\u9879\uff0c\u6309\u9898\u610f\u6a21\u62df\u9898\u76ee\u7ed9\u7684\u968f\u673a\u7b97\u6cd5\u7b97\u51fa\u7b2c3,4\u9879\uff0c\u4e22\u8fdbOEIS\u627e\u89c4\u5f8b\u5f97\u5230\u901a\u9879\u3002 \u524d5\u9879\u5206\u522b\u662f0,\u2153,8/9,5/3,8/3\uff0c\u628a\u5206\u6bcd\u901a\u5206\u62109\u4e4b\u540e\u7684\u5206\u5b50\u5e8f\u5217\u662f0,3,8,15,24\uff0c\u90a3\u4e48\u901a\u9879\u5c31\u662f F(i)=\\frac{(i+1)(i-1)}{9} F(i)=\\frac{(i+1)(i-1)}{9} <span><span class=\"MathJax_Preview\">F(i)=\\frac{(i+1)(i-1)}{9}</span><script type=\"math/tex\">F(i)=\\frac{(i+1)(i-1)}{9}","title":"E. Everything Is Generated In Equal Probability"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#code","text":"","title":"Code"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#random","text":"#include <bits/stdc++.h> #define random(a,b) ((a)+rand()%((b)-(a)+1)) using namespace std ; int ip ( int a [], int len ) { int cnt = 0 ; for ( int i = 0 ; i < len ; i ++ ) for ( int j = i + 1 ; j < len ; j ++ ) if ( a [ i ] > a [ j ]) cnt ++ ; return cnt ; } int cal ( int a [], int len ) { int cnt = 0 ; if ( len > 0 ) { cnt = ip ( a , len ); int x = random ( 0 , ( 1 << ( len + 1 )) - 1 ); int tmp [ 10 ], len1 = 0 ; for ( int i = 0 ; i < len ; i ++ ) if (( x >> i ) & 1 ) tmp [ len1 ++ ] = a [ i ]; cnt += cal ( tmp , len1 ); } return cnt ; } int a [ 10 ], b [ 10 ]; int main () { int tm = 90000 ; int n = 5 ; for ( int i = 0 ; i < 10 ; i ++ ) a [ i ] = i + 1 ; long long cnt = 0 ; for ( int i = 0 ; i < tm ; i ++ ) { int len = random ( 1 , n ); for ( int j = 0 ; j < len ; j ++ ) b [ j ] = a [ j ]; random_shuffle ( b , b + len ); cnt += cal ( b , len ); } printf ( \"%lld \\n \" , cnt ); return 0 ; }","title":"Random"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#solution","text":"#include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int mod = 998244353 ; ll inv ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int main () { long long n ; while ( scanf ( \"%lld\" , & n ) != EOF ) printf ( \"%lld \\n \" , ( n + 1 ) * ( n - 1 ) % mod * inv ( 9 ) % mod ); return 0 ; }","title":"Solution"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#h-harmonious-army","text":"\u51fa\u4e86\u4e00\u4e07\u904d\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff0c\u7136\u800c\u6bd4\u8d5b\u7684\u65f6\u5019\u770b\u90fd\u6ca1\u770b\u8fd9\u9898\u3002 \u5927\u6982BZOJ2127\uff0cBZOJ2132\uff0cBZOJ3894\u90fd\u662f\u8fd9\u4e2a\u6a21\u578b\u7684\u9898\u3002 \u5bf9\u8fd9\u4e2a\u6a21\u578b\u5efa\u50cf\u4e0a\u56fe\u8fd9\u6837\u7684\u7f51\u7edc\u6d41\uff0c\u6211\u4eec\u4ee4 S=A+B+C S=A+B+C \u8868\u793a\u4e09\u79cd\u6536\u76ca\u7684\u548c\uff0c\u56fe\u4e0a\u6bcf\u4e00\u79cd\u5272\u6cd5\u8868\u793a\u51cf\u53bb\u4e00\u90e8\u5206\u7684\u6536\u76ca\uff0c\u5047\u8bbe\u5f53\u524d\u5272\u96c6\u4e4b\u548c\u4e3a X X \uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u7f51\u7edc\u4f7fS-\u5272\u96c6=\u5f53\u524d\u9009\u6cd5\u7684\u6536\u76ca\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u5272\u96c6\u4e3a{a,b}\u65f6\u8868\u793a\u4e24\u4eba\u9009\u7684\u90fd\u662fMages\uff0c\u6536\u76ca\u4e3aC\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-C=A+B S-C=A+B \uff0c\u6709 a+b=A+B a+b=A+B \u5272\u96c6\u4e3a{c,d}\u65f6\u8868\u793a\u4e24\u4eba\u9009\u7684\u90fd\u662fWarriors\uff0c\u6536\u76ca\u4e3aA\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-A=B+C S-A=B+C \uff0c\u6709 c+d=B+C c+d=B+C \u5272\u96c6\u4e3a{a,e,d}\u6216\u8005{b,e,c}\u65f6\u8868\u793a\u4e00\u4e2a\u4eba\u9009Mage\uff0c\u53e6\u4e00\u4e2a\u4eba\u9009Warrior\uff0c\u6536\u76ca\u4e3aB\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-B=A+C S-B=A+C \uff0c\u6709 a+e+d=A+C a+e+d=A+C , b+e+c=A+C b+e+c=A+C \u4e0d\u59a8\u4ee4a=b,c=d,\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4\u89e3 a=b=(A+B)/2 a=b=(A+B)/2 \uff0c c=d=(C+D)/2 c=d=(C+D)/2 \uff0c e=-B+(A+C)/2 e=-B+(A+C)/2 \u5bf9\u4e8e\u6bcf\u4e00\u7ec4(x,y)\u5efa\u8fd9\u6837\u7684\u7f51\u7edc\u8dd1\u6700\u5c0f\u5272\uff0c\u7528\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u4e3a\u4e86\u907f\u514d\u5efa\u56fe\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5c0f\u6570\u53ef\u4ee5\u628a\u6240\u6709\u6743\u503cx2\uff0c\u8f93\u51fa\u65f6\u518d/2","title":"H. Harmonious Army"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#code_1","text":"#include <bits/stdc++.h> #define int long long using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f3f3f3f3f ; struct Dinic { //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void init ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } } ans ; int w1 [ 510 ], w2 [ 510 ]; signed main () { int n , m , u , v , a , b , c ; while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF ) { int S = 0 , T = n + 1 ; ans . init ( T ); for ( int i = 0 ; i <= T ; i ++ ) w1 [ i ] = w2 [ i ] = 0 ; int res = 0 ; while ( m -- ) { scanf ( \"%lld%lld%lld%lld%lld\" , & u , & v , & a , & b , & c ); res += 2 * ( a + b + c ); w1 [ u ] += a + b ; w1 [ v ] += a + b ; w2 [ u ] += b + c ; w2 [ v ] += b + c ; ans . add ( u , v , a + c - 2 * b ); ans . add ( v , u , a + c - 2 * b ); } for ( int i = 1 ; i <= n ; i ++ ) { ans . add ( S , i , w1 [ i ]); ans . add ( i , T , w2 [ i ]); } res -= ans . max_flow ( S , T ); res /= 2 ; printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"Code"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#i-i-love-palindrome-string","text":"\u9898\u610f\uff1a\u6c42\u6240\u6709\u957f\u5ea6\u4e3a1\uff5en\u7684\u5b50\u4e32\u6ee1\u8db3 S_i^j S_i^j \u548c S_i^{(i+j)/2} S_i^{(i+j)/2} \u4e3a\u56de\u6587\u4e32\u7684\u4e2a\u6570 \u9898\u89e3\uff1a\u5bf9\u6240\u6709\u56de\u6587\u4e32\u6765\u8bf4\uff0c\u5b83\u524d\u534a\u6bb5\u662f\u5426\u662f\u56de\u6587\u4e32\u90fd\u662f\u786e\u5b9a\u662f\uff0c\u6240\u4ee5\u56de\u6587\u6811\u7ef4\u62a4\u6240\u6709\u672c\u8d28\u4e0d\u540c\u4e32\uff0c\u6bcf\u589e\u52a0\u4e00\u4e2a\u8282\u70b9\u5c31\u8ba1\u7b97\u8fd9\u4e2a\u8282\u70b9\u7684\u524d\u534a\u6bb5\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0a\u4e00\u624bhash\u5feb\u901f\u5224\u65ad\uff0c\u7136\u540e\u5982\u679c\u662f\uff0c\u8be5\u672c\u8d28\u4e32\u7684\u957f\u5ea6\u5c31\u8981\u52a0\u4e2a\u5b83\u4e2a\u6570\u7684\u6743\u503c\uff0c\u6700\u540e\u6574\u5408\u8d77\u6765\u5373\u53ef\uff0c\u590d\u6742\u5ea6 O(n) O(n) \u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1009.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 3e5 + 5 ; const int mod = 51123987 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} typedef unsigned long long ull ; struct mhash { ull base [ maxn ]; ull hash_index [ maxn ]; ull seed ; //31, 131 void inithash ( ull seedt = 31 ) { base [ 0 ] = 1 ; seed = seedt ; for ( int i = 1 ; i < maxn ; ++ i ) base [ i ] = base [ i - 1 ] * seed ; } void hash ( char * p , int n ) { // from 1 to n hash_index [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) hash_index [ i ] = hash_index [ i - 1 ] * seed + p [ i ] - 'a' ; } ull gethash ( int s , int e ) { return hash_index [ e ] - hash_index [ s - 1 ] * base [ e - s + 1 ]; } } pre , last ; int n ; char s [ maxn ]; char s1 [ maxn ]; bool check ( int l , int r ) { return pre . gethash ( l , r ) == last . gethash ( n - r + 1 , n - l + 1 ) && pre . gethash ( l , ( l + r ) / 2 ) == last . gethash ( n - ( l + r ) / 2 + 1 , n - l + 1 ); } const int N = 26 ; struct Palindromic_Tree { // vector<pair<int, int> > next[maxn]; int ok [ maxn ]; int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6784\u6210 int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int cnt [ maxn ]{}; //\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u7684\u4e2a\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0c\u6700\u540ecount()\u51fd\u6570\u8dd1\u4e00\u904d\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 // next[p].clear(); for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; cnt [ p ] = 0 ; num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } void init () { //\u521d\u59cb\u5316 n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; } int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } int add ( int c , int pos ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e // int x = find(cur, c); // if (!x) { if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 // x = now; // fail[now] = find(get_fail(fail[cur]), c); // next[cur].emplace_back(make_pair(c, now)); fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u4fbf\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; ok [ now ] = check ( pos - len [ now ] + 1 , pos ); } // last = x; last = next [ cur ][ c ]; cnt [ last ] ++ ; return num [ last ]; } void count () { for ( int i = p - 1 ; i >= 0 ; -- i ) cnt [ fail [ i ]] += cnt [ i ]; //\u7236\u4eb2\u7d2f\u52a0\u513f\u5b50\u7684cnt\uff0c\u56e0\u4e3a\u5982\u679cfail[v]=u\uff0c\u5219u\u4e00\u5b9a\u662fv\u7684\u5b50\u56de\u6587\u4e32\uff01 } } solve ; int ttans [ maxn ]; int main ( int argc , char * argv []) { pre . inithash (); last . inithash (); while ( scanf ( \"%s\" , s + 1 ) != EOF ) { n = strlen ( s + 1 ); for ( int i = 1 ; i <= n ; ++ i ) s1 [ n - i + 1 ] = s [ i ]; pre . hash ( s , n ); last . hash ( s1 , n ); solve . init (); for ( int i = 1 ; i <= n ; ++ i ) solve . add ( s [ i ] - 'a' , i ); solve . count (); for ( int i = 1 ; i <= n ; ++ i ) ttans [ i ] = 0 ; for ( int i = 2 ; i <= solve . p ; ++ i ) { ttans [ solve . len [ i ]] += solve . cnt [ i ] * solve . ok [ i ]; } for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d%c\" , ttans [ i ], i == n ? '\\n' : ' ' ); } return 0 ; }","title":"I. I Love Palindrome String"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#j-just-skip-the-problem","text":"\u9898\u610f\uff1a\u8981\u786e\u5b9a\u4e00\u4e2a2\u8fdb\u5236\u4f4d\u4e3an\u7684\u6570x\uff0c\u6c42\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u53ef\u4ee5\u56de\u7b54\u5b83&x\u662f\u5426\u4e3a0\u3002\u95ee\u6240\u6709\u7684\u6700\u5c11\u6b21\u6570\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3\uff1a\u63a8\u4e00\u63a8\u663e\u7136\u6bcf\u6b21\u95ee\u5b83\u67d0\u4e2a2\u8fdb\u5236\u4f4d\u5c31\u884c\uff0c\u6700\u5c11n\u6b21\uff0c\u7136\u540e\u5c31\u662fn\u4e2a\u6570\u7684\u5168\u6392\u5217\uff0c\u7531\u4e8e\u6a21\u6570\u53ea\u6709 1e6+3 \uff0c\u76f4\u63a5\u63a8\u524d 1e6+3 \u9879\u7684\u9636\u4e58\uff0c\u540e\u9762\u5168\u662f0\u5373\u53ef\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 4 ; const int mod = 1e6 + 3 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll jie [ maxn ] = { 1 }; int main ( int argc , char * argv []) { for ( int i = 1 ; i < maxn ; ++ i ) jie [ i ] = jie [ i - 1 ] * i % mod ; int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { printf ( \"%lld \\n \" , n < maxn ? jie [ n ] : 0ll ); } return 0 ; }","title":"J. Just Skip The Problem"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#k-keen-on-everything-but-triangle","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u6c42l\u5230r\u4e2d\u4f7f\u7528\u4e09\u4e2a\u6570\u5b57\u80fd\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u4e2d\u7684\u6700\u957f\u5468\u957f\u3002 \u9898\u89e3\uff1a\u9996\u5148\u4e86\u89e3\u5230\u8fd9\u4e09\u6761\u8fb9\u5fc5\u7136\u662f\uff08\u6570\u503c\u5927\u5c0f\u4e0a\uff09\u76f8\u90bb\u7684\u4e09\u4e2a\u3002\u53cd\u8bc1\u6cd5\u6613\u8bc1\uff0c\u5c31\u76f4\u63a5\u662f\u4e00\u5b9a\u6709\u66f4\u76f8\u90bb\u7684\u6570\u53ef\u4ee5\u4f7f\u5f97\u7b54\u6848\u66f4\u5927\uff0c\u7136\u540e\u8003\u8651\u4ece\u5c0f\u5230\u5927\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u663e\u7136 1 1 2 3 5 8 ... \u8fd9\u4e2a\u5e8f\u5217\u662f\u6700\u5c0f\u7684\u80fd\u6784\u4e0d\u6210\u4e09\u89d2\u5f62\u7684\u5e8f\u5217\uff0c\u800c\u6211\u4eec\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\u9012\u589e\u5de8\u5feb\uff0c\u63a8\u51fa\u6765\u5927\u698244\u9879\u5c31\u8d85\u8fc71e9\u4e86\uff0c\u7136\u540e\u5c31\u7ef4\u62a4\u533a\u95f4\u524d44\u9879\u5927\u503c\u5373\u53ef\u3002\u672c\u6765\u5199\u4e86\u4e00\u6ce2\u5de8\u4f18\u7f8e\u7684\u7ebf\u6bb5\u6811+\u83ab\u961f\uff0c\u7136\u540e\u5c31\u66b4\u6bd9\u5728\u83ab\u961f\u7684\u6839\u53f7\u590d\u6742\u5ea6\u4e0b\u4e86\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1011.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-24 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int val [ maxn << 2 ][ 45 ]; int a [ maxn ]; int res [ 45 ], tp [ 45 ]; int le , re , k ; int n , m ; inline void pushup ( int * a , int * b ) { int i = 0 , j = 0 , now = 0 ; while ( now < 45 ) { if ( a [ i ] > b [ j ]) { res [ now ++ ] = a [ i ++ ]; } else res [ now ++ ] = b [ j ++ ]; } } inline void build ( int rt , int l , int r ) { if ( l == r ) { val [ rt ][ 0 ] = a [ l ]; for ( int i = 1 ; i < 45 ; ++ i ) val [ rt ][ i ] = 0 ; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); pushup ( val [ rt << 1 ], val [ rt << 1 | 1 ]); for ( int i = 0 ; i < 45 ; ++ i ) val [ rt ][ i ] = res [ i ]; } inline void query ( int rt , int l , int r ) { if ( le <= l && r <= re ) { pushup ( tp , val [ rt ]); for ( int i = 0 ; i < 45 ; ++ i ) tp [ i ] = res [ i ]; return ; } int mid = l + r >> 1 ; if ( le <= mid ) query ( rt << 1 , l , mid ); if ( re > mid ) query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { // freopen(\"data1.in\", \"r\", stdin); while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } build ( 1 , 1 , n ); while ( m -- ) { scanf ( \"%d%d\" , & le , & re ); for ( int i = 0 ; i < 45 ; ++ i ) tp [ i ] = 0 ; query ( 1 , 1 , n ); ll tt = - 1 ; for ( int i = 0 ; i < 43 ; ++ i ) { if ( tp [ i + 2 ] == 0 ) break ; if ( tp [ i + 1 ] + tp [ i + 2 ] > tp [ i ]) { tt = ( ll ) tp [ i ] + tp [ i + 1 ] + tp [ i + 2 ]; break ; } } printf ( \"%lld \\n \" , tt ); // fflush(stdout); } } return 0 ; }","title":"K. Keen On Everything But Triangle"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%202/#l-longest-subarray","text":"\u9898\u610f\uff1a\u7ed9nck\uff0c\u8868\u793a\u5e8f\u5217\u957f\u5ea6\u4e3an\uff0c\u5e8f\u5217\u4e2d\u5143\u7d20\u96c6\u4e3ac\uff0c\u8981\u6c42\u6700\u957f\u7684\u5b50\u5e8f\u5217\u4f7f\u5f97\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u5143\u7d20\u4e2a\u6570\u8981\u4e48\u662f0\u8981\u4e48\u4e0d\u5c0f\u4e8ek\u3002 \u9898\u89e3\uff1a\u8fd9\u4e5f\u592a\u5bb9\u6613\u53bb\u60f3dp\u89e3\u6cd5\u4e86\u5427\uff0c\u7136\u540e\u53d1\u73b0\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0cc\u7ef4dp\u3002\u7136\u540e\u8003\u8651\u7ef4\u62a4\u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\u6bcf\u4e2a\u6570\u7684\u80fd\u7528\u7684\u533a\u95f4\uff0c\u663e\u7136\u9664\u4e86\u53f3\u7aef\u70b9\u5f53\u524d\u7684\u503c\uff0c\u5176\u4ed6\u503c\u7684\u533a\u95f4\u4e0e\u4e0a\u4e00\u4e2a\u53f3\u7aef\u70b9\u76f8\u540c\uff0c\u591a\u4e00\u4e2a\u5728\u5f53\u524d\u533a\u95f4\u80fd\u53d6\uff0c\u6240\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u80fd\u53d6\u591a\u5c11\u4e2a\u503c\uff0c\u5f53\u524d\u70b9\u9996\u5148\u52a0\u4e0ac-1\u4e2a\u503c\uff0c\u7136\u540e\u8003\u8651\u5f53\u524d\u503c\u7684\u533a\u95f4\u53d8\u5316\uff0c\u4e00\u4e2a\u662f0\u533a\u95f4\u88ab\u53bb\u6389\u4e86\uff0c\u6240\u4ee5\u4ece\u5f53\u524d\u70b9\u503c\u7684\u4e0a\u4e00\u4e2a\u5230\u5f53\u524d\u70b9-1\u533a\u95f4-1\uff0c\u518d\u4e00\u4e2a\u662f\u5f53\u524d\u70b9\u7684\u524dk\u4e2a\u591a\u4e86\u4e00\u4e2a\uff0c\u6240\u4ee5\u4ecek-1\u5230k\u533a\u95f4+1\uff0c\u7136\u540e\u627e\u6700\u5de6\u8fb9\u503c\u4e3ac\u7684\u70b9\u4e0e\u5f53\u524d\u70b9\u4f5c\u5dee\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5e38\u7528\u4e8e\u7ebf\u6bb5\u6811\uff0c\u5b9e\u9645\u4e0a\u548c\u5355\u70b9\u67e5\u8be2\u4e00\u4e2a\u590d\u6742\u5ea6\u3002\u5c31\u662f\u4f18\u5148\u5de6\u513f\u5b50\uff0c\u5982\u679c\u5de6\u513f\u5b50\u6709\u89e3\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\uff0c\u5426\u5219\u8fd4\u56de\u53f3\u513f\u5b50\uff0c\u5b9e\u9645\u4e0a\u6211\u7ef4\u62a4\u6700\u5927\u503c\u4e4b\u540e\u5b83\u6709\u6ca1\u6709\u89e3\u5f88\u5bb9\u6613\u3002\u8fd9\u4e2a\u9898\u6700\u597d\u662f\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u5728\u54ea\u51fa\u73b0\uff0c\u7136\u540e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u5730\u65b9\u76f4\u63a5\u8bbe\u4e3a0\uff0c\u5426\u5219\u6709\u70b9\u96be\u4ee5\u5904\u7406\u8fb9\u754c\uff0c\u6211re\u4e86\u4e00\u9762\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1012.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-24 * ================================================================*/ #include <bits/stdc++.h> #pragma comment(linker, \"/STACK:102400000,102400000\") #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll val [ maxn << 2 ], lazy [ maxn << 2 ]; int le , re ; vector < int > pos [ maxn ]; ll k ; int n , m , C ; inline void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } inline void build ( int rt , int l , int r ) { val [ rt ] = lazy [ rt ] = 0 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } inline void update ( int rt , int l , int r ) { if ( re < le || le <= 0 ) return ; if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } pushdown ( rt ); int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline int query ( int rt , int l , int r ) { if ( val [ rt ] < C ) return - 1 ; if ( l == r ) { return l ; } pushdown ( rt ); int mid = l + r >> 1 ; int res = query ( rt << 1 , l , mid ); if ( res != - 1 ) return res ; return query ( rt << 1 | 1 , mid + 1 , r ); } int main () { while ( scanf ( \"%d%d%d\" , & n , & C , & m ) != EOF ) { for ( int i = 1 ; i <= C ; ++ i ) { pos [ i ]. clear (); } build ( 1 , 1 , n ); int res = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) { scanf ( \"%d\" , & x ); le = re = i ; k = C - 1 ; update ( 1 , 1 , n ); if ( pos [ x ]. size ()) le = pos [ x ]. back () + 1 ; else le = 1 ; re = i - 1 ; k = - 1 ; if ( le <= re ) update ( 1 , 1 , n ); pos [ x ]. push_back ( i ); int p = pos [ x ]. size () - m - 1 ; if ( p >= 0 ) { le = pos [ x ][ p ] + 1 ; re = pos [ x ][ p + 1 ]; k = 1 ; update ( 1 , 1 , n ); } else if ( p == - 1 && ! pos [ x ]. empty ()) { le = 1 ; re = pos [ x ][ 0 ]; k = 1 ; update ( 1 , 1 , n ); } int tmp = query ( 1 , 1 , n ); if ( tmp != - 1 ) res = max ( res , i - tmp + 1 ); } printf ( \"%d \\n \" , res ); } return 0 ; }","title":"L. Longest Subarray"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%203/","text":"Date Solved A B C D E F G H I J K 2019/7/29 6/12 . \u00d8 . \u00d8 . O O . \u00d8 . . D - Distribution of books Link \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4ece\u524d\u5f80\u540e\u8fde\u7eed\u9009m\u5757\uff0c\u6bcf\u5757\u81f3\u5c11\u4e00\u4e2a\u6570\uff0c\u4f7f\u5f97\u9009\u53d6\u5757\u7684\u548c\u6700\u5927\u503c\u6700\u5c0f\u3002 \u9996\u5148\u80af\u5b9a\u662f\u8003\u8651\u4e8c\u5206\u7684\uff0c\u76f4\u63a5\u4e8c\u5206\u7b54\u6848\u5c31\u662f\u80fd\u5426\u9009\u5230m\u4e2a\u4e0d\u5927\u4e8e\u5f53\u524d\u503c\u7684\u5757\u5373\u53ef\u3002\u7136\u540e\u8003\u8651\u600e\u4e48check\uff0c\u4e00\u4e2a\u663e\u7136\u7684 O(n^2) O(n^2) \u7684check\u662f dp[i] = max(dp[j]) + 1 (\\sum_{k=j}^i a[k] <= mid) dp[i] = max(dp[j]) + 1 (\\sum_{k=j}^i a[k] <= mid) \uff0c\u5176\u5b9e\u5c31\u5df2\u7ecf\u5f88\u663e\u7136\u4e86\uff0c\u5bf9\u6bcf\u4e2adp\u503c\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00dp\u6743\u503c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1004.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/29 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll n , k ; ll a [ maxn ]; ll pre [ maxn ]; int val [ maxn << 2 ]; vector < ll > xpos ; int sz ; void build ( int rt , int l , int r ) { val [ rt ] = - 1000000000 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } int le , re , kvalnow ; void update ( int rt , int l , int r ) { if ( l == r ) { val [ rt ] = max ( val [ rt ], kvalnow ); return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } int query ( int rt , int l , int r ) { if ( le <= 0 || re < le ) return - 1000000000 ; if ( le <= l && r <= re ) { return val [ rt ]; } int mid = l + r >> 1 ; int res = - 1000000000 ; if ( le <= mid ) res = max ( res , query ( rt << 1 , l , mid )); if ( re > mid ) res = max ( res , query ( rt << 1 | 1 , mid + 1 , r )); return res ; } int dp [ maxn ]; inline bool check ( ll mid ) { build ( 1 , 1 , sz ); le = lower_bound ( xpos . begin (), xpos . end (), 0 ) - xpos . begin (); kvalnow = 0 ; update ( 1 , 1 , sz ); for ( int i = 1 ; i <= n ; ++ i ) { re = sz ; le = lower_bound ( xpos . begin (), xpos . end (), pre [ i ] - mid ) - xpos . begin (); int pos = lower_bound ( xpos . begin (), xpos . end (), pre [ i ]) - xpos . begin (); // if (xpos[re] != pre[i] - mid) re --; dp [ i ] = query ( 1 , 1 , sz ) + 1 ; le = pos , kvalnow = dp [ i ]; // cerr << le << \" \" << kvalnow << endl; update ( 1 , 1 , sz ); } le = 1 , re = sz ; return query ( 1 , 1 , sz ) >= k ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); int T ; // scan(T); scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { // scan(n), scan(k); scanf ( \"%lld%lld\" , & n , & k ); xpos . clear (); xpos . push_back (( ll ) - 2e14 - 100 ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%lld\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + a [ i ]; xpos . push_back ( pre [ i ]); // scan(a[i]); // scanf(\"%d\", &a[i]); } sort ( xpos . begin (), xpos . end ()); xpos . resize ( unique ( xpos . begin (), xpos . end ()) - xpos . begin ()); xpos . push_back (( ll ) 2e14 + 100 ); sz = xpos . size (); check ( 2 ); ll mx = - 1e9 - 100 ; for ( int i = 1 ; i <= k ; ++ i ) { mx = max ( mx , a [ i ]); } ll l = - 2e14 - 100 , r = mx , res = r ; while ( l <= r ) { ll mid = l + r >> 1 ; // cout << l << \" \" << r << \" \" << mid << endl; if ( check ( mid )) { res = mid ; r = mid - 1 ; } else { l = mid + 1 ; } } printf ( \"%lld \\n \" , res ); } return 0 ; } F - Fansblog Link \u6c42 q! % p q! % p \uff0c\u5176\u4e2dpq\u90fd\u662f\u7d20\u6570\u4e14q\u662fp\u7684\u524d\u4e00\u4e2a\u7d20\u6570\uff0c\u7ed9p\u6c42\u503c\u3002 \u90a3\u4e48\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba (q-1)!%q=1 (q-1)!%q=1 \uff0c\u7136\u540e\u5c31\u662f\u76f8\u5f53\u4e8e\u628a p+1~q-1 \u8fd9\u6bb5\u9006\u5143\u4e58\u56de\u53bb\u5373\u53ef\uff0c\u51fa\u4e8e\u67d0\u79cd\u795e\u5947\u7684\u6027\u8d28\uff0c 1e14 \u8303\u56f4\u5185\u7d20\u6570\u4e4b\u95f4\u8ddd\u79bb\u6ca1\u90a3\u4e48\u5927\uff0c\u7136\u540e\u5c31\u53ef\u4ee5 sqrt(n) \u7684\u5904\u7406\u6bcf\u4e2a\u6570\u662f\u4e0d\u662f\u7d20\u6570\u76f4\u5230\u679a\u4e3e\u5230\u524d\u4e00\u4e2a\u7d20\u6570\u5373\u53ef\u3002\u8fd8\u9700\u8981\u5feb\u901f\u4e58\u9632\u6b62\u7206longlong\u6709\u70b9\u6076\u5fc3\u4eba\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1000 ; const int mod = 1e9 + 7 ; inline ll multi ( ll a , ll n , ll p ) { ll re = 0 ; while ( n ) { if ( n & 1 ) re = ( re + a ) % p ; //\u505a\u52a0\u6cd5 a = ( a << 1 ) % p ; n >>= 1 ; } return re ; } ll qp ( ll a , ll n , ll m ) { a %= m ; ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = multi ( res , a , m ); a = multi ( a , a , m ); n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} bool pan ( ll x ) { for ( ll i = 2 ; i * i <= x ; ++ i ) { if ( x % i == 0 ) return false ; } return true ; } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { ll q ; scanf ( \"%lld\" , & q ); ll p = q - 1 ; while ( ! pan ( p )) p -- ; // cerr << q << endl; ll res = q - 1 ; for ( ll i = p + 1 ; i < q ; ++ i ) { res = multi ( res , qp ( i , q - 2 , q ), q ); } printf ( \"%lld \\n \" , res ); } return 0 ; } G - Find the answer Link \u7ed9\u4e00\u4e2a\u5e8f\u5217\u548c\u4e00\u4e2am\u503c\uff0c\u6c42\u6bcf\u4e2a\u70b9\u5fc5\u53d6\u7684\u60c5\u51b5\u4e0b\uff0c\u524d\u9762\u81f3\u5c11\u9700\u8981\u5220\u6389\u591a\u5c11\u4e2a\u70b9\u624d\u80fd\u8ba9\u524d\u7f00\u548c\u4e0d\u8d85\u8fc7m\u3002 \u76f4\u63a5cf\u539f\u9898\uff0c\u6570\u5b57\u7684\u8303\u56f4\u8c03\u5927\u4e86\u70b9\uff0c\u6211\u76f4\u63a5\u4e0a\u4e86\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d\u7f00\uff0c\u7136\u540e\u6811\u4e0a\u4e8c\u5206\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u4ecd\u7136\u662f\u666e\u901a\u67e5\u627e\uff0c\u6c42\u51fa\u6743\u503c\u7ebf\u6bb5\u6811\u53f3\u65b9\u9700\u8981\u51cf\u6389\u591a\u5c11\u4e2a\u70b9\u80fd\u8ba9\u524d\u7f00\u548c\u53d8\u5230m\u4ee5\u5185\u5373\u53ef\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1007.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/29 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct node { int sum ; ll valt ; ll val ; } p [ maxn << 2 ]; vector < int > xpos ; int le , k ; void build ( int rt , int l , int r ) { p [ rt ]. sum = p [ rt ]. val = 0 ; if ( l == r ) { p [ rt ]. valt = xpos [ l ]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. valt = min ( p [ rt << 1 ]. valt , p [ rt << 1 | 1 ]. valt ); } void update ( int rt , int l , int r ) { if ( l == r ) { p [ rt ]. val += p [ rt ]. valt ; p [ rt ]. sum ++ ; return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = p [ rt << 1 ]. val + p [ rt << 1 | 1 ]. val ; p [ rt ]. sum = p [ rt << 1 ]. sum + p [ rt << 1 | 1 ]. sum ; } int n , m ; int x [ maxn ]; ll need , gt ; void query ( int rt , int l , int r ) { if ( p [ rt ]. valt > need ) return ; if ( p [ rt ]. val <= need ) { need -= p [ rt ]. val ; gt += p [ rt ]. sum ; return ; } if ( l == r ) { if ( need >= p [ rt ]. val ) need -= p [ rt ]. val , gt += p [ rt ]. sum ; else { gt += need / p [ rt ]. valt ; need -= need / p [ rt ]. valt * p [ rt ]. valt ; } return ; } int mid = l + r >> 1 ; query ( rt << 1 , l , mid ); query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { xpos . clear (); scanf ( \"%d%d\" , & n , & m ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & x [ i ]); xpos . push_back ( x [ i ]); } sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); int sz = xpos . size (); build ( 1 , 1 , sz ); for ( int i = 1 ; i <= n ; ++ i ) { need = m - x [ i ]; gt = 0 ; query ( 1 , 1 , sz ); printf ( \"%lld \" , i - gt - 1 ); le = lower_bound ( xpos . begin (), xpos . end (), x [ i ]) - xpos . begin (); update ( 1 , 1 , sz ); } printf ( \" \\n \" ); } return 0 ; }","title":"2019 Multi University Training Contest 3"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%203/#d-distribution-of-books","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4ece\u524d\u5f80\u540e\u8fde\u7eed\u9009m\u5757\uff0c\u6bcf\u5757\u81f3\u5c11\u4e00\u4e2a\u6570\uff0c\u4f7f\u5f97\u9009\u53d6\u5757\u7684\u548c\u6700\u5927\u503c\u6700\u5c0f\u3002 \u9996\u5148\u80af\u5b9a\u662f\u8003\u8651\u4e8c\u5206\u7684\uff0c\u76f4\u63a5\u4e8c\u5206\u7b54\u6848\u5c31\u662f\u80fd\u5426\u9009\u5230m\u4e2a\u4e0d\u5927\u4e8e\u5f53\u524d\u503c\u7684\u5757\u5373\u53ef\u3002\u7136\u540e\u8003\u8651\u600e\u4e48check\uff0c\u4e00\u4e2a\u663e\u7136\u7684 O(n^2) O(n^2) \u7684check\u662f dp[i] = max(dp[j]) + 1 (\\sum_{k=j}^i a[k] <= mid) dp[i] = max(dp[j]) + 1 (\\sum_{k=j}^i a[k] <= mid) \uff0c\u5176\u5b9e\u5c31\u5df2\u7ecf\u5f88\u663e\u7136\u4e86\uff0c\u5bf9\u6bcf\u4e2adp\u503c\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00dp\u6743\u503c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1004.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/29 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll n , k ; ll a [ maxn ]; ll pre [ maxn ]; int val [ maxn << 2 ]; vector < ll > xpos ; int sz ; void build ( int rt , int l , int r ) { val [ rt ] = - 1000000000 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } int le , re , kvalnow ; void update ( int rt , int l , int r ) { if ( l == r ) { val [ rt ] = max ( val [ rt ], kvalnow ); return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } int query ( int rt , int l , int r ) { if ( le <= 0 || re < le ) return - 1000000000 ; if ( le <= l && r <= re ) { return val [ rt ]; } int mid = l + r >> 1 ; int res = - 1000000000 ; if ( le <= mid ) res = max ( res , query ( rt << 1 , l , mid )); if ( re > mid ) res = max ( res , query ( rt << 1 | 1 , mid + 1 , r )); return res ; } int dp [ maxn ]; inline bool check ( ll mid ) { build ( 1 , 1 , sz ); le = lower_bound ( xpos . begin (), xpos . end (), 0 ) - xpos . begin (); kvalnow = 0 ; update ( 1 , 1 , sz ); for ( int i = 1 ; i <= n ; ++ i ) { re = sz ; le = lower_bound ( xpos . begin (), xpos . end (), pre [ i ] - mid ) - xpos . begin (); int pos = lower_bound ( xpos . begin (), xpos . end (), pre [ i ]) - xpos . begin (); // if (xpos[re] != pre[i] - mid) re --; dp [ i ] = query ( 1 , 1 , sz ) + 1 ; le = pos , kvalnow = dp [ i ]; // cerr << le << \" \" << kvalnow << endl; update ( 1 , 1 , sz ); } le = 1 , re = sz ; return query ( 1 , 1 , sz ) >= k ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); int T ; // scan(T); scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { // scan(n), scan(k); scanf ( \"%lld%lld\" , & n , & k ); xpos . clear (); xpos . push_back (( ll ) - 2e14 - 100 ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%lld\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + a [ i ]; xpos . push_back ( pre [ i ]); // scan(a[i]); // scanf(\"%d\", &a[i]); } sort ( xpos . begin (), xpos . end ()); xpos . resize ( unique ( xpos . begin (), xpos . end ()) - xpos . begin ()); xpos . push_back (( ll ) 2e14 + 100 ); sz = xpos . size (); check ( 2 ); ll mx = - 1e9 - 100 ; for ( int i = 1 ; i <= k ; ++ i ) { mx = max ( mx , a [ i ]); } ll l = - 2e14 - 100 , r = mx , res = r ; while ( l <= r ) { ll mid = l + r >> 1 ; // cout << l << \" \" << r << \" \" << mid << endl; if ( check ( mid )) { res = mid ; r = mid - 1 ; } else { l = mid + 1 ; } } printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"D - Distribution of books"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%203/#f-fansblog","text":"\u6c42 q! % p q! % p \uff0c\u5176\u4e2dpq\u90fd\u662f\u7d20\u6570\u4e14q\u662fp\u7684\u524d\u4e00\u4e2a\u7d20\u6570\uff0c\u7ed9p\u6c42\u503c\u3002 \u90a3\u4e48\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba (q-1)!%q=1 (q-1)!%q=1 \uff0c\u7136\u540e\u5c31\u662f\u76f8\u5f53\u4e8e\u628a p+1~q-1 \u8fd9\u6bb5\u9006\u5143\u4e58\u56de\u53bb\u5373\u53ef\uff0c\u51fa\u4e8e\u67d0\u79cd\u795e\u5947\u7684\u6027\u8d28\uff0c 1e14 \u8303\u56f4\u5185\u7d20\u6570\u4e4b\u95f4\u8ddd\u79bb\u6ca1\u90a3\u4e48\u5927\uff0c\u7136\u540e\u5c31\u53ef\u4ee5 sqrt(n) \u7684\u5904\u7406\u6bcf\u4e2a\u6570\u662f\u4e0d\u662f\u7d20\u6570\u76f4\u5230\u679a\u4e3e\u5230\u524d\u4e00\u4e2a\u7d20\u6570\u5373\u53ef\u3002\u8fd8\u9700\u8981\u5feb\u901f\u4e58\u9632\u6b62\u7206longlong\u6709\u70b9\u6076\u5fc3\u4eba\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1000 ; const int mod = 1e9 + 7 ; inline ll multi ( ll a , ll n , ll p ) { ll re = 0 ; while ( n ) { if ( n & 1 ) re = ( re + a ) % p ; //\u505a\u52a0\u6cd5 a = ( a << 1 ) % p ; n >>= 1 ; } return re ; } ll qp ( ll a , ll n , ll m ) { a %= m ; ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = multi ( res , a , m ); a = multi ( a , a , m ); n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} bool pan ( ll x ) { for ( ll i = 2 ; i * i <= x ; ++ i ) { if ( x % i == 0 ) return false ; } return true ; } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { ll q ; scanf ( \"%lld\" , & q ); ll p = q - 1 ; while ( ! pan ( p )) p -- ; // cerr << q << endl; ll res = q - 1 ; for ( ll i = p + 1 ; i < q ; ++ i ) { res = multi ( res , qp ( i , q - 2 , q ), q ); } printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"F - Fansblog"},{"location":"Training%20Logs/2019%20Multi-University%20Training%20Contest/2019%20Multi-University%20Training%20Contest%203/#g-find-the-answer","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217\u548c\u4e00\u4e2am\u503c\uff0c\u6c42\u6bcf\u4e2a\u70b9\u5fc5\u53d6\u7684\u60c5\u51b5\u4e0b\uff0c\u524d\u9762\u81f3\u5c11\u9700\u8981\u5220\u6389\u591a\u5c11\u4e2a\u70b9\u624d\u80fd\u8ba9\u524d\u7f00\u548c\u4e0d\u8d85\u8fc7m\u3002 \u76f4\u63a5cf\u539f\u9898\uff0c\u6570\u5b57\u7684\u8303\u56f4\u8c03\u5927\u4e86\u70b9\uff0c\u6211\u76f4\u63a5\u4e0a\u4e86\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d\u7f00\uff0c\u7136\u540e\u6811\u4e0a\u4e8c\u5206\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u4ecd\u7136\u662f\u666e\u901a\u67e5\u627e\uff0c\u6c42\u51fa\u6743\u503c\u7ebf\u6bb5\u6811\u53f3\u65b9\u9700\u8981\u51cf\u6389\u591a\u5c11\u4e2a\u70b9\u80fd\u8ba9\u524d\u7f00\u548c\u53d8\u5230m\u4ee5\u5185\u5373\u53ef\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1007.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/29 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct node { int sum ; ll valt ; ll val ; } p [ maxn << 2 ]; vector < int > xpos ; int le , k ; void build ( int rt , int l , int r ) { p [ rt ]. sum = p [ rt ]. val = 0 ; if ( l == r ) { p [ rt ]. valt = xpos [ l ]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. valt = min ( p [ rt << 1 ]. valt , p [ rt << 1 | 1 ]. valt ); } void update ( int rt , int l , int r ) { if ( l == r ) { p [ rt ]. val += p [ rt ]. valt ; p [ rt ]. sum ++ ; return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = p [ rt << 1 ]. val + p [ rt << 1 | 1 ]. val ; p [ rt ]. sum = p [ rt << 1 ]. sum + p [ rt << 1 | 1 ]. sum ; } int n , m ; int x [ maxn ]; ll need , gt ; void query ( int rt , int l , int r ) { if ( p [ rt ]. valt > need ) return ; if ( p [ rt ]. val <= need ) { need -= p [ rt ]. val ; gt += p [ rt ]. sum ; return ; } if ( l == r ) { if ( need >= p [ rt ]. val ) need -= p [ rt ]. val , gt += p [ rt ]. sum ; else { gt += need / p [ rt ]. valt ; need -= need / p [ rt ]. valt * p [ rt ]. valt ; } return ; } int mid = l + r >> 1 ; query ( rt << 1 , l , mid ); query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { xpos . clear (); scanf ( \"%d%d\" , & n , & m ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & x [ i ]); xpos . push_back ( x [ i ]); } sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); int sz = xpos . size (); build ( 1 , 1 , sz ); for ( int i = 1 ; i <= n ; ++ i ) { need = m - x [ i ]; gt = 0 ; query ( 1 , 1 , sz ); printf ( \"%lld \" , i - gt - 1 ); le = lower_bound ( xpos . begin (), xpos . end (), x [ i ]) - xpos . begin (); update ( 1 , 1 , sz ); } printf ( \" \\n \" ); } return 0 ; }","title":"G - Find the answer"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/2019%20China%20Collegiate%20Programming%20Contest%20Qinhuangdao%20Onsite/","text":"Name Date Solved A B C D E F G H I J K L 2019 China Collegiate Programming Contest Qinhuangdao Onsite 2019/9/28 7/12 O . . O O O . . O O O . A\u3001Angle Beats Link D\u3001Decimal Link \u9898\u610f\uff1a\u6c42 1/x \u662f\u5426\u4e3a\u6709\u9650\u5faa\u73af\u5c0f\u6570\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5982\u679c x \u662f 10^n \u7684\u56e0\u5b50\u5b83\u624d\u662f\u6709\u9650\u5faa\u73af\u5c0f\u6570\uff0c\u5373 x \u53ea\u67092\u548c5\u4e24\u79cd\u56e0\u5b50 E\u3001Escape Link \u9898\u610f\uff1a\u6709a\u4e2a\u673a\u5668\u4eba\u4ece\u7f51\u683c\u56fe\u6700\u4e0a\u65b9\u51fa\u53d1\uff0c\u6709b\u4e2a\u51fa\u53e3\u5728\u7f51\u683c\u56fe\u6700\u4e0b\u65b9\uff0c\u673a\u5668\u4eba\u53ea\u80fd\u76f4\u8d70\u6216\u901a\u8fc7\u88c5\u7f6e\u8f6c\u5f2f\uff0c\u4e00\u4e2a\u65b9\u683c\u53ea\u80fd\u653e\u4e00\u4e2a\u88c5\u7f6e\uff1b\u673a\u5668\u4eba\u65e0\u6cd5\u4ece\u88c5\u7f6e\u4ee5\u5916\u7684\u65b9\u5411\u8fdb\u5165\u88c5\u7f6e\u6240\u5728\u7684\u65b9\u683c\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u969c\u788d\u7269\uff0c\u95ee\u6240\u6709\u673a\u5668\u4eba\u662f\u5426\u90fd\u80fd\u5230\u8fbe\u4e0b\u65b9\u51fa\u53e3\u3002 \u9898\u89e3\uff1a\u7a7a\u65b9\u683c\u6700\u591a\u4ece\u6a2a\u5411/\u7eb5\u5411\u5404\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6709\u969c\u788d\u7269\u7684\u65b9\u683c\u6a2a\u5411+\u7eb5\u5411\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\uff1b\u62c6\u70b9\u5efa\u56fe\uff0c\u4e00\u5f20\u56fe\u4e3a\u7eb5\u5411\u8def\u5f84\uff0c\u53e6\u4e00\u5f20\u56fe\u4e3a\u6a2a\u5411\u8def\u5f84\uff0c\u7eb5\u5411\u70b9\u4e0e\u6a2a\u5411\u70b9\u8fde\u8fb9\uff0c\u6240\u6709\u6d41\u91cf\u5747\u4e3a1\uff0c\u8dd1\u7f51\u7edc\u6d41\u5224\u65admax_flow\u662f\u5426\u7b49\u4e8ea\u3002 F\u3001Forest Program Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4ed9\u4eba\u638c\u7fa4\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u5220\u8fb9\u65b9\u6848\u53ef\u4ee5\u5c06\u5176\u53d8\u6210\u68ee\u6797 \u9898\u89e3\uff1a\u663e\u7136\u5bf9\u6bcf\u4e2a\u73af\uff0c\u81f3\u5c11\u8981\u5220\u6389\u4e00\u6761\u8fb9\u5373\u53ef\uff0c\u5176\u4ed6\u7684\u8fb9\u4efb\u610f\u5220\u3002\u6240\u4ee5\u5bf9\u6bcf\u68f5\u4ed9\u4eba\u638cdfs\u6c42\u51fa\u6bcf\u4e2a\u73af\u7684\u5927\u5c0fx\uff0c\u6c42\u51fa 2^x-1 \u7684\u79ef\uff0c\u7136\u540e\u4e58\u4e0a\u4e0d\u5728\u73af\u4e0a\u7684\u8fb9\u7684\u6761\u6570p, 2^p \uff0c\u4e24\u8005\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002 I\u3001Invoker Link \u9898\u610f\uff1a\u7ed9\u51fa\u5361\u5c14\u768410\u79cd\u6280\u80fd\uff0c\u7ec4\u6210\u6280\u80fd\u7684\u7ec4\u5408\u53ef\u4ee5\u662f\u65e0\u5e8f\u7684\u4f46\u662f\u91ca\u653e\u672c\u8eab\u662f\u6709\u5e8f\u7684\uff0c\u6c42\u51fa\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u6309\u952e\uff08\u542bR\u952e\uff09\u3002 \u9898\u89e3\uff1a\u4e0d\u542bR\u952e\u8fdb\u884c\u4e09\u8fdb\u5236\u7f16\u7801\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\u76f4\u63a5\u66b4\u529b\u641c\u51fa27\u79cd\u7f16\u7801\u4e92\u76f8\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6bd4\u5982 QQQ \u548c QEE \uff0c\u4ed6\u4eec\u6700\u957f\u7684\u540e\u7f00-\u524d\u7f00\u5339\u914d\u4e3a1\uff08\u5373 Q \uff09\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5b9e\u5728\u592a\u5c0f\u76f4\u63a5\u5e73\u65b9\u5904\u7406\u5373\u53ef\uff0c\u5f53\u7136exkmp\u4e13\u95e8\u89e3\u8fd9\u4e2a\u7684\u3002\u7136\u540edp\uff0c dp[i][j] \u8868\u793a\u5230\u7b2ci\u4e2a\u6280\u80fd\uff0c\u73b0\u5728\u961f\u5217\u4e2d\u7684\u72b6\u6001\u4e3aj\u7684\u6700\u5c11\u6b65\u6570\u3002 dp[i][j] = min(dp[i - 1][k] + mp[j][k]) \u5373\u53ef\uff0c\u4e0d\u5408\u6cd5\u7684\u76f4\u63a5\u53bb\u6389\uff0c\u8fd9\u91cc\u7531\u4e8e\u6570\u636e\u8fc7\u5c0f\u76f4\u63a5\u66b4\u529bcmp\u5373\u53ef\u3002\u7136\u540e\u4ee3\u7801\u5199\u4e86\u633a\u957f\u7684\u3002 J\u3001MUV LUV EXTRA Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u5c0f\u6570\u7684\u524dn\u4f4d\u5e76\u731c\u6d4b\u5faa\u73af\u8282\uff0c\u6c42 a*\u5f53\u524d\u5df2\u7ecf\u51fa\u73b0\u7684\u5faa\u73af\u603b\u957f\u5ea6-b*\u5faa\u73af\u8282\u957f\u5ea6 \u7684\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5bf9\u4e8e\u540c\u4e00\u540e\u7f00\u663e\u7136\u53d6\u5176\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u7ffb\u8f6c\u4e32\u8dd1KMP\uff0c\u904d\u5386\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u6c42\u6700\u5927\u503c\u5373\u53ef\uff08res\u521d\u503c\u5e94\u8be5\u8bbe\u8d1f\u6570\u800c\u4e0d\u662f0\u56e0\u4e3ab\u53ef\u80fd\u6bd4a\u5927\uff0cwa\u4e86\u4e00\u53d1\uff09\u3002 K\u3001MUV LUV UNLIMITED Link \u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u6709\u6839\u6811\uff0c\u4e24\u4e2a\u4eba\u535a\u5f08\uff0ca\u5148\u624b\uff0c\u6bcf\u6b21\u6bcf\u4e2a\u4eba\u5fc5\u987b\u81f3\u5c11\u5220\u6389\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u4e5f\u53ea\u80fd\u5220\u6389\u53f6\u5b50\u8282\u70b9\uff0c\u6c42\u8c01\u6700\u5148\u628a\u6811\u5220\u7a7a\u3002 \u9898\u89e3\uff1a\u601d\u8003\u535a\u5f08\u4e86\u5f88\u4e45\u53d1\u73b0\u7684\u4e00\u4e2a\u7ed3\u8bba\u662f\uff1a\u5982\u679c\u662f\u591a\u6761\u94fe\u7ec4\u6210\u7684\u6811\uff08\u5373\u53ea\u6709\u6839\u8282\u70b9\u6709\u51fa\u5ea6\u5927\u4e8e1\uff09\u65f6\uff0c\u53ea\u6709 - 1\u3001\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u94fe\u4e3a\u5947\u6570\u957f\u5ea6 - 2\u3001\u5927\u4e8e1\u6761\u94fe\u4e14\u6240\u6709\u94fe\u4e3a\u5947\u6570\u957f\u5ea6 1 \u662f\u540e\u624b\u5fc5\u80dc\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53d1\u73b0\u5176\u4ed6\u60c5\u51b5\u5148\u624b\u53ef\u4ee5\u5c06\u72b6\u6001\u8f6c\u79fb\u4e3a\u5168\u5947\u6570\u7684\u60c5\u51b5\uff0c\u7136\u540e\u540e\u624b\u5c31\u6ca1\u4e86\uff0c\u56e0\u4e3a\u6700\u540e\u53ea\u5269\u4e00\u4e2a\uff08\u957f\u5ea6\u4e3a0\u5076\u6570\uff09\u7684\u65f6\u5019\u662f\u5148\u624b\u8d62\u3002 \u7136\u540e\u8003\u8651\u4e00\u4e0b\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7236\u8282\u70b9\u6709\u591a\u4f591\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u5148\u624b\u5fc5\u80dc\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a\u8ba1\u6ee1\u8db3\u5148\u624b\u5fc5\u80dc\u7684\u53f6\u5b50\u8282\u70b9\u4e3ax\uff0c\u5176\u4ed6\u6240\u6709\u53f6\u5b50\u8282\u70b9\u96c6\u5408\u4e3aS - 1\u3001\u5982\u679c\u5220\u6389x\u540e\u4e3a\u5148\u624b\u8d25\u72b6\u6001\uff0c\u90a3\u4e48\u5f53\u524d\u5220\u6389x\u5b83\u5c31\u662f\u5fc5\u80dc\u6001 - 2\u3001\u5982\u679c\u5220\u6389x\u540e\u4e3a\u5148\u624b\u80dc\u72b6\u6001\uff0c\u90a3\u4e48\u9996\u5148S\u5728\u8fd9\u79cd\u72b6\u6001\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u540e\u624b\u5fc5\u7136\u4f1a\u9009\u62e9\u4e00\u4e2a S\u2018 \\in S \u4f7f\u5f97\u4e0b\u4e2a\u72b6\u6001\u4e3a\u5148\u624b\u8d25\u72b6\u6001\uff0c\u7531\u4e8eS\u2019\u662fS\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u5148\u624b\u5982\u679c\u53d6 S' \\and x \u5fc5\u7136\u8fdb\u5165\u5148\u624b\u8d25\u72b6\u6001\uff0c\u4e3a\u5148\u624b\u5fc5\u80dc\u6001\u3002 \u4e24\u8005\u7ed3\u5408\u5373\u662f\uff1a\u5982\u679c\u63091\u7f29\u70b9\u5230\u67d0\u4e2a\u5ea6\u6570\u5927\u4e8e1\u7684\u70b9\uff0c\u5b83\u5b58\u5728\u5148\u624b\u5fc5\u80dc\u6001\u5373\u662f\u5148\u624b\u5fc5\u80dc\uff0c\u5426\u5219\u540e\u624b\u80dc\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5ea6\u6570\u5927\u4e8e1\u7684\u70b9\u5373\u662f\u4e00\u6761\u94fe\u6309\u5947\u5076\u8f93\u51fa\u5373\u53ef\u3002 \u7136\u540e\u5c31\u76f4\u63a5\u6309\u4e24\u79cd\u60c5\u51b5\u8ba1\u7b97\u5373\u53ef\uff0c\u5efa\u6811\u4f1a\u7206\u5185\u5b58\uff0c\u76f4\u63a5\u6309topsort\u5e8f\u6a21\u62df\u5373\u53ef\u3002","title":"2019 China Collegiate Programming Contest Qinhuangdao Onsite"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/2019%20China%20Collegiate%20Programming%20Contest%20Qinhuangdao%20Onsite/#aangle-beats","text":"","title":"A\u3001Angle Beats"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/2019%20China%20Collegiate%20Programming%20Contest%20Qinhuangdao%20Onsite/#ddecimal","text":"\u9898\u610f\uff1a\u6c42 1/x \u662f\u5426\u4e3a\u6709\u9650\u5faa\u73af\u5c0f\u6570\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5982\u679c x \u662f 10^n \u7684\u56e0\u5b50\u5b83\u624d\u662f\u6709\u9650\u5faa\u73af\u5c0f\u6570\uff0c\u5373 x \u53ea\u67092\u548c5\u4e24\u79cd\u56e0\u5b50","title":"D\u3001Decimal"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/2019%20China%20Collegiate%20Programming%20Contest%20Qinhuangdao%20Onsite/#eescape","text":"\u9898\u610f\uff1a\u6709a\u4e2a\u673a\u5668\u4eba\u4ece\u7f51\u683c\u56fe\u6700\u4e0a\u65b9\u51fa\u53d1\uff0c\u6709b\u4e2a\u51fa\u53e3\u5728\u7f51\u683c\u56fe\u6700\u4e0b\u65b9\uff0c\u673a\u5668\u4eba\u53ea\u80fd\u76f4\u8d70\u6216\u901a\u8fc7\u88c5\u7f6e\u8f6c\u5f2f\uff0c\u4e00\u4e2a\u65b9\u683c\u53ea\u80fd\u653e\u4e00\u4e2a\u88c5\u7f6e\uff1b\u673a\u5668\u4eba\u65e0\u6cd5\u4ece\u88c5\u7f6e\u4ee5\u5916\u7684\u65b9\u5411\u8fdb\u5165\u88c5\u7f6e\u6240\u5728\u7684\u65b9\u683c\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u969c\u788d\u7269\uff0c\u95ee\u6240\u6709\u673a\u5668\u4eba\u662f\u5426\u90fd\u80fd\u5230\u8fbe\u4e0b\u65b9\u51fa\u53e3\u3002 \u9898\u89e3\uff1a\u7a7a\u65b9\u683c\u6700\u591a\u4ece\u6a2a\u5411/\u7eb5\u5411\u5404\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6709\u969c\u788d\u7269\u7684\u65b9\u683c\u6a2a\u5411+\u7eb5\u5411\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\uff1b\u62c6\u70b9\u5efa\u56fe\uff0c\u4e00\u5f20\u56fe\u4e3a\u7eb5\u5411\u8def\u5f84\uff0c\u53e6\u4e00\u5f20\u56fe\u4e3a\u6a2a\u5411\u8def\u5f84\uff0c\u7eb5\u5411\u70b9\u4e0e\u6a2a\u5411\u70b9\u8fde\u8fb9\uff0c\u6240\u6709\u6d41\u91cf\u5747\u4e3a1\uff0c\u8dd1\u7f51\u7edc\u6d41\u5224\u65admax_flow\u662f\u5426\u7b49\u4e8ea\u3002","title":"E\u3001Escape"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/2019%20China%20Collegiate%20Programming%20Contest%20Qinhuangdao%20Onsite/#fforest-program","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4ed9\u4eba\u638c\u7fa4\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u5220\u8fb9\u65b9\u6848\u53ef\u4ee5\u5c06\u5176\u53d8\u6210\u68ee\u6797 \u9898\u89e3\uff1a\u663e\u7136\u5bf9\u6bcf\u4e2a\u73af\uff0c\u81f3\u5c11\u8981\u5220\u6389\u4e00\u6761\u8fb9\u5373\u53ef\uff0c\u5176\u4ed6\u7684\u8fb9\u4efb\u610f\u5220\u3002\u6240\u4ee5\u5bf9\u6bcf\u68f5\u4ed9\u4eba\u638cdfs\u6c42\u51fa\u6bcf\u4e2a\u73af\u7684\u5927\u5c0fx\uff0c\u6c42\u51fa 2^x-1 \u7684\u79ef\uff0c\u7136\u540e\u4e58\u4e0a\u4e0d\u5728\u73af\u4e0a\u7684\u8fb9\u7684\u6761\u6570p, 2^p \uff0c\u4e24\u8005\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002","title":"F\u3001Forest Program"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/2019%20China%20Collegiate%20Programming%20Contest%20Qinhuangdao%20Onsite/#iinvoker","text":"\u9898\u610f\uff1a\u7ed9\u51fa\u5361\u5c14\u768410\u79cd\u6280\u80fd\uff0c\u7ec4\u6210\u6280\u80fd\u7684\u7ec4\u5408\u53ef\u4ee5\u662f\u65e0\u5e8f\u7684\u4f46\u662f\u91ca\u653e\u672c\u8eab\u662f\u6709\u5e8f\u7684\uff0c\u6c42\u51fa\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u6309\u952e\uff08\u542bR\u952e\uff09\u3002 \u9898\u89e3\uff1a\u4e0d\u542bR\u952e\u8fdb\u884c\u4e09\u8fdb\u5236\u7f16\u7801\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\u76f4\u63a5\u66b4\u529b\u641c\u51fa27\u79cd\u7f16\u7801\u4e92\u76f8\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6bd4\u5982 QQQ \u548c QEE \uff0c\u4ed6\u4eec\u6700\u957f\u7684\u540e\u7f00-\u524d\u7f00\u5339\u914d\u4e3a1\uff08\u5373 Q \uff09\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5b9e\u5728\u592a\u5c0f\u76f4\u63a5\u5e73\u65b9\u5904\u7406\u5373\u53ef\uff0c\u5f53\u7136exkmp\u4e13\u95e8\u89e3\u8fd9\u4e2a\u7684\u3002\u7136\u540edp\uff0c dp[i][j] \u8868\u793a\u5230\u7b2ci\u4e2a\u6280\u80fd\uff0c\u73b0\u5728\u961f\u5217\u4e2d\u7684\u72b6\u6001\u4e3aj\u7684\u6700\u5c11\u6b65\u6570\u3002 dp[i][j] = min(dp[i - 1][k] + mp[j][k]) \u5373\u53ef\uff0c\u4e0d\u5408\u6cd5\u7684\u76f4\u63a5\u53bb\u6389\uff0c\u8fd9\u91cc\u7531\u4e8e\u6570\u636e\u8fc7\u5c0f\u76f4\u63a5\u66b4\u529bcmp\u5373\u53ef\u3002\u7136\u540e\u4ee3\u7801\u5199\u4e86\u633a\u957f\u7684\u3002","title":"I\u3001Invoker"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/2019%20China%20Collegiate%20Programming%20Contest%20Qinhuangdao%20Onsite/#jmuv-luv-extra","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u5c0f\u6570\u7684\u524dn\u4f4d\u5e76\u731c\u6d4b\u5faa\u73af\u8282\uff0c\u6c42 a*\u5f53\u524d\u5df2\u7ecf\u51fa\u73b0\u7684\u5faa\u73af\u603b\u957f\u5ea6-b*\u5faa\u73af\u8282\u957f\u5ea6 \u7684\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5bf9\u4e8e\u540c\u4e00\u540e\u7f00\u663e\u7136\u53d6\u5176\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u7ffb\u8f6c\u4e32\u8dd1KMP\uff0c\u904d\u5386\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u6c42\u6700\u5927\u503c\u5373\u53ef\uff08res\u521d\u503c\u5e94\u8be5\u8bbe\u8d1f\u6570\u800c\u4e0d\u662f0\u56e0\u4e3ab\u53ef\u80fd\u6bd4a\u5927\uff0cwa\u4e86\u4e00\u53d1\uff09\u3002","title":"J\u3001MUV LUV EXTRA"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/2019%20China%20Collegiate%20Programming%20Contest%20Qinhuangdao%20Onsite/#kmuv-luv-unlimited","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u6709\u6839\u6811\uff0c\u4e24\u4e2a\u4eba\u535a\u5f08\uff0ca\u5148\u624b\uff0c\u6bcf\u6b21\u6bcf\u4e2a\u4eba\u5fc5\u987b\u81f3\u5c11\u5220\u6389\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u4e5f\u53ea\u80fd\u5220\u6389\u53f6\u5b50\u8282\u70b9\uff0c\u6c42\u8c01\u6700\u5148\u628a\u6811\u5220\u7a7a\u3002 \u9898\u89e3\uff1a\u601d\u8003\u535a\u5f08\u4e86\u5f88\u4e45\u53d1\u73b0\u7684\u4e00\u4e2a\u7ed3\u8bba\u662f\uff1a\u5982\u679c\u662f\u591a\u6761\u94fe\u7ec4\u6210\u7684\u6811\uff08\u5373\u53ea\u6709\u6839\u8282\u70b9\u6709\u51fa\u5ea6\u5927\u4e8e1\uff09\u65f6\uff0c\u53ea\u6709 - 1\u3001\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u94fe\u4e3a\u5947\u6570\u957f\u5ea6 - 2\u3001\u5927\u4e8e1\u6761\u94fe\u4e14\u6240\u6709\u94fe\u4e3a\u5947\u6570\u957f\u5ea6 1 \u662f\u540e\u624b\u5fc5\u80dc\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53d1\u73b0\u5176\u4ed6\u60c5\u51b5\u5148\u624b\u53ef\u4ee5\u5c06\u72b6\u6001\u8f6c\u79fb\u4e3a\u5168\u5947\u6570\u7684\u60c5\u51b5\uff0c\u7136\u540e\u540e\u624b\u5c31\u6ca1\u4e86\uff0c\u56e0\u4e3a\u6700\u540e\u53ea\u5269\u4e00\u4e2a\uff08\u957f\u5ea6\u4e3a0\u5076\u6570\uff09\u7684\u65f6\u5019\u662f\u5148\u624b\u8d62\u3002 \u7136\u540e\u8003\u8651\u4e00\u4e0b\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7236\u8282\u70b9\u6709\u591a\u4f591\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u5148\u624b\u5fc5\u80dc\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a\u8ba1\u6ee1\u8db3\u5148\u624b\u5fc5\u80dc\u7684\u53f6\u5b50\u8282\u70b9\u4e3ax\uff0c\u5176\u4ed6\u6240\u6709\u53f6\u5b50\u8282\u70b9\u96c6\u5408\u4e3aS - 1\u3001\u5982\u679c\u5220\u6389x\u540e\u4e3a\u5148\u624b\u8d25\u72b6\u6001\uff0c\u90a3\u4e48\u5f53\u524d\u5220\u6389x\u5b83\u5c31\u662f\u5fc5\u80dc\u6001 - 2\u3001\u5982\u679c\u5220\u6389x\u540e\u4e3a\u5148\u624b\u80dc\u72b6\u6001\uff0c\u90a3\u4e48\u9996\u5148S\u5728\u8fd9\u79cd\u72b6\u6001\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u540e\u624b\u5fc5\u7136\u4f1a\u9009\u62e9\u4e00\u4e2a S\u2018 \\in S \u4f7f\u5f97\u4e0b\u4e2a\u72b6\u6001\u4e3a\u5148\u624b\u8d25\u72b6\u6001\uff0c\u7531\u4e8eS\u2019\u662fS\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u5148\u624b\u5982\u679c\u53d6 S' \\and x \u5fc5\u7136\u8fdb\u5165\u5148\u624b\u8d25\u72b6\u6001\uff0c\u4e3a\u5148\u624b\u5fc5\u80dc\u6001\u3002 \u4e24\u8005\u7ed3\u5408\u5373\u662f\uff1a\u5982\u679c\u63091\u7f29\u70b9\u5230\u67d0\u4e2a\u5ea6\u6570\u5927\u4e8e1\u7684\u70b9\uff0c\u5b83\u5b58\u5728\u5148\u624b\u5fc5\u80dc\u6001\u5373\u662f\u5148\u624b\u5fc5\u80dc\uff0c\u5426\u5219\u540e\u624b\u80dc\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5ea6\u6570\u5927\u4e8e1\u7684\u70b9\u5373\u662f\u4e00\u6761\u94fe\u6309\u5947\u5076\u8f93\u51fa\u5373\u53ef\u3002 \u7136\u540e\u5c31\u76f4\u63a5\u6309\u4e24\u79cd\u60c5\u51b5\u8ba1\u7b97\u5373\u53ef\uff0c\u5efa\u6811\u4f1a\u7206\u5185\u5b58\uff0c\u76f4\u63a5\u6309topsort\u5e8f\u6a21\u62df\u5373\u53ef\u3002","title":"K\u3001MUV LUV UNLIMITED"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/The%202019%20China%20Collegiate%20Programming%20Contest%20Harbin%20Site/","text":"Name Date Solved A B C D E F G H I J K L The 2019 China Collegiate Programming Contest Harbin Site 2019/11/2 7/12 O . . . O O . . O O O \u00d8 A. Artful Paintings Link \u7ed9\u4e00\u52171-n\u7684\u5757\u67d3\u8272\uff0c\u5e76\u7ed9\u51fa\u4e00\u7cfb\u5217\u9650\u5236\u6761\u4ef6(l, r, k)\uff0c \u7b2c\u4e00\u7c7b\u9650\u5236\u6761\u4ef6\u4e3al-r\u4e4b\u95f4\u7684\u67d3\u8272\u6570\u91cf\u4e0d\u5c0f\u4e8ek\uff0c\u7b2c\u4e8c\u7c7b\u4e3al-r\u4e4b\u5916\u7684\u5757\u67d3\u8272\u6570\u91cf\u4e0d\u5c0f\u4e8ek\uff0c\u6c42\u6700\u5c0f\u7684\u603b\u67d3\u8272\u6570\u3002 \u4ee4 f_i f_i \u8868\u793a\u524d i i \u4f4d\u88ab\u67d3\u8272\u7684\u6570\u91cf\uff0c\u5047\u8bbe\u603b\u67d3\u8272\u6570\u4e3a x x \u8003\u8651\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709\u5982\u4e0b\u5efa\u56fe\uff1a f_i-f_{i-1}\u22641 f_i-f_{i-1}\u22641 f_{i-1}-f_i\u22640 f_{i-1}-f_i\u22640 \u5bf9\u7b2c\u4e00\u7c7b\u9650\u5236\uff0c\u6709 f_{l-1}-f_r\u2264-k f_{l-1}-f_r\u2264-k \u5bf9\u7b2c\u4e8c\u7c7b\u9650\u5236\uff0c\u6709 f_r-f_{l-1}\u2264x-k f_r-f_{l-1}\u2264x-k f_n-f_0\u2264x f_n-f_0\u2264x f_0-f_n\u2264-x f_0-f_n\u2264-x \u4e8c\u5206x\u5224\u5b9a\u7b54\u6848\uff0c\u5f53\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e0d\u5b58\u5728\u8d1f\u73af\u4e14dis[n]=x\u65f6\u8868\u793a\u5f53\u524d\u4e3a\u4e00\u7ec4\u5408\u6cd5\u89e3\u3002 E. Exchanging Gifts Link F. Fixing Banners Link \u5224\u65ad\u7ed9\u51fa\u76846\u4e2a\u5355\u8bcd\u80fd\u5426\u5404\u53d6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5176\u7ec4\u6210Harbin. \u679a\u4e3e\u6392\u5217\u5373\u53ef\u3002 I. Interesting Permutation Link \u5bf9\u4e8e\u67d0\u4e2a\u6392\u5217 P P \uff0c\u5e8f\u5217 h_i h_i \u8868\u793a\u6392\u5217P\u4e2d\u7b2c1-i\u4e2a\u6570\u7684\u6781\u5dee\u3002\u73b0\u5728\u7ed9\u4f60\u5e8f\u5217h\uff0c\u6c42\u80fd\u7ec4\u6210h\u7684\u6392\u5217\u4e2a\u6570\u3002 \u9996\u5148\u6392\u9664\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff08 h_0!=0, h_n!=n-2, h_i < i - 1, h_i\uff1ch_{i-1} h_0!=0, h_n!=n-2, h_i < i - 1, h_i\uff1ch_{i-1} \uff09\uff0c\u7edf\u8ba1\u6570\u5217h\u53d8\u5316\u4e86\u51e0\u6b21\uff0c\u8bb0\u4e3ax\uff0c\u7b54\u6848\u7684\u603b\u503c\u5373\u4e58\u4e0a 2^x 2^x \uff1b\u8bb0\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u957f\u5ea6\u4e3alen\uff0c\u5f00\u59cb\u7684\u5b57\u7b26\u4f4d\u7f6e\u4e3ay\uff0c\u90a3\u4e48\u8fd9\u6bb5\u8fde\u7eed\u5e8f\u5217\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a A_{len}^{p[y] - y + 1} A_{len}^{p[y] - y + 1} \u3002\u5bf9\u4e8e\u6bcf\u6bb5\u8fde\u7eed\u533a\u95f4\u6c42\u51fa\u8fd9\u4e2a\u503c\uff0c\u76f8\u4e58\u540e\u518d\u4e58\u4e0a 2^x 2^x \u5373\u4e3a\u7b54\u6848\u3002 J. Justifying the Conjecture Link \u7b7e\u5230 H. Keeping Rabbits Link L. LRU Algorithm Link \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2aLRU\u8bbf\u95ee\u5e8f\u5217\u3002\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u5bc4\u5b58\u5668\u5927\u5c0f\u548c\u4e00\u6bb5\u67e5\u8be2\u5e8f\u5217\uff0c\u8be2\u95ee\u7ed9\u5b9a\u7684LRU\u8bbf\u95ee\u5e8f\u5217\u5728\u8fd9\u4e2a\u5927\u5c0f\u7684\u5bc4\u5b58\u5668\u4e2d\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u662f\u5426\u4f1a\u51fa\u73b0\u8fd9\u4e00\u67e5\u8be2\u5e8f\u5217\u3002 \u5c06\u6240\u6709\u67e5\u8be2\u5e8f\u5217\u63d2\u5165\u5b57\u5178\u6811\uff0c\u6a21\u62dfLRU\u8bbf\u95ee\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540e\u5728\u5b57\u5178\u6811\u4e0a\u67e5\u8be2\u5e76\u6807\u8bb0\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9\uff0c\u8f93\u51fa\u7b54\u6848\u65f6\u53ea\u8981\u67e5\u8be2\u67d0\u4e2a\u67e5\u8be2\u5e8f\u5217\u7684\u5c3e\u90e8\u8282\u70b9\u662f\u5426\u88ab\u6807\u8bb0\u5373\u53ef\uff08\u5904\u7406\u4e00\u4e0b\u540e\u7f00\u5747\u4e3a0\u7684\u67e5\u8be2\uff09\u3002","title":"The 2019 China Collegiate Programming Contest Harbin Site"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/The%202019%20China%20Collegiate%20Programming%20Contest%20Harbin%20Site/#a-artful-paintings","text":"\u7ed9\u4e00\u52171-n\u7684\u5757\u67d3\u8272\uff0c\u5e76\u7ed9\u51fa\u4e00\u7cfb\u5217\u9650\u5236\u6761\u4ef6(l, r, k)\uff0c \u7b2c\u4e00\u7c7b\u9650\u5236\u6761\u4ef6\u4e3al-r\u4e4b\u95f4\u7684\u67d3\u8272\u6570\u91cf\u4e0d\u5c0f\u4e8ek\uff0c\u7b2c\u4e8c\u7c7b\u4e3al-r\u4e4b\u5916\u7684\u5757\u67d3\u8272\u6570\u91cf\u4e0d\u5c0f\u4e8ek\uff0c\u6c42\u6700\u5c0f\u7684\u603b\u67d3\u8272\u6570\u3002 \u4ee4 f_i f_i \u8868\u793a\u524d i i \u4f4d\u88ab\u67d3\u8272\u7684\u6570\u91cf\uff0c\u5047\u8bbe\u603b\u67d3\u8272\u6570\u4e3a x x \u8003\u8651\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709\u5982\u4e0b\u5efa\u56fe\uff1a f_i-f_{i-1}\u22641 f_i-f_{i-1}\u22641 f_{i-1}-f_i\u22640 f_{i-1}-f_i\u22640 \u5bf9\u7b2c\u4e00\u7c7b\u9650\u5236\uff0c\u6709 f_{l-1}-f_r\u2264-k f_{l-1}-f_r\u2264-k \u5bf9\u7b2c\u4e8c\u7c7b\u9650\u5236\uff0c\u6709 f_r-f_{l-1}\u2264x-k f_r-f_{l-1}\u2264x-k f_n-f_0\u2264x f_n-f_0\u2264x f_0-f_n\u2264-x f_0-f_n\u2264-x \u4e8c\u5206x\u5224\u5b9a\u7b54\u6848\uff0c\u5f53\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e0d\u5b58\u5728\u8d1f\u73af\u4e14dis[n]=x\u65f6\u8868\u793a\u5f53\u524d\u4e3a\u4e00\u7ec4\u5408\u6cd5\u89e3\u3002","title":"A. Artful Paintings"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/The%202019%20China%20Collegiate%20Programming%20Contest%20Harbin%20Site/#e-exchanging-gifts","text":"","title":"E. Exchanging Gifts"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/The%202019%20China%20Collegiate%20Programming%20Contest%20Harbin%20Site/#f-fixing-banners","text":"\u5224\u65ad\u7ed9\u51fa\u76846\u4e2a\u5355\u8bcd\u80fd\u5426\u5404\u53d6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5176\u7ec4\u6210Harbin. \u679a\u4e3e\u6392\u5217\u5373\u53ef\u3002","title":"F. Fixing Banners"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/The%202019%20China%20Collegiate%20Programming%20Contest%20Harbin%20Site/#i-interesting-permutation","text":"\u5bf9\u4e8e\u67d0\u4e2a\u6392\u5217 P P \uff0c\u5e8f\u5217 h_i h_i \u8868\u793a\u6392\u5217P\u4e2d\u7b2c1-i\u4e2a\u6570\u7684\u6781\u5dee\u3002\u73b0\u5728\u7ed9\u4f60\u5e8f\u5217h\uff0c\u6c42\u80fd\u7ec4\u6210h\u7684\u6392\u5217\u4e2a\u6570\u3002 \u9996\u5148\u6392\u9664\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff08 h_0!=0, h_n!=n-2, h_i < i - 1, h_i\uff1ch_{i-1} h_0!=0, h_n!=n-2, h_i < i - 1, h_i\uff1ch_{i-1} \uff09\uff0c\u7edf\u8ba1\u6570\u5217h\u53d8\u5316\u4e86\u51e0\u6b21\uff0c\u8bb0\u4e3ax\uff0c\u7b54\u6848\u7684\u603b\u503c\u5373\u4e58\u4e0a 2^x 2^x \uff1b\u8bb0\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u957f\u5ea6\u4e3alen\uff0c\u5f00\u59cb\u7684\u5b57\u7b26\u4f4d\u7f6e\u4e3ay\uff0c\u90a3\u4e48\u8fd9\u6bb5\u8fde\u7eed\u5e8f\u5217\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a A_{len}^{p[y] - y + 1} A_{len}^{p[y] - y + 1} \u3002\u5bf9\u4e8e\u6bcf\u6bb5\u8fde\u7eed\u533a\u95f4\u6c42\u51fa\u8fd9\u4e2a\u503c\uff0c\u76f8\u4e58\u540e\u518d\u4e58\u4e0a 2^x 2^x \u5373\u4e3a\u7b54\u6848\u3002","title":"I. Interesting Permutation"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/The%202019%20China%20Collegiate%20Programming%20Contest%20Harbin%20Site/#j-justifying-the-conjecture","text":"\u7b7e\u5230","title":"J. Justifying the Conjecture"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/The%202019%20China%20Collegiate%20Programming%20Contest%20Harbin%20Site/#h-keeping-rabbits","text":"","title":"H. Keeping Rabbits"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/The%202019%20China%20Collegiate%20Programming%20Contest%20Harbin%20Site/#l-lru-algorithm","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2aLRU\u8bbf\u95ee\u5e8f\u5217\u3002\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u5bc4\u5b58\u5668\u5927\u5c0f\u548c\u4e00\u6bb5\u67e5\u8be2\u5e8f\u5217\uff0c\u8be2\u95ee\u7ed9\u5b9a\u7684LRU\u8bbf\u95ee\u5e8f\u5217\u5728\u8fd9\u4e2a\u5927\u5c0f\u7684\u5bc4\u5b58\u5668\u4e2d\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u662f\u5426\u4f1a\u51fa\u73b0\u8fd9\u4e00\u67e5\u8be2\u5e8f\u5217\u3002 \u5c06\u6240\u6709\u67e5\u8be2\u5e8f\u5217\u63d2\u5165\u5b57\u5178\u6811\uff0c\u6a21\u62dfLRU\u8bbf\u95ee\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540e\u5728\u5b57\u5178\u6811\u4e0a\u67e5\u8be2\u5e76\u6807\u8bb0\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9\uff0c\u8f93\u51fa\u7b54\u6848\u65f6\u53ea\u8981\u67e5\u8be2\u67d0\u4e2a\u67e5\u8be2\u5e8f\u5217\u7684\u5c3e\u90e8\u8282\u70b9\u662f\u5426\u88ab\u6807\u8bb0\u5373\u53ef\uff08\u5904\u7406\u4e00\u4e0b\u540e\u7f00\u5747\u4e3a0\u7684\u67e5\u8be2\uff09\u3002","title":"L. LRU Algorithm"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%80%BB%E5%86%B3%E8%B5%9B/","text":"Name Date Rank Solved A B C D E F G H I J K L \u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b 2019/11/17 Iron(Rank:76) 3/12 O . . . . . . . . . O O \u8d5b\u540e\u603b\u7ed3 Link \u9996\u5148wxh\u6740\u75af\u4e86\uff0c10\u9898\u78be\u538b\u7b2c\u4e8c3\u9898\uff0c\u56db\u4e2a\u4e00\u8840\uff0c\u6c26\u6c14\u7403\u8fde\u8d77\u6765\u53ef\u4ee5\u4e0a\u5929\u3002 \u53c2\u89c2\u4e86\u65f7\u89c6\uff08\u8fd8\u770b\u5230\u4e86\u67d0\u4e9bioi\u91d1\u724c\u4f6c\uff09\u3001Conflux\u3001\u5feb\u624b\uff08\u78b0\u5230\u4e86\u6b63\u5728\u7b7e\u4e09\u65b9\u7684wx\uff09\u3001\u817e\u8baf\u3002\u7ed9\u6211\u7559\u4e0b\u6700\u6df1\u5370\u8c61\u7684\u662f\u5317\u4eac\u817e\u8baf\u603b\u90e8\u65b0\u697c\uff0c\u771f\u7684\u592a\u724c\u9762\u4e86\u3002\u62ff\u4e86\u4e00\u8f66\u7eaa\u5ff5\u54c1\u5dee\u70b9\u53bb\u4e0d\u4e86\u4e2d\u4f20\u3002 \u996d\u7968\u4e0d\u592a\u6ee1\u610f\uff0c\u7279\u522b\u662f\u90a3\u4e2a\u5976\u8336\u5e97\u5c5e\u5b9e\u4e0d\u884c\uff0c\u4e2d\u4f20\u98df\u5802\u7684\u5bb9\u91cf \u611f\u89c9\u8fbe\u4e0d\u5230\u8fd9\u79cd\u5927\u578b\u6bd4\u8d5b\u7684\u6807\u51c6\u3002 \u548c\u674e\u603b\u8fd8\u6709WUSTACM\u5317\u4eac\u5206\u90e8\u5403\u4e86\u4e00\u987f\uff0c\u5927\u6982\u4e5f\u4e86\u89e3\u5230\u4e86\u4ed6\u4eec\u7684\u73b0\u72b6\u548c\u4ee5\u524d\u7684\u4ff1\u4e50\u90e8\u60c5\u51b5\u3002 \u522b\u7684\u4e0d\u8bf4\uff0c\u6bd4\u8d5b\u4e3e\u529e\u7684\u8fd8\u662f\u724c\u9762\u7684\uff0c\u9898\u76ee\u6b63\u89c4\uff0c\u9898\u518c\u5f88\u597d\uff0c\u961f\u540d\u724c\u5f88\u70ab\u9177\u73b0\u5728\u5e26\u56de\u6765\u6446\u5230\u4e86\u57fa\u5730\u7684\u684c\u4e0a\u3002\u6c14\u7403\u7b2c\u4e00\u6b21\u89c1\u6c26\u6c14\u7403\u3002 \u552f\u4e00\u6076\u5fc3\u4e86\u4e00\u70b9\u662f\u9898\u76ee\u3002\u771f\u56db\u9898\u4ece\u91d1\u5230\u94c1\uff0c\u7136\u540e\u6211\u4e09\u9898\u3002\u5176\u5b9e\u4e0a\u6765\u79d2\u5207\u4e86A\u5927\u6982\u8fdb\u4e86\u524d\u5341\uff0c\u7136\u540eL\u6709\u70b9\u70b8\uff0c\u7136\u540e\u5f88\u5feb\u5207\u6389\u4e86K\uff0c\u7ed3\u679c\u4e00\u76f4\u5230\u7ed3\u675f\u90fd\u4e0d\u4f1a\u90a3\u4e2a\u4e09\u7ef4\u6784\u9020\u9898\u3002\u90a3\u4e2aK\u8fd8\u662f\u7b2c\u4e00\u6b21\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u8fd8\u597d\u4e00\u53d1A\u4e86\u3002\u548c\u534e\u79d1\u597d\u5144\u5f1f\u9ed1\u5207\u53c8\u662f\u540c\u6837\u7684\u724c\u724c\uff08\u00d7\uff09\uff0c\u6e56\u5317\u597d\u50cf\u53ea\u6709\u6b66\u5927\u62ff\u5230\u4e86\u724c\u724c\u3002\u67d0\u51fa\u7ebf\u961f\u4e5f\u548c\u6211\u4e00\u8d77\u94c1\uff0c\u5f88\u5f00\u5fc3\uff08\u00d7\uff09\u3002\u7136\u540e\u8d5b\u540e\u7fa4\u540d\u6539\u6210\u4e86\u201c\u4e2d\u4f20ccpc-final\u56db\u9898\u7fa4\u201d\uff0c\u6211\u4e0d\u914d\u5728\u7fa4\u91cc\u3002\u90a3\u4e2a\u8001\u5e08\u6740\u75af\u4e86\uff0c\u6eda\u699c\u5bf9\u7740\u522b\u4eba\u961f\u540d\u75af\u72c2\u8f93\u51fa\uff0c\u201c\u770b\u6765\u8fd8\u8981\u591a\u5199\u70b9\u4ee3\u7801\uff0c\u4e0d\u591f\u79c3\u201d\u3002\u542c\u8bf4\u8fd8\u6709\u4e38\u5b50\u5934\u5973\u88c5\u76f4\u64ad\uff0c\u53c8\u53cc\u53d2\u53d5\u770b\u4e0d\u6210\u3002 \u5bbe\u9986\u5f88\u5c0f\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5317\u4eac\u5730\u592a\u8d35\u4e86\u3002\u6ca1\u4e86\u5427\uff0c\u53ef\u60dc\u8fd8\u662f\u6ca1\u80fd\u7ed9\u4ff1\u4e50\u90e8\u5949\u732e\u7b2c\u4e00\u4e2aCCPCF\u7684\u724c\u724c\uff0c\u786e\u5b9e\u6709\u70b9\u53ef\u60dc\uff0c\u8fd9\u573a\u7684\u624b\u901f\u8fd8\u633a\u5feb\uff0c\u5176\u5b9eA\u548cK\u9898\u51e0\u4e4e\u5df2\u7ecf\u662f\u573a\u4e0a\u7684\u6781\u9650\u901f\u5ea6\u4e86\uff0c\u5982\u679cL\u5feb\u4e00\u70b9\uff0cI\u80fd\u8fc7\u751a\u81f3\u53ef\u80fd\u62ff\u5230\u91d1\uff08\u505a\u68a6\u5462\u522b\u5435\uff09\u3002 CCPCF\u786e\u5b9e\u6bd4\u5176\u4ed6\u7684\u96be\u4e0a\u4e00\u4e22\u4e22\u611f\u89c9\uff0c\u53c2\u8d5b\u961f\u4f0d\u5b9e\u529b\u786e\u5b9e\u6bd4\u4e00\u822c\u533a\u57df\u8d5b\u5f3a\u4e0d\u5c11\u3002 \uff1f\uff1f\u4ed6\u4eec\u98df\u5802\u70e4\u9762\u7b4b\u660e\u660e\u6709\u90a3\u4e48\u9999 A Link \u7b7e\u5230\uff0c\u7ed9\u4e00\u4e2aschedule\uff0c\u8be2\u95ee\u7b2c\u4e00\u4e2a\u5728\u5f53\u524d\u8be2\u95ee\u65e5\u671f\u4e4b\u540e\u7684\u65e5\u671f\u3002\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002 K Link L Link","title":"\u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%80%BB%E5%86%B3%E8%B5%9B/#_1","text":"\u9996\u5148wxh\u6740\u75af\u4e86\uff0c10\u9898\u78be\u538b\u7b2c\u4e8c3\u9898\uff0c\u56db\u4e2a\u4e00\u8840\uff0c\u6c26\u6c14\u7403\u8fde\u8d77\u6765\u53ef\u4ee5\u4e0a\u5929\u3002 \u53c2\u89c2\u4e86\u65f7\u89c6\uff08\u8fd8\u770b\u5230\u4e86\u67d0\u4e9bioi\u91d1\u724c\u4f6c\uff09\u3001Conflux\u3001\u5feb\u624b\uff08\u78b0\u5230\u4e86\u6b63\u5728\u7b7e\u4e09\u65b9\u7684wx\uff09\u3001\u817e\u8baf\u3002\u7ed9\u6211\u7559\u4e0b\u6700\u6df1\u5370\u8c61\u7684\u662f\u5317\u4eac\u817e\u8baf\u603b\u90e8\u65b0\u697c\uff0c\u771f\u7684\u592a\u724c\u9762\u4e86\u3002\u62ff\u4e86\u4e00\u8f66\u7eaa\u5ff5\u54c1\u5dee\u70b9\u53bb\u4e0d\u4e86\u4e2d\u4f20\u3002 \u996d\u7968\u4e0d\u592a\u6ee1\u610f\uff0c\u7279\u522b\u662f\u90a3\u4e2a\u5976\u8336\u5e97\u5c5e\u5b9e\u4e0d\u884c\uff0c\u4e2d\u4f20\u98df\u5802\u7684\u5bb9\u91cf \u611f\u89c9\u8fbe\u4e0d\u5230\u8fd9\u79cd\u5927\u578b\u6bd4\u8d5b\u7684\u6807\u51c6\u3002 \u548c\u674e\u603b\u8fd8\u6709WUSTACM\u5317\u4eac\u5206\u90e8\u5403\u4e86\u4e00\u987f\uff0c\u5927\u6982\u4e5f\u4e86\u89e3\u5230\u4e86\u4ed6\u4eec\u7684\u73b0\u72b6\u548c\u4ee5\u524d\u7684\u4ff1\u4e50\u90e8\u60c5\u51b5\u3002 \u522b\u7684\u4e0d\u8bf4\uff0c\u6bd4\u8d5b\u4e3e\u529e\u7684\u8fd8\u662f\u724c\u9762\u7684\uff0c\u9898\u76ee\u6b63\u89c4\uff0c\u9898\u518c\u5f88\u597d\uff0c\u961f\u540d\u724c\u5f88\u70ab\u9177\u73b0\u5728\u5e26\u56de\u6765\u6446\u5230\u4e86\u57fa\u5730\u7684\u684c\u4e0a\u3002\u6c14\u7403\u7b2c\u4e00\u6b21\u89c1\u6c26\u6c14\u7403\u3002 \u552f\u4e00\u6076\u5fc3\u4e86\u4e00\u70b9\u662f\u9898\u76ee\u3002\u771f\u56db\u9898\u4ece\u91d1\u5230\u94c1\uff0c\u7136\u540e\u6211\u4e09\u9898\u3002\u5176\u5b9e\u4e0a\u6765\u79d2\u5207\u4e86A\u5927\u6982\u8fdb\u4e86\u524d\u5341\uff0c\u7136\u540eL\u6709\u70b9\u70b8\uff0c\u7136\u540e\u5f88\u5feb\u5207\u6389\u4e86K\uff0c\u7ed3\u679c\u4e00\u76f4\u5230\u7ed3\u675f\u90fd\u4e0d\u4f1a\u90a3\u4e2a\u4e09\u7ef4\u6784\u9020\u9898\u3002\u90a3\u4e2aK\u8fd8\u662f\u7b2c\u4e00\u6b21\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u8fd8\u597d\u4e00\u53d1A\u4e86\u3002\u548c\u534e\u79d1\u597d\u5144\u5f1f\u9ed1\u5207\u53c8\u662f\u540c\u6837\u7684\u724c\u724c\uff08\u00d7\uff09\uff0c\u6e56\u5317\u597d\u50cf\u53ea\u6709\u6b66\u5927\u62ff\u5230\u4e86\u724c\u724c\u3002\u67d0\u51fa\u7ebf\u961f\u4e5f\u548c\u6211\u4e00\u8d77\u94c1\uff0c\u5f88\u5f00\u5fc3\uff08\u00d7\uff09\u3002\u7136\u540e\u8d5b\u540e\u7fa4\u540d\u6539\u6210\u4e86\u201c\u4e2d\u4f20ccpc-final\u56db\u9898\u7fa4\u201d\uff0c\u6211\u4e0d\u914d\u5728\u7fa4\u91cc\u3002\u90a3\u4e2a\u8001\u5e08\u6740\u75af\u4e86\uff0c\u6eda\u699c\u5bf9\u7740\u522b\u4eba\u961f\u540d\u75af\u72c2\u8f93\u51fa\uff0c\u201c\u770b\u6765\u8fd8\u8981\u591a\u5199\u70b9\u4ee3\u7801\uff0c\u4e0d\u591f\u79c3\u201d\u3002\u542c\u8bf4\u8fd8\u6709\u4e38\u5b50\u5934\u5973\u88c5\u76f4\u64ad\uff0c\u53c8\u53cc\u53d2\u53d5\u770b\u4e0d\u6210\u3002 \u5bbe\u9986\u5f88\u5c0f\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5317\u4eac\u5730\u592a\u8d35\u4e86\u3002\u6ca1\u4e86\u5427\uff0c\u53ef\u60dc\u8fd8\u662f\u6ca1\u80fd\u7ed9\u4ff1\u4e50\u90e8\u5949\u732e\u7b2c\u4e00\u4e2aCCPCF\u7684\u724c\u724c\uff0c\u786e\u5b9e\u6709\u70b9\u53ef\u60dc\uff0c\u8fd9\u573a\u7684\u624b\u901f\u8fd8\u633a\u5feb\uff0c\u5176\u5b9eA\u548cK\u9898\u51e0\u4e4e\u5df2\u7ecf\u662f\u573a\u4e0a\u7684\u6781\u9650\u901f\u5ea6\u4e86\uff0c\u5982\u679cL\u5feb\u4e00\u70b9\uff0cI\u80fd\u8fc7\u751a\u81f3\u53ef\u80fd\u62ff\u5230\u91d1\uff08\u505a\u68a6\u5462\u522b\u5435\uff09\u3002 CCPCF\u786e\u5b9e\u6bd4\u5176\u4ed6\u7684\u96be\u4e0a\u4e00\u4e22\u4e22\u611f\u89c9\uff0c\u53c2\u8d5b\u961f\u4f0d\u5b9e\u529b\u786e\u5b9e\u6bd4\u4e00\u822c\u533a\u57df\u8d5b\u5f3a\u4e0d\u5c11\u3002 \uff1f\uff1f\u4ed6\u4eec\u98df\u5802\u70e4\u9762\u7b4b\u660e\u660e\u6709\u90a3\u4e48\u9999","title":"\u8d5b\u540e\u603b\u7ed3"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%80%BB%E5%86%B3%E8%B5%9B/#a","text":"\u7b7e\u5230\uff0c\u7ed9\u4e00\u4e2aschedule\uff0c\u8be2\u95ee\u7b2c\u4e00\u4e2a\u5728\u5f53\u524d\u8be2\u95ee\u65e5\u671f\u4e4b\u540e\u7684\u65e5\u671f\u3002\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002","title":"A"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%80%BB%E5%86%B3%E8%B5%9B/#k","text":"","title":"K"},{"location":"Training%20Logs/2019CCPC%E5%88%86%E7%AB%99%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%80%BB%E5%86%B3%E8%B5%9B/#l","text":"","title":"L"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/","text":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 Link Date Solved A B C D E F G H I J 2019/7/18 8/10 O \u00d8 \u00d8 . \u00d8 O . \u00d8 \u00d8 O \u6bd4\u8d5b\u5730\u5740 A\u3001 Equivalent Prefixes Link \u9898\u610f\uff1a\u5b9a\u4e49\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\u800c\u4e14\u6240\u6709\u7684 (l,r) \u5bf9\u90fd\u6709\u5f53\u524d\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u76f8\u540c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u4e24\u4e2a\u6700\u957f\u7684\u76f8\u5f53\u524d\u7f00\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u8003\u8651\u4e8c\u5206\u524d\u7f00\u957f\u5ea6\uff0c\u9996\u5148\u663e\u7136\u53ef\u77e5\u7684\u662f\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u90a3\u4e48\u4ed6\u4eec\u6240\u6709\u7684\u76f8\u540c\u4f4d\u7f6e\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u4e5f\u76f8\u5f53\u3002\u6240\u4ee5\u6700\u957f\u7684\u524d\u7f00\u5e8f\u5217\u7684\u524d\u7f00\u5e8f\u5217\u4e5f\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4efb\u4f55\u5c0f\u4e8e\u7b49\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5927\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u4e0d\u60f3\u5f53\u7684\u3002\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u7b1b\u5361\u5c14\u6811\u7684\u6a21\u5f0f\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u53e6\u5916\u4e00\u79cd\u505a\u6cd5\uff08\u590d\u6742\u5ea6 O(nlogn) \u6bd4\u5b98\u65b9\u9898\u89e3\u591a\u4e00\u4e9b\uff09\uff0c\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u4e3a x \uff0c\u90a3\u4e48 l \\in [1,x], r \\in [x,n] l \\in [1,x], r \\in [x,n] \u8fd9\u90e8\u5206\u7684\u6240\u6709\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u90fd\u662f x \uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u6cbb (1,x-1)(x+1,n) \uff0c\u4e0d\u65ad\u8fdb\u884c\u4e0b\u53bb\uff0c\u6bcf\u6b21\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u6700\u5c0f\u503c\u4f4d\u7f6e\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; int n ; vector < int > a , b ; inline bool check ( int l , int r ) { if ( r - l <= 1 ) return 1 ; int mnposa = 0 , mn = 0x3f3f3f3f ; int mnposb = 0 , mn2 = 0x3f3f3f3f ; for ( int i = l ; i < r ; ++ i ) { if ( mn > a [ i ]) { mn = a [ i ]; mnposa = i ; } if ( mn2 > b [ i ]) { mn2 = b [ i ]; mnposb = i ; } } return mnposb == mnposa && check ( l , mnposa ) && check ( mnposa + 1 , r ); } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { a . resize ( n ), b . resize ( n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & b [ i ]); } int l = 1 , r = n , res = 1 ; while ( l <= r ) { int mid = l + r >> 1 ; if ( check ( 0 , mid )) { l = mid + 1 ; res = mid ; } else r = mid - 1 ; } printf ( \"%d \\n \" , res ); } return 0 ; } B\u3001 Integration Link \u9898\u610f\uff1a\u7ed9\u5b9a\u5e8f\u5217 a \uff0c\u6c42 \\frac{1}{\\pi} \\int_0^\\infty \\frac{1}{\\prod_{i=1}^n(a_i^2+x^2)} dx \u4eba\u5c3d\u7686\u77e5\u591a\u6b21\u9879\u5728\u5206\u6bcd\u7684\u51fd\u6570\u6c42\u79ef\u5206\u5f02\u5e38\u96be\u7b97\uff0c\u4f46\u662f \\int_0^\\infty \\frac{1}{t^2+x^2}dx=\\frac{\\pi}{2t} \u7136\u540e\u8003\u8651\u62c6\u9879 \\prod_{i=1}^n\\frac{1}{a_i^2+x^2}=\\sum_{i=1}^n\\frac{c_i}{a_i^2+x^2} \u5de6\u8fb9\u5206\u6bcd\u628a\u67d0\u4e00\u9879 a_t a_t \u63d0\u53d6\u51fa\u6765 \\frac{1}{a_t^2+x^2}\\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}+\\frac{c_t}{a_t^2+x^2} \u5c06\u5206\u6bcd\u4e58\u8fc7\u53bb \\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}(a_t^2+x^2)+c_t \u7531\u4e8e\u5bf9\u4efb\u610f x \u90fd\u8981\u4f7f\u7b49\u5f0f\u6210\u7acb\uff0c\u53d6 x=a_t \\dot i x=a_t \\dot i \u5f97\u5230 x^2=-a_t^2 x^2=-a_t^2 \u7136\u540e\u7b49\u5f0f\u5c31\u53d8\u6210 \\prod_{i \\neq t}\\frac{1}{a_i^2-a_t^2}=c_t \u89e3\u51fa\u6240\u6709c\u540e\u5373\u53ef\u79ef\u5206\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; const int mod = 1e9 + 7 ; typedef long long ll ; ll inv ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int main () { int n ; ll a [ 1000 + 10 ]; while ( ~ scanf ( \"%d\" , & n )) { ll ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ]); for ( int i = 0 ; i < n ; i ++ ) { ll c = 1 ; for ( int j = 0 ; j < n ; j ++ ) if ( j != i ) ( c *= ( a [ j ] * a [ j ] % mod - a [ i ] * a [ i ] % mod + mod ) % mod ) %= mod ; ( ans += inv ( a [ i ]) * inv ( c ) % mod * inv ( 2 ) % mod ) %= mod ; } printf ( \"%lld \\n \" , ans ); } return 0 ; } C\u3001 Euclidean Distance Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2am\u7ef4\u5411\u91cf\uff0c\u6c42\u53e6\u4e00\u4e2am\u7ef4\u5411\u91cf (p_1,p_2,...p_n) (p_1,p_2,...p_n) \u4f7f\u5f97 p_i \\ge 0 \\sum p_i = 1 p_i \\ge 0 \\sum p_i = 1 \u4e14\u4e24\u5411\u91cf\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u6700\u77ed\u3002 \u9898\u89e3\uff1a\u5b98\u65b9\u9898\u89e3\u7528\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\u4e0d\u662f\u5f88\u4f1a\uff0c\u7b80\u5355\u6765\u8bb2\u662f\u9996\u5148\u4f7f\u6700\u9ad8\u7684\u53d8\u77ee\uff0c\u7136\u540e\u603b\u548c\u4e3a1\u7684\u60c5\u51b5\u4e0b\u8981\u600e\u4e48\u4f7f\u6700\u5927\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u7136\u8d1f\u6570\u90a3\u8fb9\u662f\u53cd\u8fc7\u6765\u7684\uff0c\u8981\u4f7f\u5f97\u603b\u8ddd\u79bb\u66f4\u63a5\u8fd10\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; ll a [ maxn ], sum [ maxn ]; bool cmp ( const int & a , const int & b ) { return a > b ; } int main () { int n , m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { ll res1 , res2 , pos = n ; for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & a [ i ]); sort ( a + 1 , a + n + 1 , cmp ); sum [ 0 ] = - m ; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + a [ i ]; for ( int i = 1 ; i < n ; i ++ ) if ( sum [ i ] > a [ i + 1 ] * i ) { pos = i ; break ; } res1 = sum [ pos ] * sum [ pos ] * pos ; res2 = pos * pos ; for ( int i = pos + 1 ; i <= n ; i ++ ) res1 += a [ i ] * a [ i ] * res2 ; res2 *= m * m ; ll g = __gcd ( res1 , res2 ); res1 /= g , res2 /= g ; if (( res1 == 0 ) || res2 == 1 ) printf ( \"%lld \\n \" , res1 ); else printf ( \"%lld/%lld \\n \" , res1 , res2 ); } return 0 ; } E\u3001 ABBA Link \u9898\u610f\uff1a\u6c42\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a 2*(n+m) 2*(n+m) \u7684ab\u4e32\u4f7f\u5f97\u6709n\u5bf9 ab \u548cm\u5bf9 ba \uff0c\u4f7f\u7528\u8fc7\u7684\u4e32\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u3002 \u9898\u89e3\uff1a\u5176\u5b9e\u662f\u5e26\u9650\u5236\u7684\u5361\u7279\u5170\u6570\uff0c\u4e0e\u5361\u7279\u5170\u6570\u552f\u4e00\u7684\u533a\u522b\u662f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76840\u7684\u4e2a\u6570\u6bd41\u7684\u4e2a\u6570\u591an\u4ee5\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76841\u7684\u4e2a\u6570\u6bd40\u591am\u4ee5\u4e0a\uff0c\u7136\u540e\u5c31\u5199\u4e2a\u5361\u7279\u5170\u6570\u7684\u9012\u63a8\u628a\u4e0d\u5408\u6cd5\u72b6\u6001\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e3 + 5 ; const int mod = 1e9 + 7 ; int n , m ; int main () { while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { vector < vector < int > > dp (( n + m ) * 2 + 1 ); for ( int i = 0 ; i <= ( n + m ) * 2 ; ++ i ) dp [ i ]. resize ( 2005 ); dp [ 0 ][ 1002 ] = 1 ; for ( int i = 0 ; i < ( n + m ) * 2 ; ++ i ) { for ( int j = 1002 - m ; j <= 1002 + n ; ++ j ) { dp [ i + 1 ][ j + 1 ] = ( dp [ i + 1 ][ j + 1 ] + dp [ i ][ j ]) % mod ; dp [ i + 1 ][ j - 1 ] = ( dp [ i + 1 ][ j - 1 ] + dp [ i ][ j ]) % mod ; } } printf ( \"%d \\n \" , dp [( n + m ) * 2 ][ 1002 ]); } return 0 ; } F\u3001 Random Point in Triangle Link \u9898\u610f\uff1a\u6c42\u4e09\u89d2\u5f62\u5185\u70b9\u4e0e\u4e09\u4e2a\u9876\u70b9\u6784\u6210\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6700\u5927\u503c\u7684\u671f\u671b\u3002 \u9898\u89e3\uff1apython\u968f\u673a\u53d6\u70b9\uff0c\u63a8\u6d4b\u4e0e\u4e09\u89d2\u5f62\u9762\u79ef\u76f8\u5173\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u9762\u79ef0.5\u65f6\u671f\u671b\u4e3a11/36\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u9898\u9762\u4e2d\u63d0\u793a\u4e86\u671f\u671b\u00d736\u662f\u6574\u6570\u6240\u4ee5\u76f4\u63a5\u628a\u968f\u673a\u7ed3\u679c\u00d736\u5f88\u5bb9\u6613\u770b\u3002 \u4ee3\u7801\uff1a # \u968f\u673a\u53d6\u70b9 import random res = 0 times = 20000000 tx = 0 for i in range ( times ): x = random . random () y = random . random () if y > x : continue # print(str(x) + \" \" + str(y)) tx += 1 t = 0.5 * y t2 = 0.5 * ( 1 - x ) t3 = 0.5 - t - t2 res += max ( t , max ( t2 , t3 )) print ( res * 36 / tx ) #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e2 + 5 ; pair < ll , ll > pos [ 3 ]; ll myabs ( ll x ) { return x < 0 ? - x : x ; } int main () { while ( scanf ( \"%lld%lld\" , & pos [ 0 ]. first , & pos [ 0 ]. second ) != EOF ) { for ( int i = 1 ; i < 3 ; ++ i ) { scanf ( \"%lld%lld\" , & pos [ i ]. first , & pos [ i ]. second ); } ll res = ( pos [ 0 ]. first * pos [ 1 ]. second ) + ( pos [ 1 ]. first * pos [ 2 ]. second ) + ( pos [ 2 ]. first * pos [ 0 ]. second ) - ( pos [ 0 ]. first * pos [ 2 ]. second ) - ( pos [ 1 ]. first * pos [ 0 ]. second ) - ( pos [ 2 ]. first * pos [ 1 ]. second ); if ( res < 0 ) res = - res ; printf ( \"%lld \\n \" , res * 11 ); } } H\u3001 XOR Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u96c6\u5408\uff0c\u6c42\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u7684\u5b50\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u663e\u7136\u5c31\u662f\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u8003\u8651\u5bf9\u6240\u6709\u6570\u6c42\u4e00\u6b21\u7ebf\u6027\u57fa\uff0c\u57fa\u5916\u6240\u6709\u6570\u4efb\u610f\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7ec4\u62100\u7684\u6240\u4ee5\u57fa\u5916\u6240\u6709\u70b9\uff08\u8bbe\u4e2a\u6570\u4e3ax\uff09\u90fd\u6709 2^(x-1) \u7684\u6743\uff0c\u56e0\u4e3a\u5355\u70b9\u8981\u53d6\u4e4b\u5916\u5176\u4ed6\u6240\u6709\u70b9\u53ef\u53d6\u53ef\u4e0d\u53d6\uff0c\u5bf9\u4e8e\u57fa\u5185\u7684\u70b9\u5982\u679c\u53ef\u4ee5\u66ff\u6362\u67d0\u4e2a\u57fa\u5916\u70b9\u5b83\u7684\u6743\u4e5f\u662f\u8fd9\u4e2a\uff0c\u5176\u4ed6\u70b9\u662f\u6ca1\u6709\u6743\u7684\uff0c\u6240\u6709\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002\u56e0\u4e3a\u57fa\u5185\u6700\u591a\u5c31 log \u4e2a\u6570\uff0c\u53ef\u4ee5insert\u7684\u65f6\u5019\u7ef4\u62a4\u5982\u679cinsert\u5931\u8d25\u5b83\u5305\u542b\u7684\u57fa\u90fd\u662f\u53ef\u66ff\u6362\u7684\uff0c\u7528\u72b6\u538b\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u53ef\u66ff\u6362\u7684\u57fa\u5e95\u4e86\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; const int mod = 1e9 + 7 ; typedef long long ll ; ll qp ( ll a , ll n ) { if ( n < 0 ) return 0 ; ll ans = 1 ; for (; n ; ( a *= a ) %= mod , n >>= 1 ) if ( n & 1 ) ( ans *= a ) %= mod ; return ans ; } ll v ; struct LinearBasis { ll d [ 63 ], o [ 63 ]; void init () { for ( int i = 0 ; i < 64 ; i ++ ) d [ i ] = o [ i ] = 0 ; v = 0 ; } bool ins ( ll x ) { ll tmp = 0 ; bool flag = false ; for ( int i = 62 ; i >= 0 ; i -- ) { if (( x >> i ) & 1 ) { if ( ! d [ i ]) d [ i ] = x , o [ i ] = tmp | ( 1ll << i ), flag = true ; x ^= d [ i ]; tmp |= o [ i ]; if ( ! x ) break ; } } if ( ! flag ) v |= tmp ; return flag ; } } L ; int main () { int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { L . init (); ll x , ans = 0 , cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & x ); if ( ! L . ins ( x )) ans ++ ; } for ( int i = 0 ; i < 63 ; i ++ ) { if ( L . d [ i ]) cnt ++ ; if (( 1ll << i ) & v ) ans ++ ; } printf ( \"%lld \\n \" , ans * qp ( 2 , n - cnt - 1 ) % mod ); } return 0 ; } I\u3001 Points Division Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e8c\u7ef4\u70b9\u96c6\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u70b9\u6743 a,b \uff0c\u8981\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f97A\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u548cB\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u6ee1\u8db3 if(i\\in A \\and j\\in B \\and x_i\\ge x_j) y_i\\gt y_j \u4f7f\u5f97\u65b9\u6848\u4e2d \\sum a_i + \\sum b_j \\sum a_i + \\sum b_j \u6700\u5927\u3002 \u9898\u89e3\uff1a\u76f8\u5f53\u4e8e\u6c42\u659c\u7387\u59cb\u7ec8\u4e3a\u6b63\u7684\u6298\u7ebf\uff0c\u4e14\u6298\u7ebf\u7684\u6240\u6709\u7aef\u70b9\u662f\u7ed9\u5b9a\u70b9\uff08\u6298\u7ebf\u4ee5\u4e0a\u90e8\u5206\u4e3aA\u96c6\u5408\uff0c\u5176\u4f59\u4e3aB\u96c6\u5408\uff09\u3002\u53ef\u4ee5\u679a\u4e3eA\u96c6\u5408\u4e2d\u70b9\u7684\u6298\u7ebf\u7aef\u70b9\u3002\u90a3\u4e48\u8003\u8651\u5982\u679c\u70b9\u7684\u6a2a\u5750\u6807\u5747\u4e0d\u76f8\u540c\u4e14\u540e\u9762\u7684\u7eb5\u5750\u6807\u603b\u5927\u4e8e\u524d\u8005\uff0c\u90a3\u4e48\u6298\u7ebf\u662f\u786e\u5b9a\u7684\uff0c\u7684\u6700\u5927\u6743\u503c\u8981\u6c42\u7684\u8bdd\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u79bb\u6563\u5316\u7684\u7eb5\u5750\u6807\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u628a\u5927\u4e8e\u7eb5\u5750\u6807\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6700\u5927\u503c\u3002\u73b0\u5728\u7eb5\u5750\u6807\u53ef\u80fd\u4e0d\u5355\u589e\u7684\u8bdd\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u628a\u5c0f\u4e8e\u5b83\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u5927\u4e8e\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u7b49\u4e8e\u7684\u90e8\u5206\u4fee\u6539\u6210\u73b0\u5728\u53ef\u80fd\u53d6\u5230\u7684\u6700\u5927\u6743\u503c\uff0c\u5373\u67e5\u8be2 [1,y_i-1] [1,y_i-1] \u7684\u6700\u503c\uff0c\u52a0\u4e0aa\u6743\uff0c\u7136\u540e\u518d\u8003\u8651\u6709\u53ef\u80fd\u6709\u5171\u6a2a\u5750\u6807\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u8003\u8651\u52a0\u70b9\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f53\u524d\u70b9\u52a0\u5165\u65f6\u53ef\u4ee5\u53d6\u5230\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f18\u5148\u53f3\u5230\u5de6\uff0c\u6b21\u6392\u4e0b\u5230\u4e0a\u5373\u53ef\uff0c\u56e0\u4e3a\u679a\u4e3e\u7684\u662fA\u96c6\u5408\u4e0a\u7684\u70b9\uff0c\u662f\u53ef\u4ee5\u53d6\u7b49\u7684\uff0c\u540c\u4e00\u6a2a\u5750\u6807\u4e0b\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u89e3\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 10 ; int n ; ll val [ maxn << 2 ], lazy [ maxn << 2 ]; int le , re ; ll k ; void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } void build ( int rt , int l , int r ) { val [ rt ] = lazy [ rt ] = 0 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } void update ( int rt , int l , int r ) { if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } int mid = l + r >> 1 ; pushdown ( rt ); if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } ll query ( int rt , int l , int r ) { if ( le <= l && r <= re ) { return val [ rt ]; } int mid = l + r >> 1 ; pushdown ( rt ); ll res = 0 ; if ( le <= mid ) res = max ( res , query ( rt << 1 , l , mid )); if ( re > mid ) res = max ( res , query ( rt << 1 | 1 , mid + 1 , r )); return res ; } vector < int > ypos ; struct po { int x , y , a , b ; bool operator < ( const po & oth ) const { if ( x != oth . x ) return x > oth . x ; return y < oth . y ; } }; void up ( int l , int r , ll kt , int sz ) { // cout << \"update from \" << l << \" to \" << r << \" val \"<< kt << endl; le = l , re = r , k = kt ; update ( 1 , 1 , sz ); } ll qu ( int l , int r , int sz ) { le = l , re = r ; // cout << \"query from \" << l << \" to \" << r << \" ans \" << query(1, 1, sz) << endl; return query ( 1 , 1 , sz ); } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { vector < po > pi ( n ); ypos . clear (); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d%d%d%d\" , & pi [ i ]. x , & pi [ i ]. y , & pi [ i ]. a , & pi [ i ]. b ); ypos . push_back ( pi [ i ]. y ); } sort ( ypos . begin (), ypos . end ()); sort ( pi . begin (), pi . end ()); ypos . erase ( unique ( ypos . begin (), ypos . end ()), ypos . end ()); int sz = pi . size () + 5 ; build ( 1 , 1 , sz ); for ( int i = 0 ; i < n ; ++ i ) pi [ i ]. y = lower_bound ( ypos . begin (), ypos . end (), pi [ i ]. y ) - ypos . begin () + 2 ; for ( int i = 0 ; i < n ; ++ i ) { ll mx = qu ( pi [ i ]. y , sz , sz ); up ( pi [ i ]. y , pi [ i ]. y , mx + pi [ i ]. a - qu ( pi [ i ]. y , pi [ i ]. y , sz ), sz ); up ( pi [ i ]. y + 1 , sz , pi [ i ]. b , sz ); up ( 1 , pi [ i ]. y - 1 , pi [ i ]. a , sz ); } printf ( \"%lld \\n \" , qu ( 1 , sz , sz )); } return 0 ; } \u672c\u9898\u5f88\u96be\u8c03\uff0c\u5176\u5b9e\u6700\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u53d6\u7b49\u7684\u6761\u4ef6\uff0c\u8003\u8651\u4ece\u53f3\u5f80\u5de6\u548c\u53d6A\u96c6\u5408\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u53d6\u7b49\u56f0\u96be\u3002 J\u3001 Fraction Comparision Link \u9898\u610f\uff1a\u5224\u65ad \\frac{x}{a} \\frac{x}{a} \u4e0e \\frac{y}{b} \\frac{y}{b} \u7684\u5927\u5c0f \u9898\u89e3\uff1a\u6700\u7b80\u5355\u6ca1\u6709\u601d\u7ef4\u96be\u5ea6\u7684\u5f53\u7136\u662f\u6539\u6210\u4e58\u6cd5\u4e0a\u5927\u6570\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u53d6\u4f59\u6570\u548c\u5546\u4e24\u90e8\u5206\u5206\u522b\u6bd4\u8f83\u3002 import java.io.OutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.PrintWriter ; import java.util.Scanner ; import java.math.BigInteger ; /** * Built using CHelper plug-in * Actual solution is at the top * * @author badcw */ public class Main { public static void main ( String [] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ); PrintWriter out = new PrintWriter ( outputStream ); Task solver = new Task (); solver . solve ( 1 , in , out ); out . close (); } static class Task { public void solve ( int testNumber , Scanner in , PrintWriter out ) { while ( in . hasNext ()) { BigInteger x = in . nextBigInteger (); BigInteger y = in . nextBigInteger (); BigInteger a = in . nextBigInteger (); BigInteger b = in . nextBigInteger (); BigInteger tt = x . multiply ( b ); BigInteger tt2 = y . multiply ( a ); if ( tt . compareTo ( tt2 ) == 0 ) out . println ( \"=\" ); else if ( tt . compareTo ( tt2 ) < 0 ) out . println ( \"<\" ); else out . println ( \">\" ); } } } }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#2019","text":"Date Solved A B C D E F G H I J 2019/7/18 8/10 O \u00d8 \u00d8 . \u00d8 O . \u00d8 \u00d8 O \u6bd4\u8d5b\u5730\u5740","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#aequivalent-prefixes","text":"\u9898\u610f\uff1a\u5b9a\u4e49\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\u800c\u4e14\u6240\u6709\u7684 (l,r) \u5bf9\u90fd\u6709\u5f53\u524d\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u76f8\u540c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u4e24\u4e2a\u6700\u957f\u7684\u76f8\u5f53\u524d\u7f00\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u8003\u8651\u4e8c\u5206\u524d\u7f00\u957f\u5ea6\uff0c\u9996\u5148\u663e\u7136\u53ef\u77e5\u7684\u662f\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u90a3\u4e48\u4ed6\u4eec\u6240\u6709\u7684\u76f8\u540c\u4f4d\u7f6e\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u4e5f\u76f8\u5f53\u3002\u6240\u4ee5\u6700\u957f\u7684\u524d\u7f00\u5e8f\u5217\u7684\u524d\u7f00\u5e8f\u5217\u4e5f\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4efb\u4f55\u5c0f\u4e8e\u7b49\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5927\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u4e0d\u60f3\u5f53\u7684\u3002\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u7b1b\u5361\u5c14\u6811\u7684\u6a21\u5f0f\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u53e6\u5916\u4e00\u79cd\u505a\u6cd5\uff08\u590d\u6742\u5ea6 O(nlogn) \u6bd4\u5b98\u65b9\u9898\u89e3\u591a\u4e00\u4e9b\uff09\uff0c\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u4e3a x \uff0c\u90a3\u4e48 l \\in [1,x], r \\in [x,n] l \\in [1,x], r \\in [x,n] \u8fd9\u90e8\u5206\u7684\u6240\u6709\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u90fd\u662f x \uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u6cbb (1,x-1)(x+1,n) \uff0c\u4e0d\u65ad\u8fdb\u884c\u4e0b\u53bb\uff0c\u6bcf\u6b21\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u6700\u5c0f\u503c\u4f4d\u7f6e\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; int n ; vector < int > a , b ; inline bool check ( int l , int r ) { if ( r - l <= 1 ) return 1 ; int mnposa = 0 , mn = 0x3f3f3f3f ; int mnposb = 0 , mn2 = 0x3f3f3f3f ; for ( int i = l ; i < r ; ++ i ) { if ( mn > a [ i ]) { mn = a [ i ]; mnposa = i ; } if ( mn2 > b [ i ]) { mn2 = b [ i ]; mnposb = i ; } } return mnposb == mnposa && check ( l , mnposa ) && check ( mnposa + 1 , r ); } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { a . resize ( n ), b . resize ( n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & b [ i ]); } int l = 1 , r = n , res = 1 ; while ( l <= r ) { int mid = l + r >> 1 ; if ( check ( 0 , mid )) { l = mid + 1 ; res = mid ; } else r = mid - 1 ; } printf ( \"%d \\n \" , res ); } return 0 ; }","title":"A\u3001Equivalent Prefixes"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#bintegration","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u5e8f\u5217 a \uff0c\u6c42 \\frac{1}{\\pi} \\int_0^\\infty \\frac{1}{\\prod_{i=1}^n(a_i^2+x^2)} dx \u4eba\u5c3d\u7686\u77e5\u591a\u6b21\u9879\u5728\u5206\u6bcd\u7684\u51fd\u6570\u6c42\u79ef\u5206\u5f02\u5e38\u96be\u7b97\uff0c\u4f46\u662f \\int_0^\\infty \\frac{1}{t^2+x^2}dx=\\frac{\\pi}{2t} \u7136\u540e\u8003\u8651\u62c6\u9879 \\prod_{i=1}^n\\frac{1}{a_i^2+x^2}=\\sum_{i=1}^n\\frac{c_i}{a_i^2+x^2} \u5de6\u8fb9\u5206\u6bcd\u628a\u67d0\u4e00\u9879 a_t a_t \u63d0\u53d6\u51fa\u6765 \\frac{1}{a_t^2+x^2}\\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}+\\frac{c_t}{a_t^2+x^2} \u5c06\u5206\u6bcd\u4e58\u8fc7\u53bb \\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}(a_t^2+x^2)+c_t \u7531\u4e8e\u5bf9\u4efb\u610f x \u90fd\u8981\u4f7f\u7b49\u5f0f\u6210\u7acb\uff0c\u53d6 x=a_t \\dot i x=a_t \\dot i \u5f97\u5230 x^2=-a_t^2 x^2=-a_t^2 \u7136\u540e\u7b49\u5f0f\u5c31\u53d8\u6210 \\prod_{i \\neq t}\\frac{1}{a_i^2-a_t^2}=c_t \u89e3\u51fa\u6240\u6709c\u540e\u5373\u53ef\u79ef\u5206\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; const int mod = 1e9 + 7 ; typedef long long ll ; ll inv ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int main () { int n ; ll a [ 1000 + 10 ]; while ( ~ scanf ( \"%d\" , & n )) { ll ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ]); for ( int i = 0 ; i < n ; i ++ ) { ll c = 1 ; for ( int j = 0 ; j < n ; j ++ ) if ( j != i ) ( c *= ( a [ j ] * a [ j ] % mod - a [ i ] * a [ i ] % mod + mod ) % mod ) %= mod ; ( ans += inv ( a [ i ]) * inv ( c ) % mod * inv ( 2 ) % mod ) %= mod ; } printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"B\u3001Integration"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#ceuclidean-distance","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2am\u7ef4\u5411\u91cf\uff0c\u6c42\u53e6\u4e00\u4e2am\u7ef4\u5411\u91cf (p_1,p_2,...p_n) (p_1,p_2,...p_n) \u4f7f\u5f97 p_i \\ge 0 \\sum p_i = 1 p_i \\ge 0 \\sum p_i = 1 \u4e14\u4e24\u5411\u91cf\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u6700\u77ed\u3002 \u9898\u89e3\uff1a\u5b98\u65b9\u9898\u89e3\u7528\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\u4e0d\u662f\u5f88\u4f1a\uff0c\u7b80\u5355\u6765\u8bb2\u662f\u9996\u5148\u4f7f\u6700\u9ad8\u7684\u53d8\u77ee\uff0c\u7136\u540e\u603b\u548c\u4e3a1\u7684\u60c5\u51b5\u4e0b\u8981\u600e\u4e48\u4f7f\u6700\u5927\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u7136\u8d1f\u6570\u90a3\u8fb9\u662f\u53cd\u8fc7\u6765\u7684\uff0c\u8981\u4f7f\u5f97\u603b\u8ddd\u79bb\u66f4\u63a5\u8fd10\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; ll a [ maxn ], sum [ maxn ]; bool cmp ( const int & a , const int & b ) { return a > b ; } int main () { int n , m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { ll res1 , res2 , pos = n ; for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & a [ i ]); sort ( a + 1 , a + n + 1 , cmp ); sum [ 0 ] = - m ; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + a [ i ]; for ( int i = 1 ; i < n ; i ++ ) if ( sum [ i ] > a [ i + 1 ] * i ) { pos = i ; break ; } res1 = sum [ pos ] * sum [ pos ] * pos ; res2 = pos * pos ; for ( int i = pos + 1 ; i <= n ; i ++ ) res1 += a [ i ] * a [ i ] * res2 ; res2 *= m * m ; ll g = __gcd ( res1 , res2 ); res1 /= g , res2 /= g ; if (( res1 == 0 ) || res2 == 1 ) printf ( \"%lld \\n \" , res1 ); else printf ( \"%lld/%lld \\n \" , res1 , res2 ); } return 0 ; }","title":"C\u3001Euclidean Distance"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#eabba","text":"\u9898\u610f\uff1a\u6c42\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a 2*(n+m) 2*(n+m) \u7684ab\u4e32\u4f7f\u5f97\u6709n\u5bf9 ab \u548cm\u5bf9 ba \uff0c\u4f7f\u7528\u8fc7\u7684\u4e32\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u3002 \u9898\u89e3\uff1a\u5176\u5b9e\u662f\u5e26\u9650\u5236\u7684\u5361\u7279\u5170\u6570\uff0c\u4e0e\u5361\u7279\u5170\u6570\u552f\u4e00\u7684\u533a\u522b\u662f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76840\u7684\u4e2a\u6570\u6bd41\u7684\u4e2a\u6570\u591an\u4ee5\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76841\u7684\u4e2a\u6570\u6bd40\u591am\u4ee5\u4e0a\uff0c\u7136\u540e\u5c31\u5199\u4e2a\u5361\u7279\u5170\u6570\u7684\u9012\u63a8\u628a\u4e0d\u5408\u6cd5\u72b6\u6001\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e3 + 5 ; const int mod = 1e9 + 7 ; int n , m ; int main () { while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { vector < vector < int > > dp (( n + m ) * 2 + 1 ); for ( int i = 0 ; i <= ( n + m ) * 2 ; ++ i ) dp [ i ]. resize ( 2005 ); dp [ 0 ][ 1002 ] = 1 ; for ( int i = 0 ; i < ( n + m ) * 2 ; ++ i ) { for ( int j = 1002 - m ; j <= 1002 + n ; ++ j ) { dp [ i + 1 ][ j + 1 ] = ( dp [ i + 1 ][ j + 1 ] + dp [ i ][ j ]) % mod ; dp [ i + 1 ][ j - 1 ] = ( dp [ i + 1 ][ j - 1 ] + dp [ i ][ j ]) % mod ; } } printf ( \"%d \\n \" , dp [( n + m ) * 2 ][ 1002 ]); } return 0 ; }","title":"E\u3001ABBA"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#frandom-point-in-triangle","text":"\u9898\u610f\uff1a\u6c42\u4e09\u89d2\u5f62\u5185\u70b9\u4e0e\u4e09\u4e2a\u9876\u70b9\u6784\u6210\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6700\u5927\u503c\u7684\u671f\u671b\u3002 \u9898\u89e3\uff1apython\u968f\u673a\u53d6\u70b9\uff0c\u63a8\u6d4b\u4e0e\u4e09\u89d2\u5f62\u9762\u79ef\u76f8\u5173\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u9762\u79ef0.5\u65f6\u671f\u671b\u4e3a11/36\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u9898\u9762\u4e2d\u63d0\u793a\u4e86\u671f\u671b\u00d736\u662f\u6574\u6570\u6240\u4ee5\u76f4\u63a5\u628a\u968f\u673a\u7ed3\u679c\u00d736\u5f88\u5bb9\u6613\u770b\u3002 \u4ee3\u7801\uff1a # \u968f\u673a\u53d6\u70b9 import random res = 0 times = 20000000 tx = 0 for i in range ( times ): x = random . random () y = random . random () if y > x : continue # print(str(x) + \" \" + str(y)) tx += 1 t = 0.5 * y t2 = 0.5 * ( 1 - x ) t3 = 0.5 - t - t2 res += max ( t , max ( t2 , t3 )) print ( res * 36 / tx ) #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e2 + 5 ; pair < ll , ll > pos [ 3 ]; ll myabs ( ll x ) { return x < 0 ? - x : x ; } int main () { while ( scanf ( \"%lld%lld\" , & pos [ 0 ]. first , & pos [ 0 ]. second ) != EOF ) { for ( int i = 1 ; i < 3 ; ++ i ) { scanf ( \"%lld%lld\" , & pos [ i ]. first , & pos [ i ]. second ); } ll res = ( pos [ 0 ]. first * pos [ 1 ]. second ) + ( pos [ 1 ]. first * pos [ 2 ]. second ) + ( pos [ 2 ]. first * pos [ 0 ]. second ) - ( pos [ 0 ]. first * pos [ 2 ]. second ) - ( pos [ 1 ]. first * pos [ 0 ]. second ) - ( pos [ 2 ]. first * pos [ 1 ]. second ); if ( res < 0 ) res = - res ; printf ( \"%lld \\n \" , res * 11 ); } }","title":"F\u3001Random Point in Triangle"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#hxor","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u96c6\u5408\uff0c\u6c42\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u7684\u5b50\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u663e\u7136\u5c31\u662f\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u8003\u8651\u5bf9\u6240\u6709\u6570\u6c42\u4e00\u6b21\u7ebf\u6027\u57fa\uff0c\u57fa\u5916\u6240\u6709\u6570\u4efb\u610f\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7ec4\u62100\u7684\u6240\u4ee5\u57fa\u5916\u6240\u6709\u70b9\uff08\u8bbe\u4e2a\u6570\u4e3ax\uff09\u90fd\u6709 2^(x-1) \u7684\u6743\uff0c\u56e0\u4e3a\u5355\u70b9\u8981\u53d6\u4e4b\u5916\u5176\u4ed6\u6240\u6709\u70b9\u53ef\u53d6\u53ef\u4e0d\u53d6\uff0c\u5bf9\u4e8e\u57fa\u5185\u7684\u70b9\u5982\u679c\u53ef\u4ee5\u66ff\u6362\u67d0\u4e2a\u57fa\u5916\u70b9\u5b83\u7684\u6743\u4e5f\u662f\u8fd9\u4e2a\uff0c\u5176\u4ed6\u70b9\u662f\u6ca1\u6709\u6743\u7684\uff0c\u6240\u6709\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002\u56e0\u4e3a\u57fa\u5185\u6700\u591a\u5c31 log \u4e2a\u6570\uff0c\u53ef\u4ee5insert\u7684\u65f6\u5019\u7ef4\u62a4\u5982\u679cinsert\u5931\u8d25\u5b83\u5305\u542b\u7684\u57fa\u90fd\u662f\u53ef\u66ff\u6362\u7684\uff0c\u7528\u72b6\u538b\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u53ef\u66ff\u6362\u7684\u57fa\u5e95\u4e86\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; const int mod = 1e9 + 7 ; typedef long long ll ; ll qp ( ll a , ll n ) { if ( n < 0 ) return 0 ; ll ans = 1 ; for (; n ; ( a *= a ) %= mod , n >>= 1 ) if ( n & 1 ) ( ans *= a ) %= mod ; return ans ; } ll v ; struct LinearBasis { ll d [ 63 ], o [ 63 ]; void init () { for ( int i = 0 ; i < 64 ; i ++ ) d [ i ] = o [ i ] = 0 ; v = 0 ; } bool ins ( ll x ) { ll tmp = 0 ; bool flag = false ; for ( int i = 62 ; i >= 0 ; i -- ) { if (( x >> i ) & 1 ) { if ( ! d [ i ]) d [ i ] = x , o [ i ] = tmp | ( 1ll << i ), flag = true ; x ^= d [ i ]; tmp |= o [ i ]; if ( ! x ) break ; } } if ( ! flag ) v |= tmp ; return flag ; } } L ; int main () { int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { L . init (); ll x , ans = 0 , cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & x ); if ( ! L . ins ( x )) ans ++ ; } for ( int i = 0 ; i < 63 ; i ++ ) { if ( L . d [ i ]) cnt ++ ; if (( 1ll << i ) & v ) ans ++ ; } printf ( \"%lld \\n \" , ans * qp ( 2 , n - cnt - 1 ) % mod ); } return 0 ; }","title":"H\u3001XOR"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#ipoints-division","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e8c\u7ef4\u70b9\u96c6\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u70b9\u6743 a,b \uff0c\u8981\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f97A\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u548cB\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u6ee1\u8db3 if(i\\in A \\and j\\in B \\and x_i\\ge x_j) y_i\\gt y_j \u4f7f\u5f97\u65b9\u6848\u4e2d \\sum a_i + \\sum b_j \\sum a_i + \\sum b_j \u6700\u5927\u3002 \u9898\u89e3\uff1a\u76f8\u5f53\u4e8e\u6c42\u659c\u7387\u59cb\u7ec8\u4e3a\u6b63\u7684\u6298\u7ebf\uff0c\u4e14\u6298\u7ebf\u7684\u6240\u6709\u7aef\u70b9\u662f\u7ed9\u5b9a\u70b9\uff08\u6298\u7ebf\u4ee5\u4e0a\u90e8\u5206\u4e3aA\u96c6\u5408\uff0c\u5176\u4f59\u4e3aB\u96c6\u5408\uff09\u3002\u53ef\u4ee5\u679a\u4e3eA\u96c6\u5408\u4e2d\u70b9\u7684\u6298\u7ebf\u7aef\u70b9\u3002\u90a3\u4e48\u8003\u8651\u5982\u679c\u70b9\u7684\u6a2a\u5750\u6807\u5747\u4e0d\u76f8\u540c\u4e14\u540e\u9762\u7684\u7eb5\u5750\u6807\u603b\u5927\u4e8e\u524d\u8005\uff0c\u90a3\u4e48\u6298\u7ebf\u662f\u786e\u5b9a\u7684\uff0c\u7684\u6700\u5927\u6743\u503c\u8981\u6c42\u7684\u8bdd\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u79bb\u6563\u5316\u7684\u7eb5\u5750\u6807\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u628a\u5927\u4e8e\u7eb5\u5750\u6807\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6700\u5927\u503c\u3002\u73b0\u5728\u7eb5\u5750\u6807\u53ef\u80fd\u4e0d\u5355\u589e\u7684\u8bdd\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u628a\u5c0f\u4e8e\u5b83\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u5927\u4e8e\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u7b49\u4e8e\u7684\u90e8\u5206\u4fee\u6539\u6210\u73b0\u5728\u53ef\u80fd\u53d6\u5230\u7684\u6700\u5927\u6743\u503c\uff0c\u5373\u67e5\u8be2 [1,y_i-1] [1,y_i-1] \u7684\u6700\u503c\uff0c\u52a0\u4e0aa\u6743\uff0c\u7136\u540e\u518d\u8003\u8651\u6709\u53ef\u80fd\u6709\u5171\u6a2a\u5750\u6807\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u8003\u8651\u52a0\u70b9\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f53\u524d\u70b9\u52a0\u5165\u65f6\u53ef\u4ee5\u53d6\u5230\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f18\u5148\u53f3\u5230\u5de6\uff0c\u6b21\u6392\u4e0b\u5230\u4e0a\u5373\u53ef\uff0c\u56e0\u4e3a\u679a\u4e3e\u7684\u662fA\u96c6\u5408\u4e0a\u7684\u70b9\uff0c\u662f\u53ef\u4ee5\u53d6\u7b49\u7684\uff0c\u540c\u4e00\u6a2a\u5750\u6807\u4e0b\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u89e3\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 10 ; int n ; ll val [ maxn << 2 ], lazy [ maxn << 2 ]; int le , re ; ll k ; void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } void build ( int rt , int l , int r ) { val [ rt ] = lazy [ rt ] = 0 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } void update ( int rt , int l , int r ) { if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } int mid = l + r >> 1 ; pushdown ( rt ); if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } ll query ( int rt , int l , int r ) { if ( le <= l && r <= re ) { return val [ rt ]; } int mid = l + r >> 1 ; pushdown ( rt ); ll res = 0 ; if ( le <= mid ) res = max ( res , query ( rt << 1 , l , mid )); if ( re > mid ) res = max ( res , query ( rt << 1 | 1 , mid + 1 , r )); return res ; } vector < int > ypos ; struct po { int x , y , a , b ; bool operator < ( const po & oth ) const { if ( x != oth . x ) return x > oth . x ; return y < oth . y ; } }; void up ( int l , int r , ll kt , int sz ) { // cout << \"update from \" << l << \" to \" << r << \" val \"<< kt << endl; le = l , re = r , k = kt ; update ( 1 , 1 , sz ); } ll qu ( int l , int r , int sz ) { le = l , re = r ; // cout << \"query from \" << l << \" to \" << r << \" ans \" << query(1, 1, sz) << endl; return query ( 1 , 1 , sz ); } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { vector < po > pi ( n ); ypos . clear (); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d%d%d%d\" , & pi [ i ]. x , & pi [ i ]. y , & pi [ i ]. a , & pi [ i ]. b ); ypos . push_back ( pi [ i ]. y ); } sort ( ypos . begin (), ypos . end ()); sort ( pi . begin (), pi . end ()); ypos . erase ( unique ( ypos . begin (), ypos . end ()), ypos . end ()); int sz = pi . size () + 5 ; build ( 1 , 1 , sz ); for ( int i = 0 ; i < n ; ++ i ) pi [ i ]. y = lower_bound ( ypos . begin (), ypos . end (), pi [ i ]. y ) - ypos . begin () + 2 ; for ( int i = 0 ; i < n ; ++ i ) { ll mx = qu ( pi [ i ]. y , sz , sz ); up ( pi [ i ]. y , pi [ i ]. y , mx + pi [ i ]. a - qu ( pi [ i ]. y , pi [ i ]. y , sz ), sz ); up ( pi [ i ]. y + 1 , sz , pi [ i ]. b , sz ); up ( 1 , pi [ i ]. y - 1 , pi [ i ]. a , sz ); } printf ( \"%lld \\n \" , qu ( 1 , sz , sz )); } return 0 ; } \u672c\u9898\u5f88\u96be\u8c03\uff0c\u5176\u5b9e\u6700\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u53d6\u7b49\u7684\u6761\u4ef6\uff0c\u8003\u8651\u4ece\u53f3\u5f80\u5de6\u548c\u53d6A\u96c6\u5408\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u53d6\u7b49\u56f0\u96be\u3002","title":"I\u3001Points Division"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#jfraction-comparision","text":"\u9898\u610f\uff1a\u5224\u65ad \\frac{x}{a} \\frac{x}{a} \u4e0e \\frac{y}{b} \\frac{y}{b} \u7684\u5927\u5c0f \u9898\u89e3\uff1a\u6700\u7b80\u5355\u6ca1\u6709\u601d\u7ef4\u96be\u5ea6\u7684\u5f53\u7136\u662f\u6539\u6210\u4e58\u6cd5\u4e0a\u5927\u6570\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u53d6\u4f59\u6570\u548c\u5546\u4e24\u90e8\u5206\u5206\u522b\u6bd4\u8f83\u3002 import java.io.OutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.PrintWriter ; import java.util.Scanner ; import java.math.BigInteger ; /** * Built using CHelper plug-in * Actual solution is at the top * * @author badcw */ public class Main { public static void main ( String [] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ); PrintWriter out = new PrintWriter ( outputStream ); Task solver = new Task (); solver . solve ( 1 , in , out ); out . close (); } static class Task { public void solve ( int testNumber , Scanner in , PrintWriter out ) { while ( in . hasNext ()) { BigInteger x = in . nextBigInteger (); BigInteger y = in . nextBigInteger (); BigInteger a = in . nextBigInteger (); BigInteger b = in . nextBigInteger (); BigInteger tt = x . multiply ( b ); BigInteger tt2 = y . multiply ( a ); if ( tt . compareTo ( tt2 ) == 0 ) out . println ( \"=\" ); else if ( tt . compareTo ( tt2 ) < 0 ) out . println ( \"<\" ); else out . println ( \">\" ); } } } }","title":"J\u3001Fraction Comparision"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E5%9C%BA%EF%BC%89/","text":"Name Date Solved A B C D E F G H I J K 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09 2019/8/8 9/11 O O O O \u00d8 \u00d8 . \u00d8 \u00d8 O . tag Link a \u6700\u5c0f\u8868\u793a\u6cd5 b \u591a\u9879\u5f0f\u89c4\u7ea6 c \u778e\u641e d \u778e\u641e e \u7ebf\u6bb5\u6811 f \u79bb\u7ebf\u778e\u641e h \u6570\u4f4ddp i\u8ba1\u6570 A. String Link \u5c06\u4e00\u4e2a\u4e32\u5206\u5272\u6210\u591a\u4e2a\u6700\u5c0f\u8868\u793a\u4e32\uff0c\u6c42\u62c6\u5206\u65b9\u6848 \u7ebf\u6027\u63a8\u6700\u5c0f\u8868\u793a\u6cd5\u5373\u53ef B. Irreducible Polynomial Link \u6c42\u591a\u9879\u5f0f\u662f\u5426\u80fd\u5728\u5b9e\u6570\u57df\u4e0a\u89c4\u7ea6 \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u5224\u522b\u5f0f\u4e3a\u8d1f\u6570\u7684\u4e8c\u6b21\u591a\u9879\u5f0f\u65e0\u6cd5\u89c4\u7ea6\uff0c\u5176\u4ed6\u90fd\u53ef\u4ee5\u3002\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u3002\u8c8c\u4f3c\u662f\u6709\u5171\u8f6d\u8d1f\u6570\u6839\u3002 C. Governing sand Link \u6709\u4e00\u4e9b\u6743\u503c\uff0c\u5220\u9664\u4e00\u79cd\u6743\u503c\u9700\u8981\u4ee3\u4ef7\uff0c\u6c42\u4f7f\u6700\u5927\u6743\u503c\u4e2a\u6570\u8d85\u8fc7\u603b\u6570\u4e00\u534a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u8f93\u5165\u4e3an\u79cd\u6743\u503c\uff0c\u6bcf\u79cdPHC\uff0c\u8868\u793a\u6709P\u4e2aH\uff0c\u5220\u9664\u4ee3\u4ef7\u4e3aC\u3002 \u5bf9\u4e8e\u6bcf\u79cd\u6743\u503c\uff0c\u679a\u4e3e\u5b83\u4e3a\u6700\u503c\u65f6\u4ed8\u51fa\u7684\u4ee3\u4ef7\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\u9700\u8981\u5220\u9664\u7684\u662f\u5927\u4e8e\u5b83\u7684\u6743\u503c\u548c\u5927\u4e8e\u5b83\u6570\u91cf\u4e00\u534a\u7684\u6700\u5c0f\u6743\u503c\uff0c\u7ef4\u62a4\u4e00\u4e0b\u524d\u7f00\u5e8f\u5217\u5373\u53ef\u3002\u7531\u4e8eC\u8303\u56f4\u8f83\u5c0f\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e2aC\u7684\u524d\u7f00\u3002 D. Number Link \u7ed9n\u548cp\uff0c\u6c42\u4efb\u610f\u4e00\u4e2an\u4f4d\u6570\u80fd\u88abp\u6574\u9664\uff08p\u662f\u7d20\u6570\uff09 \u672b\u5c3e\u52a00\u5373\u53ef E. Find the median Link \u7ed9\u4e00\u4e2a\u7a7a\u5e8f\u5217\uff0c\u6bcf\u6b21\u5f80\u91cc\u9762\u6dfb\u52a0 [l, r] \uff0c\u6bcf\u6b21\u8f93\u51fa\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\uff08n\u4e2a\u6570\u8f93\u51fa x[n/2] \uff09 \u9996\u5148\u5bf9\u8be2\u95ee\u79bb\u7ebf\uff0c\u5c06\u8be2\u95ee\u7684\u7aef\u70b9\u79bb\u6563\u5316\u5e76\u5efa\u7acb\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u5373\u53ef\u3002 \u67e5\u8be2\u65f6\u7c7b\u4f3c\u4e3b\u5e2d\u6811\u67e5\u8be2k\u5927\uff0c\u4f18\u5148\u5de6\u5b50\u6811\u5373\u53ef\uff0c\u5355\u4e2a\u533a\u95f4\u5185\u9700\u8981\u4ed4\u7ec6\u8ba8\u8bba\u7b54\u6848\u3002","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E5%9C%BA%EF%BC%89/#tag","text":"a \u6700\u5c0f\u8868\u793a\u6cd5 b \u591a\u9879\u5f0f\u89c4\u7ea6 c \u778e\u641e d \u778e\u641e e \u7ebf\u6bb5\u6811 f \u79bb\u7ebf\u778e\u641e h \u6570\u4f4ddp i\u8ba1\u6570","title":"tag"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E5%9C%BA%EF%BC%89/#a-string","text":"\u5c06\u4e00\u4e2a\u4e32\u5206\u5272\u6210\u591a\u4e2a\u6700\u5c0f\u8868\u793a\u4e32\uff0c\u6c42\u62c6\u5206\u65b9\u6848 \u7ebf\u6027\u63a8\u6700\u5c0f\u8868\u793a\u6cd5\u5373\u53ef","title":"A. String"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E5%9C%BA%EF%BC%89/#b-irreducible-polynomial","text":"\u6c42\u591a\u9879\u5f0f\u662f\u5426\u80fd\u5728\u5b9e\u6570\u57df\u4e0a\u89c4\u7ea6 \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u5224\u522b\u5f0f\u4e3a\u8d1f\u6570\u7684\u4e8c\u6b21\u591a\u9879\u5f0f\u65e0\u6cd5\u89c4\u7ea6\uff0c\u5176\u4ed6\u90fd\u53ef\u4ee5\u3002\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u3002\u8c8c\u4f3c\u662f\u6709\u5171\u8f6d\u8d1f\u6570\u6839\u3002","title":"B. Irreducible Polynomial"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E5%9C%BA%EF%BC%89/#c-governing-sand","text":"\u6709\u4e00\u4e9b\u6743\u503c\uff0c\u5220\u9664\u4e00\u79cd\u6743\u503c\u9700\u8981\u4ee3\u4ef7\uff0c\u6c42\u4f7f\u6700\u5927\u6743\u503c\u4e2a\u6570\u8d85\u8fc7\u603b\u6570\u4e00\u534a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u8f93\u5165\u4e3an\u79cd\u6743\u503c\uff0c\u6bcf\u79cdPHC\uff0c\u8868\u793a\u6709P\u4e2aH\uff0c\u5220\u9664\u4ee3\u4ef7\u4e3aC\u3002 \u5bf9\u4e8e\u6bcf\u79cd\u6743\u503c\uff0c\u679a\u4e3e\u5b83\u4e3a\u6700\u503c\u65f6\u4ed8\u51fa\u7684\u4ee3\u4ef7\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\u9700\u8981\u5220\u9664\u7684\u662f\u5927\u4e8e\u5b83\u7684\u6743\u503c\u548c\u5927\u4e8e\u5b83\u6570\u91cf\u4e00\u534a\u7684\u6700\u5c0f\u6743\u503c\uff0c\u7ef4\u62a4\u4e00\u4e0b\u524d\u7f00\u5e8f\u5217\u5373\u53ef\u3002\u7531\u4e8eC\u8303\u56f4\u8f83\u5c0f\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e2aC\u7684\u524d\u7f00\u3002","title":"C.  Governing sand"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E5%9C%BA%EF%BC%89/#d-number","text":"\u7ed9n\u548cp\uff0c\u6c42\u4efb\u610f\u4e00\u4e2an\u4f4d\u6570\u80fd\u88abp\u6574\u9664\uff08p\u662f\u7d20\u6570\uff09 \u672b\u5c3e\u52a00\u5373\u53ef","title":"D. Number"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%83%E5%9C%BA%EF%BC%89/#e-find-the-median","text":"\u7ed9\u4e00\u4e2a\u7a7a\u5e8f\u5217\uff0c\u6bcf\u6b21\u5f80\u91cc\u9762\u6dfb\u52a0 [l, r] \uff0c\u6bcf\u6b21\u8f93\u51fa\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\uff08n\u4e2a\u6570\u8f93\u51fa x[n/2] \uff09 \u9996\u5148\u5bf9\u8be2\u95ee\u79bb\u7ebf\uff0c\u5c06\u8be2\u95ee\u7684\u7aef\u70b9\u79bb\u6563\u5316\u5e76\u5efa\u7acb\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u5373\u53ef\u3002 \u67e5\u8be2\u65f6\u7c7b\u4f3c\u4e3b\u5e2d\u6811\u67e5\u8be2k\u5927\uff0c\u4f18\u5148\u5de6\u5b50\u6811\u5373\u53ef\uff0c\u5355\u4e2a\u533a\u95f4\u5185\u9700\u8981\u4ed4\u7ec6\u8ba8\u8bba\u7b54\u6848\u3002","title":"E.  Find the median"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/","text":"Name Date Solved A B C D E F G H I J 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2019/7/25 6/10 . O . \u00d8 . \u00d8 \u00d8 O . \u00d8 B. Crazy Binary String Link \u7ed9\u4e00\u4e2a01\u4e32\u6c42\u6700\u957f\u768401\u76f8\u7b49\u7684\u5b50\u4e32\u548c\u5b50\u5e8f\u5217\u957f\u5ea6 \u5b50\u4e32\u80af\u5b9a\u662f max(num(0),num(1)) max(num(0),num(1)) \uff0c\u5b50\u5e8f\u5217\u76f4\u63a5\u8bb0\u5f55\u524d\u7f0001\u4e2a\u6570\u5dee\uff0c\u51fa\u73b0\u8fc7\u8bf4\u660e\u8be5\u5b50\u5e8f\u5217\u662f01\u5e73\u8861\u7684\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int a [ maxn ]; int pre [ maxn ]; int pre1 [ maxn ]; map < int , int > pos ; int main ( int argc , char * argv []) { int n ; scanf ( \"%d\" , & n ); int tt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%01d\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + ( a [ i ] == 0 ); pre1 [ i ] = pre1 [ i - 1 ] + ( a [ i ] == 1 ); if ( pre [ i ] == pre1 [ i ]) tt = max ( tt , i ); else { if ( pos [ pre [ i ] - pre1 [ i ]]) tt = max ( tt , i - pos [ pre [ i ] - pre1 [ i ]]); else pos [ pre [ i ] - pre1 [ i ]] = i ; } } printf ( \"%d %d \\n \" , tt , min ( pre [ n ], pre1 [ n ]) * 2 ); return 0 ; } D. Big Integer Link 111...111={10^n-1 \\over 9}\u22610\\ mod\\ p 111...111={10^n-1 \\over 9}\u22610\\ mod\\ p \u6709 10^n\u22611 \\ mod\\ 9p 10^n\u22611 \\ mod\\ 9p \uff0c\u5176\u4e2d n n \u662f 1 \\over p 1 \\over p \u7684\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u4e00\u4e2a\u6700\u5c0f\u7684 A(n) A(n) \u80fd\u88abp\u6574\u9664\uff0cBSGS\u6c42\u51fan\u7684\u503c\u3002(\u8fd9\u91cc\u6211\u6c42\u7684\u662f 10^n\u22611 \\ mod\\ p 10^n\u22611 \\ mod\\ p \u7136\u540e\u7279\u5224\u4e863\uff0c\u56e0\u4e3a3\u548c9\u4e0d\u4e92\u8d28\u6240\u4ee5\u7b97\u51fa\u6765\u7684n\u4e0d\u5bf9)\uff0c\u6240\u6709\u7684\u8d28\u6570\u4e2d\u53ea\u67092,5\u65e0\u89e3\uff0c\u5176\u4f59\u5747\u6709\u89e3\u3002 \u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u6709\u4e00\u4e2a\u6700\u5c0f\u7684\u6574\u6570x(\u4e0a\u4e00\u6bb5\u7684n)\u6ee1\u8db3 A(x)\u22610 \\ mod \\ p A(x)\u22610 \\ mod \\ p \uff0c\u6c42 1\u2264i\u2264n, 1\u2264j\u2264m, A(i^j)\u22610(mod\\ p) 1\u2264i\u2264n, 1\u2264j\u2264m, A(i^j)\u22610(mod\\ p) \u7684\u6570\u91cf\uff0c\u663e\u7136 i^j i^j \u9700\u8981\u662fx\u7684\u500d\u6570\u3002 \u5bf9x\u505a\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u6709 x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} <span><span class=\"MathJax_Preview\">x=p_1^{r_1}p_2^{r_2}...p_n^{r_n}</span><script type=\"math/tex\">x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} \u5bf9\u4e8e\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684 i i \uff0c\u5b83\u5fc5\u987b\u5305\u542bx\u7684\u6bcf\u4e00\u4e2a\u8d28\u56e0\u6570\u81f3\u5c11\u4e00\u6b21\u3002j\u56fa\u5b9a\u7684\u65f6\u5019\uff0ci\u5fc5\u987b\u662f g=p_1^{\\lceil {k_1 \\over j}\\rceil}p_2^{\\lceil {k_2 \\over j}\\rceil}p_n^{\\lceil {k_n \\over j}\\rceil} g=p_1^{\\lceil {k_1 \\over j}\\rceil}p_2^{\\lceil {k_2 \\over j}\\rceil}p_n^{\\lceil {k_n \\over j}\\rceil} \u7684\u500d\u6570\uff0c\u5171\u6709n/g\u4e2a\u5408\u6cd5\u7684i\uff0c\u5e76\u4e14j\u679a\u4e3e\u4e0d\u8d85\u8fc730 \u8d5b\u4e2d\u6ca1A\u6b7b\u4e8e\u5c11\u6253\u4e00\u4e2a\u62ec\u53f7 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; int qp ( int a , int n , int mod ) { long long ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int BSGS ( int a , int b , int p ) { map < int , int > hash ; b %= p ; int t = ( int ) sqrt ( p ) + 1 ; for ( int j = 0 ; j < t ; j ++ ) { int val = 1ll * b * qp ( a , j , p ) % p ; hash [ val ] = j ; } a = qp ( a , t , p ); if ( a == 0 ) return b == 0 ? 1 : - 1 ; for ( int i = 0 ; i <= t ; i ++ ) { int val = qp ( a , i , p ); int j = hash . find ( val ) == hash . end () ? - 1 : hash [ val ]; if ( j >= 0 && i * t - j > 0 ) return i * t - j ; } return - 1 ; } int p , n , m , a [ 40 ], b [ 40 ]; ll ans ; vector < int > ve ; void dec_factor ( int x ) { ve . clear (); for ( int i = 2 ; i * i <= x ; i ++ ) if ( x % i == 0 ) { int cnt = 0 ; while ( x % i == 0 ) { x /= i ; cnt ++ ; } a [ ve . size ()] = cnt ; ve . push_back ( i ); } if ( x > 1 ) { a [ ve . size ()] = 1 ; ve . push_back ( x ); } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d%d\" , & p , & n , & m ); int x = BSGS ( 10 , 1 , p ); if ( p == 2 || p == 5 ) { printf ( \"0 \\n \" ); continue ; } if ( p == 3 ) x = 3 ; dec_factor ( x ); ans = 0 ; int now = x ; for ( int i = 0 ; i < ve . size (); i ++ ) b [ i ] = a [ i ]; for ( int i = 1 ; i <= m ; i ++ ) { bool flag = true ; for ( int j = 0 ; j < ve . size (); j ++ ) { while ( b [ j ] * i >= a [ j ]) { b [ j ] -- ; now /= ve [ j ]; } b [ j ] ++ ; now *= ve [ j ]; if ( b [ j ] > 1 ) flag = false ; } if ( flag ) { int cnt = ( m - i + 1 ); ans += 1ll * cnt * ( n / now ); break ; } ans += n / now ; } printf ( \"%lld \\n \" , ans ); } return 0 ; } F. Planting Trees Link \u7ed9\u4e00\u77e9\u9635\uff0c\u6c42\u6700\u5927\u7684\u6781\u5dee\u4e0d\u8d85\u8fc7m\u7684\u77e9\u9635\u5927\u5c0f\u3002 \u6697\u793a n^3 n^3 \u590d\u6742\u5ea6\uff0c\u76f4\u63a5\u679a\u4e3e\u4e0a\u4e0b\u7aef\u7684\u540c\u65f6\u7ef4\u62a4\u6240\u6709\u5217\u7684\u6700\u5927\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5355\u8c03\u961f\u5217\u8dd1\u5bf9\u4e8e\u6bcf\u4e2a l l \u7684\u6700\u53f3\u7aef r r \u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aF.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-26 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 505 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; int mat [ maxn ][ maxn ]; int mn [ maxn ], mx [ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { scanf ( \"%d\" , & mat [ i ][ j ]); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { mn [ j ] = 0x3f3f3f3f ; mx [ j ] = 0 ; } for ( int j = i ; j <= n ; ++ j ) { for ( int k = 1 ; k <= n ; ++ k ) { mn [ k ] = min ( mn [ k ], mat [ j ][ k ]); mx [ k ] = max ( mx [ k ], mat [ j ][ k ]); } int r = 1 ; deque < int > mxdq , mndq ; for ( int l = 1 ; l <= n ; ++ l ) { if ( res >= ( n - l + 1 ) * ( j - i + 1 )) break ; if ( r < l ) r = l ; while ( mxdq . size () && mxdq . front () < l ) mxdq . pop_front (); while ( mndq . size () && mndq . front () < l ) mndq . pop_front (); int mxtmp = - 1 , mntmp = 0x3f3f3f3f ; if ( mxdq . size ()) mxtmp = mx [ mxdq . front ()]; if ( mndq . size ()) mntmp = mn [ mndq . front ()]; while ( r <= n && max ( mx [ r ], mxtmp ) - min ( mn [ r ], mntmp ) <= m ) { while ( mxdq . size () && mx [ mxdq . back ()] < mx [ r ]) mxdq . pop_back (); mxdq . push_back ( r ); mxtmp = mx [ mxdq . front ()]; while ( mndq . size () && mn [ mndq . back ()] > mn [ r ]) mndq . pop_back (); mndq . push_back ( r ); mntmp = mn [ mndq . front ()]; r ++ ; } res = max ( res , ( r - l ) * ( j - i + 1 )); } } } printf ( \"%d \\n \" , res ); } return 0 ; } H. Magic Line Link \u7ed9n\u4e2a\u4e8c\u7ef4\u70b9\uff0c\u6c42\u4e00\u6761\u76f4\u7ebf\u628a\u8fd9\u4e9b\u70b9\u5206\u6210\u76f8\u7b49\u7684\u4e24\u90e8\u5206\u3002\u6ce8\u610f\u76f4\u7ebf\u4e0d\u80fd\u7a7f\u8fc7\u7ed9\u5b9a\u70b9\u3002 \u8003\u8651\u6309\u6a2a\u5750\u6807\u6392\u5e8f\u540e\uff0c\u6570\u91cf\u4e2d\u70b9\u7684\u6a2a\u5750\u6807\u5982\u679c\u4e0d\u91cd\u53e0\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\u4e00\u6761\u5782\u76f4\u4e8ex\u7684\u76f4\u7ebf\u5206\u5272\uff0c\u5426\u5219\u53ef\u4ee5\u505a\u4e00\u6761\u5728\u4e2d\u95f4\u70b9\u7a0d\u5fae\u503e\u659c\u4e00\u70b9\u7684\u76f4\u7ebf\u5373\u53ef\u3002\u6ce8\u91ca\u4ee3\u7801\u662fcheck\u90e8\u5206\u3002 #include <bits/stdc++.h> using namespace std ; typedef double db ; const db EPS = 1e-9 ; inline int sign ( db a ) { return a <- EPS ?- 1 : a > EPS ; } inline int cmp ( db a , db b ) { return sign ( a - b ); } struct P { db x , y ; P (){} P ( db _x , db _y ) : x ( _x ), y ( _y ){} P operator + ( P p ) { return { x + p . x , y + p . y }; } P operator - ( P p ) { return { x - p . x , y - p . y }; } P operator * ( db d ) { return { x * d , y * d }; } P operator / ( db d ) { return { x / d , y / d }; } db abs2 () { return x * x + y * y ; } db abs () { return sqrt ( abs2 ()); } db distTo ( P p ) { return ( * this - p ). abs (); } P unit () { return * this / abs (); } P rot90 () { return P ( - y , x ); } }; //#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y)) //#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3)) //P x[1005]; //P p,q; const int maxn = 1005 ; int n ; pair < int , int > a [ maxn ]; int main () { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & a [ i ]. first , & a [ i ]. second ); // x[i].x = a[i].first; // x[i].y = a[i].second; } sort ( a + 1 , a + 1 + n ); if ( a [ n / 2 ]. first != a [ n / 2 + 1 ]. first ) { printf ( \"%d 1000000000 %d -1000000000 \\n \" , a [ n / 2 ]. first , a [ n / 2 ]. first + 1 ); // p.x = a[n / 2].first, p.y = 1000000000; // q.x = a[n / 2].first + 1, q.y = -1000000000; } else { int t = a [ n / 2 ]. second + a [ n / 2 + 1 ]. second ; printf ( \"%d %d %d -500000000 \\n \" , a [ n / 2 ]. first - 1 , 500000000 + t , a [ n / 2 ]. first + 1 ); // p.x = a[n / 2].first - 1, p.y = 500000000 + t; // q.x = a[n / 2].first + 1, q.y = -500000000; } // int cnt1=0,cnt2=0; // for(int i=1;i<=n;i++) // { // if(crossOp(x[i],p,q)==-1) // cnt1++; // else // cnt2++; // } // printf(\"%d %d\\n\",cnt1,cnt2); // int res = a[n / 2].first; } return 0 ; } /* 10 8 0 0 0 -1 -1 0 -1 1 -1 2 -1 3 -1 -1 -2 0 4 0 0 1 0 0 1 0 -1 4 0 1 -1 0 1 0 0 -1 */ J. LRU management Link \u6309\u9898\u610f\u6a21\u62df\u4e00\u4e2a\u94fe\u8868\uff0c\u8d5b\u4e2d\u7684splay\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5199\u6302\u4e86\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0amap+list\u3002\u5177\u4f53\u6765\u8bf4\u6709\uff1a \u5f80\u94fe\u8868\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u952e\u503c\u5bf9 \u5220\u9664\u94fe\u8868\u4e2d\u4e00\u4e2a\u952e\u503c\u5bf9 \u67e5\u8be2\u94fe\u8868\u4e2d\u67d0\u4e2a\u952e\u7684\u503c \u67e5\u8be2\u4e00\u4e2a\u952e\u7684\u4e0b\u4e00\u4e2a\u6216\u8005\u4e0a\u4e00\u4e2a\u952e\u7684\u503c \u5220\u9664\u94fe\u8868\u9996\u90e8\u952e\u503c\u5bf9 \u8fd9\u51e0\u79cd\u64cd\u4f5c\uff0c\u6a21\u62df\u5373\u53ef\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } unordered_map < ll , pair < list < ll >:: iterator , int > > mp ; list < ll > ls ; int sz ; int T ; int main ( int argc , char * argv []) { // ios::sync_with_stdio(0); // cin.tie(0); // cout.tie(0); scan ( T ); int n , m ; while ( T -- ) { scan ( m ), scan ( n ); // cin >> m >> n; ls . clear (); mp . clear (); sz = 0 ; int tp , val , s ; // string s; for ( int i = 1 ; i <= m ; ++ i ) { scan ( tp ), scan ( s ), scan ( val ); // cin >> tp >> s >> val; if ( tp == 0 ) { if ( mp . count ( s )) { val = mp [ s ]. second ; ls . erase ( mp [ s ]. first ); mp . erase ( s ); sz -- ; } if ( sz == n ) { mp . erase ( * ls . begin ()); ls . pop_front (); sz -- ; } ls . push_back ( s ); mp [ s ] = make_pair ( prev ( ls . end ()), val ); sz ++ ; out ( val ); putchar ( '\\n' ); // cout << val << endl; } else { if ( mp . count ( s ) == 0 ) { puts ( \"Invalid\" ); // cout << \"Invalid\" << endl; } else { if ( val == 0 ) { out ( mp [ s ]. second ); putchar ( '\\n' ); // cout << mp[s].second << endl; } else if ( val == 1 ) { if ( next ( mp [ s ]. first ) != ls . end ()) { out ( mp [ * next ( mp [ s ]. first )]. second ); putchar ( '\\n' ); } // cout << mp[*next(mp[s].first)].second << endl; else puts ( \"Invalid\" ); } else { if ( prev ( mp [ s ]. first ) != ls . end ()) { out ( mp [ * prev ( mp [ s ]. first )]. second ); putchar ( '\\n' ); } // cout << mp[*prev(mp[s].first)].second << endl; else puts ( \"Invalid\" ); } } } } } return 0 ; }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#b-crazy-binary-string","text":"\u7ed9\u4e00\u4e2a01\u4e32\u6c42\u6700\u957f\u768401\u76f8\u7b49\u7684\u5b50\u4e32\u548c\u5b50\u5e8f\u5217\u957f\u5ea6 \u5b50\u4e32\u80af\u5b9a\u662f max(num(0),num(1)) max(num(0),num(1)) \uff0c\u5b50\u5e8f\u5217\u76f4\u63a5\u8bb0\u5f55\u524d\u7f0001\u4e2a\u6570\u5dee\uff0c\u51fa\u73b0\u8fc7\u8bf4\u660e\u8be5\u5b50\u5e8f\u5217\u662f01\u5e73\u8861\u7684\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int a [ maxn ]; int pre [ maxn ]; int pre1 [ maxn ]; map < int , int > pos ; int main ( int argc , char * argv []) { int n ; scanf ( \"%d\" , & n ); int tt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%01d\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + ( a [ i ] == 0 ); pre1 [ i ] = pre1 [ i - 1 ] + ( a [ i ] == 1 ); if ( pre [ i ] == pre1 [ i ]) tt = max ( tt , i ); else { if ( pos [ pre [ i ] - pre1 [ i ]]) tt = max ( tt , i - pos [ pre [ i ] - pre1 [ i ]]); else pos [ pre [ i ] - pre1 [ i ]] = i ; } } printf ( \"%d %d \\n \" , tt , min ( pre [ n ], pre1 [ n ]) * 2 ); return 0 ; }","title":"B. Crazy Binary String"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#d-big-integer","text":"111...111={10^n-1 \\over 9}\u22610\\ mod\\ p 111...111={10^n-1 \\over 9}\u22610\\ mod\\ p \u6709 10^n\u22611 \\ mod\\ 9p 10^n\u22611 \\ mod\\ 9p \uff0c\u5176\u4e2d n n \u662f 1 \\over p 1 \\over p \u7684\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u4e00\u4e2a\u6700\u5c0f\u7684 A(n) A(n) \u80fd\u88abp\u6574\u9664\uff0cBSGS\u6c42\u51fan\u7684\u503c\u3002(\u8fd9\u91cc\u6211\u6c42\u7684\u662f 10^n\u22611 \\ mod\\ p 10^n\u22611 \\ mod\\ p \u7136\u540e\u7279\u5224\u4e863\uff0c\u56e0\u4e3a3\u548c9\u4e0d\u4e92\u8d28\u6240\u4ee5\u7b97\u51fa\u6765\u7684n\u4e0d\u5bf9)\uff0c\u6240\u6709\u7684\u8d28\u6570\u4e2d\u53ea\u67092,5\u65e0\u89e3\uff0c\u5176\u4f59\u5747\u6709\u89e3\u3002 \u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u6709\u4e00\u4e2a\u6700\u5c0f\u7684\u6574\u6570x(\u4e0a\u4e00\u6bb5\u7684n)\u6ee1\u8db3 A(x)\u22610 \\ mod \\ p A(x)\u22610 \\ mod \\ p \uff0c\u6c42 1\u2264i\u2264n, 1\u2264j\u2264m, A(i^j)\u22610(mod\\ p) 1\u2264i\u2264n, 1\u2264j\u2264m, A(i^j)\u22610(mod\\ p) \u7684\u6570\u91cf\uff0c\u663e\u7136 i^j i^j \u9700\u8981\u662fx\u7684\u500d\u6570\u3002 \u5bf9x\u505a\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u6709 x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} <span><span class=\"MathJax_Preview\">x=p_1^{r_1}p_2^{r_2}...p_n^{r_n}</span><script type=\"math/tex\">x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} \u5bf9\u4e8e\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684 i i \uff0c\u5b83\u5fc5\u987b\u5305\u542bx\u7684\u6bcf\u4e00\u4e2a\u8d28\u56e0\u6570\u81f3\u5c11\u4e00\u6b21\u3002j\u56fa\u5b9a\u7684\u65f6\u5019\uff0ci\u5fc5\u987b\u662f g=p_1^{\\lceil {k_1 \\over j}\\rceil}p_2^{\\lceil {k_2 \\over j}\\rceil}p_n^{\\lceil {k_n \\over j}\\rceil} g=p_1^{\\lceil {k_1 \\over j}\\rceil}p_2^{\\lceil {k_2 \\over j}\\rceil}p_n^{\\lceil {k_n \\over j}\\rceil} \u7684\u500d\u6570\uff0c\u5171\u6709n/g\u4e2a\u5408\u6cd5\u7684i\uff0c\u5e76\u4e14j\u679a\u4e3e\u4e0d\u8d85\u8fc730 \u8d5b\u4e2d\u6ca1A\u6b7b\u4e8e\u5c11\u6253\u4e00\u4e2a\u62ec\u53f7 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; int qp ( int a , int n , int mod ) { long long ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int BSGS ( int a , int b , int p ) { map < int , int > hash ; b %= p ; int t = ( int ) sqrt ( p ) + 1 ; for ( int j = 0 ; j < t ; j ++ ) { int val = 1ll * b * qp ( a , j , p ) % p ; hash [ val ] = j ; } a = qp ( a , t , p ); if ( a == 0 ) return b == 0 ? 1 : - 1 ; for ( int i = 0 ; i <= t ; i ++ ) { int val = qp ( a , i , p ); int j = hash . find ( val ) == hash . end () ? - 1 : hash [ val ]; if ( j >= 0 && i * t - j > 0 ) return i * t - j ; } return - 1 ; } int p , n , m , a [ 40 ], b [ 40 ]; ll ans ; vector < int > ve ; void dec_factor ( int x ) { ve . clear (); for ( int i = 2 ; i * i <= x ; i ++ ) if ( x % i == 0 ) { int cnt = 0 ; while ( x % i == 0 ) { x /= i ; cnt ++ ; } a [ ve . size ()] = cnt ; ve . push_back ( i ); } if ( x > 1 ) { a [ ve . size ()] = 1 ; ve . push_back ( x ); } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d%d\" , & p , & n , & m ); int x = BSGS ( 10 , 1 , p ); if ( p == 2 || p == 5 ) { printf ( \"0 \\n \" ); continue ; } if ( p == 3 ) x = 3 ; dec_factor ( x ); ans = 0 ; int now = x ; for ( int i = 0 ; i < ve . size (); i ++ ) b [ i ] = a [ i ]; for ( int i = 1 ; i <= m ; i ++ ) { bool flag = true ; for ( int j = 0 ; j < ve . size (); j ++ ) { while ( b [ j ] * i >= a [ j ]) { b [ j ] -- ; now /= ve [ j ]; } b [ j ] ++ ; now *= ve [ j ]; if ( b [ j ] > 1 ) flag = false ; } if ( flag ) { int cnt = ( m - i + 1 ); ans += 1ll * cnt * ( n / now ); break ; } ans += n / now ; } printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"D. Big Integer"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#f-planting-trees","text":"\u7ed9\u4e00\u77e9\u9635\uff0c\u6c42\u6700\u5927\u7684\u6781\u5dee\u4e0d\u8d85\u8fc7m\u7684\u77e9\u9635\u5927\u5c0f\u3002 \u6697\u793a n^3 n^3 \u590d\u6742\u5ea6\uff0c\u76f4\u63a5\u679a\u4e3e\u4e0a\u4e0b\u7aef\u7684\u540c\u65f6\u7ef4\u62a4\u6240\u6709\u5217\u7684\u6700\u5927\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5355\u8c03\u961f\u5217\u8dd1\u5bf9\u4e8e\u6bcf\u4e2a l l \u7684\u6700\u53f3\u7aef r r \u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aF.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-26 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 505 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; int mat [ maxn ][ maxn ]; int mn [ maxn ], mx [ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { scanf ( \"%d\" , & mat [ i ][ j ]); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { mn [ j ] = 0x3f3f3f3f ; mx [ j ] = 0 ; } for ( int j = i ; j <= n ; ++ j ) { for ( int k = 1 ; k <= n ; ++ k ) { mn [ k ] = min ( mn [ k ], mat [ j ][ k ]); mx [ k ] = max ( mx [ k ], mat [ j ][ k ]); } int r = 1 ; deque < int > mxdq , mndq ; for ( int l = 1 ; l <= n ; ++ l ) { if ( res >= ( n - l + 1 ) * ( j - i + 1 )) break ; if ( r < l ) r = l ; while ( mxdq . size () && mxdq . front () < l ) mxdq . pop_front (); while ( mndq . size () && mndq . front () < l ) mndq . pop_front (); int mxtmp = - 1 , mntmp = 0x3f3f3f3f ; if ( mxdq . size ()) mxtmp = mx [ mxdq . front ()]; if ( mndq . size ()) mntmp = mn [ mndq . front ()]; while ( r <= n && max ( mx [ r ], mxtmp ) - min ( mn [ r ], mntmp ) <= m ) { while ( mxdq . size () && mx [ mxdq . back ()] < mx [ r ]) mxdq . pop_back (); mxdq . push_back ( r ); mxtmp = mx [ mxdq . front ()]; while ( mndq . size () && mn [ mndq . back ()] > mn [ r ]) mndq . pop_back (); mndq . push_back ( r ); mntmp = mn [ mndq . front ()]; r ++ ; } res = max ( res , ( r - l ) * ( j - i + 1 )); } } } printf ( \"%d \\n \" , res ); } return 0 ; }","title":"F. Planting Trees"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#h-magic-line","text":"\u7ed9n\u4e2a\u4e8c\u7ef4\u70b9\uff0c\u6c42\u4e00\u6761\u76f4\u7ebf\u628a\u8fd9\u4e9b\u70b9\u5206\u6210\u76f8\u7b49\u7684\u4e24\u90e8\u5206\u3002\u6ce8\u610f\u76f4\u7ebf\u4e0d\u80fd\u7a7f\u8fc7\u7ed9\u5b9a\u70b9\u3002 \u8003\u8651\u6309\u6a2a\u5750\u6807\u6392\u5e8f\u540e\uff0c\u6570\u91cf\u4e2d\u70b9\u7684\u6a2a\u5750\u6807\u5982\u679c\u4e0d\u91cd\u53e0\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\u4e00\u6761\u5782\u76f4\u4e8ex\u7684\u76f4\u7ebf\u5206\u5272\uff0c\u5426\u5219\u53ef\u4ee5\u505a\u4e00\u6761\u5728\u4e2d\u95f4\u70b9\u7a0d\u5fae\u503e\u659c\u4e00\u70b9\u7684\u76f4\u7ebf\u5373\u53ef\u3002\u6ce8\u91ca\u4ee3\u7801\u662fcheck\u90e8\u5206\u3002 #include <bits/stdc++.h> using namespace std ; typedef double db ; const db EPS = 1e-9 ; inline int sign ( db a ) { return a <- EPS ?- 1 : a > EPS ; } inline int cmp ( db a , db b ) { return sign ( a - b ); } struct P { db x , y ; P (){} P ( db _x , db _y ) : x ( _x ), y ( _y ){} P operator + ( P p ) { return { x + p . x , y + p . y }; } P operator - ( P p ) { return { x - p . x , y - p . y }; } P operator * ( db d ) { return { x * d , y * d }; } P operator / ( db d ) { return { x / d , y / d }; } db abs2 () { return x * x + y * y ; } db abs () { return sqrt ( abs2 ()); } db distTo ( P p ) { return ( * this - p ). abs (); } P unit () { return * this / abs (); } P rot90 () { return P ( - y , x ); } }; //#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y)) //#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3)) //P x[1005]; //P p,q; const int maxn = 1005 ; int n ; pair < int , int > a [ maxn ]; int main () { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & a [ i ]. first , & a [ i ]. second ); // x[i].x = a[i].first; // x[i].y = a[i].second; } sort ( a + 1 , a + 1 + n ); if ( a [ n / 2 ]. first != a [ n / 2 + 1 ]. first ) { printf ( \"%d 1000000000 %d -1000000000 \\n \" , a [ n / 2 ]. first , a [ n / 2 ]. first + 1 ); // p.x = a[n / 2].first, p.y = 1000000000; // q.x = a[n / 2].first + 1, q.y = -1000000000; } else { int t = a [ n / 2 ]. second + a [ n / 2 + 1 ]. second ; printf ( \"%d %d %d -500000000 \\n \" , a [ n / 2 ]. first - 1 , 500000000 + t , a [ n / 2 ]. first + 1 ); // p.x = a[n / 2].first - 1, p.y = 500000000 + t; // q.x = a[n / 2].first + 1, q.y = -500000000; } // int cnt1=0,cnt2=0; // for(int i=1;i<=n;i++) // { // if(crossOp(x[i],p,q)==-1) // cnt1++; // else // cnt2++; // } // printf(\"%d %d\\n\",cnt1,cnt2); // int res = a[n / 2].first; } return 0 ; } /* 10 8 0 0 0 -1 -1 0 -1 1 -1 2 -1 3 -1 -1 -2 0 4 0 0 1 0 0 1 0 -1 4 0 1 -1 0 1 0 0 -1 */","title":"H. Magic Line"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#j-lru-management","text":"\u6309\u9898\u610f\u6a21\u62df\u4e00\u4e2a\u94fe\u8868\uff0c\u8d5b\u4e2d\u7684splay\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5199\u6302\u4e86\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0amap+list\u3002\u5177\u4f53\u6765\u8bf4\u6709\uff1a \u5f80\u94fe\u8868\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u952e\u503c\u5bf9 \u5220\u9664\u94fe\u8868\u4e2d\u4e00\u4e2a\u952e\u503c\u5bf9 \u67e5\u8be2\u94fe\u8868\u4e2d\u67d0\u4e2a\u952e\u7684\u503c \u67e5\u8be2\u4e00\u4e2a\u952e\u7684\u4e0b\u4e00\u4e2a\u6216\u8005\u4e0a\u4e00\u4e2a\u952e\u7684\u503c \u5220\u9664\u94fe\u8868\u9996\u90e8\u952e\u503c\u5bf9 \u8fd9\u51e0\u79cd\u64cd\u4f5c\uff0c\u6a21\u62df\u5373\u53ef\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } unordered_map < ll , pair < list < ll >:: iterator , int > > mp ; list < ll > ls ; int sz ; int T ; int main ( int argc , char * argv []) { // ios::sync_with_stdio(0); // cin.tie(0); // cout.tie(0); scan ( T ); int n , m ; while ( T -- ) { scan ( m ), scan ( n ); // cin >> m >> n; ls . clear (); mp . clear (); sz = 0 ; int tp , val , s ; // string s; for ( int i = 1 ; i <= m ; ++ i ) { scan ( tp ), scan ( s ), scan ( val ); // cin >> tp >> s >> val; if ( tp == 0 ) { if ( mp . count ( s )) { val = mp [ s ]. second ; ls . erase ( mp [ s ]. first ); mp . erase ( s ); sz -- ; } if ( sz == n ) { mp . erase ( * ls . begin ()); ls . pop_front (); sz -- ; } ls . push_back ( s ); mp [ s ] = make_pair ( prev ( ls . end ()), val ); sz ++ ; out ( val ); putchar ( '\\n' ); // cout << val << endl; } else { if ( mp . count ( s ) == 0 ) { puts ( \"Invalid\" ); // cout << \"Invalid\" << endl; } else { if ( val == 0 ) { out ( mp [ s ]. second ); putchar ( '\\n' ); // cout << mp[s].second << endl; } else if ( val == 1 ) { if ( next ( mp [ s ]. first ) != ls . end ()) { out ( mp [ * next ( mp [ s ]. first )]. second ); putchar ( '\\n' ); } // cout << mp[*next(mp[s].first)].second << endl; else puts ( \"Invalid\" ); } else { if ( prev ( mp [ s ]. first ) != ls . end ()) { out ( mp [ * prev ( mp [ s ]. first )]. second ); putchar ( '\\n' ); } // cout << mp[*prev(mp[s].first)].second << endl; else puts ( \"Invalid\" ); } } } } } return 0 ; }","title":"J. LRU management"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/","text":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 Link Date Solved A B C D E F G H I J 2019/7/20 6/10 \u00d8 \u00d8 . \u00d8 \u00d8 \u00d8 . O . \u00d8 A\u3001 Eddy Walker Link \u9898\u610f\uff1a\u6709T\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9700\u8981\u5728n\u6b21\u5185\u5728m\u4f4d\u7f6e\u7ed3\u675f\uff0c\u6bcf\u6b21\u90fd\u662f\u4ece0\u51fa\u53d1\u5f80\u524d\u5f80\u540e\u90fd\u662f\u7b49\u6982\u7387\uff0c\u7136\u540e\u6210\u73af\u6240\u4ee50\u5f80\u524d\u662fn-1\uff0c\u6c42\u53d1\u751f\u7684\u603b\u6982\u7387\uff08\u6bcf\u6b21\u4e0e\u4e4b\u524d\u7684\u53d1\u751f\u6982\u7387\u662f\u6709\u5173\u7684\uff09 \u9898\u89e3\uff1a\u9996\u5148\u9664\u975en\u4e3a1\uff0c\u5426\u52190\u8fd9\u4e2a\u70b9\u5fc5\u4e0d\u53ef\u80fd\u662f\u7ec8\u70b9\uff0c\u56e0\u4e3a\u5b83\u6bcf\u6b21\u90fd\u4ece0\u5f00\u59cb\uff0c\u7136\u540e\u5f80\u524d\u5f80\u540e\u6982\u7387\u76f8\u7b49\u4e14\u6210\u73af\u6240\u4ee5\u662f\u7b49\u6982\u7387\u4e8b\u4ef6\uff0c\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u5c31\u662f \\frac{1}{n-1} \\frac{1}{n-1} \uff0c\u7136\u540e\u628a\u524d\u7f00\u4e58\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a2019\u5e7405\u670801\u65e5 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 500 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int n , m ; ll res = 1 ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); if ( n == 1 ) printf ( \"%lld \\n \" , res ); else { if ( m == 0 ) { printf ( \"0 \\n \" ); res = 0 ; } else { res = res * qp ( n - 1 , mod - 2 ) % mod ; printf ( \"%lld \\n \" , res ); } } } return 0 ; } B\u3001 Eddy Walker 2 Link \u9898\u610f\uff1a\u4ece0\u70b9\u5f00\u59cb\u5f80\u540e\u8df3\uff0c\u6bcf\u6b21\u8df31\uff5ek\u683c\uff0c\u6982\u7387\u90fd\u662f \\frac{1}{k} \\frac{1}{k} \uff0c\u7136\u540e\u6c42\u5230\u8fben\u70b9\u7684\u6982\u7387\u662f\u591a\u5c11\u3002 \u9898\u89e3\uff1a\u663e\u7136\u6709\u4e00\u4e2a\u6e05\u6670\u7684dp\uff1a dp[i] = \\sum_{j=i-k}^{i-1} \\frac{dp[j]}{k} = \\frac{\\sum_{j=i-k}^{i-1} dp[j]}{k} \u7136\u540e\u5c31\u662f\u7ebf\u6027\u9012\u63a8\u5f0f\u6c42\u7b2cn\u9879\uff0c\u7531\u4e8ek\u67091021\u90a3\u4e48\u5927\u65e0\u6cd5\u6784\u9020\u77e9\u9635\uff0c\u6240\u4ee5\u76f4\u63a5\u4e0a\u4e00\u624bbm\uff0c\u7531\u4e8e\u9012\u63a8\u5f0f\u6709k\u9879\uff0c\u4e00\u822c\u6765\u8bb2\u662f\u63a82*k\u9879\u8fdbbm\u8dd1\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u9898\u8fd8\u8981\u6c42\u65e0\u7a77\u8fdc\u5904\u7684\u6982\u7387\uff0c\u8003\u8651\u65e0\u7a77\u8fdc\u5904\u7684\u6982\u7387\u5904\u5904\u76f8\u7b49\uff0c\u7136\u540e\u6bcf\u6b65\u5f80\u524d\u524d\u8fdb\u6b65\u6570\u7684\u671f\u671b\u662f \\frac{k+1}{2} \\frac{k+1}{2} \uff0c\u5219\u65e0\u7a77\u8fdc\u5904\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u5c31\u662f \\frac{2}{k+1} \\frac{2}{k+1} \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; using VI = vector < int > ; const int mod = 1e9 + 7 ; const int maxn = 1 << 14 ; ll res [ maxn ], base [ maxn ], _c [ maxn ], _md [ maxn ]; ll Pow ( ll a , ll n ) { a %= mod ; ll tmp = 1 ; while ( n > 0 ) { if ( n & 1 ) tmp = tmp * a % mod ; a = a * a % mod ; n >>= 1 ; } return tmp ; } vector < ll > Md ; void mul ( ll * a , ll * b , int k ) { for ( int i = 0 ; i < k + k ; i ++ ) _c [ i ] = 0 ; for ( int i = 0 ; i < k ; i ++ ) if ( a [ i ]) for ( int j = 0 ; j < k ; j ++ ) _c [ i + j ] = ( _c [ i + j ] + a [ i ] * b [ j ]) % mod ; for ( int i = k + k - 1 ; i >= k ; i -- ) if ( _c [ i ]) for ( int j = 0 ; j < Md . size (); j ++ ) _c [ i - k + Md [ j ]] = ( _c [ i - k + Md [ j ]] - _c [ i ] * _md [ Md [ j ]]) % mod ; for ( int i = 0 ; i < k ; i ++ ) a [ i ] = _c [ i ]; } int solve ( ll n , VI a , VI b ) { ll ans = 0 , pnt = 0 ; int k = a . size (); assert ( a . size () == b . size ()); for ( int i = 0 ; i < k ; i ++ ) _md [ k - 1 - i ] = - a [ i ]; _md [ k ] = 1 ; Md . clear (); for ( int i = 0 ; i < k ; i ++ ) if ( _md [ i ] != 0 ) Md . push_back ( i ); for ( int i = 0 ; i < k ; i ++ ) res [ i ] = base [ i ] = 0 ; res [ 0 ] = 1 ; while (( 1LL << pnt ) <= n ) pnt ++ ; for ( int p = pnt ; p >= 0 ; p -- ) { mul ( res , res , k ); if (( n >> p ) & 1 ) { for ( int i = k - 1 ; i >= 0 ; i -- ) res [ i + 1 ] = res [ i ]; res [ 0 ] = 0 ; for ( int j = 0 ; j < Md . size (); j ++ ) res [ Md [ j ]] = ( res [ Md [ j ]] - res [ k ] * _md [ Md [ j ]]) % mod ; } } for ( int i = 0 ; i < k ; i ++ ) ans = ( ans + res [ i ] * b [ i ]) % mod ; if ( ans < 0 ) ans += mod ; return ans ; } VI BM ( VI s ) { VI C ( 1 , 1 ), B ( 1 , 1 ); int L = 0 , m = 1 , b = 1 ; for ( int n = 0 ; n < s . size (); n ++ ) { ll d = 0 ; for ( int i = 0 ; i <= L ; i ++ ) d = ( d + ( ll ) C [ i ] * s [ n - i ]) % mod ; if ( d == 0 ) ++ m ; else if ( 2 * L <= n ) { VI T = C ; ll c = mod - d * Pow ( b , mod - 2 ) % mod ; while ( C . size () < B . size () + m ) C . push_back ( 0 ); for ( int i = 0 ; i < B . size (); i ++ ) C [ i + m ] = ( C [ i + m ] + c * B [ i ]) % mod ; L = n + 1 - L , B = T , b = d , m = 1 ; } else { ll c = mod - d * Pow ( b , mod - 2 ) % mod ; while ( C . size () < B . size () + m ) C . push_back ( 0 ); for ( int i = 0 ; i < B . size (); i ++ ) C [ i + m ] = ( C [ i + m ] + c * B [ i ]) % mod ; ++ m ; } } return C ; } int gao ( VI a , ll n ) { VI c = BM ( a ); c . erase ( c . begin ()); for ( int i = 0 ; i < c . size (); i ++ ) c [ i ] = ( mod - c [ i ]) % mod ; return solve ( n , c , VI ( a . begin (), a . begin () + c . size ())); } int main () { int T ; scanf ( \"%d\" , & T ); int k ; ll n ; while ( T -- ) { scanf ( \"%d%lld\" , & k , & n ); if ( n == - 1 ) printf ( \"%lld \\n \" , 2 * Pow ( k + 1 , mod - 2 ) % mod ); else { VI tmp ; tmp . push_back ( 1 ); ll invk = Pow ( k , mod - 2 ); for ( int i = 1 ; i < 2 * k ; ++ i ) { ll tt = 0 ; for ( int j = max ( 0 , i - k ); j < i ; ++ j ) { tt = ( tt + tmp [ j ] * invk % mod ) % mod ; } tmp . push_back ( tt ); } printf ( \"%d \\n \" , gao ( tmp , n )); } } } D\u3001 Kth Minimum Clique Link \u7ef4\u62a4\u4e00\u4e2a\u6240\u6709\u70b9\u4e4b\u95f4\u4e24\u4e24\u6709\u8fb9\u76f8\u8fde\u7684\u96c6\u5408\uff0c\u521d\u59cb\u65f6\u4e3a\u7a7a\u3002BFS\u6c42\u89e3\u7b2ck\u5927\u70b9\u6743\u548c\u3002 \u6bcf\u6b21\u53d6\u70b9\u6743\u548c\u6700\u5c0f\u7684\u70b9\u96c6\uff0c\u68c0\u67e5\u65b0\u52a0\u5165\u7684\u70b9\u662f\u5426\u4e0e\u70b9\u96c6\u5185\u7684\u6240\u6709\u70b9\u76f8\u8fde\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06\u8be5\u70b9\u52a0\u5165\u70b9\u96c6\uff0c\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u3002 #include <bits/stdc++.h> using namespace std ; const int N = 100 + 10 ; typedef long long ll ; int n , k ; ll w [ N ]; bitset < N > mp [ N ]; struct node { ll val ; bitset < N > Set ; bool operator < ( const node & x ) const { return val > x . val ; } }; ll bfs () { priority_queue < node > que ; bitset < N > x ; x . reset (); que . push ({ 0 , x }); while ( ! que . empty ()) { node f = que . top (); que . pop (); k -- ; if ( ! k ) return f . val ; int pos = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( f . Set [ i ]) pos = i + 1 ; for ( int u = pos ; u < n ; u ++ ) { if (( mp [ u ] & f . Set ) == f . Set ) { f . Set [ u ] = 1 ; que . push ({ f . val + w [ u ], f . Set }); f . Set [ u ] = 0 ; } } } return - 1 ; } int main () { char s [ N ]; scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & w [ i ]); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%s\" , s ); for ( int j = 0 ; j < n ; j ++ ) if ( s [ j ] == '1' ) mp [ i ][ j ] = 1 ; } printf ( \"%lld \\n \" , bfs ()); return 0 ; } E\u3001 MAZE Link \u9898\u610f\uff1a\u6700\u591a50000\u884c10\u5217\u768401\u77e9\u9635\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5355\u70b9\u53d6\u53cd\uff0c\u6bcf\u6b21\u8be2\u95ee\u6c42\u7b2c\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u5230\u6700\u540e\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff08\u53ef\u4ee5\u5411\u5de6\u5411\u53f3\u5411\u4e0b\u8d70\uff09\u3002 \u9898\u89e3\uff1a\u663e\u7136\u8003\u8651\u4e00\u4e2adp dp[i][j] = \\sum dp[i - 1][k], \u7b2ci\u884c\u4ecek\u5230j\u7684\u8def\u5f84\u53ef\u8d70 \u7136\u540e\u56e0\u4e3a\u5e26\u4fee\u6539\u9898\u76ee\u663e\u5f97\u4e0d\u592a\u53ef\u505a\uff0c\u5b9e\u9645\u4e0a\u6765\u8bb2\u7b2ci\u884c\u4e0e\u7b2cj\u884c\u6709\u5173\uff0c\u5217\u6570\u975e\u5e38\u5c11\uff0c\u53ef\u4ee5\u8003\u8651\u77e9\u9635\u8f6c\u79fb\u3002 \u6bcf\u6b21\u7ef4\u62a4\u7b2ci\u884c\u7684\u8f6c\u79fb\u77e9\u9635\u5373\uff0c\u7b2c i_ \u884c\u7b2c j_ \u5217\u8868\u793a\u7b2ci\u884c\u53ef\u4ee5\u4ece i_ \u5230 j_ \uff0c\u6240\u4ee5\u4e0a\u4e00\u884c\u7684\u503c\u4e0e\u8be5\u77e9\u9635\u76f8\u4e58\u5373\u53ef\uff0c\u8981\u6c42\u7b2c\u4e00\u884c\u67d0\u70b9\u51fa\u53d1\u5c31\u628a\u521d\u59cb\u77e9\u9635\u7684\u7b2cx\u9879\u8bbe\u4e3a1\uff0c\u5176\u4f59\u51680\uff0c\u8f6c\u79fb\u5230\u6700\u540e\u5c31\u662f\u89e3\uff0c\u56e0\u4e3a\u5e26\u4fee\u6539\u8fd9\u4e2a\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635\u5c31\u7406\u6240\u5f53\u7136\u4e86\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539\u6240\u4ee5\u53ea\u7528\u6539\u4e00\u884c\u7684\u77e9\u9635\u5373\u53ef\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aE.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct Matrix { int sz ; // int n, m; ll a [ 11 ][ 11 ]; Matrix ( int sz_ = 10 ) : sz ( sz_ ) { memset ( a , 0 , sizeof a ); } void pr () { printf ( \"* \\n \" ); for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = 0 ; j < sz ; ++ j ) { printf ( \"%lld \" , a [ i ][ j ]); } printf ( \" \\n \" ); } } void tr () { for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = i + 1 ; j < sz ; ++ j ) { swap ( a [ i ][ j ], a [ j ][ i ]); } } } } res , t1 ; Matrix mul ( Matrix a , Matrix b ) { Matrix res ( a . sz ); // if (a.m != b.n) return res; for ( int i = 0 ; i < res . sz ; i ++ ) // a.n for ( int j = 0 ; j < res . sz ; j ++ ) // b.m for ( int k = 0 ; k < res . sz ; k ++ ) // a.m, b.n ( res . a [ i ][ j ] += a . a [ i ][ k ] * b . a [ k ][ j ] % mod ) %= mod ; return res ; } Matrix pow ( ll n ) { //for(int i = 0; i < cur; i++) res.a[i][i] = 1; while ( n > 0 ) { if ( n & 1 ) res = mul ( res , t1 ); t1 = mul ( t1 , t1 ); n >>= 1 ; } return res ; } struct node { Matrix val ; } p [ maxn << 2 ]; int n , m ; int le , re ; int q ; char mp [ maxn ][ 11 ]; void init ( int pos ) { res . sz = m ; for ( int i = 0 ; i < m ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) res . a [ i ][ j ] = 0 ; } res . a [ 0 ][ pos - 1 ] = 1 ; } void cal ( int rt , int pos ) { for ( int i = 0 ; i < m ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) p [ rt ]. val . a [ i ][ j ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( mp [ pos ][ i ] == '1' ) continue ; for ( int j = i ; j <= m ; ++ j ) { if ( mp [ pos ][ j ] == '1' ) break ; p [ rt ]. val . a [ j - 1 ][ i - 1 ] = p [ rt ]. val . a [ i - 1 ][ j - 1 ] = 1 ; } } } void build ( int rt , int l , int r ) { if ( l == r ) { p [ rt ]. val . sz = m ; cal ( rt , l ); return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = mul ( p [ rt << 1 ]. val , p [ rt << 1 | 1 ]. val ); } void update ( int rt , int l , int r ) { if ( l == r ) { cal ( rt , l ); return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = mul ( p [ rt << 1 ]. val , p [ rt << 1 | 1 ]. val ); } int main ( int argc , char * argv []) { scanf ( \"%d%d%d\" , & n , & m , & q ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%s\" , mp [ i ] + 1 ); } // n --; build ( 1 , 1 , n ); int op , a , b ; for ( int i = 1 ; i <= q ; ++ i ) { scanf ( \"%d%d%d\" , & op , & a , & b ); if ( op == 1 ) { mp [ a ][ b ] = ( mp [ a ][ b ] == '0' ? '1' : '0' ); // if (a != n) { le = re = a ; update ( 1 , 1 , n ); // } } else { if ( mp [ 1 ][ a ] == '1' || mp [ n ][ b ] == '1' ) printf ( \"0 \\n \" ); else { init ( a ); printf ( \"%lld \\n \" , mul ( res , p [ 1 ]. val ). a [ 0 ][ b - 1 ]); } } } return 0 ; } F\u3001 Partition problem Link \u9898\u610f\uff1a\u7ed9\u6700\u591a28\u4e2a\u70b9\u7ec4\u6210\u5b8c\u5168\u56fe\uff0c\u6c42\u8f6c\u6210\u7b49\u70b9\u6570\u7684\u4e8c\u5206\u56fe\u540e\u8fb9\u6743\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u7206\u641c\uff0c\u641c\u7206\uff0c\u6bcf\u6b21\u8f6c\u79fb\u53ea\u7528\u628a\u5c5e\u4e8e\u5f53\u524d\u96c6\u5408\u4e2d\u7684\u70b9\u8fb9\u6743\u52a0\u4e0a\uff0c\u628a\u4e0d\u5c5e\u4e8e\u7684\u51cf\u53bb\u5c31\u662f\u65b0\u7684\u72b6\u6001\uff0c\u7136\u540e\u7ef4\u62a4\u4e0b\u6bcf\u4e2a\u70b9\u8fb9\u6743\u548c\u514d\u5f97\u6bcf\u6b21\u90fd\u7b97\u6ee1n\u4e2a\u70b9\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aF.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a2019\u5e7405\u670801\u65e5 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 30 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } int mp [ maxn ][ maxn ]; ll pre [ maxn ]; vector < int > vis ; int n ; ll res = 0 ; ll resnow = 0 ; inline void dfs ( int pos , int dep ) { if ( dep == n ) { if ( res > resnow ) { resnow = res ; } return ; } for ( int i = pos + 1 ; i <= 2 * n ; ++ i ) { ll tt = pre [ i ]; ll rest = res ; for ( auto j : vis ) { tt -= mp [ i ][ j ] * 2 ; } res += tt ; vis . push_back ( i ); dfs ( i , dep + 1 ); vis . pop_back (); res = rest ; } } int main () { scan ( n ); for ( int i = 1 ; i <= 2 * n ; ++ i ) { for ( int j = 1 ; j <= 2 * n ; ++ j ) { scan ( mp [ i ][ j ]); pre [ i ] += mp [ i ][ j ]; } } dfs ( 0 , 0 ); printf ( \"%lld \\n \" , resnow ); return 0 ; } H\u3001 Second Large Rectangle Link \u9898\u610f\uff1a\u6c42\u6b21\u5927\u7684\u51681\u77e9\u9635\u5927\u5c0f \u9898\u89e3\uff1a\u5355\u8c03\u6808\u5bf9\u6bcf\u4e00\u884c\u679a\u4e3e\uff0c\u6c42\u51fa\u5f53\u524d\u6700\u5927\u77e9\u9635\u7684\u540c\u65f6\u66f4\u65b0\u6b21\u5927\u77e9\u9635\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; #define rep(i, a, b) for( i = (a); i <= (b); i++) #define reps(i, a, b) for( i = (a); i < (b); i++) #define pb push_back #define ps push #define CLR(x,t) memset(x,t,sizeof x) #define LEN(X) strlen(X) #define F first #define S second #define Debug(x) cout<<#x<<\"=\"<<x<<endl; typedef long long LL ; int a [ 1005 ][ 1005 ], l [ 1005 ], r [ 1005 ], h [ 1005 ]; int main () { int n , m , i , j , k , ans , t ; string s ; cin >> n >> m ; for ( i = 1 ; i <= n ; i ++ ) { cin >> s ; for ( j = 1 ; j <= m ; j ++ ) a [ i ][ j ] = s [ j - 1 ] - '0' ; } ans = 0 ; int anst = 0 ; rep ( i , 1 , m ) h [ i ] = 0 ; map < pair < int , int > , int > mp ; rep ( i , 1 , n ) { mp . clear (); h [ 0 ] = h [ m + 1 ] = - 1 ; for ( k = 1 ; k <= m ; k ++ ) { if ( a [ i ][ k ]) h [ k ] ++ ; else h [ k ] = 0 ; } for ( j = 1 ; j <= m ; j ++ ) { t = j ; while ( h [ t - 1 ] >= h [ j ]) t = l [ t - 1 ]; l [ j ] = t ; } for ( j = m ; j >= 1 ; j -- ) { t = j ; while ( h [ t + 1 ] >= h [ j ]) t = r [ t + 1 ]; r [ j ] = t ; } for ( j = 1 ; j <= m ; j ++ ) { auto tt = make_pair ( h [ j ], l [ j ]); if ( mp [ tt ]) continue ; mp [ tt ] = 1 ; if ( ans < h [ j ] * ( r [ j ] - l [ j ] + 1 )) { anst = ans ; ans = h [ j ] * ( r [ j ] - l [ j ] + 1 ); } else if ( anst < h [ j ] * ( r [ j ] - l [ j ] + 1 )) { anst = h [ j ] * ( r [ j ] - l [ j ] + 1 ); } if ( anst < h [ j ] * ( r [ j ] - l [ j ])) { anst = h [ j ] * ( r [ j ] - l [ j ]); } // ans = max(ans, h[j] * (r[j] - l[j] + 1)); } } cout << anst << endl ; return 0 ; } J\u3001 Subarray Link","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#2019","text":"Date Solved A B C D E F G H I J 2019/7/20 6/10 \u00d8 \u00d8 . \u00d8 \u00d8 \u00d8 . O . \u00d8","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#aeddy-walker","text":"\u9898\u610f\uff1a\u6709T\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9700\u8981\u5728n\u6b21\u5185\u5728m\u4f4d\u7f6e\u7ed3\u675f\uff0c\u6bcf\u6b21\u90fd\u662f\u4ece0\u51fa\u53d1\u5f80\u524d\u5f80\u540e\u90fd\u662f\u7b49\u6982\u7387\uff0c\u7136\u540e\u6210\u73af\u6240\u4ee50\u5f80\u524d\u662fn-1\uff0c\u6c42\u53d1\u751f\u7684\u603b\u6982\u7387\uff08\u6bcf\u6b21\u4e0e\u4e4b\u524d\u7684\u53d1\u751f\u6982\u7387\u662f\u6709\u5173\u7684\uff09 \u9898\u89e3\uff1a\u9996\u5148\u9664\u975en\u4e3a1\uff0c\u5426\u52190\u8fd9\u4e2a\u70b9\u5fc5\u4e0d\u53ef\u80fd\u662f\u7ec8\u70b9\uff0c\u56e0\u4e3a\u5b83\u6bcf\u6b21\u90fd\u4ece0\u5f00\u59cb\uff0c\u7136\u540e\u5f80\u524d\u5f80\u540e\u6982\u7387\u76f8\u7b49\u4e14\u6210\u73af\u6240\u4ee5\u662f\u7b49\u6982\u7387\u4e8b\u4ef6\uff0c\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u5c31\u662f \\frac{1}{n-1} \\frac{1}{n-1} \uff0c\u7136\u540e\u628a\u524d\u7f00\u4e58\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a2019\u5e7405\u670801\u65e5 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 500 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int n , m ; ll res = 1 ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); if ( n == 1 ) printf ( \"%lld \\n \" , res ); else { if ( m == 0 ) { printf ( \"0 \\n \" ); res = 0 ; } else { res = res * qp ( n - 1 , mod - 2 ) % mod ; printf ( \"%lld \\n \" , res ); } } } return 0 ; }","title":"A\u3001Eddy Walker"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#beddy-walker-2","text":"\u9898\u610f\uff1a\u4ece0\u70b9\u5f00\u59cb\u5f80\u540e\u8df3\uff0c\u6bcf\u6b21\u8df31\uff5ek\u683c\uff0c\u6982\u7387\u90fd\u662f \\frac{1}{k} \\frac{1}{k} \uff0c\u7136\u540e\u6c42\u5230\u8fben\u70b9\u7684\u6982\u7387\u662f\u591a\u5c11\u3002 \u9898\u89e3\uff1a\u663e\u7136\u6709\u4e00\u4e2a\u6e05\u6670\u7684dp\uff1a dp[i] = \\sum_{j=i-k}^{i-1} \\frac{dp[j]}{k} = \\frac{\\sum_{j=i-k}^{i-1} dp[j]}{k} \u7136\u540e\u5c31\u662f\u7ebf\u6027\u9012\u63a8\u5f0f\u6c42\u7b2cn\u9879\uff0c\u7531\u4e8ek\u67091021\u90a3\u4e48\u5927\u65e0\u6cd5\u6784\u9020\u77e9\u9635\uff0c\u6240\u4ee5\u76f4\u63a5\u4e0a\u4e00\u624bbm\uff0c\u7531\u4e8e\u9012\u63a8\u5f0f\u6709k\u9879\uff0c\u4e00\u822c\u6765\u8bb2\u662f\u63a82*k\u9879\u8fdbbm\u8dd1\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u9898\u8fd8\u8981\u6c42\u65e0\u7a77\u8fdc\u5904\u7684\u6982\u7387\uff0c\u8003\u8651\u65e0\u7a77\u8fdc\u5904\u7684\u6982\u7387\u5904\u5904\u76f8\u7b49\uff0c\u7136\u540e\u6bcf\u6b65\u5f80\u524d\u524d\u8fdb\u6b65\u6570\u7684\u671f\u671b\u662f \\frac{k+1}{2} \\frac{k+1}{2} \uff0c\u5219\u65e0\u7a77\u8fdc\u5904\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u5c31\u662f \\frac{2}{k+1} \\frac{2}{k+1} \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std ; using VI = vector < int > ; const int mod = 1e9 + 7 ; const int maxn = 1 << 14 ; ll res [ maxn ], base [ maxn ], _c [ maxn ], _md [ maxn ]; ll Pow ( ll a , ll n ) { a %= mod ; ll tmp = 1 ; while ( n > 0 ) { if ( n & 1 ) tmp = tmp * a % mod ; a = a * a % mod ; n >>= 1 ; } return tmp ; } vector < ll > Md ; void mul ( ll * a , ll * b , int k ) { for ( int i = 0 ; i < k + k ; i ++ ) _c [ i ] = 0 ; for ( int i = 0 ; i < k ; i ++ ) if ( a [ i ]) for ( int j = 0 ; j < k ; j ++ ) _c [ i + j ] = ( _c [ i + j ] + a [ i ] * b [ j ]) % mod ; for ( int i = k + k - 1 ; i >= k ; i -- ) if ( _c [ i ]) for ( int j = 0 ; j < Md . size (); j ++ ) _c [ i - k + Md [ j ]] = ( _c [ i - k + Md [ j ]] - _c [ i ] * _md [ Md [ j ]]) % mod ; for ( int i = 0 ; i < k ; i ++ ) a [ i ] = _c [ i ]; } int solve ( ll n , VI a , VI b ) { ll ans = 0 , pnt = 0 ; int k = a . size (); assert ( a . size () == b . size ()); for ( int i = 0 ; i < k ; i ++ ) _md [ k - 1 - i ] = - a [ i ]; _md [ k ] = 1 ; Md . clear (); for ( int i = 0 ; i < k ; i ++ ) if ( _md [ i ] != 0 ) Md . push_back ( i ); for ( int i = 0 ; i < k ; i ++ ) res [ i ] = base [ i ] = 0 ; res [ 0 ] = 1 ; while (( 1LL << pnt ) <= n ) pnt ++ ; for ( int p = pnt ; p >= 0 ; p -- ) { mul ( res , res , k ); if (( n >> p ) & 1 ) { for ( int i = k - 1 ; i >= 0 ; i -- ) res [ i + 1 ] = res [ i ]; res [ 0 ] = 0 ; for ( int j = 0 ; j < Md . size (); j ++ ) res [ Md [ j ]] = ( res [ Md [ j ]] - res [ k ] * _md [ Md [ j ]]) % mod ; } } for ( int i = 0 ; i < k ; i ++ ) ans = ( ans + res [ i ] * b [ i ]) % mod ; if ( ans < 0 ) ans += mod ; return ans ; } VI BM ( VI s ) { VI C ( 1 , 1 ), B ( 1 , 1 ); int L = 0 , m = 1 , b = 1 ; for ( int n = 0 ; n < s . size (); n ++ ) { ll d = 0 ; for ( int i = 0 ; i <= L ; i ++ ) d = ( d + ( ll ) C [ i ] * s [ n - i ]) % mod ; if ( d == 0 ) ++ m ; else if ( 2 * L <= n ) { VI T = C ; ll c = mod - d * Pow ( b , mod - 2 ) % mod ; while ( C . size () < B . size () + m ) C . push_back ( 0 ); for ( int i = 0 ; i < B . size (); i ++ ) C [ i + m ] = ( C [ i + m ] + c * B [ i ]) % mod ; L = n + 1 - L , B = T , b = d , m = 1 ; } else { ll c = mod - d * Pow ( b , mod - 2 ) % mod ; while ( C . size () < B . size () + m ) C . push_back ( 0 ); for ( int i = 0 ; i < B . size (); i ++ ) C [ i + m ] = ( C [ i + m ] + c * B [ i ]) % mod ; ++ m ; } } return C ; } int gao ( VI a , ll n ) { VI c = BM ( a ); c . erase ( c . begin ()); for ( int i = 0 ; i < c . size (); i ++ ) c [ i ] = ( mod - c [ i ]) % mod ; return solve ( n , c , VI ( a . begin (), a . begin () + c . size ())); } int main () { int T ; scanf ( \"%d\" , & T ); int k ; ll n ; while ( T -- ) { scanf ( \"%d%lld\" , & k , & n ); if ( n == - 1 ) printf ( \"%lld \\n \" , 2 * Pow ( k + 1 , mod - 2 ) % mod ); else { VI tmp ; tmp . push_back ( 1 ); ll invk = Pow ( k , mod - 2 ); for ( int i = 1 ; i < 2 * k ; ++ i ) { ll tt = 0 ; for ( int j = max ( 0 , i - k ); j < i ; ++ j ) { tt = ( tt + tmp [ j ] * invk % mod ) % mod ; } tmp . push_back ( tt ); } printf ( \"%d \\n \" , gao ( tmp , n )); } } }","title":"B\u3001Eddy Walker 2"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#dkth-minimum-clique","text":"\u7ef4\u62a4\u4e00\u4e2a\u6240\u6709\u70b9\u4e4b\u95f4\u4e24\u4e24\u6709\u8fb9\u76f8\u8fde\u7684\u96c6\u5408\uff0c\u521d\u59cb\u65f6\u4e3a\u7a7a\u3002BFS\u6c42\u89e3\u7b2ck\u5927\u70b9\u6743\u548c\u3002 \u6bcf\u6b21\u53d6\u70b9\u6743\u548c\u6700\u5c0f\u7684\u70b9\u96c6\uff0c\u68c0\u67e5\u65b0\u52a0\u5165\u7684\u70b9\u662f\u5426\u4e0e\u70b9\u96c6\u5185\u7684\u6240\u6709\u70b9\u76f8\u8fde\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06\u8be5\u70b9\u52a0\u5165\u70b9\u96c6\uff0c\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u3002 #include <bits/stdc++.h> using namespace std ; const int N = 100 + 10 ; typedef long long ll ; int n , k ; ll w [ N ]; bitset < N > mp [ N ]; struct node { ll val ; bitset < N > Set ; bool operator < ( const node & x ) const { return val > x . val ; } }; ll bfs () { priority_queue < node > que ; bitset < N > x ; x . reset (); que . push ({ 0 , x }); while ( ! que . empty ()) { node f = que . top (); que . pop (); k -- ; if ( ! k ) return f . val ; int pos = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( f . Set [ i ]) pos = i + 1 ; for ( int u = pos ; u < n ; u ++ ) { if (( mp [ u ] & f . Set ) == f . Set ) { f . Set [ u ] = 1 ; que . push ({ f . val + w [ u ], f . Set }); f . Set [ u ] = 0 ; } } } return - 1 ; } int main () { char s [ N ]; scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & w [ i ]); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%s\" , s ); for ( int j = 0 ; j < n ; j ++ ) if ( s [ j ] == '1' ) mp [ i ][ j ] = 1 ; } printf ( \"%lld \\n \" , bfs ()); return 0 ; }","title":"D\u3001Kth Minimum Clique"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#emaze","text":"\u9898\u610f\uff1a\u6700\u591a50000\u884c10\u5217\u768401\u77e9\u9635\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5355\u70b9\u53d6\u53cd\uff0c\u6bcf\u6b21\u8be2\u95ee\u6c42\u7b2c\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u5230\u6700\u540e\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff08\u53ef\u4ee5\u5411\u5de6\u5411\u53f3\u5411\u4e0b\u8d70\uff09\u3002 \u9898\u89e3\uff1a\u663e\u7136\u8003\u8651\u4e00\u4e2adp dp[i][j] = \\sum dp[i - 1][k], \u7b2ci\u884c\u4ecek\u5230j\u7684\u8def\u5f84\u53ef\u8d70 \u7136\u540e\u56e0\u4e3a\u5e26\u4fee\u6539\u9898\u76ee\u663e\u5f97\u4e0d\u592a\u53ef\u505a\uff0c\u5b9e\u9645\u4e0a\u6765\u8bb2\u7b2ci\u884c\u4e0e\u7b2cj\u884c\u6709\u5173\uff0c\u5217\u6570\u975e\u5e38\u5c11\uff0c\u53ef\u4ee5\u8003\u8651\u77e9\u9635\u8f6c\u79fb\u3002 \u6bcf\u6b21\u7ef4\u62a4\u7b2ci\u884c\u7684\u8f6c\u79fb\u77e9\u9635\u5373\uff0c\u7b2c i_ \u884c\u7b2c j_ \u5217\u8868\u793a\u7b2ci\u884c\u53ef\u4ee5\u4ece i_ \u5230 j_ \uff0c\u6240\u4ee5\u4e0a\u4e00\u884c\u7684\u503c\u4e0e\u8be5\u77e9\u9635\u76f8\u4e58\u5373\u53ef\uff0c\u8981\u6c42\u7b2c\u4e00\u884c\u67d0\u70b9\u51fa\u53d1\u5c31\u628a\u521d\u59cb\u77e9\u9635\u7684\u7b2cx\u9879\u8bbe\u4e3a1\uff0c\u5176\u4f59\u51680\uff0c\u8f6c\u79fb\u5230\u6700\u540e\u5c31\u662f\u89e3\uff0c\u56e0\u4e3a\u5e26\u4fee\u6539\u8fd9\u4e2a\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635\u5c31\u7406\u6240\u5f53\u7136\u4e86\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539\u6240\u4ee5\u53ea\u7528\u6539\u4e00\u884c\u7684\u77e9\u9635\u5373\u53ef\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aE.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct Matrix { int sz ; // int n, m; ll a [ 11 ][ 11 ]; Matrix ( int sz_ = 10 ) : sz ( sz_ ) { memset ( a , 0 , sizeof a ); } void pr () { printf ( \"* \\n \" ); for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = 0 ; j < sz ; ++ j ) { printf ( \"%lld \" , a [ i ][ j ]); } printf ( \" \\n \" ); } } void tr () { for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = i + 1 ; j < sz ; ++ j ) { swap ( a [ i ][ j ], a [ j ][ i ]); } } } } res , t1 ; Matrix mul ( Matrix a , Matrix b ) { Matrix res ( a . sz ); // if (a.m != b.n) return res; for ( int i = 0 ; i < res . sz ; i ++ ) // a.n for ( int j = 0 ; j < res . sz ; j ++ ) // b.m for ( int k = 0 ; k < res . sz ; k ++ ) // a.m, b.n ( res . a [ i ][ j ] += a . a [ i ][ k ] * b . a [ k ][ j ] % mod ) %= mod ; return res ; } Matrix pow ( ll n ) { //for(int i = 0; i < cur; i++) res.a[i][i] = 1; while ( n > 0 ) { if ( n & 1 ) res = mul ( res , t1 ); t1 = mul ( t1 , t1 ); n >>= 1 ; } return res ; } struct node { Matrix val ; } p [ maxn << 2 ]; int n , m ; int le , re ; int q ; char mp [ maxn ][ 11 ]; void init ( int pos ) { res . sz = m ; for ( int i = 0 ; i < m ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) res . a [ i ][ j ] = 0 ; } res . a [ 0 ][ pos - 1 ] = 1 ; } void cal ( int rt , int pos ) { for ( int i = 0 ; i < m ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) p [ rt ]. val . a [ i ][ j ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( mp [ pos ][ i ] == '1' ) continue ; for ( int j = i ; j <= m ; ++ j ) { if ( mp [ pos ][ j ] == '1' ) break ; p [ rt ]. val . a [ j - 1 ][ i - 1 ] = p [ rt ]. val . a [ i - 1 ][ j - 1 ] = 1 ; } } } void build ( int rt , int l , int r ) { if ( l == r ) { p [ rt ]. val . sz = m ; cal ( rt , l ); return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = mul ( p [ rt << 1 ]. val , p [ rt << 1 | 1 ]. val ); } void update ( int rt , int l , int r ) { if ( l == r ) { cal ( rt , l ); return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = mul ( p [ rt << 1 ]. val , p [ rt << 1 | 1 ]. val ); } int main ( int argc , char * argv []) { scanf ( \"%d%d%d\" , & n , & m , & q ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%s\" , mp [ i ] + 1 ); } // n --; build ( 1 , 1 , n ); int op , a , b ; for ( int i = 1 ; i <= q ; ++ i ) { scanf ( \"%d%d%d\" , & op , & a , & b ); if ( op == 1 ) { mp [ a ][ b ] = ( mp [ a ][ b ] == '0' ? '1' : '0' ); // if (a != n) { le = re = a ; update ( 1 , 1 , n ); // } } else { if ( mp [ 1 ][ a ] == '1' || mp [ n ][ b ] == '1' ) printf ( \"0 \\n \" ); else { init ( a ); printf ( \"%lld \\n \" , mul ( res , p [ 1 ]. val ). a [ 0 ][ b - 1 ]); } } } return 0 ; }","title":"E\u3001MAZE"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#fpartition-problem","text":"\u9898\u610f\uff1a\u7ed9\u6700\u591a28\u4e2a\u70b9\u7ec4\u6210\u5b8c\u5168\u56fe\uff0c\u6c42\u8f6c\u6210\u7b49\u70b9\u6570\u7684\u4e8c\u5206\u56fe\u540e\u8fb9\u6743\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u7206\u641c\uff0c\u641c\u7206\uff0c\u6bcf\u6b21\u8f6c\u79fb\u53ea\u7528\u628a\u5c5e\u4e8e\u5f53\u524d\u96c6\u5408\u4e2d\u7684\u70b9\u8fb9\u6743\u52a0\u4e0a\uff0c\u628a\u4e0d\u5c5e\u4e8e\u7684\u51cf\u53bb\u5c31\u662f\u65b0\u7684\u72b6\u6001\uff0c\u7136\u540e\u7ef4\u62a4\u4e0b\u6bcf\u4e2a\u70b9\u8fb9\u6743\u548c\u514d\u5f97\u6bcf\u6b21\u90fd\u7b97\u6ee1n\u4e2a\u70b9\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aF.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a2019\u5e7405\u670801\u65e5 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 30 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } int mp [ maxn ][ maxn ]; ll pre [ maxn ]; vector < int > vis ; int n ; ll res = 0 ; ll resnow = 0 ; inline void dfs ( int pos , int dep ) { if ( dep == n ) { if ( res > resnow ) { resnow = res ; } return ; } for ( int i = pos + 1 ; i <= 2 * n ; ++ i ) { ll tt = pre [ i ]; ll rest = res ; for ( auto j : vis ) { tt -= mp [ i ][ j ] * 2 ; } res += tt ; vis . push_back ( i ); dfs ( i , dep + 1 ); vis . pop_back (); res = rest ; } } int main () { scan ( n ); for ( int i = 1 ; i <= 2 * n ; ++ i ) { for ( int j = 1 ; j <= 2 * n ; ++ j ) { scan ( mp [ i ][ j ]); pre [ i ] += mp [ i ][ j ]; } } dfs ( 0 , 0 ); printf ( \"%lld \\n \" , resnow ); return 0 ; }","title":"F\u3001Partition problem"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#hsecond-large-rectangle","text":"\u9898\u610f\uff1a\u6c42\u6b21\u5927\u7684\u51681\u77e9\u9635\u5927\u5c0f \u9898\u89e3\uff1a\u5355\u8c03\u6808\u5bf9\u6bcf\u4e00\u884c\u679a\u4e3e\uff0c\u6c42\u51fa\u5f53\u524d\u6700\u5927\u77e9\u9635\u7684\u540c\u65f6\u66f4\u65b0\u6b21\u5927\u77e9\u9635\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; #define rep(i, a, b) for( i = (a); i <= (b); i++) #define reps(i, a, b) for( i = (a); i < (b); i++) #define pb push_back #define ps push #define CLR(x,t) memset(x,t,sizeof x) #define LEN(X) strlen(X) #define F first #define S second #define Debug(x) cout<<#x<<\"=\"<<x<<endl; typedef long long LL ; int a [ 1005 ][ 1005 ], l [ 1005 ], r [ 1005 ], h [ 1005 ]; int main () { int n , m , i , j , k , ans , t ; string s ; cin >> n >> m ; for ( i = 1 ; i <= n ; i ++ ) { cin >> s ; for ( j = 1 ; j <= m ; j ++ ) a [ i ][ j ] = s [ j - 1 ] - '0' ; } ans = 0 ; int anst = 0 ; rep ( i , 1 , m ) h [ i ] = 0 ; map < pair < int , int > , int > mp ; rep ( i , 1 , n ) { mp . clear (); h [ 0 ] = h [ m + 1 ] = - 1 ; for ( k = 1 ; k <= m ; k ++ ) { if ( a [ i ][ k ]) h [ k ] ++ ; else h [ k ] = 0 ; } for ( j = 1 ; j <= m ; j ++ ) { t = j ; while ( h [ t - 1 ] >= h [ j ]) t = l [ t - 1 ]; l [ j ] = t ; } for ( j = m ; j >= 1 ; j -- ) { t = j ; while ( h [ t + 1 ] >= h [ j ]) t = r [ t + 1 ]; r [ j ] = t ; } for ( j = 1 ; j <= m ; j ++ ) { auto tt = make_pair ( h [ j ], l [ j ]); if ( mp [ tt ]) continue ; mp [ tt ] = 1 ; if ( ans < h [ j ] * ( r [ j ] - l [ j ] + 1 )) { anst = ans ; ans = h [ j ] * ( r [ j ] - l [ j ] + 1 ); } else if ( anst < h [ j ] * ( r [ j ] - l [ j ] + 1 )) { anst = h [ j ] * ( r [ j ] - l [ j ] + 1 ); } if ( anst < h [ j ] * ( r [ j ] - l [ j ])) { anst = h [ j ] * ( r [ j ] - l [ j ]); } // ans = max(ans, h[j] * (r[j] - l[j] + 1)); } } cout << anst << endl ; return 0 ; }","title":"H\u3001Second Large Rectangle"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#jsubarray","text":"","title":"J\u3001Subarray"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/","text":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09 Link Date Solved A B C D E F G H I J 2019/8/1 8/10 O O \u00d8 . \u00d8 \u00d8 O O \u00d8 . A\u3001 digits 2 Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2an\u6c42\u4e00\u4e2a\u6570\u4f7f\u5f97\u8fd9\u4e2a\u6570\u7684\u6240\u6709\u6570\u4f4d\u548c\u80fd\u88abn\u6574\u9664\u4e14\u8fd9\u4e2a\u6570\u672c\u8eab\u4e5f\u80fd\u88abn\u6574\u9664\u3002 \u9898\u89e3\uff1a\u4e0d\u8981\u6c42\u6c42\u51fa\u6700\u5c0f\u89e3\uff0c\u6240\u4ee5\u5c31\u8f93\u51fan\u6b21n\u5fc5\u7136\u6b63\u786e\u5373\u53ef \u4ee3\u7801\uff1a #include <cstdio> int n ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; ++ i ) { printf ( \"%d\" , n ); } printf ( \" \\n \" ); } return 0 ; } B\u3001 generator 1 Link \u9898\u610f\uff1a\u6c42\u975e\u7d20\u6a21\u6570\u5927\u6570\u7ea7fib\u6570 \u9898\u89e3\uff1a\u5feb\u901f\u5e42\uff0cn\u6709 10^{(10^10)} 10^{(10^10)} \u590d\u6742\u5ea6\u5c31\u662f O(2*2*log(n)) O(2*2*log(n)) \u3002\u7531\u4e8en\u8fc7\u5927\u53f3\u79fb\u5bfc\u81f4\u590d\u6742\u5ea6\u7206\u70b8\u6240\u4ee5\u91c7\u7528\u5341\u8fdb\u5236\u5feb\u901f\u5e42\uff0c\u6bcf\u6b21\u53ea\u628a\u4f4d\u6570\u5f80\u53f3\u79fb\u52a8\uff0c\u4ee5\u51cf\u5c0f\u590d\u6742\u5ea6\uff0c\u8fd8\u53ef\u4ee5\u5957\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5feb\u901f\u5e42\u6765\u89e3\u51b310\u4ee5\u5185\u7684\u77e9\u9635\u4e58\u6cd5\u3002\u590d\u6742\u5ea6\u5927\u6982\u5728 O(1e6*log(10)*4) O(1e6*log(10)*4) \uff0c\u8d5b\u4e2d\u6ca1\u5957\u90a3\u4e2a\u4e8c\u8fdb\u5236\u5feb\u901f\u5e42\u4e5f\u901a\u8fc7\u4e86\u6b64\u9898\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/8/1 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; char s [ maxn ]; ll mod ; int len ; struct Matrix { ll a [ 2 ][ 2 ]; void show () { printf ( \"* \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) printf ( \"%lld \" , a [ i ][ j ]); printf ( \" \\n \" ); } } } x ; inline Matrix mul ( const Matrix & a , const Matrix & b ) { for ( int i = 0 ; i < 2 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) { x . a [ i ][ j ] = a . a [ i ][ 0 ] * b . a [ 0 ][ j ] % mod + a . a [ i ][ 1 ] * b . a [ 1 ][ j ] % mod ; if ( x . a [ i ][ j ] >= mod ) x . a [ i ][ j ] -= mod ; } return x ; } Matrix ans , base ; Matrix pow2 ( Matrix tg , Matrix t , int n ) { Matrix res = tg ; while ( n > 0 ) { if ( n & 1 ) { res = mul ( res , t ); } t = mul ( t , t ); n >>= 1 ; } return res ; } Matrix pow () { while ( len >= 0 ) { ans = pow2 ( ans , base , s [ len ]); base = pow2 ( base , base , 9 ); len -- ; } return ans ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); scanf ( \"%lld%lld\" , & ans . a [ 0 ][ 0 ], & ans . a [ 0 ][ 1 ]); scanf ( \"%lld%lld\" , & base . a [ 1 ][ 1 ], & base . a [ 0 ][ 1 ]); scanf ( \"%s%lld\" , s , & mod ); for ( int i = 0 ; s [ i ]; ++ i ) { len ++ ; s [ i ] -= '0' ; } len -- ; base . a [ 1 ][ 0 ] = 1 ; pow (); printf ( \"%lld \\n \" , ans . a [ 0 ][ 0 ]); return 0 ; } E\u3001 independent set 1 Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u4e0d\u8d85\u8fc726\u4e2a\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u6c42 2^n \u79cd\u70b9\u96c6\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u5f3a\u70c8\u53cd\u5e941<<26\u4e3a6.7e7\u5de6\u53f3\uff0c\u53ef\u4ee5\u5728 2^26 \u5185\u89e3\u51b3\u95ee\u9898\u800c\u4e14\u4e0d\u80fd\u5e26\u4e00\u4e2a n \u7684\u4e8c\u7ef4\uff0c\u90a3\u4e48\u76f4\u63a5\u8003\u8651\u679a\u4e3e\u6240\u6709\u70b9\u96c6\u72b6\u538bdp\uff0c\u7136\u540e\u8003\u8651\u600e\u4e48\u6c42\u51fa\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u8003\u8651\u679a\u4e3e\u5230stat\u65f6\u4efb\u610f\u5728stat\u4e2d\u7684\u70b9x\uff0c\u663e\u7136 dp[stat] = max(dp[prestat], dp[otherstat] + 1) \u5176\u4e2dprestat\u8868\u793astat\u53bb\u6389x\uff0cotherstat\u8868\u793astat\u53bb\u6389\u4e0ex\u76f8\u90bb\u7684\u70b9\u3002 \u7136\u540e\u53bb\u6389\u76f8\u90bb\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u5728\u8bfb\u5165\u65f6\u5c06\u76f4\u8fde\u8fb9\u9884\u5904\u7406\u4e00\u4e2a\u4f4d\u8fd0\u7b97\u5373\u53ef\u3002\u6b64\u9898\u552f\u4e00\u7684\u5361\u4eba\u70b9\u5728\u4e8e\u5b83\u9700\u8981\u7528char\u4fdd\u5b58dp\u6570\u7ec4\u4e0d\u7136\u4f1a\u70b8\u5185\u5b58\u3002\u8bf4\u5b9e\u8bdd\u771f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u5361\u8fd9\u4e2a\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aE.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/8/1 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 26 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} char dp [ 1 << maxn ]; int n , m ; int c [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 , u , v ; i < m ; ++ i ) { scanf ( \"%d%d\" , & u , & v ); c [ u ] |= 1 << v ; c [ v ] |= 1 << u ; } for ( int i = 0 ; i < n ; ++ i ) c [ i ] |= 1 << i ; dp [ 0 ] = 0 ; int res = 0 ; for ( int stat = 1 ; stat < ( 1 << n ); ++ stat ) { int prestat = stat ^ ( stat & - stat ); int prestat2 = stat & ( ~ c [ __builtin_ctz ( stat &- stat )]); if ( dp [ prestat ] > dp [ prestat2 ] + 1 ) { dp [ stat ] = dp [ prestat ]; } else { dp [ stat ] = dp [ prestat2 ] + 1 ; } // printf(\"%d %d\\n\", stat, dp[stat]); // dp[stat] = max(dp[prestat], dp[prestat2] + 1); res += dp [ stat ]; } printf ( \"%d \\n \" , res ); return 0 ; } F\u3001 maximum clique 1 Link \u9898\u610f\uff1an\u4e2a\u6570\u7684\u975e\u91cd\u96c6\u5408\uff0c\u6c42\u6700\u5927\u7684\u96c6\u5408\u4f7f\u5f97\u96c6\u5408\u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u4e0d\u540c\u4f4d\u81f3\u5c11\u4e24\u4e2a\uff0c\u8981\u6c42\u8f93\u51fa\u96c6\u5408\u4e2d\u7684\u6570\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u662f\u975e\u91cd\u96c6\u5408\uff0c\u5982\u679ca\u548cb\u4e8c\u8fdb\u5236\u4e0d\u540c\u4f4d\u53ea\u6709\u4e00\u4e2a\uff0ca\u548cc\u4e5f\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48b\u548cc\u81f3\u5c11\u6709\u4e24\u4e2a\u4f4d\u4e0d\u540c\uff0c\u6545\u6784\u5efa\u4e8c\u5206\u56fe\uff0c\u5c06\u76f8\u5dee\u4e00\u4f4d\u7684\u8fde\u8fb9\uff0c\u6c42\u7684\u5c31\u662f\u8be5\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 5000 + 10 ; const int INF = 0x3f3f3f3f ; int a [ MAX_V ]; bool vis [ MAX_V ]; struct Dinic { //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void init ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } void solve ( int S , int T , int n ) { queue < int > que ; que . push ( S ); vis [ S ] = true ; while ( ! que . empty ()) { auto u = que . front (); que . pop (); for ( auto e : G [ u ]) if ( ! vis [ e . to ] && e . cap != 0 ) que . push ( e . to ), vis [ e . to ] = true ; } set < int > ans ; for ( int i = 1 ; i <= n ; i ++ ) ans . insert ( i ); for ( int i = S ; i <= T ; i ++ ) if ( vis [ i ]) { for ( auto e : G [ i ]) if ( ! vis [ e . to ]) { if ( i == S ) ans . erase ( e . to ); if ( e . to == T ) ans . erase ( i ); } } bool flag = 0 ; for ( auto x : ans ) { if ( flag ) printf ( \" \" ); printf ( \"%d\" , a [ x ]); flag = 1 ; } } } ans ; int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); int S = 0 , T = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( __builtin_parity ( a [ i ])) { ans . add ( i , T , 1 ); continue ; } ans . add ( S , i , 1 ); for ( int j = 1 ; j <= n ; j ++ ) if ( __builtin_popcount ( a [ i ] ^ a [ j ]) == 1 ) ans . add ( i , j , 1 ); } printf ( \"%d \\n \" , n - ans . max_flow ( S , T )); ans . solve ( S , T , n ); return 0 ; } G\u3001 subsequence 1 Link \u9898\u610f\uff1a\u6c42s\u4e2d\u5b50\u5e8f\u5217\u5927\u4e8et\u7684\u4e2a\u6570 \u9898\u89e3\uff1a dp[i][j] \u8868\u793as\u524di\u4f4d\uff0ct\u524dj\u4f4d\u76f8\u7b49\u957f\u5ea6\u7684\u7b54\u6848\u3002\u7136\u540e\u8fd8\u6709s\u6bd4t\u957f\u7684\u7ec4\u5408\u6570\u6c42\u4e00\u4e0b\u89e3\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 3000 + 10 ; const int mod = 998244353 ; char a [ maxn ], b [ maxn ]; ll dp [ maxn ][ maxn ]; ll fac [ maxn ], inv [ maxn ], facinv [ maxn ]; void init () { fac [ 0 ] = inv [ 0 ] = facinv [ 0 ] = 1 ; fac [ 1 ] = inv [ 1 ] = facinv [ 1 ] = 1 ; for ( int i = 2 ; i < maxn ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i % mod ; inv [ i ] = mod - mod / i * inv [ mod % i ] % mod ; facinv [ i ] = facinv [ i - 1 ] * inv [ i ] % mod ; } } ll C ( int n , int k ) { if ( k > n || k < 0 ) return 0 ; return fac [ n ] * facinv [ k ] % mod * facinv [ n - k ] % mod ; } int main () { int _ , n , m ; init (); scanf ( \"%d\" , & _ ); while ( _ -- ) { ll ans = 0 ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= m ; j ++ ) dp [ i ][ j ] = 0 ; scanf ( \"%s%s\" , a + 1 , b + 1 ); dp [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ][ 0 ] = 1 ; for ( int j = 1 ; j <= m ; j ++ ) { ( dp [ i ][ j ] += dp [ i - 1 ][ j ]) %= mod ; if ( a [ i ] > b [ j ]) ( ans += dp [ i - 1 ][ j - 1 ] * C ( n - i , m - j ) % mod ) %= mod ; else if ( a [ i ] == b [ j ]) ( dp [ i ][ j ] += dp [ i - 1 ][ j - 1 ]) %= mod ; } } for ( int i = 1 ; i <= n ; i ++ ) if ( a [ i ] != '0' ) for ( int j = m ; j <= n ; j ++ ) ( ans += C ( n - i , j )) %= mod ; printf ( \"%lld \\n \" , ans ); } return 0 ; } H\u3001 subsequence 2 Link \u9898\u610f\uff1a\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f7f\u5f97\u6ee1\u8db3m\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u7ed9\u51fa\u4e24\u4e2a\u5b57\u7b26\uff0c\u7ed9\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u8fd9\u4e24\u4e2a\u5b57\u7b26\u7684\u6700\u5927\u5b50\u5e8f\u5217\uff0c\u4fdd\u8bc1\u7ed9\u51fa\u7684\u6761\u4ef6\u4e0d\u91cd\u590d\u800c\u4e14\u662f\u524dm\u5c0f\u4e2a\u5b57\u7b26\u6784\u6210\u3002 \u9898\u89e3\uff1a\u5bf9m\u4e2a\u5b57\u7b26\u6784\u9020n\u4e2a\u70b9\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u662f\u4ec0\u4e48\u5b57\u7b26\uff0c\u7136\u540e\u5bf9\u5148\u540e\u987a\u5e8f\u5efa\u7acb\u6709\u5411\u56fe\uff0c\u8dd1\u51fatop\u5e8f\u5c31\u662f\u7b54\u6848\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; int n , m ; bool vis [ maxn ]; int pt ( int num , int i ) { vis [ num * n + i ] = true ; return num * n + i ; } char s [ maxn ], a [ 15 ]; int point [ maxn ], out [ maxn ]; vector < int > edge [ maxn ]; int indegree [ maxn ]; void add ( int u , int v ) { edge [ u ]. push_back ( v ); indegree [ v ] ++ ; out [ u ] ++ ; } int getpoint ( int x ) { return x / n ; } vector < int > ans ; bool Toposort () { queue < int > que ; for ( int i = 0 ; i <= n * m ; i ++ ) if ( ! indegree [ i ] && vis [ i ]) que . push ( i ); //\u5c06\u56fe\u4e2d\u6ca1\u6709\u524d\u9a71\uff0c\u5373\u5165\u5ea6\u4e3a0\u7684\u70b9\u52a0\u5165\u961f\u5217 int cnt = 0 ; while ( ! que . empty ()) { int u = que . front (); que . pop (); ans . push_back ( getpoint ( u )); indegree [ u ] =- 1 ; //\u4ece\u56fe\u4e2d\u5220\u53bb\u6b64\u9876\u70b9 cnt ++ ; for ( int i = 0 ; i < edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]; indegree [ v ] -- ; //\u5220\u53bb\u56fe\u4e2d\u4ee5u\u4e3a\u5c3e\u7684\u5f27 if ( ! indegree [ v ]) que . push ( v ); //\u5c06\u65b0\u589e\u7684\u5f53\u524d\u5165\u5ea6\u4e3a0\u7684\u70b9\u538b\u5165\u961f\u5217\u4e2d } } return cnt == n ; } int main () { int t ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m * ( m - 1 ) / 2 ; i ++ ) { scanf ( \"%s%d\" , a , & t ); if ( t == 0 ) continue ; scanf ( \"%s\" , s ); int pos1 = 0 , pos2 = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( s [ i ] == a [ 0 ]) point [ i ] = pt ( a [ 0 ] - 'a' , pos1 ++ ); else if ( s [ i ] == a [ 1 ]) point [ i ] = pt ( a [ 1 ] - 'a' , pos2 ++ ); } for ( int i = 0 ; i < t - 1 ; i ++ ) add ( point [ i ], point [ i + 1 ]); } int cnt = 0 ; for ( int i = 0 ; i <= n * m ; i ++ ) if ( vis [ i ] && ! out [ i ]) cnt ++ ; if ( cnt > 1 ) return 0 * puts ( \"-1\" ); if ( ! Toposort ()) return 0 * puts ( \"-1\" ); if ( ans . size () != n ) return 0 * puts ( \"-1\" ); for ( int x : ans ) printf ( \"%c\" , x + 'a' ); printf ( \" \\n \" ); return 0 ; }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#2019","text":"Date Solved A B C D E F G H I J 2019/8/1 8/10 O O \u00d8 . \u00d8 \u00d8 O O \u00d8 .","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#adigits-2","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2an\u6c42\u4e00\u4e2a\u6570\u4f7f\u5f97\u8fd9\u4e2a\u6570\u7684\u6240\u6709\u6570\u4f4d\u548c\u80fd\u88abn\u6574\u9664\u4e14\u8fd9\u4e2a\u6570\u672c\u8eab\u4e5f\u80fd\u88abn\u6574\u9664\u3002 \u9898\u89e3\uff1a\u4e0d\u8981\u6c42\u6c42\u51fa\u6700\u5c0f\u89e3\uff0c\u6240\u4ee5\u5c31\u8f93\u51fan\u6b21n\u5fc5\u7136\u6b63\u786e\u5373\u53ef \u4ee3\u7801\uff1a #include <cstdio> int n ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; ++ i ) { printf ( \"%d\" , n ); } printf ( \" \\n \" ); } return 0 ; }","title":"A\u3001digits 2"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#bgenerator-1","text":"\u9898\u610f\uff1a\u6c42\u975e\u7d20\u6a21\u6570\u5927\u6570\u7ea7fib\u6570 \u9898\u89e3\uff1a\u5feb\u901f\u5e42\uff0cn\u6709 10^{(10^10)} 10^{(10^10)} \u590d\u6742\u5ea6\u5c31\u662f O(2*2*log(n)) O(2*2*log(n)) \u3002\u7531\u4e8en\u8fc7\u5927\u53f3\u79fb\u5bfc\u81f4\u590d\u6742\u5ea6\u7206\u70b8\u6240\u4ee5\u91c7\u7528\u5341\u8fdb\u5236\u5feb\u901f\u5e42\uff0c\u6bcf\u6b21\u53ea\u628a\u4f4d\u6570\u5f80\u53f3\u79fb\u52a8\uff0c\u4ee5\u51cf\u5c0f\u590d\u6742\u5ea6\uff0c\u8fd8\u53ef\u4ee5\u5957\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5feb\u901f\u5e42\u6765\u89e3\u51b310\u4ee5\u5185\u7684\u77e9\u9635\u4e58\u6cd5\u3002\u590d\u6742\u5ea6\u5927\u6982\u5728 O(1e6*log(10)*4) O(1e6*log(10)*4) \uff0c\u8d5b\u4e2d\u6ca1\u5957\u90a3\u4e2a\u4e8c\u8fdb\u5236\u5feb\u901f\u5e42\u4e5f\u901a\u8fc7\u4e86\u6b64\u9898\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/8/1 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; char s [ maxn ]; ll mod ; int len ; struct Matrix { ll a [ 2 ][ 2 ]; void show () { printf ( \"* \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) printf ( \"%lld \" , a [ i ][ j ]); printf ( \" \\n \" ); } } } x ; inline Matrix mul ( const Matrix & a , const Matrix & b ) { for ( int i = 0 ; i < 2 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) { x . a [ i ][ j ] = a . a [ i ][ 0 ] * b . a [ 0 ][ j ] % mod + a . a [ i ][ 1 ] * b . a [ 1 ][ j ] % mod ; if ( x . a [ i ][ j ] >= mod ) x . a [ i ][ j ] -= mod ; } return x ; } Matrix ans , base ; Matrix pow2 ( Matrix tg , Matrix t , int n ) { Matrix res = tg ; while ( n > 0 ) { if ( n & 1 ) { res = mul ( res , t ); } t = mul ( t , t ); n >>= 1 ; } return res ; } Matrix pow () { while ( len >= 0 ) { ans = pow2 ( ans , base , s [ len ]); base = pow2 ( base , base , 9 ); len -- ; } return ans ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); scanf ( \"%lld%lld\" , & ans . a [ 0 ][ 0 ], & ans . a [ 0 ][ 1 ]); scanf ( \"%lld%lld\" , & base . a [ 1 ][ 1 ], & base . a [ 0 ][ 1 ]); scanf ( \"%s%lld\" , s , & mod ); for ( int i = 0 ; s [ i ]; ++ i ) { len ++ ; s [ i ] -= '0' ; } len -- ; base . a [ 1 ][ 0 ] = 1 ; pow (); printf ( \"%lld \\n \" , ans . a [ 0 ][ 0 ]); return 0 ; }","title":"B\u3001generator 1"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#eindependent-set-1","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u4e0d\u8d85\u8fc726\u4e2a\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u6c42 2^n \u79cd\u70b9\u96c6\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u5f3a\u70c8\u53cd\u5e941<<26\u4e3a6.7e7\u5de6\u53f3\uff0c\u53ef\u4ee5\u5728 2^26 \u5185\u89e3\u51b3\u95ee\u9898\u800c\u4e14\u4e0d\u80fd\u5e26\u4e00\u4e2a n \u7684\u4e8c\u7ef4\uff0c\u90a3\u4e48\u76f4\u63a5\u8003\u8651\u679a\u4e3e\u6240\u6709\u70b9\u96c6\u72b6\u538bdp\uff0c\u7136\u540e\u8003\u8651\u600e\u4e48\u6c42\u51fa\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u8003\u8651\u679a\u4e3e\u5230stat\u65f6\u4efb\u610f\u5728stat\u4e2d\u7684\u70b9x\uff0c\u663e\u7136 dp[stat] = max(dp[prestat], dp[otherstat] + 1) \u5176\u4e2dprestat\u8868\u793astat\u53bb\u6389x\uff0cotherstat\u8868\u793astat\u53bb\u6389\u4e0ex\u76f8\u90bb\u7684\u70b9\u3002 \u7136\u540e\u53bb\u6389\u76f8\u90bb\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u5728\u8bfb\u5165\u65f6\u5c06\u76f4\u8fde\u8fb9\u9884\u5904\u7406\u4e00\u4e2a\u4f4d\u8fd0\u7b97\u5373\u53ef\u3002\u6b64\u9898\u552f\u4e00\u7684\u5361\u4eba\u70b9\u5728\u4e8e\u5b83\u9700\u8981\u7528char\u4fdd\u5b58dp\u6570\u7ec4\u4e0d\u7136\u4f1a\u70b8\u5185\u5b58\u3002\u8bf4\u5b9e\u8bdd\u771f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u5361\u8fd9\u4e2a\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aE.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/8/1 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 26 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} char dp [ 1 << maxn ]; int n , m ; int c [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 , u , v ; i < m ; ++ i ) { scanf ( \"%d%d\" , & u , & v ); c [ u ] |= 1 << v ; c [ v ] |= 1 << u ; } for ( int i = 0 ; i < n ; ++ i ) c [ i ] |= 1 << i ; dp [ 0 ] = 0 ; int res = 0 ; for ( int stat = 1 ; stat < ( 1 << n ); ++ stat ) { int prestat = stat ^ ( stat & - stat ); int prestat2 = stat & ( ~ c [ __builtin_ctz ( stat &- stat )]); if ( dp [ prestat ] > dp [ prestat2 ] + 1 ) { dp [ stat ] = dp [ prestat ]; } else { dp [ stat ] = dp [ prestat2 ] + 1 ; } // printf(\"%d %d\\n\", stat, dp[stat]); // dp[stat] = max(dp[prestat], dp[prestat2] + 1); res += dp [ stat ]; } printf ( \"%d \\n \" , res ); return 0 ; }","title":"E\u3001independent set 1"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#fmaximum-clique-1","text":"\u9898\u610f\uff1an\u4e2a\u6570\u7684\u975e\u91cd\u96c6\u5408\uff0c\u6c42\u6700\u5927\u7684\u96c6\u5408\u4f7f\u5f97\u96c6\u5408\u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u4e0d\u540c\u4f4d\u81f3\u5c11\u4e24\u4e2a\uff0c\u8981\u6c42\u8f93\u51fa\u96c6\u5408\u4e2d\u7684\u6570\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u662f\u975e\u91cd\u96c6\u5408\uff0c\u5982\u679ca\u548cb\u4e8c\u8fdb\u5236\u4e0d\u540c\u4f4d\u53ea\u6709\u4e00\u4e2a\uff0ca\u548cc\u4e5f\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48b\u548cc\u81f3\u5c11\u6709\u4e24\u4e2a\u4f4d\u4e0d\u540c\uff0c\u6545\u6784\u5efa\u4e8c\u5206\u56fe\uff0c\u5c06\u76f8\u5dee\u4e00\u4f4d\u7684\u8fde\u8fb9\uff0c\u6c42\u7684\u5c31\u662f\u8be5\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 5000 + 10 ; const int INF = 0x3f3f3f3f ; int a [ MAX_V ]; bool vis [ MAX_V ]; struct Dinic { //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void init ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } void solve ( int S , int T , int n ) { queue < int > que ; que . push ( S ); vis [ S ] = true ; while ( ! que . empty ()) { auto u = que . front (); que . pop (); for ( auto e : G [ u ]) if ( ! vis [ e . to ] && e . cap != 0 ) que . push ( e . to ), vis [ e . to ] = true ; } set < int > ans ; for ( int i = 1 ; i <= n ; i ++ ) ans . insert ( i ); for ( int i = S ; i <= T ; i ++ ) if ( vis [ i ]) { for ( auto e : G [ i ]) if ( ! vis [ e . to ]) { if ( i == S ) ans . erase ( e . to ); if ( e . to == T ) ans . erase ( i ); } } bool flag = 0 ; for ( auto x : ans ) { if ( flag ) printf ( \" \" ); printf ( \"%d\" , a [ x ]); flag = 1 ; } } } ans ; int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); int S = 0 , T = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( __builtin_parity ( a [ i ])) { ans . add ( i , T , 1 ); continue ; } ans . add ( S , i , 1 ); for ( int j = 1 ; j <= n ; j ++ ) if ( __builtin_popcount ( a [ i ] ^ a [ j ]) == 1 ) ans . add ( i , j , 1 ); } printf ( \"%d \\n \" , n - ans . max_flow ( S , T )); ans . solve ( S , T , n ); return 0 ; }","title":"F\u3001maximum clique 1"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#gsubsequence-1","text":"\u9898\u610f\uff1a\u6c42s\u4e2d\u5b50\u5e8f\u5217\u5927\u4e8et\u7684\u4e2a\u6570 \u9898\u89e3\uff1a dp[i][j] \u8868\u793as\u524di\u4f4d\uff0ct\u524dj\u4f4d\u76f8\u7b49\u957f\u5ea6\u7684\u7b54\u6848\u3002\u7136\u540e\u8fd8\u6709s\u6bd4t\u957f\u7684\u7ec4\u5408\u6570\u6c42\u4e00\u4e0b\u89e3\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 3000 + 10 ; const int mod = 998244353 ; char a [ maxn ], b [ maxn ]; ll dp [ maxn ][ maxn ]; ll fac [ maxn ], inv [ maxn ], facinv [ maxn ]; void init () { fac [ 0 ] = inv [ 0 ] = facinv [ 0 ] = 1 ; fac [ 1 ] = inv [ 1 ] = facinv [ 1 ] = 1 ; for ( int i = 2 ; i < maxn ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i % mod ; inv [ i ] = mod - mod / i * inv [ mod % i ] % mod ; facinv [ i ] = facinv [ i - 1 ] * inv [ i ] % mod ; } } ll C ( int n , int k ) { if ( k > n || k < 0 ) return 0 ; return fac [ n ] * facinv [ k ] % mod * facinv [ n - k ] % mod ; } int main () { int _ , n , m ; init (); scanf ( \"%d\" , & _ ); while ( _ -- ) { ll ans = 0 ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= m ; j ++ ) dp [ i ][ j ] = 0 ; scanf ( \"%s%s\" , a + 1 , b + 1 ); dp [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ][ 0 ] = 1 ; for ( int j = 1 ; j <= m ; j ++ ) { ( dp [ i ][ j ] += dp [ i - 1 ][ j ]) %= mod ; if ( a [ i ] > b [ j ]) ( ans += dp [ i - 1 ][ j - 1 ] * C ( n - i , m - j ) % mod ) %= mod ; else if ( a [ i ] == b [ j ]) ( dp [ i ][ j ] += dp [ i - 1 ][ j - 1 ]) %= mod ; } } for ( int i = 1 ; i <= n ; i ++ ) if ( a [ i ] != '0' ) for ( int j = m ; j <= n ; j ++ ) ( ans += C ( n - i , j )) %= mod ; printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"G\u3001subsequence 1"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#hsubsequence-2","text":"\u9898\u610f\uff1a\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f7f\u5f97\u6ee1\u8db3m\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u7ed9\u51fa\u4e24\u4e2a\u5b57\u7b26\uff0c\u7ed9\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u8fd9\u4e24\u4e2a\u5b57\u7b26\u7684\u6700\u5927\u5b50\u5e8f\u5217\uff0c\u4fdd\u8bc1\u7ed9\u51fa\u7684\u6761\u4ef6\u4e0d\u91cd\u590d\u800c\u4e14\u662f\u524dm\u5c0f\u4e2a\u5b57\u7b26\u6784\u6210\u3002 \u9898\u89e3\uff1a\u5bf9m\u4e2a\u5b57\u7b26\u6784\u9020n\u4e2a\u70b9\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u662f\u4ec0\u4e48\u5b57\u7b26\uff0c\u7136\u540e\u5bf9\u5148\u540e\u987a\u5e8f\u5efa\u7acb\u6709\u5411\u56fe\uff0c\u8dd1\u51fatop\u5e8f\u5c31\u662f\u7b54\u6848\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; int n , m ; bool vis [ maxn ]; int pt ( int num , int i ) { vis [ num * n + i ] = true ; return num * n + i ; } char s [ maxn ], a [ 15 ]; int point [ maxn ], out [ maxn ]; vector < int > edge [ maxn ]; int indegree [ maxn ]; void add ( int u , int v ) { edge [ u ]. push_back ( v ); indegree [ v ] ++ ; out [ u ] ++ ; } int getpoint ( int x ) { return x / n ; } vector < int > ans ; bool Toposort () { queue < int > que ; for ( int i = 0 ; i <= n * m ; i ++ ) if ( ! indegree [ i ] && vis [ i ]) que . push ( i ); //\u5c06\u56fe\u4e2d\u6ca1\u6709\u524d\u9a71\uff0c\u5373\u5165\u5ea6\u4e3a0\u7684\u70b9\u52a0\u5165\u961f\u5217 int cnt = 0 ; while ( ! que . empty ()) { int u = que . front (); que . pop (); ans . push_back ( getpoint ( u )); indegree [ u ] =- 1 ; //\u4ece\u56fe\u4e2d\u5220\u53bb\u6b64\u9876\u70b9 cnt ++ ; for ( int i = 0 ; i < edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]; indegree [ v ] -- ; //\u5220\u53bb\u56fe\u4e2d\u4ee5u\u4e3a\u5c3e\u7684\u5f27 if ( ! indegree [ v ]) que . push ( v ); //\u5c06\u65b0\u589e\u7684\u5f53\u524d\u5165\u5ea6\u4e3a0\u7684\u70b9\u538b\u5165\u961f\u5217\u4e2d } } return cnt == n ; } int main () { int t ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m * ( m - 1 ) / 2 ; i ++ ) { scanf ( \"%s%d\" , a , & t ); if ( t == 0 ) continue ; scanf ( \"%s\" , s ); int pos1 = 0 , pos2 = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( s [ i ] == a [ 0 ]) point [ i ] = pt ( a [ 0 ] - 'a' , pos1 ++ ); else if ( s [ i ] == a [ 1 ]) point [ i ] = pt ( a [ 1 ] - 'a' , pos2 ++ ); } for ( int i = 0 ; i < t - 1 ; i ++ ) add ( point [ i ], point [ i + 1 ]); } int cnt = 0 ; for ( int i = 0 ; i <= n * m ; i ++ ) if ( vis [ i ] && ! out [ i ]) cnt ++ ; if ( cnt > 1 ) return 0 * puts ( \"-1\" ); if ( ! Toposort ()) return 0 * puts ( \"-1\" ); if ( ans . size () != n ) return 0 * puts ( \"-1\" ); for ( int x : ans ) printf ( \"%c\" , x + 'a' ); printf ( \" \\n \" ); return 0 ; }","title":"H\u3001subsequence 2"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/","text":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 Link Date Solved A B C D E F G H I J K 2019/7/27 7/11 O \u00d8 O O . . . . \u00d8 O O A\u3001 meeting Link \u6c42\u4e00\u68f5\u6811\u4e0a\u5230\u6240\u6709\u5173\u952e\u70b9\u8ddd\u79bb\u6700\u5927\u503c\u6700\u5c0f\u7684\u70b9\u8ddd\u79bb\u3002 \u6211\u7684\u505a\u6cd5\u76f4\u63a5\u4e0adfs\u5e8f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u6811\u7684\u8ddd\u79bb\u6700\u503c\uff0c\u6bcf\u6b21dfs\u65f6\u603b\u628a\u5b50\u6811\u5916\u7684\u5173\u952e\u70b9\u8ddd\u79bb+1\uff0c\u5b50\u6811\u5185-1\uff0c\u679a\u4e3e\u51fa\u6700\u5c0f\u503c\u5373\u53ef\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/27 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; vector < int > edge [ maxn ]; int a [ maxn ]; int val [ maxn << 2 ], lazy [ maxn << 2 ]; int idx [ maxn ], tot , res , sz [ maxn ]; int st [ maxn ]; int le , re , k ; inline void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } inline void build ( int rt , int l , int r ) { val [ rt ] = 0 ; if ( l == r ) { val [ rt ] = st [ l ]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline void update ( int rt , int l , int r ) { if ( re < le || le <= 0 || re > n ) return ; if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } int mid = l + r >> 1 ; pushdown ( rt ); if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline void dfs ( int u , int pre , int dep ) { idx [ u ] = ++ tot ; if ( a [ u ]) { st [ tot ] = dep ; // printf(\"%d: %d\\n\", tot, dep); // le = tot, re = tot; // k = dep; // update(1, 1, n); } sz [ u ] = 1 ; for ( auto v : edge [ u ]) { if ( v == pre ) continue ; dfs ( v , u , dep + 1 ); sz [ u ] += sz [ v ]; } } inline void dfs2 ( int u , int pre ) { for ( auto v : edge [ u ]) { if ( v == pre ) continue ; le = 1 , re = idx [ v ] - 1 ; k = 1 ; update ( 1 , 1 , n ); le = idx [ v ], re = idx [ v ] + sz [ v ] - 1 ; k = - 1 ; update ( 1 , 1 , n ); le = re + 1 ; re = n ; k = 1 ; update ( 1 , 1 , n ); res = min ( res , val [ 1 ]); dfs2 ( v , u ); le = 1 , re = idx [ v ] - 1 ; k = - 1 ; update ( 1 , 1 , n ); le = idx [ v ], re = idx [ v ] + sz [ v ] - 1 ; k = 1 ; update ( 1 , 1 , n ); le = re + 1 ; re = n ; k = - 1 ; update ( 1 , 1 , n ); } } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , v ; i < n ; ++ i ) { scanf ( \"%d%d\" , & u , & v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } for ( int i = 1 , x ; i <= m ; ++ i ) { scanf ( \"%d\" , & x ); a [ x ] = 1 ; } dfs ( 1 , 0 , 0 ); build ( 1 , 1 , n ); // printf(\"%d\\n\", val[1]); res = val [ 1 ]; dfs2 ( 1 , 0 ); printf ( \"%d \\n \" , res ); return 0 ; } I\u3001 string Link \u7ed9\u4e00\u4e2a\u4e32\u6c42\u5012\u5e8f\u4e0d\u540c\u5b50\u4e32\u7684\u6700\u5927\u96c6\u5408\u5927\u5c0f\u3002\u6307\u96c6\u5408\u5185\u6ca1\u6709\u53e6\u4e00\u4e2a\u4e32\u4e0e\u73b0\u5728\u8fd9\u4e2a\u4e32\u5012\u5e8f\u76f8\u540c\u3002 \u9996\u5148\u56de\u6587\u4e32\u662f\u5012\u5e8f\u4e0e\u672c\u8eab\u76f8\u540c\u4f46\u662f\u662f\u7b26\u5408\u9898\u610f\u7684\u4e32\uff0c\u7136\u540e\u8003\u8651\u6240\u6709\u5b50\u4e32\uff0c\u76f4\u63a5\u6784\u9020\u4e00\u4e2a s#s' \u7684\u4e32\uff0c s' \u8868\u793a s \u7684\u5012\u5e8f\u4e32\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u5c31\u662f s \u4e2d\u7684\u5012\u5e8f\u4e0d\u540c\u4e32\u00d72+ s \u4e2d\u7684\u5012\u5e8f\u76f8\u540c\u4e32\u5bf9\u6570\u00d72+\u56de\u6587\u4e32\uff0c\u7136\u540e\u8981\u6c42\u7684\u662f s \u4e2d\u7684\u5012\u5e8f\u4e0d\u540c\u4e32+ s \u4e2d\u7684\u5012\u5e8f\u76f8\u540c\u4e32\u5bf9\u6570+\u56de\u6587\u4e32\u3002\u6240\u4ee5\u518d\u8dd1\u4e2a\u56de\u6587\u4e32\u6570\u91cf\u76f8\u52a0\u9664\u4e8c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; const int maxn = 4e5 + 10 ; char s [ maxn ]; struct SuffixAutomation { int last , cnt ; int ch [ maxn << 1 ][ 27 ], fa [ maxn << 1 ], len [ maxn << 1 ]; long long ans = 0 ; void init () { last = cnt = 1 ; memset ( ch [ 1 ], 0 , sizeof ch [ 1 ]); fa [ 1 ] = len [ 1 ] = 0 ; } void ins ( int c ) { int p = last , np = ++ cnt ; last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = ++ cnt ; len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } ans += len [ np ] - len [ fa [ np ]]; } } sam ; const int N = 26 ; struct Palindromic_Tree { // vector<pair<int, int> > next[maxn]; int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6784\u6210 int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int cnt [ maxn ]{}; //\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u7684\u4e2a\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0c\u6700\u540ecount()\u51fd\u6570\u8dd1\u4e00\u904d\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 // next[p].clear(); for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; // cnt[p] = 0; // num[p] = 0; len [ p ] = l ; return p ++ ; } void init () { //\u521d\u59cb\u5316 n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; } int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } // int find(int u, int c) { // vector<pair<int, int> > & x = next[u]; // int sz = x.size(); // for(int i = 0; i < sz; ++i) { // if(x[i].first == c) return x[i].second; // } // return 0; // } int add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e // int x = find(cur, c); // if (!x) { if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 // x = now; // fail[now] = find(get_fail(fail[cur]), c); // next[cur].emplace_back(make_pair(c, now)); fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u4fbf\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } // last = x; last = next [ cur ][ c ]; // cnt[last]++; return num [ last ]; } void count () { for ( int i = p - 1 ; i >= 0 ; -- i ) cnt [ fail [ i ]] += cnt [ i ]; //\u7236\u4eb2\u7d2f\u52a0\u513f\u5b50\u7684cnt\uff0c\u56e0\u4e3a\u5982\u679cfail[v]=u\uff0c\u5219u\u4e00\u5b9a\u662fv\u7684\u5b50\u56de\u6587\u4e32\uff01 } } solve ; int main () { scanf ( \"%s\" , s ); sam . init (); int n = strlen ( s ); for ( int i = 0 ; i < n ; i ++ ) sam . ins ( s [ i ] - 'a' ); long long res = 0 ; sam . ins ( 26 ); for ( int i = n - 1 ; i >= 0 ; i -- ) sam . ins ( s [ i ] - 'a' ); res += sam . ans ; res -= 1ll * ( n + 1 ) * ( n + 1 ); solve . init (); for ( int i = 0 ; i < n ; i ++ ) solve . add ( s [ i ] - 'a' ); long long ans = solve . p - 2 ; printf ( \"%lld \\n \" , ( ans + res ) / 2 ); return 0 ; } K\u3001 number Link \u7ed9\u4e00\u4e2a\u6570\u5b57\u4e32\u6c42\u80fd\u88ab300\u6574\u9664\u7684\u6570\u5b57\u5b50\u4e32\u6570\u91cf\uff08\u53ef\u542b\u524d\u5bfc\u96f6\uff0c\u53ef\u542b\u76f8\u540c\u4e32\uff09 \u4f17\u6240\u5468\u77e5\u80fd\u88ab3\u6574\u9664\u7684\u6570\u6570\u4f4d\u548c\u4e3a3\u7684\u500d\u6570\uff0c\u6240\u4ee5\u8ba1\u4e00\u4e2a\u524d\u7f00\u6570\u4f4d\u548c\uff0c\u7136\u540e\u8ba1\u4e00\u4e2a\u540e\u7f00\u96f6\u4e2a\u6570\uff0c\u90a3\u4e48\u679a\u4e3e\u5f53\u524d\u4f4d\u4e3a\u975e0\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f pre[i][0] * (lst[i+1]-1) pre[i][0] * (lst[i+1]-1) \uff0c\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u628a\u51680\u7684\u65b9\u6848\u6570\u52a0\u4e0a\u53bb\u5c31\u884c\u4e86\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1ak.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/27 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} char s [ maxn ]; ll pre [ maxn ][ 3 ]; ll lst [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%s\" , s + 1 ); int len = 0 ; for ( int i = 1 ; s [ i ]; ++ i ) { // for (int j = 0; j < 3; ++j) // pre[i][j] = pre[i - 1][j]; int tmp = ( s [ i ] - '0' ) % 3 ; ll tt [ 3 ]; for ( int j = 0 ; j < 3 ; ++ j ) { tt [ j ] = pre [ i - 1 ][( j - tmp + 3 ) % 3 ]; } for ( int j = 0 ; j < 3 ; ++ j ) { pre [ i ][ j ] += tt [ j ]; } pre [ i ][ tmp ] ++ ; // pre[i][(s[i] - '0') % 3] ++; len ++ ; } ll tot = 0 ; for ( int i = len ; i >= 1 ; -- i ) { if ( s [ i ] == '0' ) lst [ i ] = lst [ i + 1 ] + 1 ; else { tot += ( lst [ i + 1 ] * ( lst [ i + 1 ] - 1 ) / 2 ) + lst [ i + 1 ]; lst [ i ] = 0 ; } } tot += lst [ 1 ] * ( lst [ 1 ] - 1 ) / 2 + lst [ 1 ]; ll res = 0 ; // printf(\"%lld\\n\", tot); for ( int i = 1 ; i < len ; ++ i ) { if ( lst [ i + 1 ] >= 1 && s [ i ] != '0' ) res += pre [ i ][ 0 ] * ( lst [ i + 1 ] - 1 ); // res += pre[i][0] * lst[i + 1]; } printf ( \"%lld \\n \" , res + tot ); return 0 ; }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#2019","text":"Date Solved A B C D E F G H I J K 2019/7/27 7/11 O \u00d8 O O . . . . \u00d8 O O","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#ameeting","text":"\u6c42\u4e00\u68f5\u6811\u4e0a\u5230\u6240\u6709\u5173\u952e\u70b9\u8ddd\u79bb\u6700\u5927\u503c\u6700\u5c0f\u7684\u70b9\u8ddd\u79bb\u3002 \u6211\u7684\u505a\u6cd5\u76f4\u63a5\u4e0adfs\u5e8f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u6811\u7684\u8ddd\u79bb\u6700\u503c\uff0c\u6bcf\u6b21dfs\u65f6\u603b\u628a\u5b50\u6811\u5916\u7684\u5173\u952e\u70b9\u8ddd\u79bb+1\uff0c\u5b50\u6811\u5185-1\uff0c\u679a\u4e3e\u51fa\u6700\u5c0f\u503c\u5373\u53ef\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/27 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; vector < int > edge [ maxn ]; int a [ maxn ]; int val [ maxn << 2 ], lazy [ maxn << 2 ]; int idx [ maxn ], tot , res , sz [ maxn ]; int st [ maxn ]; int le , re , k ; inline void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } inline void build ( int rt , int l , int r ) { val [ rt ] = 0 ; if ( l == r ) { val [ rt ] = st [ l ]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline void update ( int rt , int l , int r ) { if ( re < le || le <= 0 || re > n ) return ; if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } int mid = l + r >> 1 ; pushdown ( rt ); if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline void dfs ( int u , int pre , int dep ) { idx [ u ] = ++ tot ; if ( a [ u ]) { st [ tot ] = dep ; // printf(\"%d: %d\\n\", tot, dep); // le = tot, re = tot; // k = dep; // update(1, 1, n); } sz [ u ] = 1 ; for ( auto v : edge [ u ]) { if ( v == pre ) continue ; dfs ( v , u , dep + 1 ); sz [ u ] += sz [ v ]; } } inline void dfs2 ( int u , int pre ) { for ( auto v : edge [ u ]) { if ( v == pre ) continue ; le = 1 , re = idx [ v ] - 1 ; k = 1 ; update ( 1 , 1 , n ); le = idx [ v ], re = idx [ v ] + sz [ v ] - 1 ; k = - 1 ; update ( 1 , 1 , n ); le = re + 1 ; re = n ; k = 1 ; update ( 1 , 1 , n ); res = min ( res , val [ 1 ]); dfs2 ( v , u ); le = 1 , re = idx [ v ] - 1 ; k = - 1 ; update ( 1 , 1 , n ); le = idx [ v ], re = idx [ v ] + sz [ v ] - 1 ; k = 1 ; update ( 1 , 1 , n ); le = re + 1 ; re = n ; k = - 1 ; update ( 1 , 1 , n ); } } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , v ; i < n ; ++ i ) { scanf ( \"%d%d\" , & u , & v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } for ( int i = 1 , x ; i <= m ; ++ i ) { scanf ( \"%d\" , & x ); a [ x ] = 1 ; } dfs ( 1 , 0 , 0 ); build ( 1 , 1 , n ); // printf(\"%d\\n\", val[1]); res = val [ 1 ]; dfs2 ( 1 , 0 ); printf ( \"%d \\n \" , res ); return 0 ; }","title":"A\u3001meeting"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#istring","text":"\u7ed9\u4e00\u4e2a\u4e32\u6c42\u5012\u5e8f\u4e0d\u540c\u5b50\u4e32\u7684\u6700\u5927\u96c6\u5408\u5927\u5c0f\u3002\u6307\u96c6\u5408\u5185\u6ca1\u6709\u53e6\u4e00\u4e2a\u4e32\u4e0e\u73b0\u5728\u8fd9\u4e2a\u4e32\u5012\u5e8f\u76f8\u540c\u3002 \u9996\u5148\u56de\u6587\u4e32\u662f\u5012\u5e8f\u4e0e\u672c\u8eab\u76f8\u540c\u4f46\u662f\u662f\u7b26\u5408\u9898\u610f\u7684\u4e32\uff0c\u7136\u540e\u8003\u8651\u6240\u6709\u5b50\u4e32\uff0c\u76f4\u63a5\u6784\u9020\u4e00\u4e2a s#s' \u7684\u4e32\uff0c s' \u8868\u793a s \u7684\u5012\u5e8f\u4e32\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u5c31\u662f s \u4e2d\u7684\u5012\u5e8f\u4e0d\u540c\u4e32\u00d72+ s \u4e2d\u7684\u5012\u5e8f\u76f8\u540c\u4e32\u5bf9\u6570\u00d72+\u56de\u6587\u4e32\uff0c\u7136\u540e\u8981\u6c42\u7684\u662f s \u4e2d\u7684\u5012\u5e8f\u4e0d\u540c\u4e32+ s \u4e2d\u7684\u5012\u5e8f\u76f8\u540c\u4e32\u5bf9\u6570+\u56de\u6587\u4e32\u3002\u6240\u4ee5\u518d\u8dd1\u4e2a\u56de\u6587\u4e32\u6570\u91cf\u76f8\u52a0\u9664\u4e8c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; const int maxn = 4e5 + 10 ; char s [ maxn ]; struct SuffixAutomation { int last , cnt ; int ch [ maxn << 1 ][ 27 ], fa [ maxn << 1 ], len [ maxn << 1 ]; long long ans = 0 ; void init () { last = cnt = 1 ; memset ( ch [ 1 ], 0 , sizeof ch [ 1 ]); fa [ 1 ] = len [ 1 ] = 0 ; } void ins ( int c ) { int p = last , np = ++ cnt ; last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = ++ cnt ; len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } ans += len [ np ] - len [ fa [ np ]]; } } sam ; const int N = 26 ; struct Palindromic_Tree { // vector<pair<int, int> > next[maxn]; int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6784\u6210 int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int cnt [ maxn ]{}; //\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u7684\u4e2a\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0c\u6700\u540ecount()\u51fd\u6570\u8dd1\u4e00\u904d\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 // next[p].clear(); for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; // cnt[p] = 0; // num[p] = 0; len [ p ] = l ; return p ++ ; } void init () { //\u521d\u59cb\u5316 n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; } int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } // int find(int u, int c) { // vector<pair<int, int> > & x = next[u]; // int sz = x.size(); // for(int i = 0; i < sz; ++i) { // if(x[i].first == c) return x[i].second; // } // return 0; // } int add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e // int x = find(cur, c); // if (!x) { if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 // x = now; // fail[now] = find(get_fail(fail[cur]), c); // next[cur].emplace_back(make_pair(c, now)); fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u4fbf\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } // last = x; last = next [ cur ][ c ]; // cnt[last]++; return num [ last ]; } void count () { for ( int i = p - 1 ; i >= 0 ; -- i ) cnt [ fail [ i ]] += cnt [ i ]; //\u7236\u4eb2\u7d2f\u52a0\u513f\u5b50\u7684cnt\uff0c\u56e0\u4e3a\u5982\u679cfail[v]=u\uff0c\u5219u\u4e00\u5b9a\u662fv\u7684\u5b50\u56de\u6587\u4e32\uff01 } } solve ; int main () { scanf ( \"%s\" , s ); sam . init (); int n = strlen ( s ); for ( int i = 0 ; i < n ; i ++ ) sam . ins ( s [ i ] - 'a' ); long long res = 0 ; sam . ins ( 26 ); for ( int i = n - 1 ; i >= 0 ; i -- ) sam . ins ( s [ i ] - 'a' ); res += sam . ans ; res -= 1ll * ( n + 1 ) * ( n + 1 ); solve . init (); for ( int i = 0 ; i < n ; i ++ ) solve . add ( s [ i ] - 'a' ); long long ans = solve . p - 2 ; printf ( \"%lld \\n \" , ( ans + res ) / 2 ); return 0 ; }","title":"I\u3001string"},{"location":"Training%20Logs/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#knumber","text":"\u7ed9\u4e00\u4e2a\u6570\u5b57\u4e32\u6c42\u80fd\u88ab300\u6574\u9664\u7684\u6570\u5b57\u5b50\u4e32\u6570\u91cf\uff08\u53ef\u542b\u524d\u5bfc\u96f6\uff0c\u53ef\u542b\u76f8\u540c\u4e32\uff09 \u4f17\u6240\u5468\u77e5\u80fd\u88ab3\u6574\u9664\u7684\u6570\u6570\u4f4d\u548c\u4e3a3\u7684\u500d\u6570\uff0c\u6240\u4ee5\u8ba1\u4e00\u4e2a\u524d\u7f00\u6570\u4f4d\u548c\uff0c\u7136\u540e\u8ba1\u4e00\u4e2a\u540e\u7f00\u96f6\u4e2a\u6570\uff0c\u90a3\u4e48\u679a\u4e3e\u5f53\u524d\u4f4d\u4e3a\u975e0\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f pre[i][0] * (lst[i+1]-1) pre[i][0] * (lst[i+1]-1) \uff0c\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u628a\u51680\u7684\u65b9\u6848\u6570\u52a0\u4e0a\u53bb\u5c31\u884c\u4e86\u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1ak.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/27 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} char s [ maxn ]; ll pre [ maxn ][ 3 ]; ll lst [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%s\" , s + 1 ); int len = 0 ; for ( int i = 1 ; s [ i ]; ++ i ) { // for (int j = 0; j < 3; ++j) // pre[i][j] = pre[i - 1][j]; int tmp = ( s [ i ] - '0' ) % 3 ; ll tt [ 3 ]; for ( int j = 0 ; j < 3 ; ++ j ) { tt [ j ] = pre [ i - 1 ][( j - tmp + 3 ) % 3 ]; } for ( int j = 0 ; j < 3 ; ++ j ) { pre [ i ][ j ] += tt [ j ]; } pre [ i ][ tmp ] ++ ; // pre[i][(s[i] - '0') % 3] ++; len ++ ; } ll tot = 0 ; for ( int i = len ; i >= 1 ; -- i ) { if ( s [ i ] == '0' ) lst [ i ] = lst [ i + 1 ] + 1 ; else { tot += ( lst [ i + 1 ] * ( lst [ i + 1 ] - 1 ) / 2 ) + lst [ i + 1 ]; lst [ i ] = 0 ; } } tot += lst [ 1 ] * ( lst [ 1 ] - 1 ) / 2 + lst [ 1 ]; ll res = 0 ; // printf(\"%lld\\n\", tot); for ( int i = 1 ; i < len ; ++ i ) { if ( lst [ i + 1 ] >= 1 && s [ i ] != '0' ) res += pre [ i ][ 0 ] * ( lst [ i + 1 ] - 1 ); // res += pre[i][0] * lst[i + 1]; } printf ( \"%lld \\n \" , res + tot ); return 0 ; }","title":"K\u3001number"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shanghai%202019/","text":"Name Date Solved A B C D E F G H I J K L The Preliminary Contest for ICPC Asia Shanghai 2019 2019/9/15 7/12 . O . O \u00d8 \u00d8 \u00d8 . . O . O tag Link #B sort\uff08\u5047\u7ebf\u6bb5\u6811\uff09# D \u66b4\u529b #\u3000E \u751f\u6210\u51fd\u6570 #F dp # G\u66b4\u529b\uff08unordermap hash\uff09 #J \u80cc\u5305 #L\u66b4\u529b B. Light bulbs Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u521d\u59cb\u4e3a0\u7684\u5e8f\u5217\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u533a\u95f4\u7ffb\u8f6c\uff080\u53d81\uff0c1\u53d80\uff09\uff0c\u6c42\u6700\u7ec8\u6709\u591a\u5c11\u4e2a\u70b9\u7684\u503c\u4e3a1\u3002\u6570\u636e\u8303\u56f4\u7ec4\u6570 1000 \uff0c\u957f\u5ea6 1e6 \uff0c\u64cd\u4f5c 1000 \u6b21 \u9898\u89e3\uff1a\u521d\u770b\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4\u548c\u3001\u5355\u6b21\u67e5\u8be2\u6574\u4e2a\u5e8f\u5217\u7684\u88f8\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7ec4\u6570 1000 \u590d\u6742\u5ea6\u4f1a\u70b8\u6389\uff0c\u800c\u64cd\u4f5c\u6570\u8f83\u5c11\u6240\u4ee5\u76f4\u63a5\u5bf9\u64cd\u4f5c\u5dee\u5206\u6309\u5de6\u53f3\u6392\u5e8f\uff0c\u626b\u4e00\u904d\u6c42\u51fa\u7ed3\u679c\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(T*mlog(m)) \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/15/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} vector < pair < int , int > > query ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n , q ; scanf ( \"%d%d\" , & n , & q ); query . resize ( q * 2 ); for ( int i = 0 ; i < q ; ++ i ) { int x , y ; scanf ( \"%d%d\" , & x , & y ); query [ i ]. first = x ; query [ i ]. second = 0 ; query [ i + q ]. first = y + 1 ; query [ i + q ]. second = 1 ; } sort ( query . begin (), query . end ()); int now = 1 ; int pre = query [ 0 ]. first ; int res = 0 ; for ( int i = 1 ; i < query . size (); ++ i ) { res += ( now & 1 ) * ( query [ i ]. first - pre ); if ( query [ i ]. second == 1 ) { now -- ; } else now ++ ; pre = query [ i ]. first ; } printf ( \"Case #%d: %d \\n \" , kase , res ); } return 0 ; } D. Counting Sequences I Link \u9898\u610f\uff1a\u6c42n\u4e2a\u6b63\u6574\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u7b49\u4e8e\u4ed6\u4eec\u7684\u79ef\u7684\u65b9\u6848\u6570 n \\le 3000 n \\le 3000 \u9898\u89e3\uff1a\u8bba\u6587\u4e0a\u5199\u4e86\u5f88\u591a\u8f93\u51fa\u6240\u6709\u65b9\u6848\u7684\u505a\u6cd5\uff0coeis\u4e0a\u4e5f\u6709\u5982\u679c\u9650\u5b9a\u8fd9\u4e9b\u6b63\u6574\u6570\u4e3a1~9\u65f6\u7684\u65b9\u6848\u6570\u91cf\u7684\u8868\uff0c\u8fd8\u6709\u6240\u6709\u975e\u91cd\u96c6\u7684\u65b9\u6848\u6570\u7684\u8868\uff0c\u4f46\u662f\u8fd9\u9898\u8981\u6c42\u6240\u6709\u65b9\u6848\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7206\u641c\u51fa\u6240\u6709\u65b9\u6848\u3002\u5bf93000\u4e2a\u6570\u6253\u8868\uff0c\u6bcf\u4e2a\u6570k\u7206\u641c\u51fa \\prod a_i = k \\prod a_i = k \uff0c\u7136\u540e\u53ef\u4ee5\u6839\u636e k - \\sum a_i k - \\sum a_i \u6c42\u51fa1\u7684\u6570\u91cf\uff0c\u5bf9\u8fd9\u4e2a\u65b9\u6848\u8fdb\u884c\u975e\u91cd\u6392\u5217\u5373\u53ef\u5f97\u5230\u67d0\u4e2a\u6570\u7684\u89e3\u3002\u641c\u7d226000\u4e2a\u6570\u4ee5\u5185\u5c31\u53ef\u4ee5\u6253\u51fa3000\u7684\u8868\uff08\u8bba\u6587\u4e2d\u6709\u8bc1\u660e\u5bf9\u4e8en\u4e2a\u6570\uff0c\u8981\u7ec4\u6210\u548c\u4e0e\u79ef\u76f8\u7b49\u7684\u65b9\u6848\u5fc5\u4e0d\u5927\u4e8e 2\u00d7n \uff09\u8fd9\u8fb9\u76f4\u63a5\u628a\u8868\u6253\u597d\u8f93\u51fa\u5230\u6587\u4ef6\u5199\u7684\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\u3002 \u79d1\u666e\uff1a\u975e\u91cd\u6392\u5217\u7684\u89e3\u6cd5\u662f\uff1a\u4e00\u5171\u6709 n \u4e2a\u5143\u7d20\uff0c\u5176\u4e2d\u7b2c i \u79cd\u5143\u7d20\u6709 a_i \u4e2a\uff0c\u5219\u603b\u6392\u5217\u6570\u6709 \\frac{n!}{\\prod{a_i!}} \\frac{n!}{\\prod{a_i!}} \u4e2a\u3002 F. Rhyme scheme Link \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u7c7b\u5b57\u7b26\u4e32\u7684\u6784\u9020\u65b9\u6848\uff1a\u524di-1\u4f4d\u7684\u6700\u5927\u5b57\u7b26\u4e3a\u2019mx\u2019\uff0c\u5219\u7b2ci\u4f4d\u53ef\u4ee5\u53d6\u7684\u8303\u56f4\u4e3a[\u2018A\u2019,\u2019mx\u2019 + 1]\u3002\u6bcf\u7ec4\u8be2\u95ee\u8f93\u51fa\u957f\u5ea6\u4e3an\u7684\u4e32\u4e2d\u5b57\u5178\u5e8f\u7b2ck\u5927\u7684\u5b57\u7b26\u4e32\u3002 \u9898\u89e3\uff1a\u6784\u9020\u51fa\u7684\u5b57\u7b26\u4e32\u65b9\u6848\u6570\u5e94\u8be5\u4e3a\u8d1d\u5c14\u6570\u3002\u6839\u636e\u9898\u610f\uff0crhyme scheme\u53ef\u4ee5\u5f62\u6210\u4e00\u68f5\u5b57\u5178\u6811\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u53d6\u51b3\u4e8e\u5b57\u5178\u6811\u8def\u5f84\u4e0a\u7684\u6700\u5927\u5b57\u7b26\u3002\u8003\u8651dp\u6c42\u89e3\u67d0\u4e2a\u5b50\u6811\u5bf9\u5e94\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u4ee4 dp[i][j] dp[i][j] \u8868\u793a\u5728\u7b2ci\u5c42\uff0c\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u5b57\u7b26\u7684\u6700\u5927\u503c\u4e3aj\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u6709dp\u65b9\u7a0b dp[i][j]=j*dp[i-1][j]+dp[i][j+1] \u3002\u8be2\u95ee\u65f6\u5728\u5b57\u5178\u6811\u4e0a\u4ece\u4e0a\u5f80\u4e0b\u8d70\uff0c\u5047\u8bbe\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u4e3amx\uff0c\u90a3\u4e48\u524dmx\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a dp[n-dep][mx] \uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a dp[n-dep][mx+1] \uff0c\u4e0d\u65ad\u5f80\u4e0b\u8d70\u5373\u53ef\u6c42\u51fa\u89e3\u3002 #include <bits/stdc++.h> using namespace std ; __int128 dp [ 30 ][ 30 ], k ; template < class T > inline bool scan ( T & ret ){ char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; //EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } int main () { int T , n ; scanf ( \"%d\" , & T ); for ( int i = 0 ; i < 30 ; i ++ ) dp [ 0 ][ i ] = 1 ; for ( int i = 1 ; i < 30 ; i ++ ) for ( int j = 0 ; j < 30 ; j ++ ) dp [ i ][ j ] = dp [ i - 1 ][ j ] * j + dp [ i - 1 ][ j + 1 ]; for ( int i = T - 1 ; i >= 0 ; i -- ) { for ( int j = 1 ; j <= T - i ; j ++ ) { out ( dp [ i ][ j ]); printf ( \" \" ); } puts ( \"\" ); } for ( int _ = 1 ; _ <= T ; _ ++ ) { scanf ( \"%d\" , & n ); scan ( k ); printf ( \"Case #%d: \" , _ ); int c = 0 , mx = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( c = 0 ; c < mx && k > dp [ n - i ][ mx ]; c ++ ) k -= dp [ n - i ][ mx ]; mx = max ( c + 1 , mx ); printf ( \"%c\" , 'A' + c ); } puts ( \"\" ); } } G. Substring Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2as\u4e32\uff0c\u7ed9m\u4e2at\u4e32\uff0c\u5206\u522b\u6c42s\u4e32\u4e0e\u6bcf\u4e2at\u4e32\u4e71\u5e8f\u5339\u914d\u7684\u5b50\u4e32\u6570\u91cf\uff0c\u4e71\u5e8f\u5339\u914d\u6307\u4e24\u4e32\u957f\u5ea6\u76f8\u7b49\uff0c\u9996\u5c3e\u5b57\u7b26\u76f8\u7b49\uff0c\u4e2d\u95f4\u91cd\u6392\u4e4b\u540e\u76f8\u7b49\u5373\u53ef\u3002 \u9898\u89e3\uff1a\u6570\u636e\u8303\u56f4\u4e2dt\u7684\u603b\u957f\u4e0d\u8d85\u8fc71e5\uff0c\u6240\u4ee5\u79bb\u7ebf\u67e5\u8be2\uff0c\u5bf9\u6bcf\u79cd\u957f\u5ea6\u6309\u7a97\u53e3\u5904\u7406\u4e00\u6b21s\uff0c\u590d\u6742\u5ea6O\uff08\u80fd\u8fc7\uff09\uff0c\u4e71\u5e8f\u5339\u914d\u7528\u52a0\u6cd5hash\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e2a\u8303\u56f4\u751a\u81f3\u4e0d\u4f1a\u6ea2\u51falonglong\u3002\u552f\u4e00\u6bd4\u8f83nb\u7684\u70b9\u5728\u4e8e\u5b83\u7684\u7ec6\u8282\u5361\u5185\u5b58\uff0cunordermap\u53ea\u9700\u8981\u7ba1\u90a3\u4e9bt\u4e32\u6ee1\u8db3\u7684\u89e3\uff0c\u6240\u4ee5count\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u9700\u8981\u8fd9\u4e2a\u89e3\uff0c\u7136\u540e\u518d\u52a0\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aG.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/17/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 50005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} #define ull ll struct node { int len ; int L , R , id ; ull hash ; bool operator < ( const node & oth ) const { return len < oth . len ; } } p [ maxn ]; string s , t ; int n ; int res [ maxn ]; unordered_map < ull , int > mp [ 26 ][ 26 ]; ull prime [] = { 34183 , 13513 , 152993 , 13591 , 19687 , 350869 , 111187 , 766091 , 769297 , 633469 , 752273 , 298651 , 617191 , 880421 , 136067 , 1408397 , 726899 , 458921 , 2133701 , 2599847 , 2730947 , 4696343 , 10267237 , 18941059 , 34078909 , 69208409 }; ull getHash () { ull tmp = 0 ; for ( auto i : t ) { tmp += prime [ i - 'a' ]; } return tmp ; } void cal ( int len ) { if ( len > s . length ()) return ; ull tmp = 0 ; for ( int i = 0 ; i < len ; ++ i ) { tmp += prime [ s [ i ] - 'a' ]; } if ( mp [ s [ 0 ] - 'a' ][ s [ len - 1 ] - 'a' ]. count ( tmp )) mp [ s [ 0 ] - 'a' ][ s [ len - 1 ] - 'a' ][ tmp ] ++ ; for ( int i = len ; i < s . length (); ++ i ) { tmp += prime [ s [ i ] - 'a' ] - prime [ s [ i - len ] - 'a' ]; if ( mp [ s [ i - len + 1 ] - 'a' ][ s [ i ] - 'a' ]. count ( tmp )) mp [ s [ i - len + 1 ] - 'a' ][ s [ i ] - 'a' ][ tmp ] ++ ; } } int main ( int argc , char * argv []) { int T ; cin >> T ; int q ; for ( int kase = 1 ; kase <= T ; ++ kase ) { cin >> s >> q ; for ( int i = 0 ; i < 26 ; ++ i ) { for ( int j = 0 ; j < 26 ; ++ j ) mp [ i ][ j ]. clear (); } for ( int i = 1 ; i <= q ; ++ i ) { cin >> t ; p [ i ]. hash = getHash (); p [ i ]. L = t [ 0 ] - 'a' ; p [ i ]. R = t . back () - 'a' ; p [ i ]. id = i ; p [ i ]. len = t . length (); mp [ p [ i ]. L ][ p [ i ]. R ][ p [ i ]. hash ] = 0 ; } sort ( p + 1 , p + 1 + q ); int pre = 0 ; for ( int i = 1 ; i <= q ; ++ i ) { if ( p [ i ]. len != pre ) cal ( p [ i ]. len ), pre = p [ i ]. len ; res [ p [ i ]. id ] = mp [ p [ i ]. L ][ p [ i ]. R ][ p [ i ]. hash ]; } for ( int i = 1 ; i <= q ; ++ i ) { printf ( \"%d \\n \" , res [ i ]); } } return 0 ; } J. Stone game Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u53ef\u91cd\u96c6 S \uff0c\u6c42\u5b83\u7684\u4e00\u4e2a\u5b50\u96c6 S\u2018 \uff0c\u6ee1\u8db3 (Sum(S\u2018)\u2265Sum(S\u2212S\u2019))\u2227(\u2200t\u2208S\u2018,Sum(S\u2019)\u2212t\u2264Sum(S\u2212S\u2018)) \u7684\u65b9\u6848\u6570\uff0c\u6ce8\u610f S\u2019 \u4e0d\u540c\u53ea\u8981\u5b83\u6240\u5305\u542b\u7684\u6570\u7684\u4e0b\u6807\u5b58\u5728\u4e0d\u540c\u7684\u5373\u53ef\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u52a0\u6cd5\u7684\u7279\u6b8a\u6027\uff0c\u5b83\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u53ef\u4ee5\u8f6c\u5316\u4e3a Sum(S\u2019)\u2212min(S\u2019)\u2264Sum(S\u2212S\u2018) \uff0c\u4e8e\u662f\u53ef\u4ee5\u679a\u4e3e\u51fa\u6bcf\u4e2a t \uff0c\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u76f4\u63a5\u80cc\u5305\u6c42\u51fa\u6240\u6709\u65b9\u6848\u6570\u5373\u53ef\u3002\u6ce8\u610f\u76f8\u540c t \u7684\u5904\u7406\u529e\u6cd5\uff0c\u7531\u4e8e t \u662f S\u2018 \u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\uff0c\u4e00\u4e2a\u4e2a\u679a\u4e3e\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u679a\u4e3e\u5230\u76f8\u540c\u7684\u5143\u7d20\uff0c\u53ea\u8981\u5c06\u6392\u5e8f\u540e\u5e8f\u53f7\u6bd4\u4ed6\u5c0f\u7684\u90fd\u653e\u5165 S \uff0c\u5b83\u672c\u8eab\u653e\u5165 S\u2018 \u5b9a\u7136\u4e0d\u4f1a\u4ea7\u751f\u91cd\u590d\u3002\u6ce8\u610f\u8fd9\u4e2a\u80cc\u5305\u65b9\u6848\u6570\u662f\u4e0d\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u7684\uff0c\u53ef\u4ee5\u5012\u7740\u5904\u7406\u7136\u540e\u5c31\u662f\u6bcf\u6b21\u5f80\u80cc\u5305\u91cc\u65b0\u589e\u4e00\u4e2a\u5143\u7d20\u3002 \u79d1\u666e\uff1a dp[j] += dp[j - a[i]] \u662f\u6c42\u80cc\u5305\u65b9\u6848\u6570\u7684\u5199\u6cd5\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/15/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 150005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll dp [ maxn ]; int n ; int a [ 505 ]; ll pre [ maxn ]; int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d\" , & n ); ll sum = 0 ; pre [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + a [ i ]; sum += a [ i ]; } sort ( a + 1 , a + 1 + n ); ll res = 0 ; memset ( dp , 0 , sizeof dp ); dp [ 0 ] = 1 ; for ( int i = n ; i >= 1 ; -- i ) { ll x = a [ i ]; for ( int j = 0 ; j <= sum ; ++ j ) { if ( dp [ j ] == 0 ) continue ; ll y = j + x ; ll z = sum - y ; if ( z <= y && z >= y - x ) { res = ( res + dp [ j ]) % mod ; } } for ( int j = sum ; j >= a [ i ]; -- j ) { dp [ j ] = ( dp [ j ] + dp [ j - a [ i ]]) % mod ; } } printf ( \"%lld \\n \" , res ); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"The Preliminary Contest for ICPC Asia Shanghai 2019"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shanghai%202019/#tag","text":"#B sort\uff08\u5047\u7ebf\u6bb5\u6811\uff09# D \u66b4\u529b #\u3000E \u751f\u6210\u51fd\u6570 #F dp # G\u66b4\u529b\uff08unordermap hash\uff09 #J \u80cc\u5305 #L\u66b4\u529b","title":"tag"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shanghai%202019/#b-light-bulbs","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u521d\u59cb\u4e3a0\u7684\u5e8f\u5217\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u533a\u95f4\u7ffb\u8f6c\uff080\u53d81\uff0c1\u53d80\uff09\uff0c\u6c42\u6700\u7ec8\u6709\u591a\u5c11\u4e2a\u70b9\u7684\u503c\u4e3a1\u3002\u6570\u636e\u8303\u56f4\u7ec4\u6570 1000 \uff0c\u957f\u5ea6 1e6 \uff0c\u64cd\u4f5c 1000 \u6b21 \u9898\u89e3\uff1a\u521d\u770b\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4\u548c\u3001\u5355\u6b21\u67e5\u8be2\u6574\u4e2a\u5e8f\u5217\u7684\u88f8\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7ec4\u6570 1000 \u590d\u6742\u5ea6\u4f1a\u70b8\u6389\uff0c\u800c\u64cd\u4f5c\u6570\u8f83\u5c11\u6240\u4ee5\u76f4\u63a5\u5bf9\u64cd\u4f5c\u5dee\u5206\u6309\u5de6\u53f3\u6392\u5e8f\uff0c\u626b\u4e00\u904d\u6c42\u51fa\u7ed3\u679c\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(T*mlog(m)) \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/15/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} vector < pair < int , int > > query ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n , q ; scanf ( \"%d%d\" , & n , & q ); query . resize ( q * 2 ); for ( int i = 0 ; i < q ; ++ i ) { int x , y ; scanf ( \"%d%d\" , & x , & y ); query [ i ]. first = x ; query [ i ]. second = 0 ; query [ i + q ]. first = y + 1 ; query [ i + q ]. second = 1 ; } sort ( query . begin (), query . end ()); int now = 1 ; int pre = query [ 0 ]. first ; int res = 0 ; for ( int i = 1 ; i < query . size (); ++ i ) { res += ( now & 1 ) * ( query [ i ]. first - pre ); if ( query [ i ]. second == 1 ) { now -- ; } else now ++ ; pre = query [ i ]. first ; } printf ( \"Case #%d: %d \\n \" , kase , res ); } return 0 ; }","title":"B. Light bulbs"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shanghai%202019/#d-counting-sequences-i","text":"\u9898\u610f\uff1a\u6c42n\u4e2a\u6b63\u6574\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u7b49\u4e8e\u4ed6\u4eec\u7684\u79ef\u7684\u65b9\u6848\u6570 n \\le 3000 n \\le 3000 \u9898\u89e3\uff1a\u8bba\u6587\u4e0a\u5199\u4e86\u5f88\u591a\u8f93\u51fa\u6240\u6709\u65b9\u6848\u7684\u505a\u6cd5\uff0coeis\u4e0a\u4e5f\u6709\u5982\u679c\u9650\u5b9a\u8fd9\u4e9b\u6b63\u6574\u6570\u4e3a1~9\u65f6\u7684\u65b9\u6848\u6570\u91cf\u7684\u8868\uff0c\u8fd8\u6709\u6240\u6709\u975e\u91cd\u96c6\u7684\u65b9\u6848\u6570\u7684\u8868\uff0c\u4f46\u662f\u8fd9\u9898\u8981\u6c42\u6240\u6709\u65b9\u6848\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7206\u641c\u51fa\u6240\u6709\u65b9\u6848\u3002\u5bf93000\u4e2a\u6570\u6253\u8868\uff0c\u6bcf\u4e2a\u6570k\u7206\u641c\u51fa \\prod a_i = k \\prod a_i = k \uff0c\u7136\u540e\u53ef\u4ee5\u6839\u636e k - \\sum a_i k - \\sum a_i \u6c42\u51fa1\u7684\u6570\u91cf\uff0c\u5bf9\u8fd9\u4e2a\u65b9\u6848\u8fdb\u884c\u975e\u91cd\u6392\u5217\u5373\u53ef\u5f97\u5230\u67d0\u4e2a\u6570\u7684\u89e3\u3002\u641c\u7d226000\u4e2a\u6570\u4ee5\u5185\u5c31\u53ef\u4ee5\u6253\u51fa3000\u7684\u8868\uff08\u8bba\u6587\u4e2d\u6709\u8bc1\u660e\u5bf9\u4e8en\u4e2a\u6570\uff0c\u8981\u7ec4\u6210\u548c\u4e0e\u79ef\u76f8\u7b49\u7684\u65b9\u6848\u5fc5\u4e0d\u5927\u4e8e 2\u00d7n \uff09\u8fd9\u8fb9\u76f4\u63a5\u628a\u8868\u6253\u597d\u8f93\u51fa\u5230\u6587\u4ef6\u5199\u7684\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\u3002 \u79d1\u666e\uff1a\u975e\u91cd\u6392\u5217\u7684\u89e3\u6cd5\u662f\uff1a\u4e00\u5171\u6709 n \u4e2a\u5143\u7d20\uff0c\u5176\u4e2d\u7b2c i \u79cd\u5143\u7d20\u6709 a_i \u4e2a\uff0c\u5219\u603b\u6392\u5217\u6570\u6709 \\frac{n!}{\\prod{a_i!}} \\frac{n!}{\\prod{a_i!}} \u4e2a\u3002","title":"D. Counting Sequences I"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shanghai%202019/#f-rhyme-scheme","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u7c7b\u5b57\u7b26\u4e32\u7684\u6784\u9020\u65b9\u6848\uff1a\u524di-1\u4f4d\u7684\u6700\u5927\u5b57\u7b26\u4e3a\u2019mx\u2019\uff0c\u5219\u7b2ci\u4f4d\u53ef\u4ee5\u53d6\u7684\u8303\u56f4\u4e3a[\u2018A\u2019,\u2019mx\u2019 + 1]\u3002\u6bcf\u7ec4\u8be2\u95ee\u8f93\u51fa\u957f\u5ea6\u4e3an\u7684\u4e32\u4e2d\u5b57\u5178\u5e8f\u7b2ck\u5927\u7684\u5b57\u7b26\u4e32\u3002 \u9898\u89e3\uff1a\u6784\u9020\u51fa\u7684\u5b57\u7b26\u4e32\u65b9\u6848\u6570\u5e94\u8be5\u4e3a\u8d1d\u5c14\u6570\u3002\u6839\u636e\u9898\u610f\uff0crhyme scheme\u53ef\u4ee5\u5f62\u6210\u4e00\u68f5\u5b57\u5178\u6811\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u53d6\u51b3\u4e8e\u5b57\u5178\u6811\u8def\u5f84\u4e0a\u7684\u6700\u5927\u5b57\u7b26\u3002\u8003\u8651dp\u6c42\u89e3\u67d0\u4e2a\u5b50\u6811\u5bf9\u5e94\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u4ee4 dp[i][j] dp[i][j] \u8868\u793a\u5728\u7b2ci\u5c42\uff0c\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u5b57\u7b26\u7684\u6700\u5927\u503c\u4e3aj\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u6709dp\u65b9\u7a0b dp[i][j]=j*dp[i-1][j]+dp[i][j+1] \u3002\u8be2\u95ee\u65f6\u5728\u5b57\u5178\u6811\u4e0a\u4ece\u4e0a\u5f80\u4e0b\u8d70\uff0c\u5047\u8bbe\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u4e3amx\uff0c\u90a3\u4e48\u524dmx\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a dp[n-dep][mx] \uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a dp[n-dep][mx+1] \uff0c\u4e0d\u65ad\u5f80\u4e0b\u8d70\u5373\u53ef\u6c42\u51fa\u89e3\u3002 #include <bits/stdc++.h> using namespace std ; __int128 dp [ 30 ][ 30 ], k ; template < class T > inline bool scan ( T & ret ){ char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; //EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } int main () { int T , n ; scanf ( \"%d\" , & T ); for ( int i = 0 ; i < 30 ; i ++ ) dp [ 0 ][ i ] = 1 ; for ( int i = 1 ; i < 30 ; i ++ ) for ( int j = 0 ; j < 30 ; j ++ ) dp [ i ][ j ] = dp [ i - 1 ][ j ] * j + dp [ i - 1 ][ j + 1 ]; for ( int i = T - 1 ; i >= 0 ; i -- ) { for ( int j = 1 ; j <= T - i ; j ++ ) { out ( dp [ i ][ j ]); printf ( \" \" ); } puts ( \"\" ); } for ( int _ = 1 ; _ <= T ; _ ++ ) { scanf ( \"%d\" , & n ); scan ( k ); printf ( \"Case #%d: \" , _ ); int c = 0 , mx = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( c = 0 ; c < mx && k > dp [ n - i ][ mx ]; c ++ ) k -= dp [ n - i ][ mx ]; mx = max ( c + 1 , mx ); printf ( \"%c\" , 'A' + c ); } puts ( \"\" ); } }","title":"F. Rhyme scheme"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shanghai%202019/#g-substring","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2as\u4e32\uff0c\u7ed9m\u4e2at\u4e32\uff0c\u5206\u522b\u6c42s\u4e32\u4e0e\u6bcf\u4e2at\u4e32\u4e71\u5e8f\u5339\u914d\u7684\u5b50\u4e32\u6570\u91cf\uff0c\u4e71\u5e8f\u5339\u914d\u6307\u4e24\u4e32\u957f\u5ea6\u76f8\u7b49\uff0c\u9996\u5c3e\u5b57\u7b26\u76f8\u7b49\uff0c\u4e2d\u95f4\u91cd\u6392\u4e4b\u540e\u76f8\u7b49\u5373\u53ef\u3002 \u9898\u89e3\uff1a\u6570\u636e\u8303\u56f4\u4e2dt\u7684\u603b\u957f\u4e0d\u8d85\u8fc71e5\uff0c\u6240\u4ee5\u79bb\u7ebf\u67e5\u8be2\uff0c\u5bf9\u6bcf\u79cd\u957f\u5ea6\u6309\u7a97\u53e3\u5904\u7406\u4e00\u6b21s\uff0c\u590d\u6742\u5ea6O\uff08\u80fd\u8fc7\uff09\uff0c\u4e71\u5e8f\u5339\u914d\u7528\u52a0\u6cd5hash\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e2a\u8303\u56f4\u751a\u81f3\u4e0d\u4f1a\u6ea2\u51falonglong\u3002\u552f\u4e00\u6bd4\u8f83nb\u7684\u70b9\u5728\u4e8e\u5b83\u7684\u7ec6\u8282\u5361\u5185\u5b58\uff0cunordermap\u53ea\u9700\u8981\u7ba1\u90a3\u4e9bt\u4e32\u6ee1\u8db3\u7684\u89e3\uff0c\u6240\u4ee5count\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u9700\u8981\u8fd9\u4e2a\u89e3\uff0c\u7136\u540e\u518d\u52a0\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aG.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/17/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 50005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} #define ull ll struct node { int len ; int L , R , id ; ull hash ; bool operator < ( const node & oth ) const { return len < oth . len ; } } p [ maxn ]; string s , t ; int n ; int res [ maxn ]; unordered_map < ull , int > mp [ 26 ][ 26 ]; ull prime [] = { 34183 , 13513 , 152993 , 13591 , 19687 , 350869 , 111187 , 766091 , 769297 , 633469 , 752273 , 298651 , 617191 , 880421 , 136067 , 1408397 , 726899 , 458921 , 2133701 , 2599847 , 2730947 , 4696343 , 10267237 , 18941059 , 34078909 , 69208409 }; ull getHash () { ull tmp = 0 ; for ( auto i : t ) { tmp += prime [ i - 'a' ]; } return tmp ; } void cal ( int len ) { if ( len > s . length ()) return ; ull tmp = 0 ; for ( int i = 0 ; i < len ; ++ i ) { tmp += prime [ s [ i ] - 'a' ]; } if ( mp [ s [ 0 ] - 'a' ][ s [ len - 1 ] - 'a' ]. count ( tmp )) mp [ s [ 0 ] - 'a' ][ s [ len - 1 ] - 'a' ][ tmp ] ++ ; for ( int i = len ; i < s . length (); ++ i ) { tmp += prime [ s [ i ] - 'a' ] - prime [ s [ i - len ] - 'a' ]; if ( mp [ s [ i - len + 1 ] - 'a' ][ s [ i ] - 'a' ]. count ( tmp )) mp [ s [ i - len + 1 ] - 'a' ][ s [ i ] - 'a' ][ tmp ] ++ ; } } int main ( int argc , char * argv []) { int T ; cin >> T ; int q ; for ( int kase = 1 ; kase <= T ; ++ kase ) { cin >> s >> q ; for ( int i = 0 ; i < 26 ; ++ i ) { for ( int j = 0 ; j < 26 ; ++ j ) mp [ i ][ j ]. clear (); } for ( int i = 1 ; i <= q ; ++ i ) { cin >> t ; p [ i ]. hash = getHash (); p [ i ]. L = t [ 0 ] - 'a' ; p [ i ]. R = t . back () - 'a' ; p [ i ]. id = i ; p [ i ]. len = t . length (); mp [ p [ i ]. L ][ p [ i ]. R ][ p [ i ]. hash ] = 0 ; } sort ( p + 1 , p + 1 + q ); int pre = 0 ; for ( int i = 1 ; i <= q ; ++ i ) { if ( p [ i ]. len != pre ) cal ( p [ i ]. len ), pre = p [ i ]. len ; res [ p [ i ]. id ] = mp [ p [ i ]. L ][ p [ i ]. R ][ p [ i ]. hash ]; } for ( int i = 1 ; i <= q ; ++ i ) { printf ( \"%d \\n \" , res [ i ]); } } return 0 ; }","title":"G. Substring"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shanghai%202019/#j-stone-game","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u53ef\u91cd\u96c6 S \uff0c\u6c42\u5b83\u7684\u4e00\u4e2a\u5b50\u96c6 S\u2018 \uff0c\u6ee1\u8db3 (Sum(S\u2018)\u2265Sum(S\u2212S\u2019))\u2227(\u2200t\u2208S\u2018,Sum(S\u2019)\u2212t\u2264Sum(S\u2212S\u2018)) \u7684\u65b9\u6848\u6570\uff0c\u6ce8\u610f S\u2019 \u4e0d\u540c\u53ea\u8981\u5b83\u6240\u5305\u542b\u7684\u6570\u7684\u4e0b\u6807\u5b58\u5728\u4e0d\u540c\u7684\u5373\u53ef\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u52a0\u6cd5\u7684\u7279\u6b8a\u6027\uff0c\u5b83\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u53ef\u4ee5\u8f6c\u5316\u4e3a Sum(S\u2019)\u2212min(S\u2019)\u2264Sum(S\u2212S\u2018) \uff0c\u4e8e\u662f\u53ef\u4ee5\u679a\u4e3e\u51fa\u6bcf\u4e2a t \uff0c\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u76f4\u63a5\u80cc\u5305\u6c42\u51fa\u6240\u6709\u65b9\u6848\u6570\u5373\u53ef\u3002\u6ce8\u610f\u76f8\u540c t \u7684\u5904\u7406\u529e\u6cd5\uff0c\u7531\u4e8e t \u662f S\u2018 \u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\uff0c\u4e00\u4e2a\u4e2a\u679a\u4e3e\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u679a\u4e3e\u5230\u76f8\u540c\u7684\u5143\u7d20\uff0c\u53ea\u8981\u5c06\u6392\u5e8f\u540e\u5e8f\u53f7\u6bd4\u4ed6\u5c0f\u7684\u90fd\u653e\u5165 S \uff0c\u5b83\u672c\u8eab\u653e\u5165 S\u2018 \u5b9a\u7136\u4e0d\u4f1a\u4ea7\u751f\u91cd\u590d\u3002\u6ce8\u610f\u8fd9\u4e2a\u80cc\u5305\u65b9\u6848\u6570\u662f\u4e0d\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u7684\uff0c\u53ef\u4ee5\u5012\u7740\u5904\u7406\u7136\u540e\u5c31\u662f\u6bcf\u6b21\u5f80\u80cc\u5305\u91cc\u65b0\u589e\u4e00\u4e2a\u5143\u7d20\u3002 \u79d1\u666e\uff1a dp[j] += dp[j - a[i]] \u662f\u6c42\u80cc\u5305\u65b9\u6848\u6570\u7684\u5199\u6cd5\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/15/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 150005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll dp [ maxn ]; int n ; int a [ 505 ]; ll pre [ maxn ]; int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d\" , & n ); ll sum = 0 ; pre [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + a [ i ]; sum += a [ i ]; } sort ( a + 1 , a + 1 + n ); ll res = 0 ; memset ( dp , 0 , sizeof dp ); dp [ 0 ] = 1 ; for ( int i = n ; i >= 1 ; -- i ) { ll x = a [ i ]; for ( int j = 0 ; j <= sum ; ++ j ) { if ( dp [ j ] == 0 ) continue ; ll y = j + x ; ll z = sum - y ; if ( z <= y && z >= y - x ) { res = ( res + dp [ j ]) % mod ; } } for ( int j = sum ; j >= a [ i ]; -- j ) { dp [ j ] = ( dp [ j ] + dp [ j - a [ i ]]) % mod ; } } printf ( \"%lld \\n \" , res ); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"J. Stone game"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shenyang%202019/","text":"Name Date Solved A B C D E F G H I J K The Preliminary Contest for ICPC Asia Shenyang 2019 2019/9/14 6/11 . \u00d8 O O . O . O . . O tag Link #\u80cc\u5305\uff08c\uff09 #\u6362\u6839\u6811dp\uff08d\uff09 #\u70b9\u5206\u6cbb \uff08d\uff09 #\u5e76\u67e5\u96c6\uff08b\uff09 \uff03\u4e8c\u5206\uff08\uff46\uff09 #\u77e9\u9635\u5feb\u901f\u5e42\uff08g\uff09 #\u9ad8\u65af\u6d88\u5143\uff08g\uff09 B\u3001Dudu\u2019s maze Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u4e00\u4e9b\u5173\u952e\u70b9\uff0c\u5728\u5173\u952e\u70b9\u5916\u53ef\u4ee5\u968f\u610f\u8d70\u52a8\uff08\u8d77\u70b9\u4e3a1\u4e14\u4e0d\u662f\u5173\u952e\u70b9\uff09\uff0c\u7b2c\u4e00\u6b21\u5230\u8fbe\u5173\u952e\u70b9\u4f1a\u968f\u673a\u5411\u76f8\u90bb\u70b9\u8d70\u52a8\uff0c\u7b2c\u4e8c\u6b21\u5230\u8fbe\u5173\u952e\u70b9\u5c31\u505c\u6b62\uff0c\u6c42\u6700\u591a\u80fd\u5230\u7684\u975e\u5173\u952e\u70b9\u7684\u671f\u671b\u503c\uff08\u5c31\u662f\u8bf4\u4f1a\u4ee5\u6700\u4f18\u7684\u65b9\u5f0f\u8d70\u52a8\uff09\u3002 \u9898\u89e3\uff1a1\u7684\u8054\u901a\u5757\u90fd\u53ef\u4ee5\u8d70\u5b8c\uff0c\u4e0e1\u8fd9\u4e2a\u5757\u76f8\u8fde\u7684\u5173\u952e\u70b9\u4e2d\u53d6\u671f\u671b\u6700\u5927\u7684\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int pre [ maxn ]; int sz [ maxn ]; int u [ maxn * 2 ], v [ maxn * 2 ]; int vis [ maxn ]; int flag [ maxn ]; vector < int > edge [ maxn ]; int n , m , k ; double res ; int www ; inline int F ( int x ) { return x == pre [ x ] ? x : pre [ x ] = F ( pre [ x ]);} inline void dfs ( int u ) { vis [ u ] = 1 ; if ( ! flag [ u ]) { for ( auto v : edge [ u ]) { if ( vis [ v ]) continue ; dfs ( v ); } } else { www = 1 ; double tmp = 0 ; for ( auto v : edge [ u ]) { if ( F ( v ) != F ( 1 )) tmp += sz [ F ( v )]; } tmp /= edge [ u ]. size (); res = max ( res , tmp ); } } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d%d\" , & n , & m , & k ); www = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { pre [ i ] = i ; sz [ i ] = 1 ; vis [ i ] = 0 ; edge [ i ]. clear (); flag [ i ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { scanf ( \"%d%d\" , & u [ i ], & v [ i ]); edge [ u [ i ]]. push_back ( v [ i ]); edge [ v [ i ]]. push_back ( u [ i ]); } for ( int i = 1 , x ; i <= k ; ++ i ) { scanf ( \"%d\" , & x ); flag [ x ] = 1 ; sz [ x ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( flag [ u [ i ]] || flag [ v [ i ]]) continue ; int x = F ( u [ i ]), y = F ( v [ i ]); if ( x != y ) { sz [ y ] += sz [ x ]; pre [ x ] = y ; } } res = 0 ; dfs ( 1 ); if ( www == 0 ) { printf ( \"%.10f \\n \" , ( double ) sz [ F ( 1 )]); continue ; } printf ( \"%.10f \\n \" , res + sz [ F ( 1 )]); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; } \u8d5b\u4e2d\u5224\u8be5\u70b9\u662f\u4e0d\u662f1\u7684\u8054\u901a\u70b9\u5199\u4e86\u4e2a\u8822 F(v) != 1 \uff0c\u5b9e\u9645\u4e0a\u5e76\u67e5\u96c6\u4e5f\u6ca1\u6709\u7279\u6b8a\u5904\u7406\u8fc7\u3002\u3002\u3002\u540d\u989d\u6ca1\u4e86\u3002 C. Dawn-K\u2019s water Link \u9898\u610f\uff1an\u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4ef7\u503cp\u548c\u91cd\u91cfc\uff0c\u8be2\u95ee\u6c42\u6700\u5c11\u8981\u591a\u5c11\u94b1\u53ef\u4ee5\u4e70\u81f3\u5c11m\u91cd\u91cf\u7684\u7269\u54c1\u3002\u6c42\u51fa\u771f\u6b63\u4e70\u7684\u91cd\u91cf\u548c\u82b1\u8d39\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u7531\u4e8e\u6700\u7ec8\u4ef7\u503c\u4e0d\u5927\u4e8e1e4\uff0c\u76f4\u63a5\u5b8c\u5168\u80cc\u5305\u6c42\u52302e4\u80af\u5b9a\u6709\u89e3\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aC.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e3 + 5 ; const int maxm = 2e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; struct node { int p , c ; } a [ maxn ]; ll dp [ maxm ]; int main ( int argc , char * argv []) { int m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & a [ i ]. p , & a [ i ]. c ); } memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = a [ i ]. c ; j < maxm ; ++ j ) { dp [ j ] = min ( dp [ j ], dp [ j - a [ i ]. c ] + a [ i ]. p ); } } ll INF = 0x3f3f3f3f3f3f3f3f ; ll mnp = INF , mnc = INF ; for ( int i = m ; i < maxm ; ++ i ) { if ( mnp >= dp [ i ]) { mnp = dp [ i ]; mnc = i ; } } printf ( \"%lld %lld \\n \" , mnp , mnc ); } return 0 ; } D\u3001Fish eating fruit Link \u9898\u610f\uff1a\u6c42\u4e00\u68f5\u6811\u4e0a\u8fb9\u6743\u6a213\u5206\u522b\u4e3a0\uff0c1\uff0c2\u7684\u8fb9\u6743\u548c\u662f\u591a\u5c11 \u9898\u89e3\uff1a\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u7206\u4e0a\u4e00\u4e2a\u70b9\u5206\u6cbb\u5373\u53ef\uff0c\u6bcf\u6b21\u7edf\u8ba1\u51fa\u8fc7rt\u6a213\u7684\u8fb9\u5206\u522b\u4e3a0,1,2\u7684\u8fb9\u4e2a\u6570\u548c\u603b\u548c\uff0c\u7ec4\u5408\u4e00\u4e0b\u5c31\u80fd\u6c42\u51fa\u89e3\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aD.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; // \u6e05\u96f6 head \u548c tot const int maxm = 2e4 + 5 ; int ver [ maxm ], Next [ maxm ], head [ maxn ], edge [ maxm ]; int tot ; void addEdge ( int u , int v , int w ){ ver [ ++ tot ] = v ; Next [ tot ] = head [ u ]; head [ u ] = tot ; edge [ tot ] = w ; } int sz [ maxn ], vis [ maxn ]; int rt , mxsz , has ; inline void getrt ( int u , int pre ) { sz [ u ] = 1 ; int mxnow = 0 ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( v == pre || vis [ v ]) continue ; getrt ( v , u ); sz [ u ] += sz [ v ]; mxnow = max ( mxnow , sz [ v ]); } mxnow = max ( mxnow , has - sz [ u ]); if ( mxnow < mxsz ) { mxsz = mxnow , rt = u ; } } int dl [ 3 ], H [ 3 ]; int val [ maxn ]; inline void getdis ( int u , int pre ) { dl [ val [ u ] % 3 ] = ( dl [ val [ u ] % 3 ] + val [ u ]) % mod ; H [ val [ u ] % 3 ] ++ ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( v == pre || vis [ v ]) continue ; val [ v ] = val [ u ] + edge [ i ]; getdis ( v , u ); } } struct node { ll res [ 3 ]; node operator + ( const node & oth ) { for ( int i = 0 ; i < 3 ; ++ i ) { res [ i ] = ( res [ i ] + oth . res [ i ]) % mod ; } return * this ; } node operator - ( const node & oth ) { for ( int i = 0 ; i < 3 ; ++ i ) { res [ i ] = ( res [ i ] - oth . res [ i ]) % mod ; } return * this ; } void cl () { for ( int i = 0 ; i < 3 ; ++ i ) res [ i ] = 0 ; } }; inline node cal ( int u , int pre ) { for ( int i = 0 ; i < 3 ; ++ i ) dl [ i ] = 0 , H [ i ] = 0 ; val [ u ] = pre ; getdis ( u , 0 ); node sum ; sum . cl (); for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { sum . res [( i + j ) % 3 ] += (( ll )( H [ j ]) * dl [ i ] % mod + ( ll ) H [ i ] * dl [ j ] % mod ) % mod ; sum . res [( i + j ) % 3 ] %= mod ; } } return sum ; } node res ; inline void dfs ( int u ) { // printf(\"%d :%lld\\n\", u, cal(u, 0).res[0]); res = res + cal ( u , 0 ); vis [ u ] = 1 ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( vis [ v ]) continue ; // printf(\"%d :-%lld\\n\", v, cal(v, edge[i]).res[0]); res = res - cal ( v , edge [ i ]); has = sz [ v ]; mxsz = 0x3f3f3f3f ; getrt ( v , 0 ); dfs ( rt ); } } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { tot = 0 ; memset ( head , 0 , sizeof head ); res . cl (); memset ( vis , 0 , sizeof vis ); for ( int i = 1 , u , v , w ; i < n ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); u ++ ; v ++ ; addEdge ( u , v , w ); addEdge ( v , u , w ); // cout << u << \" \" << v << \" \" << w << endl; // assert(v > 10000); } mxsz = 0x3f3f3f3f ; has = n ; getrt ( 1 , 0 ); dfs ( rt ); printf ( \"%lld %lld %lld \\n \" , ( mod + res . res [ 0 ]) % mod , ( mod + res . res [ 1 ]) % mod , ( mod + res . res [ 2 ]) % mod ); } return 0 ; } \u9898\u89e32\uff1a\u6811\u5f62dp\u6362\u6839\u6c42\u89e3\u3002\u663e\u7136\u5bf9\u67d0\u4e2a\u70b9\u7684\u7b54\u6848\u53ef\u4ee5 O(n) \u6c42\u89e3\uff0c\u6362\u6839\u65f6\u540c\u6837\u8bb0\u5f55\u5b50\u6811\u4e2d0,1,2\u7684\u8def\u5f84\u4e2a\u6570\u548c\u603b\u548c\u5373\u53ef\u3002\u590d\u6742\u5ea6\u6bd4\u70b9\u5206\u6cbb\u4f4e\uff0c\u4e3a O(n) \u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aD.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/17/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; vector < pair < int , int > > edge [ maxn ]; ll dp [ maxn ][ 3 ]; // \u6bcf\u4e2a\u70b9\u7684\u7b54\u6848 ll num [ maxn ][ 3 ]; // \u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u6570\u91cf ll res [ 3 ]; inline void cal ( int u ) { for ( int i = 0 ; i < 3 ; ++ i ) { ( res [ i ] += dp [ u ][ i ]) %= mod ; } } inline void dfs1 ( int u , int pre , ll len ) { for ( auto i : edge [ u ]) { int v = i . first ; int w = i . second ; if ( v == pre ) continue ; dfs1 ( v , u , len + w ); num [ v ][ 0 ] ++ ; for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][( j + w ) % 3 ] += num [ v ][ j ] * w + dp [ v ][ j ]; num [ u ][( j + w ) % 3 ] += num [ v ][ j ]; } } } inline void dfs2 ( int u , int pre ) { cal ( u ); for ( auto i : edge [ u ]) { int v = i . first ; int w = i . second ; if ( v == pre ) continue ; ll dptmp [ 3 ], dptmp2 [ 3 ]; ll numtmp [ 3 ], numtmp2 [ 3 ]; for ( int j = 0 ; j < 3 ; ++ j ) { dptmp [ j ] = dp [ u ][ j ]; dptmp2 [ j ] = dp [ v ][ j ]; numtmp [ j ] = num [ u ][ j ]; numtmp2 [ j ] = num [ v ][ j ]; } for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][( j + w ) % 3 ] -= num [ v ][ j ] * w + dp [ v ][ j ]; num [ u ][( j + w ) % 3 ] -= num [ v ][ j ]; } num [ v ][ 0 ] -- ; num [ u ][ 0 ] ++ ; for ( int j = 0 ; j < 3 ; ++ j ) { dp [ v ][( j + w ) % 3 ] += num [ u ][ j ] * w + dp [ u ][ j ]; num [ v ][( j + w ) % 3 ] += num [ u ][ j ]; } dfs2 ( v , u ); for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][ j ] = dptmp [ j ]; dp [ v ][ j ] = dptmp2 [ j ]; num [ u ][ j ] = numtmp [ j ]; num [ v ][ j ] = numtmp2 [ j ]; } } } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { for ( int i = 0 ; i < 3 ; ++ i ) res [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { edge [ i ]. clear (); for ( int j = 0 ; j < 3 ; ++ j ) dp [ i ][ j ] = num [ i ][ j ] = 0 ; } for ( int i = 1 , u , v , w ; i < n ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); u ++ , v ++ ; edge [ u ]. push_back ( make_pair ( v , w )); edge [ v ]. push_back ( make_pair ( u , w )); } dfs1 ( 1 , 0 , 0 ); dfs2 ( 1 , 0 ); printf ( \"%lld %lld %lld \\n \" , res [ 0 ], res [ 1 ], res [ 2 ]); } return 0 ; } \uff26\u3001Honk\u2019s pool Link \uff28\u3001Texas hold\u2019em Poker Link \u9898\u610f\uff1a\u5fb7\u5dde\u6251\u514b\u6bd4\u5927\u5c0f \u9898\u89e3\uff1a\u6309\u9898\u610f\u6a21\u62df #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; struct player { char name [ 15 ]; int poker [ 5 ]; } p [ maxn ]; char card [ 15 ]; bool RoyalStraight ( player a ) { if ( a . poker [ 1 ] == 10 && a . poker [ 2 ] == 11 && a . poker [ 3 ] == 12 && a . poker [ 4 ] == 13 && a . poker [ 0 ] == 1 ) return true ; return false ; } bool Straight ( player a ) { for ( int i = 1 ; i < 5 ; i ++ ) { if ( a . poker [ i ] - a . poker [ i - 1 ] != 1 ) return false ; } return true ; } bool Pair ( player a ) { for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ]) return true ; } return false ; } bool TwoPairs ( player a ) { int tot = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ]) tot ++ ; } return tot == 2 ; } bool Three ( player a ) { for ( int i = 0 ; i < 3 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ] && a . poker [ i ] == a . poker [ i + 2 ]) return true ; } return false ; } bool Four ( player a ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ] && a . poker [ i ] == a . poker [ i + 2 ] && a . poker [ i ] == a . poker [ i + 3 ]) return true ; } return false ; } bool FullHouse ( player a ) { int cnt ; bool f1 = false , f2 = false ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; } if ( cnt == 3 ) f1 = true ; if ( cnt == 2 ) f2 = true ; } return f1 && f2 ; } bool cmp ( player a , player b ) { bool f1 = RoyalStraight ( a ), f2 = RoyalStraight ( b ); if ( f1 == true && f2 == true ) return strcmp ( a . name , b . name ) < 0 ; if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Straight ( a ); f2 = Straight ( b ); if ( f1 == true && f2 == true ) { if ( a . poker [ 4 ] == b . poker [ 4 ]) return strcmp ( a . name , b . name ) < 0 ; return a . poker [ 4 ] > b . poker [ 4 ]; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Four ( a ); f2 = Four ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; if ( a . poker [ 0 ] == a . poker [ 1 ]) { n1 = a . poker [ 0 ]; n2 = a . poker [ 4 ]; } else { n1 = a . poker [ 4 ]; n2 = a . poker [ 0 ]; } if ( b . poker [ 0 ] == b . poker [ 1 ]) { m1 = b . poker [ 0 ]; m2 = b . poker [ 4 ]; } else { m1 = b . poker [ 4 ]; m2 = b . poker [ 0 ]; } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = FullHouse ( a ); f2 = FullHouse ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; int cnt = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( a . poker [ i ] == a . poker [ 0 ]) cnt ++ ; } if ( cnt == 3 ) { n1 = a . poker [ 0 ]; n2 = a . poker [ 4 ]; } else { n1 = a . poker [ 4 ]; n2 = a . poker [ 0 ]; } cnt = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( b . poker [ i ] == b . poker [ 0 ]) cnt ++ ; } if ( cnt == 3 ) { m1 = b . poker [ 0 ]; m2 = b . poker [ 4 ]; } else { m1 = b . poker [ 4 ]; m2 = b . poker [ 0 ]; } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Three ( a ); f2 = Three ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; int cnt ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; n2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; else n2 += a . poker [ j ]; } if ( cnt == 3 ) { n1 = a . poker [ i ]; break ; } } for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; m2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( b . poker [ i ] == b . poker [ j ]) cnt ++ ; else m2 += b . poker [ j ]; } if ( cnt == 3 ) { m1 = b . poker [ i ]; break ; } } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = TwoPairs ( a ); f2 = TwoPairs ( b ); if ( f1 == true && f2 == true ) { int n1 =- 1 , n2 , n3 , m1 =- 1 , m2 , m3 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 4 ){ n3 = a . poker [ 4 ]; break ; } if ( a . poker [ i ] == a . poker [ i + 1 ]) { if ( n1 ==- 1 ) n1 = a . poker [ i ]; else n2 = a . poker [ i ]; i ++ ; } else n3 = a . poker [ i ]; } for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 4 ) { m3 = b . poker [ 4 ]; break ; } if ( b . poker [ i ] == b . poker [ i + 1 ]) { if ( m1 ==- 1 ) m1 = b . poker [ i ]; else m2 = b . poker [ i ]; i ++ ; } else m3 = b . poker [ i ]; } if ( n1 < n2 ) swap ( n1 , n2 ); if ( m1 < m2 ) swap ( m1 , m2 ); if ( n1 == m1 ) { if ( n2 == m2 ) { if ( n3 == m3 ) return strcmp ( a . name , b . name ) < 0 ; else return n3 > m3 ; } else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Pair ( a ); f2 = Pair ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 , cnt ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; n2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; else n2 += a . poker [ j ]; } if ( cnt == 2 ) { n1 = a . poker [ i ]; break ; } } for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; m2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( b . poker [ i ] == b . poker [ j ]) cnt ++ ; else m2 += b . poker [ j ]; } if ( cnt == 2 ) { m1 = b . poker [ i ]; break ; } } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { sum1 += a . poker [ i ]; sum2 += b . poker [ i ]; } if ( sum1 == sum2 ) return strcmp ( a . name , b . name ) < 0 ; else return sum1 > sum2 ; } int main () { int n ; while ( ~ scanf ( \"%d\" , & n )) { for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%s%s\" , & p [ i ]. name , & card ); int len = strlen ( card ); int now = 0 ; for ( int j = 0 ; j < len ; j ++ ) { if ( card [ j ] >= '2' && card [ j ] <= '9' ) { p [ i ]. poker [ now ++ ] = card [ j ] - '0' ; continue ; } if ( card [ j ] == 'A' ) { p [ i ]. poker [ now ++ ] = 1 ; continue ; } if ( card [ j ] == 'J' ) { p [ i ]. poker [ now ++ ] = 11 ; continue ; } if ( card [ j ] == 'Q' ) { p [ i ]. poker [ now ++ ] = 12 ; continue ; } if ( card [ j ] == 'K' ) { p [ i ]. poker [ now ++ ] = 13 ; continue ; } p [ i ]. poker [ now ++ ] = 10 ; j ++ ; } sort ( p [ i ]. poker , p [ i ]. poker + 5 ); } sort ( p + 1 , p + 1 + n , cmp ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%s \\n \" , p [ i ]. name ); } return 0 ; } K\u3001Guanguan\u2019s Happy water Link \u9898\u610f\uff1a\u5df2\u77e5\u524d2\u00d7k\u9879\uff0c\u5df2\u77e5\u6bcf\u4e00\u9879\u53ea\u4e0e\u524dk\u9879\u6709\u5173\u4e14\u662f\u56fa\u5b9a\u7cfb\u6570\u4e14\u4fdd\u8bc1\u7ed3\u679c\u4e3a\u6574\u6570\uff0c\u5373 f_i = \\sum_{j=1}^{k} a_j * f_{i-j} \u5176\u4e2d a[j] \u7684\u548c\u4e3a1 \u9898\u89e3\uff1a\u9ad8\u65af\u6d88\u5143\u6c42\u51faa\u6570\u7ec4\uff0c\u7136\u540e\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\uff0c\u7531\u4e8e\u7b54\u6848\u8981\u6c42 \\sum_{i=1}^n f_i \u7ed9\u5feb\u901f\u5e42\u52a0\u4e00\u7ef4\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; #define ll long long const int mod = 1e9 + 7 ; const double eps = 1e-10 ; const int maxn = 70 + 10 ; double a [ maxn ][ maxn ], x [ maxn ]; inline int sgn ( double x ) { return ( x > eps ) - ( x < - eps ); } int gauss ( int n , int m ) { int r = 0 , c = 0 ; while ( r < n && c < m ) { int m_r = r ; for ( int i = r + 1 ; i < n ; i ++ ) { if ( fabs ( a [ i ][ c ]) > fabs ( a [ m_r ][ c ])) m_r = i ; } if ( m_r != r ) { for ( int j = c ; j <= m ; j ++ ) swap ( a [ r ][ j ], a [ m_r ][ j ]); } if ( ! sgn ( a [ r ][ c ])) { a [ r ][ c ] = 0 ; ++ c ; continue ; } for ( int i = r + 1 ; i < n ; i ++ ) { if ( a [ i ][ c ]) { double t = a [ i ][ c ] / a [ r ][ c ]; for ( int j = c ; j < m + 1 ; j ++ ) a [ i ][ j ] -= a [ r ][ j ] * t ; } } ++ r ; ++ c ; } for ( int i = r ; i < n ; i ++ ) if ( sgn ( a [ i ][ m ])) return - 1 ; for ( int i = m - 1 ; i > - 1 ; i -- ) { double s = a [ i ][ m ]; for ( int j = i + 1 ; j < m ; j ++ ) s -= a [ i ][ j ] * x [ j ]; x [ i ] = s / a [ i ][ i ]; } return 0 ; } struct Matrix { int sz ; // int n, m; ll a [ maxn ][ maxn ]; Matrix ( int sz_ = 0 ) : sz ( sz_ ) { memset ( a , 0 , sizeof a ); } void pr () { printf ( \"* \\n \" ); for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = 0 ; j < sz ; ++ j ) { printf ( \"%lld \" , a [ i ][ j ]); } printf ( \" \\n \" ); } } void tr () { for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = i + 1 ; j < sz ; ++ j ) { swap ( a [ i ][ j ], a [ j ][ i ]); } } } } res , t1 ; Matrix mul ( Matrix a , Matrix b ) { Matrix res ( a . sz ); // if (a.m != b.n) return res; for ( int i = 0 ; i < res . sz ; i ++ ) // a.n for ( int j = 0 ; j < res . sz ; j ++ ) // b.m for ( int k = 0 ; k < res . sz ; k ++ ) // a.m, b.n ( res . a [ i ][ j ] += a . a [ i ][ k ] * b . a [ k ][ j ] % mod ) %= mod ; return res ; } Matrix qp ( ll n ) { //for(int i = 0; i < cur; i++) res.a[i][i] = 1; while ( n > 0 ) { if ( n & 1 ) res = mul ( res , t1 ); t1 = mul ( t1 , t1 ); n >>= 1 ; } return res ; } ll A [ maxn * 2 ]; int main () { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { int k ; ll n ; double b ; scanf ( \"%d%lld\" , & k , & n ); ll sum = 0 ; for ( int i = 0 ; i < 2 * k ; i ++ ) { scanf ( \"%lld\" , & A [ i ]); if ( i < k ) sum = ( sum + A [ i ]) % mod ; b = A [ i ]; // scanf(\"%lf\", &b); for ( int j = max ( k , i + 1 ); j < 2 * k ; j ++ ) { if ( j - i > k ) break ; else a [ j - k ][ j - i - 1 ] = b ; } if ( i >= k ) a [ i - k ][ k ] = b ; } gauss ( k , k ); for ( int i = 0 ; i < k ; i ++ ) { if ( x [ i ] == - 0.0 ) x [ i ] = 0 ; } memset ( res . a , 0 , sizeof res . a ); res . sz = k + 1 ; for ( int i = 0 ; i < k ; ++ i ) res . a [ 0 ][ i ] = A [ i ]; res . a [ 0 ][ k ] = sum ; // res.pr(); t1 . sz = k + 1 ; memset ( t1 . a , 0 , sizeof t1 . a ); for ( int i = 0 ; i < k - 1 ; ++ i ) { t1 . a [ i + 1 ][ i ] = 1 ; } for ( int i = 0 ; i < k ; ++ i ) { t1 . a [ k - i - 1 ][ k ] = t1 . a [ k - i - 1 ][ k - 1 ] = ( ll ) x [ i ] % mod ; } t1 . a [ k ][ k ] = 1 ; // t1.pr(); // for (int i = k; i < n; ++i) { // res = mul(res, t1); // res.pr(); // } Matrix gg = qp ( n - k ); printf ( \"%lld \\n \" , gg . a [ 0 ][ k ]); } return 0 ; } bm\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u677f\u5b50\u8fc7\u4e0d\u4e86\u6837\u4f8b\u5c31\u6ca1\u5199 \u770b\u522b\u4eba\u9898\u89e3\u5199\u7684\u4e0d\u77e5\u9053\u5565\u73a9\u610f\uff1f\uff1f\u9898\u89e3\u5199\u4e86\u5206\u5757\u77e9\u9635\u53bb\u6c42\u548c\u6bd4\u6211\u590d\u6742\u5ea6\u8fd8\u5927\u4e2a8\u500d\u4e0d\u592a\u884c\u3002","title":"The Preliminary Contest for ICPC Asia Shenyang 2019"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shenyang%202019/#tag","text":"#\u80cc\u5305\uff08c\uff09 #\u6362\u6839\u6811dp\uff08d\uff09 #\u70b9\u5206\u6cbb \uff08d\uff09 #\u5e76\u67e5\u96c6\uff08b\uff09 \uff03\u4e8c\u5206\uff08\uff46\uff09 #\u77e9\u9635\u5feb\u901f\u5e42\uff08g\uff09 #\u9ad8\u65af\u6d88\u5143\uff08g\uff09","title":"tag"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shenyang%202019/#bdudus-maze","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u4e00\u4e9b\u5173\u952e\u70b9\uff0c\u5728\u5173\u952e\u70b9\u5916\u53ef\u4ee5\u968f\u610f\u8d70\u52a8\uff08\u8d77\u70b9\u4e3a1\u4e14\u4e0d\u662f\u5173\u952e\u70b9\uff09\uff0c\u7b2c\u4e00\u6b21\u5230\u8fbe\u5173\u952e\u70b9\u4f1a\u968f\u673a\u5411\u76f8\u90bb\u70b9\u8d70\u52a8\uff0c\u7b2c\u4e8c\u6b21\u5230\u8fbe\u5173\u952e\u70b9\u5c31\u505c\u6b62\uff0c\u6c42\u6700\u591a\u80fd\u5230\u7684\u975e\u5173\u952e\u70b9\u7684\u671f\u671b\u503c\uff08\u5c31\u662f\u8bf4\u4f1a\u4ee5\u6700\u4f18\u7684\u65b9\u5f0f\u8d70\u52a8\uff09\u3002 \u9898\u89e3\uff1a1\u7684\u8054\u901a\u5757\u90fd\u53ef\u4ee5\u8d70\u5b8c\uff0c\u4e0e1\u8fd9\u4e2a\u5757\u76f8\u8fde\u7684\u5173\u952e\u70b9\u4e2d\u53d6\u671f\u671b\u6700\u5927\u7684\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int pre [ maxn ]; int sz [ maxn ]; int u [ maxn * 2 ], v [ maxn * 2 ]; int vis [ maxn ]; int flag [ maxn ]; vector < int > edge [ maxn ]; int n , m , k ; double res ; int www ; inline int F ( int x ) { return x == pre [ x ] ? x : pre [ x ] = F ( pre [ x ]);} inline void dfs ( int u ) { vis [ u ] = 1 ; if ( ! flag [ u ]) { for ( auto v : edge [ u ]) { if ( vis [ v ]) continue ; dfs ( v ); } } else { www = 1 ; double tmp = 0 ; for ( auto v : edge [ u ]) { if ( F ( v ) != F ( 1 )) tmp += sz [ F ( v )]; } tmp /= edge [ u ]. size (); res = max ( res , tmp ); } } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d%d\" , & n , & m , & k ); www = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { pre [ i ] = i ; sz [ i ] = 1 ; vis [ i ] = 0 ; edge [ i ]. clear (); flag [ i ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { scanf ( \"%d%d\" , & u [ i ], & v [ i ]); edge [ u [ i ]]. push_back ( v [ i ]); edge [ v [ i ]]. push_back ( u [ i ]); } for ( int i = 1 , x ; i <= k ; ++ i ) { scanf ( \"%d\" , & x ); flag [ x ] = 1 ; sz [ x ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( flag [ u [ i ]] || flag [ v [ i ]]) continue ; int x = F ( u [ i ]), y = F ( v [ i ]); if ( x != y ) { sz [ y ] += sz [ x ]; pre [ x ] = y ; } } res = 0 ; dfs ( 1 ); if ( www == 0 ) { printf ( \"%.10f \\n \" , ( double ) sz [ F ( 1 )]); continue ; } printf ( \"%.10f \\n \" , res + sz [ F ( 1 )]); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; } \u8d5b\u4e2d\u5224\u8be5\u70b9\u662f\u4e0d\u662f1\u7684\u8054\u901a\u70b9\u5199\u4e86\u4e2a\u8822 F(v) != 1 \uff0c\u5b9e\u9645\u4e0a\u5e76\u67e5\u96c6\u4e5f\u6ca1\u6709\u7279\u6b8a\u5904\u7406\u8fc7\u3002\u3002\u3002\u540d\u989d\u6ca1\u4e86\u3002","title":"B\u3001Dudu's maze"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shenyang%202019/#c-dawn-ks-water","text":"\u9898\u610f\uff1an\u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4ef7\u503cp\u548c\u91cd\u91cfc\uff0c\u8be2\u95ee\u6c42\u6700\u5c11\u8981\u591a\u5c11\u94b1\u53ef\u4ee5\u4e70\u81f3\u5c11m\u91cd\u91cf\u7684\u7269\u54c1\u3002\u6c42\u51fa\u771f\u6b63\u4e70\u7684\u91cd\u91cf\u548c\u82b1\u8d39\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u7531\u4e8e\u6700\u7ec8\u4ef7\u503c\u4e0d\u5927\u4e8e1e4\uff0c\u76f4\u63a5\u5b8c\u5168\u80cc\u5305\u6c42\u52302e4\u80af\u5b9a\u6709\u89e3\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aC.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e3 + 5 ; const int maxm = 2e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; struct node { int p , c ; } a [ maxn ]; ll dp [ maxm ]; int main ( int argc , char * argv []) { int m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & a [ i ]. p , & a [ i ]. c ); } memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = a [ i ]. c ; j < maxm ; ++ j ) { dp [ j ] = min ( dp [ j ], dp [ j - a [ i ]. c ] + a [ i ]. p ); } } ll INF = 0x3f3f3f3f3f3f3f3f ; ll mnp = INF , mnc = INF ; for ( int i = m ; i < maxm ; ++ i ) { if ( mnp >= dp [ i ]) { mnp = dp [ i ]; mnc = i ; } } printf ( \"%lld %lld \\n \" , mnp , mnc ); } return 0 ; }","title":"C. Dawn-K's water"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shenyang%202019/#dfish-eating-fruit","text":"\u9898\u610f\uff1a\u6c42\u4e00\u68f5\u6811\u4e0a\u8fb9\u6743\u6a213\u5206\u522b\u4e3a0\uff0c1\uff0c2\u7684\u8fb9\u6743\u548c\u662f\u591a\u5c11 \u9898\u89e3\uff1a\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u7206\u4e0a\u4e00\u4e2a\u70b9\u5206\u6cbb\u5373\u53ef\uff0c\u6bcf\u6b21\u7edf\u8ba1\u51fa\u8fc7rt\u6a213\u7684\u8fb9\u5206\u522b\u4e3a0,1,2\u7684\u8fb9\u4e2a\u6570\u548c\u603b\u548c\uff0c\u7ec4\u5408\u4e00\u4e0b\u5c31\u80fd\u6c42\u51fa\u89e3\u3002 \u4ee3\u7801\uff1a /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aD.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; // \u6e05\u96f6 head \u548c tot const int maxm = 2e4 + 5 ; int ver [ maxm ], Next [ maxm ], head [ maxn ], edge [ maxm ]; int tot ; void addEdge ( int u , int v , int w ){ ver [ ++ tot ] = v ; Next [ tot ] = head [ u ]; head [ u ] = tot ; edge [ tot ] = w ; } int sz [ maxn ], vis [ maxn ]; int rt , mxsz , has ; inline void getrt ( int u , int pre ) { sz [ u ] = 1 ; int mxnow = 0 ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( v == pre || vis [ v ]) continue ; getrt ( v , u ); sz [ u ] += sz [ v ]; mxnow = max ( mxnow , sz [ v ]); } mxnow = max ( mxnow , has - sz [ u ]); if ( mxnow < mxsz ) { mxsz = mxnow , rt = u ; } } int dl [ 3 ], H [ 3 ]; int val [ maxn ]; inline void getdis ( int u , int pre ) { dl [ val [ u ] % 3 ] = ( dl [ val [ u ] % 3 ] + val [ u ]) % mod ; H [ val [ u ] % 3 ] ++ ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( v == pre || vis [ v ]) continue ; val [ v ] = val [ u ] + edge [ i ]; getdis ( v , u ); } } struct node { ll res [ 3 ]; node operator + ( const node & oth ) { for ( int i = 0 ; i < 3 ; ++ i ) { res [ i ] = ( res [ i ] + oth . res [ i ]) % mod ; } return * this ; } node operator - ( const node & oth ) { for ( int i = 0 ; i < 3 ; ++ i ) { res [ i ] = ( res [ i ] - oth . res [ i ]) % mod ; } return * this ; } void cl () { for ( int i = 0 ; i < 3 ; ++ i ) res [ i ] = 0 ; } }; inline node cal ( int u , int pre ) { for ( int i = 0 ; i < 3 ; ++ i ) dl [ i ] = 0 , H [ i ] = 0 ; val [ u ] = pre ; getdis ( u , 0 ); node sum ; sum . cl (); for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { sum . res [( i + j ) % 3 ] += (( ll )( H [ j ]) * dl [ i ] % mod + ( ll ) H [ i ] * dl [ j ] % mod ) % mod ; sum . res [( i + j ) % 3 ] %= mod ; } } return sum ; } node res ; inline void dfs ( int u ) { // printf(\"%d :%lld\\n\", u, cal(u, 0).res[0]); res = res + cal ( u , 0 ); vis [ u ] = 1 ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( vis [ v ]) continue ; // printf(\"%d :-%lld\\n\", v, cal(v, edge[i]).res[0]); res = res - cal ( v , edge [ i ]); has = sz [ v ]; mxsz = 0x3f3f3f3f ; getrt ( v , 0 ); dfs ( rt ); } } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { tot = 0 ; memset ( head , 0 , sizeof head ); res . cl (); memset ( vis , 0 , sizeof vis ); for ( int i = 1 , u , v , w ; i < n ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); u ++ ; v ++ ; addEdge ( u , v , w ); addEdge ( v , u , w ); // cout << u << \" \" << v << \" \" << w << endl; // assert(v > 10000); } mxsz = 0x3f3f3f3f ; has = n ; getrt ( 1 , 0 ); dfs ( rt ); printf ( \"%lld %lld %lld \\n \" , ( mod + res . res [ 0 ]) % mod , ( mod + res . res [ 1 ]) % mod , ( mod + res . res [ 2 ]) % mod ); } return 0 ; } \u9898\u89e32\uff1a\u6811\u5f62dp\u6362\u6839\u6c42\u89e3\u3002\u663e\u7136\u5bf9\u67d0\u4e2a\u70b9\u7684\u7b54\u6848\u53ef\u4ee5 O(n) \u6c42\u89e3\uff0c\u6362\u6839\u65f6\u540c\u6837\u8bb0\u5f55\u5b50\u6811\u4e2d0,1,2\u7684\u8def\u5f84\u4e2a\u6570\u548c\u603b\u548c\u5373\u53ef\u3002\u590d\u6742\u5ea6\u6bd4\u70b9\u5206\u6cbb\u4f4e\uff0c\u4e3a O(n) \u3002 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aD.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/17/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; vector < pair < int , int > > edge [ maxn ]; ll dp [ maxn ][ 3 ]; // \u6bcf\u4e2a\u70b9\u7684\u7b54\u6848 ll num [ maxn ][ 3 ]; // \u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u6570\u91cf ll res [ 3 ]; inline void cal ( int u ) { for ( int i = 0 ; i < 3 ; ++ i ) { ( res [ i ] += dp [ u ][ i ]) %= mod ; } } inline void dfs1 ( int u , int pre , ll len ) { for ( auto i : edge [ u ]) { int v = i . first ; int w = i . second ; if ( v == pre ) continue ; dfs1 ( v , u , len + w ); num [ v ][ 0 ] ++ ; for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][( j + w ) % 3 ] += num [ v ][ j ] * w + dp [ v ][ j ]; num [ u ][( j + w ) % 3 ] += num [ v ][ j ]; } } } inline void dfs2 ( int u , int pre ) { cal ( u ); for ( auto i : edge [ u ]) { int v = i . first ; int w = i . second ; if ( v == pre ) continue ; ll dptmp [ 3 ], dptmp2 [ 3 ]; ll numtmp [ 3 ], numtmp2 [ 3 ]; for ( int j = 0 ; j < 3 ; ++ j ) { dptmp [ j ] = dp [ u ][ j ]; dptmp2 [ j ] = dp [ v ][ j ]; numtmp [ j ] = num [ u ][ j ]; numtmp2 [ j ] = num [ v ][ j ]; } for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][( j + w ) % 3 ] -= num [ v ][ j ] * w + dp [ v ][ j ]; num [ u ][( j + w ) % 3 ] -= num [ v ][ j ]; } num [ v ][ 0 ] -- ; num [ u ][ 0 ] ++ ; for ( int j = 0 ; j < 3 ; ++ j ) { dp [ v ][( j + w ) % 3 ] += num [ u ][ j ] * w + dp [ u ][ j ]; num [ v ][( j + w ) % 3 ] += num [ u ][ j ]; } dfs2 ( v , u ); for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][ j ] = dptmp [ j ]; dp [ v ][ j ] = dptmp2 [ j ]; num [ u ][ j ] = numtmp [ j ]; num [ v ][ j ] = numtmp2 [ j ]; } } } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { for ( int i = 0 ; i < 3 ; ++ i ) res [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { edge [ i ]. clear (); for ( int j = 0 ; j < 3 ; ++ j ) dp [ i ][ j ] = num [ i ][ j ] = 0 ; } for ( int i = 1 , u , v , w ; i < n ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); u ++ , v ++ ; edge [ u ]. push_back ( make_pair ( v , w )); edge [ v ]. push_back ( make_pair ( u , w )); } dfs1 ( 1 , 0 , 0 ); dfs2 ( 1 , 0 ); printf ( \"%lld %lld %lld \\n \" , res [ 0 ], res [ 1 ], res [ 2 ]); } return 0 ; }","title":"D\u3001Fish eating fruit"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shenyang%202019/#fhonks-pool","text":"","title":"\uff26\u3001Honk's pool"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shenyang%202019/#htexas-holdem-poker","text":"\u9898\u610f\uff1a\u5fb7\u5dde\u6251\u514b\u6bd4\u5927\u5c0f \u9898\u89e3\uff1a\u6309\u9898\u610f\u6a21\u62df #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; struct player { char name [ 15 ]; int poker [ 5 ]; } p [ maxn ]; char card [ 15 ]; bool RoyalStraight ( player a ) { if ( a . poker [ 1 ] == 10 && a . poker [ 2 ] == 11 && a . poker [ 3 ] == 12 && a . poker [ 4 ] == 13 && a . poker [ 0 ] == 1 ) return true ; return false ; } bool Straight ( player a ) { for ( int i = 1 ; i < 5 ; i ++ ) { if ( a . poker [ i ] - a . poker [ i - 1 ] != 1 ) return false ; } return true ; } bool Pair ( player a ) { for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ]) return true ; } return false ; } bool TwoPairs ( player a ) { int tot = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ]) tot ++ ; } return tot == 2 ; } bool Three ( player a ) { for ( int i = 0 ; i < 3 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ] && a . poker [ i ] == a . poker [ i + 2 ]) return true ; } return false ; } bool Four ( player a ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ] && a . poker [ i ] == a . poker [ i + 2 ] && a . poker [ i ] == a . poker [ i + 3 ]) return true ; } return false ; } bool FullHouse ( player a ) { int cnt ; bool f1 = false , f2 = false ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; } if ( cnt == 3 ) f1 = true ; if ( cnt == 2 ) f2 = true ; } return f1 && f2 ; } bool cmp ( player a , player b ) { bool f1 = RoyalStraight ( a ), f2 = RoyalStraight ( b ); if ( f1 == true && f2 == true ) return strcmp ( a . name , b . name ) < 0 ; if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Straight ( a ); f2 = Straight ( b ); if ( f1 == true && f2 == true ) { if ( a . poker [ 4 ] == b . poker [ 4 ]) return strcmp ( a . name , b . name ) < 0 ; return a . poker [ 4 ] > b . poker [ 4 ]; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Four ( a ); f2 = Four ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; if ( a . poker [ 0 ] == a . poker [ 1 ]) { n1 = a . poker [ 0 ]; n2 = a . poker [ 4 ]; } else { n1 = a . poker [ 4 ]; n2 = a . poker [ 0 ]; } if ( b . poker [ 0 ] == b . poker [ 1 ]) { m1 = b . poker [ 0 ]; m2 = b . poker [ 4 ]; } else { m1 = b . poker [ 4 ]; m2 = b . poker [ 0 ]; } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = FullHouse ( a ); f2 = FullHouse ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; int cnt = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( a . poker [ i ] == a . poker [ 0 ]) cnt ++ ; } if ( cnt == 3 ) { n1 = a . poker [ 0 ]; n2 = a . poker [ 4 ]; } else { n1 = a . poker [ 4 ]; n2 = a . poker [ 0 ]; } cnt = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( b . poker [ i ] == b . poker [ 0 ]) cnt ++ ; } if ( cnt == 3 ) { m1 = b . poker [ 0 ]; m2 = b . poker [ 4 ]; } else { m1 = b . poker [ 4 ]; m2 = b . poker [ 0 ]; } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Three ( a ); f2 = Three ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; int cnt ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; n2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; else n2 += a . poker [ j ]; } if ( cnt == 3 ) { n1 = a . poker [ i ]; break ; } } for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; m2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( b . poker [ i ] == b . poker [ j ]) cnt ++ ; else m2 += b . poker [ j ]; } if ( cnt == 3 ) { m1 = b . poker [ i ]; break ; } } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = TwoPairs ( a ); f2 = TwoPairs ( b ); if ( f1 == true && f2 == true ) { int n1 =- 1 , n2 , n3 , m1 =- 1 , m2 , m3 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 4 ){ n3 = a . poker [ 4 ]; break ; } if ( a . poker [ i ] == a . poker [ i + 1 ]) { if ( n1 ==- 1 ) n1 = a . poker [ i ]; else n2 = a . poker [ i ]; i ++ ; } else n3 = a . poker [ i ]; } for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 4 ) { m3 = b . poker [ 4 ]; break ; } if ( b . poker [ i ] == b . poker [ i + 1 ]) { if ( m1 ==- 1 ) m1 = b . poker [ i ]; else m2 = b . poker [ i ]; i ++ ; } else m3 = b . poker [ i ]; } if ( n1 < n2 ) swap ( n1 , n2 ); if ( m1 < m2 ) swap ( m1 , m2 ); if ( n1 == m1 ) { if ( n2 == m2 ) { if ( n3 == m3 ) return strcmp ( a . name , b . name ) < 0 ; else return n3 > m3 ; } else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Pair ( a ); f2 = Pair ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 , cnt ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; n2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; else n2 += a . poker [ j ]; } if ( cnt == 2 ) { n1 = a . poker [ i ]; break ; } } for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; m2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( b . poker [ i ] == b . poker [ j ]) cnt ++ ; else m2 += b . poker [ j ]; } if ( cnt == 2 ) { m1 = b . poker [ i ]; break ; } } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { sum1 += a . poker [ i ]; sum2 += b . poker [ i ]; } if ( sum1 == sum2 ) return strcmp ( a . name , b . name ) < 0 ; else return sum1 > sum2 ; } int main () { int n ; while ( ~ scanf ( \"%d\" , & n )) { for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%s%s\" , & p [ i ]. name , & card ); int len = strlen ( card ); int now = 0 ; for ( int j = 0 ; j < len ; j ++ ) { if ( card [ j ] >= '2' && card [ j ] <= '9' ) { p [ i ]. poker [ now ++ ] = card [ j ] - '0' ; continue ; } if ( card [ j ] == 'A' ) { p [ i ]. poker [ now ++ ] = 1 ; continue ; } if ( card [ j ] == 'J' ) { p [ i ]. poker [ now ++ ] = 11 ; continue ; } if ( card [ j ] == 'Q' ) { p [ i ]. poker [ now ++ ] = 12 ; continue ; } if ( card [ j ] == 'K' ) { p [ i ]. poker [ now ++ ] = 13 ; continue ; } p [ i ]. poker [ now ++ ] = 10 ; j ++ ; } sort ( p [ i ]. poker , p [ i ]. poker + 5 ); } sort ( p + 1 , p + 1 + n , cmp ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%s \\n \" , p [ i ]. name ); } return 0 ; }","title":"\uff28\u3001Texas hold'em Poker"},{"location":"Training%20Logs/2019%E7%BD%91%E7%BB%9C%E9%A2%84%E9%80%89%E8%B5%9B/The%20Preliminary%20Contest%20for%20ICPC%20Asia%20Shenyang%202019/#kguanguans-happy-water","text":"\u9898\u610f\uff1a\u5df2\u77e5\u524d2\u00d7k\u9879\uff0c\u5df2\u77e5\u6bcf\u4e00\u9879\u53ea\u4e0e\u524dk\u9879\u6709\u5173\u4e14\u662f\u56fa\u5b9a\u7cfb\u6570\u4e14\u4fdd\u8bc1\u7ed3\u679c\u4e3a\u6574\u6570\uff0c\u5373 f_i = \\sum_{j=1}^{k} a_j * f_{i-j} \u5176\u4e2d a[j] \u7684\u548c\u4e3a1 \u9898\u89e3\uff1a\u9ad8\u65af\u6d88\u5143\u6c42\u51faa\u6570\u7ec4\uff0c\u7136\u540e\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\uff0c\u7531\u4e8e\u7b54\u6848\u8981\u6c42 \\sum_{i=1}^n f_i \u7ed9\u5feb\u901f\u5e42\u52a0\u4e00\u7ef4\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std ; #define ll long long const int mod = 1e9 + 7 ; const double eps = 1e-10 ; const int maxn = 70 + 10 ; double a [ maxn ][ maxn ], x [ maxn ]; inline int sgn ( double x ) { return ( x > eps ) - ( x < - eps ); } int gauss ( int n , int m ) { int r = 0 , c = 0 ; while ( r < n && c < m ) { int m_r = r ; for ( int i = r + 1 ; i < n ; i ++ ) { if ( fabs ( a [ i ][ c ]) > fabs ( a [ m_r ][ c ])) m_r = i ; } if ( m_r != r ) { for ( int j = c ; j <= m ; j ++ ) swap ( a [ r ][ j ], a [ m_r ][ j ]); } if ( ! sgn ( a [ r ][ c ])) { a [ r ][ c ] = 0 ; ++ c ; continue ; } for ( int i = r + 1 ; i < n ; i ++ ) { if ( a [ i ][ c ]) { double t = a [ i ][ c ] / a [ r ][ c ]; for ( int j = c ; j < m + 1 ; j ++ ) a [ i ][ j ] -= a [ r ][ j ] * t ; } } ++ r ; ++ c ; } for ( int i = r ; i < n ; i ++ ) if ( sgn ( a [ i ][ m ])) return - 1 ; for ( int i = m - 1 ; i > - 1 ; i -- ) { double s = a [ i ][ m ]; for ( int j = i + 1 ; j < m ; j ++ ) s -= a [ i ][ j ] * x [ j ]; x [ i ] = s / a [ i ][ i ]; } return 0 ; } struct Matrix { int sz ; // int n, m; ll a [ maxn ][ maxn ]; Matrix ( int sz_ = 0 ) : sz ( sz_ ) { memset ( a , 0 , sizeof a ); } void pr () { printf ( \"* \\n \" ); for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = 0 ; j < sz ; ++ j ) { printf ( \"%lld \" , a [ i ][ j ]); } printf ( \" \\n \" ); } } void tr () { for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = i + 1 ; j < sz ; ++ j ) { swap ( a [ i ][ j ], a [ j ][ i ]); } } } } res , t1 ; Matrix mul ( Matrix a , Matrix b ) { Matrix res ( a . sz ); // if (a.m != b.n) return res; for ( int i = 0 ; i < res . sz ; i ++ ) // a.n for ( int j = 0 ; j < res . sz ; j ++ ) // b.m for ( int k = 0 ; k < res . sz ; k ++ ) // a.m, b.n ( res . a [ i ][ j ] += a . a [ i ][ k ] * b . a [ k ][ j ] % mod ) %= mod ; return res ; } Matrix qp ( ll n ) { //for(int i = 0; i < cur; i++) res.a[i][i] = 1; while ( n > 0 ) { if ( n & 1 ) res = mul ( res , t1 ); t1 = mul ( t1 , t1 ); n >>= 1 ; } return res ; } ll A [ maxn * 2 ]; int main () { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { int k ; ll n ; double b ; scanf ( \"%d%lld\" , & k , & n ); ll sum = 0 ; for ( int i = 0 ; i < 2 * k ; i ++ ) { scanf ( \"%lld\" , & A [ i ]); if ( i < k ) sum = ( sum + A [ i ]) % mod ; b = A [ i ]; // scanf(\"%lf\", &b); for ( int j = max ( k , i + 1 ); j < 2 * k ; j ++ ) { if ( j - i > k ) break ; else a [ j - k ][ j - i - 1 ] = b ; } if ( i >= k ) a [ i - k ][ k ] = b ; } gauss ( k , k ); for ( int i = 0 ; i < k ; i ++ ) { if ( x [ i ] == - 0.0 ) x [ i ] = 0 ; } memset ( res . a , 0 , sizeof res . a ); res . sz = k + 1 ; for ( int i = 0 ; i < k ; ++ i ) res . a [ 0 ][ i ] = A [ i ]; res . a [ 0 ][ k ] = sum ; // res.pr(); t1 . sz = k + 1 ; memset ( t1 . a , 0 , sizeof t1 . a ); for ( int i = 0 ; i < k - 1 ; ++ i ) { t1 . a [ i + 1 ][ i ] = 1 ; } for ( int i = 0 ; i < k ; ++ i ) { t1 . a [ k - i - 1 ][ k ] = t1 . a [ k - i - 1 ][ k - 1 ] = ( ll ) x [ i ] % mod ; } t1 . a [ k ][ k ] = 1 ; // t1.pr(); // for (int i = k; i < n; ++i) { // res = mul(res, t1); // res.pr(); // } Matrix gg = qp ( n - k ); printf ( \"%lld \\n \" , gg . a [ 0 ][ k ]); } return 0 ; } bm\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u677f\u5b50\u8fc7\u4e0d\u4e86\u6837\u4f8b\u5c31\u6ca1\u5199 \u770b\u522b\u4eba\u9898\u89e3\u5199\u7684\u4e0d\u77e5\u9053\u5565\u73a9\u610f\uff1f\uff1f\u9898\u89e3\u5199\u4e86\u5206\u5757\u77e9\u9635\u53bb\u6c42\u548c\u6bd4\u6211\u590d\u6742\u5ea6\u8fd8\u5927\u4e2a8\u500d\u4e0d\u592a\u884c\u3002","title":"K\u3001Guanguan's Happy water"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/","text":"Name Date Solved A B C D E F G H I J K L M 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest 2019/10/8 10/12 O O O . \u00d8 \u00d8 \u00d8 \u00d8 O . O O tag Link # A \u601d\u7ef4 # B \u601d\u7ef4 # C \u72b6\u6001\u679a\u4e3e #E \u601d\u7ef4 # F \u62d3\u6251\u5e8f/\u72b6\u538bdp # G dfs\u6811 # H \u8d2a\u5fc3 # I \u601d\u7ef4 # K \u601d\u7ef4 # L \u6570\u5b66\u601d\u7ef4 A. Auxiliary Project Link \u9898\u610f\uff1a\u7ed9x\u6839\u706b\u67f4\u68d2\uff0c\u62fc\u51fa10\u79cd\u6570\u5b57\u7684\u548c\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a3\u6839\u5373\u53ef\u62fc\u51fa7\uff0c\u6240\u4ee5\u4f18\u5148\u53d6\u8fd9\u4e2a\uff0c\u5bf93\u53d6\u6a21\u5206\u7c7b\u5373\u53ef\u3002 == 0 \u5168\u90e8\u62fc7 == 1 \u5927\u90e8\u5206\u62fc7\uff0c\u52694\u4e2a\u62fc4 == 2 \u5927\u90e8\u5206\u62fc7\uff0c\u5269\u4e24\u4e2a\u62fc1 B. Boolean Satisfiability Link \u9898\u610f\uff1a\u7ed9\u53ea\u6709 \u6216 \u548c \u975e \u7684\u8868\u8fbe\u5f0f\uff0c\u6c42\u5176\u4e3a\u771f\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5982\u679c\u51fa\u73b0\u4e86 x|~x \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\uff0c\u5219\u6240\u6709\u53d8\u91cf\u4efb\u610f\u53d6\u90fd\u662f\u5bf9\u7684\uff0c\u6240\u4ee5\u4e3a 2^n \uff0c\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5219\u662f 2^n-1 \u5373\u53ef\u3002 C. Consonant Fencity Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32\uff0c\u67097\u79cd\u5143\u97f3\u5b57\u6bcd\uff0c\u5176\u4ed6\u7684\u5b57\u6bcd\u5982\u679c\u76f8\u90bb\u4e14\u4e00\u4e2a\u4e3a\u5927\u5199\u4e00\u4e2a\u4e3a\u5c0f\u5199\u5219\u8ba1\u7b97\u4e00\u6b21\uff0c\u53ef\u4ee5\u8fdb\u884c\u6539\u5199\uff0c\u5c06\u67d0\u4e00\u7c7b\u5c0f\u5199\u6539\u6210\u5927\u5199\uff0c\u6c42\u6539\u5199\u540e\u6700\u5927\u7684\u65b9\u6848\u3002 \u9898\u89e3\uff1a\u76f4\u63a520\u79cd\u5b57\u7b26\u679a\u4e3e\u51fa\u6240\u6709\u72b6\u6001\u5373\u53ef\uff0c\u5176\u4e2d mp[i][j] \u8bb0\u5f55\u6bcf\u79cd\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f7f\u4ed6\u6700\u5927\u5373\u53ef\u3002 E. Equal Numbers Link \u9898\u610f\uff1a\u6709n\u4e2a\u6570\uff0c\u6bcf\u6b21\u64cd\u4f5c\u9009\u62e91\u4e2a\u6570\uff0c\u4f7f\u5176\u53d8\u4e3a\u539f\u6765\u7684\u6b63\u6574\u6570\u500d\uff1b\u95ee\u64cd\u4f5c1-n\u6b21\u540e\u5e8f\u5217\u4e2d\u6700\u5c11\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u3002\u6bcf\u4e2a\u8be2\u95ee\u662f\u72ec\u7acb\u7684\u3002 \u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u79cd\u4f7f\u4e00\u4e2a\u6570\u6210\u4e3a\u53e6\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u500d\u6570\uff0c\u53e6\u4e00\u79cd\u76f4\u63a5\u53d8\u4e3a goal=lcm(a_1,a_2, ...,a_n) goal=lcm(a_1,a_2, ...,a_n) \uff0c\u66f4\u65b0\u6bcf\u4e2a\u70b9\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 F. Fygon 2.0 Link \u9898\u610f\uff1a\u7ed9\u4e00\u7cfb\u5217for\u5faa\u73af\u548c\u4e0d\u8d85\u8fc720\u4e2a\u53d8\u91cf\uff0c\u8ba1\u7b97\u7ed9\u7684\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u9700\u8981\u8ba1\u7b97\u5e38\u6570\uff09\u3002 \u6bcf\u4e2afor\u5faa\u73af\u76f8\u5f53\u4e8e\u7ed9\u51fa\u4e86\u53d8\u91cf\u4e4b\u95f4\u5927\u5c0f\u5173\u7cfb\u7684\u9650\u5236\uff0ca->b\u8868\u793aa\u2264b\uff0c\u6bcf\u4e2aSCC\u5185\u7684\u53d8\u91cf\u8981\u76f8\u7b49\u3002 \u6240\u70b9\u540e\u5f97\u5230\u4e00\u4e2an\u4e2a\u70b9\u7684DAG\uff0c\u6e10\u8fdb\u590d\u6742\u5ea6\u4e3an!\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u4e3a\u62d3\u6251\u5e8f\u7684\u65b9\u6848\u6570\uff0c\u7528\u72b6\u538bdp\u6c42\u89e3\u3002 G. Grand Test Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6c42\u4e09\u6761\u8d77\u70b9\u7ec8\u70b9\u76f8\u540c\u7684\u4e0d\u76f8\u4ea4\u7b80\u5355\u8def\u5f84\u3002 \u6c42\u51faDFS\u6811\uff0c\u5bf9\u4e8e\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u66b4\u529b\u5c06u-v\u7684\u6811\u8fb9\u67d3\u8272\u3002\u5982\u679c\u4e00\u6761\u8fb9\u88ab\u67d3\u4e86\u4e24\u6b21\u8272\uff0c\u8bf4\u660e\u4e24\u4e2a\u7b80\u5355\u73af\u95f4\u6709\u516c\u5171\u8fb9\u3002\u4ec5\u4fdd\u7559\u4e24\u4e2a\u7b80\u5355\u73af\uff0c\u4efb\u9009\u4e24\u4e2a\u5ea6\u6570>=3\u7684\u70b9\u4f5c\u4e3aS\u548cT\uff0c\u7206\u641c\u51fa\u4e09\u6761\u8def\u5f84\u5373\u53ef\u3002 H. Hidden Supervisors Link \u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u4ee51\u4e3a\u6839\u7684\u6709n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4e00\u4e9b\u8282\u70b9\u7684\u7236\u4eb2\u5df2\u77e5\uff0c\u6784\u9020\u4e00\u4e2a\u65b9\u6848\uff0c\u8bbe\u7f6e\u672a\u77e5\u7236\u4eb2\u8282\u70b9\u7684\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u4f7f\u8fd9\u68f5\u6811\u4e0a\u7236\u4eb2\u8282\u70b9-\u513f\u5b50\u8282\u70b9\u7684\u5339\u914d\u6700\u5927\u3002 \u6c42\u51fa\u6bcf\u4e2a\u8fde\u901a\u5757\u6839\u7684\u5339\u914d\u60c5\u51b5\u4ee5\u53ca\u5185\u90e8\u672a\u88ab\u5339\u914d\u7684\u70b9\u6570\u3002\u5bf9\u4e8e\u6839\u5df2\u7ecf\u88ab\u5339\u914d\u7684\u8fde\u901a\u5757\uff0c\u663e\u7136\u4e0e1\u76f8\u8fde\u6700\u4f18\uff1b\u5269\u4e0b\u7684\u8054\u901a\u5757\u4ece\u5927\u5230\u5c0f\u8d2a\u5fc3\u5411\u672a\u5339\u914d\u70b9\u8fde\u8fb9\u5373\u53ef\u3002 I. Intelligence in Perpendicularia Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5f62\u72b6\uff0c\u5176\u4e2d\u6240\u6709\u8fb9\u90fd\u662f\u5e73\u884c\u4e0e\u5750\u6807\u8f74\u7684\uff0c\u6c42\u5916\u9762\u56db\u4e2a\u65b9\u5411\u770b\u4e0d\u5230\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u663e\u7136\uff0c\u603b-\u770b\u5230\u7684 K. Kotlin Island Link \u9898\u610f\uff1a\u521d\u59cbn\u00d7m\u7684\u77e9\u9635\u56fe\uff0c\u628a\u67d0\u4e9b\u884c\u67d0\u4e9b\u5217\u6dfb\u52a0\u5206\u9694\u7b26\u6c42\u5206\u5272\u6210x\u4e2a\u533a\u95f4\u7684\u65b9\u6848\u3002 \u9898\u89e3\uff1an\uff0cm\u4e0d\u662f\u5f88\u5927\u76f4\u63a5\u679a\u4e3e\u53ef\u80fd\u7684a\u00d7b=x\u5373\u53ef\u3002 L. Little Difference Link \u9898\u610f\uff1a\u7ed9n\uff0c\u6c42\u6240\u6709\u65b9\u6848\u4f7f\u5f97 n=x^p1*(x+1)^p2 \u6210\u7acb \u9898\u89e3\uff1a\u9996\u51482\u7684\u6b21\u65b9\u6709\u65e0\u7a77\u79cd\u65b9\u6848\uff0c\u56e0\u4e3a1\u53ef\u4ee5\u968f\u4fbf\u4e58\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u6570n\uff0c\u5728 [1\uff0cn**(1/3)] \u5185\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u89e3\uff0c\u5728 [n**(1/3),n] \u5185\u5982\u679c\u6709\u89e3\u53ea\u6709\u4e24\u79cd\u60c5\u51b5 x*x=n \u6216\u8005 x*(x+1)=n \uff0c\u6c42\u5e73\u65b9\u6839\u5373\u53ef\u3002","title":"2017 2018 ACM ICPC, NEERC, Northern Subregional Contest"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#tag","text":"# A \u601d\u7ef4 # B \u601d\u7ef4 # C \u72b6\u6001\u679a\u4e3e #E \u601d\u7ef4 # F \u62d3\u6251\u5e8f/\u72b6\u538bdp # G dfs\u6811 # H \u8d2a\u5fc3 # I \u601d\u7ef4 # K \u601d\u7ef4 # L \u6570\u5b66\u601d\u7ef4","title":"tag"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#a-auxiliary-project","text":"\u9898\u610f\uff1a\u7ed9x\u6839\u706b\u67f4\u68d2\uff0c\u62fc\u51fa10\u79cd\u6570\u5b57\u7684\u548c\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a3\u6839\u5373\u53ef\u62fc\u51fa7\uff0c\u6240\u4ee5\u4f18\u5148\u53d6\u8fd9\u4e2a\uff0c\u5bf93\u53d6\u6a21\u5206\u7c7b\u5373\u53ef\u3002 == 0 \u5168\u90e8\u62fc7 == 1 \u5927\u90e8\u5206\u62fc7\uff0c\u52694\u4e2a\u62fc4 == 2 \u5927\u90e8\u5206\u62fc7\uff0c\u5269\u4e24\u4e2a\u62fc1","title":"A. Auxiliary Project"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#b-boolean-satisfiability","text":"\u9898\u610f\uff1a\u7ed9\u53ea\u6709 \u6216 \u548c \u975e \u7684\u8868\u8fbe\u5f0f\uff0c\u6c42\u5176\u4e3a\u771f\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5982\u679c\u51fa\u73b0\u4e86 x|~x \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\uff0c\u5219\u6240\u6709\u53d8\u91cf\u4efb\u610f\u53d6\u90fd\u662f\u5bf9\u7684\uff0c\u6240\u4ee5\u4e3a 2^n \uff0c\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5219\u662f 2^n-1 \u5373\u53ef\u3002","title":"B. Boolean Satisfiability"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#c-consonant-fencity","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32\uff0c\u67097\u79cd\u5143\u97f3\u5b57\u6bcd\uff0c\u5176\u4ed6\u7684\u5b57\u6bcd\u5982\u679c\u76f8\u90bb\u4e14\u4e00\u4e2a\u4e3a\u5927\u5199\u4e00\u4e2a\u4e3a\u5c0f\u5199\u5219\u8ba1\u7b97\u4e00\u6b21\uff0c\u53ef\u4ee5\u8fdb\u884c\u6539\u5199\uff0c\u5c06\u67d0\u4e00\u7c7b\u5c0f\u5199\u6539\u6210\u5927\u5199\uff0c\u6c42\u6539\u5199\u540e\u6700\u5927\u7684\u65b9\u6848\u3002 \u9898\u89e3\uff1a\u76f4\u63a520\u79cd\u5b57\u7b26\u679a\u4e3e\u51fa\u6240\u6709\u72b6\u6001\u5373\u53ef\uff0c\u5176\u4e2d mp[i][j] \u8bb0\u5f55\u6bcf\u79cd\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f7f\u4ed6\u6700\u5927\u5373\u53ef\u3002","title":"C. Consonant Fencity"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#e-equal-numbers","text":"\u9898\u610f\uff1a\u6709n\u4e2a\u6570\uff0c\u6bcf\u6b21\u64cd\u4f5c\u9009\u62e91\u4e2a\u6570\uff0c\u4f7f\u5176\u53d8\u4e3a\u539f\u6765\u7684\u6b63\u6574\u6570\u500d\uff1b\u95ee\u64cd\u4f5c1-n\u6b21\u540e\u5e8f\u5217\u4e2d\u6700\u5c11\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u3002\u6bcf\u4e2a\u8be2\u95ee\u662f\u72ec\u7acb\u7684\u3002 \u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u79cd\u4f7f\u4e00\u4e2a\u6570\u6210\u4e3a\u53e6\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u500d\u6570\uff0c\u53e6\u4e00\u79cd\u76f4\u63a5\u53d8\u4e3a goal=lcm(a_1,a_2, ...,a_n) goal=lcm(a_1,a_2, ...,a_n) \uff0c\u66f4\u65b0\u6bcf\u4e2a\u70b9\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002","title":"E. Equal Numbers"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#f-fygon-20","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u7cfb\u5217for\u5faa\u73af\u548c\u4e0d\u8d85\u8fc720\u4e2a\u53d8\u91cf\uff0c\u8ba1\u7b97\u7ed9\u7684\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u9700\u8981\u8ba1\u7b97\u5e38\u6570\uff09\u3002 \u6bcf\u4e2afor\u5faa\u73af\u76f8\u5f53\u4e8e\u7ed9\u51fa\u4e86\u53d8\u91cf\u4e4b\u95f4\u5927\u5c0f\u5173\u7cfb\u7684\u9650\u5236\uff0ca->b\u8868\u793aa\u2264b\uff0c\u6bcf\u4e2aSCC\u5185\u7684\u53d8\u91cf\u8981\u76f8\u7b49\u3002 \u6240\u70b9\u540e\u5f97\u5230\u4e00\u4e2an\u4e2a\u70b9\u7684DAG\uff0c\u6e10\u8fdb\u590d\u6742\u5ea6\u4e3an!\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u4e3a\u62d3\u6251\u5e8f\u7684\u65b9\u6848\u6570\uff0c\u7528\u72b6\u538bdp\u6c42\u89e3\u3002","title":"F. Fygon 2.0"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#g-grand-test","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6c42\u4e09\u6761\u8d77\u70b9\u7ec8\u70b9\u76f8\u540c\u7684\u4e0d\u76f8\u4ea4\u7b80\u5355\u8def\u5f84\u3002 \u6c42\u51faDFS\u6811\uff0c\u5bf9\u4e8e\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u66b4\u529b\u5c06u-v\u7684\u6811\u8fb9\u67d3\u8272\u3002\u5982\u679c\u4e00\u6761\u8fb9\u88ab\u67d3\u4e86\u4e24\u6b21\u8272\uff0c\u8bf4\u660e\u4e24\u4e2a\u7b80\u5355\u73af\u95f4\u6709\u516c\u5171\u8fb9\u3002\u4ec5\u4fdd\u7559\u4e24\u4e2a\u7b80\u5355\u73af\uff0c\u4efb\u9009\u4e24\u4e2a\u5ea6\u6570>=3\u7684\u70b9\u4f5c\u4e3aS\u548cT\uff0c\u7206\u641c\u51fa\u4e09\u6761\u8def\u5f84\u5373\u53ef\u3002","title":"G. Grand Test"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#h-hidden-supervisors","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u4ee51\u4e3a\u6839\u7684\u6709n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4e00\u4e9b\u8282\u70b9\u7684\u7236\u4eb2\u5df2\u77e5\uff0c\u6784\u9020\u4e00\u4e2a\u65b9\u6848\uff0c\u8bbe\u7f6e\u672a\u77e5\u7236\u4eb2\u8282\u70b9\u7684\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u4f7f\u8fd9\u68f5\u6811\u4e0a\u7236\u4eb2\u8282\u70b9-\u513f\u5b50\u8282\u70b9\u7684\u5339\u914d\u6700\u5927\u3002 \u6c42\u51fa\u6bcf\u4e2a\u8fde\u901a\u5757\u6839\u7684\u5339\u914d\u60c5\u51b5\u4ee5\u53ca\u5185\u90e8\u672a\u88ab\u5339\u914d\u7684\u70b9\u6570\u3002\u5bf9\u4e8e\u6839\u5df2\u7ecf\u88ab\u5339\u914d\u7684\u8fde\u901a\u5757\uff0c\u663e\u7136\u4e0e1\u76f8\u8fde\u6700\u4f18\uff1b\u5269\u4e0b\u7684\u8054\u901a\u5757\u4ece\u5927\u5230\u5c0f\u8d2a\u5fc3\u5411\u672a\u5339\u914d\u70b9\u8fde\u8fb9\u5373\u53ef\u3002","title":"H. Hidden Supervisors"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#i-intelligence-in-perpendicularia","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5f62\u72b6\uff0c\u5176\u4e2d\u6240\u6709\u8fb9\u90fd\u662f\u5e73\u884c\u4e0e\u5750\u6807\u8f74\u7684\uff0c\u6c42\u5916\u9762\u56db\u4e2a\u65b9\u5411\u770b\u4e0d\u5230\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u663e\u7136\uff0c\u603b-\u770b\u5230\u7684","title":"I. Intelligence in Perpendicularia"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#k-kotlin-island","text":"\u9898\u610f\uff1a\u521d\u59cbn\u00d7m\u7684\u77e9\u9635\u56fe\uff0c\u628a\u67d0\u4e9b\u884c\u67d0\u4e9b\u5217\u6dfb\u52a0\u5206\u9694\u7b26\u6c42\u5206\u5272\u6210x\u4e2a\u533a\u95f4\u7684\u65b9\u6848\u3002 \u9898\u89e3\uff1an\uff0cm\u4e0d\u662f\u5f88\u5927\u76f4\u63a5\u679a\u4e3e\u53ef\u80fd\u7684a\u00d7b=x\u5373\u53ef\u3002","title":"K. Kotlin Island"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2017-2018%20ACM-ICPC%2C%20NEERC%2C%20Northern%20Subregional%20Contest/#l-little-difference","text":"\u9898\u610f\uff1a\u7ed9n\uff0c\u6c42\u6240\u6709\u65b9\u6848\u4f7f\u5f97 n=x^p1*(x+1)^p2 \u6210\u7acb \u9898\u89e3\uff1a\u9996\u51482\u7684\u6b21\u65b9\u6709\u65e0\u7a77\u79cd\u65b9\u6848\uff0c\u56e0\u4e3a1\u53ef\u4ee5\u968f\u4fbf\u4e58\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u6570n\uff0c\u5728 [1\uff0cn**(1/3)] \u5185\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u89e3\uff0c\u5728 [n**(1/3),n] \u5185\u5982\u679c\u6709\u89e3\u53ea\u6709\u4e24\u79cd\u60c5\u51b5 x*x=n \u6216\u8005 x*(x+1)=n \uff0c\u6c42\u5e73\u65b9\u6839\u5373\u53ef\u3002","title":"L. Little Difference"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/","text":"Name Date Solved A B C D E F G H I J K L 2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b 2019/11/20 6/12 O O . O . O . . . O O . tag Link A.\u51e0\u4f55\u3001\u968f\u673a B.\u66b4\u529b C.\u4e09\u7ef4\u51e0\u4f55 D.\u51e0\u4f55\u3001\u66b4\u529b E.\u56de\u6587\u4e32\u3001hash F.\u5dee\u5206\u6570\u7ec4\u3001\u66b4\u529b G.\u51e0\u4f55 H.\u7ebf\u6bb5\u6811 I.\u8d39\u7528\u6d41 J.\u6570\u4f4ddp K.\u77e9\u9635\u4e58\u6cd5\u3001\u66b4\u529b L.\u5377\u79ef A. Fruit Ninja Link \u7ed91e4\u4e2a\u70b9\uff0c\u6c42\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u7684\u70b9\u6700\u591a\u591a\u5c11\u4e2a \u610f\u4f1a\u4e00\u4e0b\u6982\u7387\u95ee\u9898\uff0c\u5047\u5982\u7b54\u6848\u4e3ax\uff0c\u90a3\u4e48\u5c31\u6709x/n\u7684\u6982\u7387\u53d6\u5230\u90a3\u4e2a\u7b54\u6848\u4e0a\u3002\u5f53\u7b54\u6848\u8f83\u5c0f\u65f6\uff0c\u89e3\u6cd5\u8f83\u591a\uff0c\u7b54\u6848\u8f83\u5927\u65f6\uff0c\u53d6\u70b9\u5230\u7b54\u6848\u76f4\u7ebf\u7684\u6982\u7387\u8f83\u5927\u3002\u6240\u4ee5\u968f\u673a\u53d6\u70b9\u5e76 O(n) check\u7b54\u6848\u5373\u53ef\u3002 B. Perfect Numbers Link \u7565 D. Thinking-Bear magic Link \u7ed9\u6b63\u591a\u8fb9\u5f62\uff0c\u8f93\u5165\u8fb9\u957fa\u548c\u8fb9\u6570l\u3002\u64cd\u4f5c\u4e3a\uff1a\u628a\u6240\u6709\u8fb9\u7684\u4e2d\u70b9\u53d6\u51fa\u6765\u4f9d\u6b21\u8fde\u63a5\u5f62\u6210\u65b0\u7684\u6b63n\u8fb9\u5f62\uff0c\u6c42\u591a\u5c11\u6b21\u64cd\u4f5c\u540e\u591a\u8fb9\u5f62\u9762\u79ef\u4e0d\u8d85\u8fc7l\u3002 \u6b63\u591a\u8fb9\u5f62\u9762\u79ef\u53ef\u4ee5\u7528\u5706\u5468\u89d2\u6c42\u51fa \\frac{n*a^2}{4 * tan(pi / n)} \u6bcf\u6b21\u7f29\u5c0f\u76f8\u5f53\u4e8e\u5f62\u72b6\u4e0d\u53d8\u7f29\u5c0fa\uff0c\u6240\u4ee5\u7b97\u51faa\u7684\u6bd4\u4f8b\u5373\u53ef\uff0c\u6839\u636e\u591a\u8fb9\u5f62\u5185\u89d2\u548c\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u5199\u51fa\u6765 a' = a * sin^2(\\frac{(n-2)*pi}{2 * n}) \u7136\u540e\u7531\u4e8e\u7b54\u6848\u4e0d\u4f1a\u5f88\u5927\u76f4\u63a5for\u5c31\u53ef\u4ee5\u7b97\u51fa\u7ed3\u679c F. Color it Link \u7ed9\u5b9an\u00d7m\u7684\u6574\u70b9\u65b9\u683c\u56fe\uff0cQ\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u5706\u5185\u7684\u6574\u70b9\u6d82\u9ed1\uff0c\u6c42\u6700\u540e\u767d\u8272\u70b9\u7684\u4e2a\u6570\u3002 1 \\le n, m \\le 2*10^4, 1 \\le q \\le 200 \u663e\u7136\u66b4\u529b\u4e24\u79cd\u65b9\u5f0f\uff1a\u679a\u4e3e\u6bcf\u4e2a\u70b9\u662f\u5426\u5728\u67d0\u4e2aq\u4e2d\uff0c\u6216\u8005\u679a\u4e3e\u6240\u6709q\u4e2d\u7684\u70b9\u90fd\u662f O(nmq) \u7684\u590d\u6742\u5ea6 \u8003\u8651\u4e00\u7ef4\u66b4\u529b\uff0c\u53e6\u4e00\u7ef4\u7528\u5dee\u5206\u6570\u7ec4\u4f18\u5316\u5373\u53ef O(nq) I. Matrix Game Link \u7ed9\u5b9a\u4e00\u4e2a n\u00d7m n\u00d7m \u77e9\u9635\u4e0a\u7684\u6570\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5c06\u77e9\u9635\u4e0a\u7684\u67d0\u4e2a\u6570+1\u6216-1\uff0c\u95ee\u6700\u5c11\u64cd\u4f5c\u591a\u5c11\u6b21\uff0c\u80fd\u4f7f\u6bcf\u884c\u4e0a\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u4e14\u6bcf\u5217\u4e0a\u7684\u4e2a\u6570\u76f8\u7b49\u3002 \u8d39\u7528\u6d41\u3002\u884c\u5217\u6a21\u578b\u5efa\u56fe\uff0c\u539f\u6709\u7684\u70b9\u884c\u5217\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a mp[i][j] \uff0c\u8d39\u7528\u4e3a-1(\u5f3a\u5236\u5148\u53d6)\uff0c\u518d\u5bf9\u8be5\u884c\u8be5\u5217\u8fde\u6d41\u91cf\u4e3ainf\u7684\u8fb9\uff0c\u8d39\u7528\u4e3a1\u3002\u4ee4\u539f\u6709\u7684\u70b9\u603b\u548c\u4e3asum\uff0c\u5f53\u524d\u7684\u82b1\u8d39\u5373\u4e3asum+mcmf\u3002 \u679a\u4e3e\u6d41\u91cf\uff0c\u6bcf\u6b21\u589e\u52a0 n*m/__gcd(n,m) \uff0c\u4ece\u6e90\u70b9\u5411\u884c\u5206\u6210n\u4efd\uff0c\u5217\u5411\u6c47\u70b9\u5206\u6210m\u4efd\uff0c\u6c42\u51fa\u6700\u5927\u503c\u3002 \u6ce8\u610f\u8fd9\u91cc\u662f**\u6709\u8d1f\u5708**\u7684\u8d39\u7528\u6d41\u3002\u5e76\u4e14\u5728\u8dd1\u7684\u65f6\u5019\u6709\u4e9b\u7384\u5b66\u7684\u5e38\u6570\u4f18\u5316\u2026\u2026\uff1f J. Beautiful Numbers Link \u6c42 1\uff5en \u4e2d\u7684\u7f8e\u4e3d\u6570\u7684\u4e2a\u6570\uff0c\u5f53\u4e00\u4e2a\u6570\u53ef\u4ee5\u6574\u9664\u5b83\u7684\u6570\u4f4d\u548c\u5373\u662f\u7f8e\u4e3d\u6570\u3002 \u663e\u7136\u6570\u4f4ddp\uff0c\u8003\u8651\u5230\u6a21\u6570\u5e76\u4e0d\u786e\u5b9a\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u6570\u4f4d\u548c\uff08 1e12 \u4ee5\u5185\u53ea\u6709 1~9*12 \u8fd9\u4e9b\u6570\u4f4d\u548c\u53ef\u80fd\u51fa\u73b0\uff09\u3002\u7136\u540e\u5c31\u662f\u6570\u4f4ddp\u89e3 1\uff5en \u4e2d\u6709\u591a\u5c11\u6a21x\u4e3a0\u4e14\u6570\u4f4d\u548c\u4e3ax\u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef\u3002 \u7531\u4e8e\u6a21\u6570\u4e0d\u540c\uff0c\u666e\u901a\u7684\u4f7f\u7528\u6570\u4f4ddp\u5e76\u4e14\u6bcf\u6b21\u6e05\u7a7a\u590d\u6742\u5ea6\u8fc7\u5927\uff0c\u7531\u4e8e\u672c\u9898\u6570\u636e\u4e0d\u90a3\u4e48\u5927\u53ef\u4ee5\u8003\u8651\u591a\u5b58\u4e00\u7ef4\u4e0d\u6e05\u7a7a\uff0c\u5373\uff1a dp[i][j][k][t] \u8868\u793a\u6a21\u6570\u3001\u548c\u90fd\u4e3ai\u65f6\uff0cj\u4f4d\u6570\uff0c\u5269\u4f59k\u7684\u548c\uff0c\u5f53\u524d\u4f59\u6570\u7684\u7b54\u6848 K. Matrix Multiplication Link \u7565","title":"2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/#tag","text":"A.\u51e0\u4f55\u3001\u968f\u673a B.\u66b4\u529b C.\u4e09\u7ef4\u51e0\u4f55 D.\u51e0\u4f55\u3001\u66b4\u529b E.\u56de\u6587\u4e32\u3001hash F.\u5dee\u5206\u6570\u7ec4\u3001\u66b4\u529b G.\u51e0\u4f55 H.\u7ebf\u6bb5\u6811 I.\u8d39\u7528\u6d41 J.\u6570\u4f4ddp K.\u77e9\u9635\u4e58\u6cd5\u3001\u66b4\u529b L.\u5377\u79ef","title":"tag"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/#a-fruit-ninja","text":"\u7ed91e4\u4e2a\u70b9\uff0c\u6c42\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u7684\u70b9\u6700\u591a\u591a\u5c11\u4e2a \u610f\u4f1a\u4e00\u4e0b\u6982\u7387\u95ee\u9898\uff0c\u5047\u5982\u7b54\u6848\u4e3ax\uff0c\u90a3\u4e48\u5c31\u6709x/n\u7684\u6982\u7387\u53d6\u5230\u90a3\u4e2a\u7b54\u6848\u4e0a\u3002\u5f53\u7b54\u6848\u8f83\u5c0f\u65f6\uff0c\u89e3\u6cd5\u8f83\u591a\uff0c\u7b54\u6848\u8f83\u5927\u65f6\uff0c\u53d6\u70b9\u5230\u7b54\u6848\u76f4\u7ebf\u7684\u6982\u7387\u8f83\u5927\u3002\u6240\u4ee5\u968f\u673a\u53d6\u70b9\u5e76 O(n) check\u7b54\u6848\u5373\u53ef\u3002","title":"A. Fruit Ninja"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/#b-perfect-numbers","text":"\u7565","title":"B.  Perfect Numbers"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/#d-thinking-bear-magic","text":"\u7ed9\u6b63\u591a\u8fb9\u5f62\uff0c\u8f93\u5165\u8fb9\u957fa\u548c\u8fb9\u6570l\u3002\u64cd\u4f5c\u4e3a\uff1a\u628a\u6240\u6709\u8fb9\u7684\u4e2d\u70b9\u53d6\u51fa\u6765\u4f9d\u6b21\u8fde\u63a5\u5f62\u6210\u65b0\u7684\u6b63n\u8fb9\u5f62\uff0c\u6c42\u591a\u5c11\u6b21\u64cd\u4f5c\u540e\u591a\u8fb9\u5f62\u9762\u79ef\u4e0d\u8d85\u8fc7l\u3002 \u6b63\u591a\u8fb9\u5f62\u9762\u79ef\u53ef\u4ee5\u7528\u5706\u5468\u89d2\u6c42\u51fa \\frac{n*a^2}{4 * tan(pi / n)} \u6bcf\u6b21\u7f29\u5c0f\u76f8\u5f53\u4e8e\u5f62\u72b6\u4e0d\u53d8\u7f29\u5c0fa\uff0c\u6240\u4ee5\u7b97\u51faa\u7684\u6bd4\u4f8b\u5373\u53ef\uff0c\u6839\u636e\u591a\u8fb9\u5f62\u5185\u89d2\u548c\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u5199\u51fa\u6765 a' = a * sin^2(\\frac{(n-2)*pi}{2 * n}) \u7136\u540e\u7531\u4e8e\u7b54\u6848\u4e0d\u4f1a\u5f88\u5927\u76f4\u63a5for\u5c31\u53ef\u4ee5\u7b97\u51fa\u7ed3\u679c","title":"D. Thinking-Bear magic"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/#f-color-it","text":"\u7ed9\u5b9an\u00d7m\u7684\u6574\u70b9\u65b9\u683c\u56fe\uff0cQ\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u5706\u5185\u7684\u6574\u70b9\u6d82\u9ed1\uff0c\u6c42\u6700\u540e\u767d\u8272\u70b9\u7684\u4e2a\u6570\u3002 1 \\le n, m \\le 2*10^4, 1 \\le q \\le 200 \u663e\u7136\u66b4\u529b\u4e24\u79cd\u65b9\u5f0f\uff1a\u679a\u4e3e\u6bcf\u4e2a\u70b9\u662f\u5426\u5728\u67d0\u4e2aq\u4e2d\uff0c\u6216\u8005\u679a\u4e3e\u6240\u6709q\u4e2d\u7684\u70b9\u90fd\u662f O(nmq) \u7684\u590d\u6742\u5ea6 \u8003\u8651\u4e00\u7ef4\u66b4\u529b\uff0c\u53e6\u4e00\u7ef4\u7528\u5dee\u5206\u6570\u7ec4\u4f18\u5316\u5373\u53ef O(nq)","title":"F. Color it"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/#i-matrix-game","text":"\u7ed9\u5b9a\u4e00\u4e2a n\u00d7m n\u00d7m \u77e9\u9635\u4e0a\u7684\u6570\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5c06\u77e9\u9635\u4e0a\u7684\u67d0\u4e2a\u6570+1\u6216-1\uff0c\u95ee\u6700\u5c11\u64cd\u4f5c\u591a\u5c11\u6b21\uff0c\u80fd\u4f7f\u6bcf\u884c\u4e0a\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u4e14\u6bcf\u5217\u4e0a\u7684\u4e2a\u6570\u76f8\u7b49\u3002 \u8d39\u7528\u6d41\u3002\u884c\u5217\u6a21\u578b\u5efa\u56fe\uff0c\u539f\u6709\u7684\u70b9\u884c\u5217\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a mp[i][j] \uff0c\u8d39\u7528\u4e3a-1(\u5f3a\u5236\u5148\u53d6)\uff0c\u518d\u5bf9\u8be5\u884c\u8be5\u5217\u8fde\u6d41\u91cf\u4e3ainf\u7684\u8fb9\uff0c\u8d39\u7528\u4e3a1\u3002\u4ee4\u539f\u6709\u7684\u70b9\u603b\u548c\u4e3asum\uff0c\u5f53\u524d\u7684\u82b1\u8d39\u5373\u4e3asum+mcmf\u3002 \u679a\u4e3e\u6d41\u91cf\uff0c\u6bcf\u6b21\u589e\u52a0 n*m/__gcd(n,m) \uff0c\u4ece\u6e90\u70b9\u5411\u884c\u5206\u6210n\u4efd\uff0c\u5217\u5411\u6c47\u70b9\u5206\u6210m\u4efd\uff0c\u6c42\u51fa\u6700\u5927\u503c\u3002 \u6ce8\u610f\u8fd9\u91cc\u662f**\u6709\u8d1f\u5708**\u7684\u8d39\u7528\u6d41\u3002\u5e76\u4e14\u5728\u8dd1\u7684\u65f6\u5019\u6709\u4e9b\u7384\u5b66\u7684\u5e38\u6570\u4f18\u5316\u2026\u2026\uff1f","title":"I. Matrix Game"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/#j-beautiful-numbers","text":"\u6c42 1\uff5en \u4e2d\u7684\u7f8e\u4e3d\u6570\u7684\u4e2a\u6570\uff0c\u5f53\u4e00\u4e2a\u6570\u53ef\u4ee5\u6574\u9664\u5b83\u7684\u6570\u4f4d\u548c\u5373\u662f\u7f8e\u4e3d\u6570\u3002 \u663e\u7136\u6570\u4f4ddp\uff0c\u8003\u8651\u5230\u6a21\u6570\u5e76\u4e0d\u786e\u5b9a\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u6570\u4f4d\u548c\uff08 1e12 \u4ee5\u5185\u53ea\u6709 1~9*12 \u8fd9\u4e9b\u6570\u4f4d\u548c\u53ef\u80fd\u51fa\u73b0\uff09\u3002\u7136\u540e\u5c31\u662f\u6570\u4f4ddp\u89e3 1\uff5en \u4e2d\u6709\u591a\u5c11\u6a21x\u4e3a0\u4e14\u6570\u4f4d\u548c\u4e3ax\u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef\u3002 \u7531\u4e8e\u6a21\u6570\u4e0d\u540c\uff0c\u666e\u901a\u7684\u4f7f\u7528\u6570\u4f4ddp\u5e76\u4e14\u6bcf\u6b21\u6e05\u7a7a\u590d\u6742\u5ea6\u8fc7\u5927\uff0c\u7531\u4e8e\u672c\u9898\u6570\u636e\u4e0d\u90a3\u4e48\u5927\u53ef\u4ee5\u8003\u8651\u591a\u5b58\u4e00\u7ef4\u4e0d\u6e05\u7a7a\uff0c\u5373\uff1a dp[i][j][k][t] \u8868\u793a\u6a21\u6570\u3001\u548c\u90fd\u4e3ai\u65f6\uff0cj\u4f4d\u6570\uff0c\u5269\u4f59k\u7684\u548c\uff0c\u5f53\u524d\u4f59\u6570\u7684\u7b54\u6848","title":"J. Beautiful Numbers"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20ACM%20%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%8A%E6%B5%B7%E5%A4%A7%E9%83%BD%E4%BC%9A%E8%B5%9B/#k-matrix-multiplication","text":"\u7565","title":"K.  Matrix Multiplication"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20China%20Collegiate%20Programming%20Contest%20Final%20%28CCPC-Final%202018%29/","text":"Name Date Solved A B C D E F G H I J K L 2018 China Collegiate Programming Contest Final (CCPC-Final 2018) 2019/11/11 6/12 O O . . . . O . \u00d8 . O O A. Mischievous Problem Setter Link \u7b7e\u5230 B. Balance of the Force Link \u7ed9\u4e00\u7cfb\u5217\u70b9\u9ed1\u767d\u67d3\u8272\uff0c\u67d3\u6210\u9ed1\u8272/\u767d\u8272\u53ef\u4ee5\u4f7f\u8fd9\u4e2a\u70b9\u5f97\u5230\u76f8\u5e94\u7684\u6743\u503c\uff0c\u5bf9\u5176\u4e2d\u7684\u4e00\u4e9b\u70b9\u8fde\u8fb9\uff0c\u8fde\u8fb9\u7684\u4e24\u4e2a\u70b9\u989c\u8272\u4e0d\u80fd\u76f8\u540c\uff0c\u8981\u4f7f\u67d3\u8272\u540e\u6240\u6709\u70b9\u6743\u503c\u7684\u6781\u5dee\u6700\u5c0f\uff0c\u6c42\u8fd9\u4e2a\u6781\u5dee\u3002 2-SAT\u5224\u65ad\u662f\u5426\u5b58\u5728\u89e3\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u7684\u67d3\u8272\u65b9\u6848\u662f\u786e\u5b9a\u7684\uff08\u6c42\u51fa\u4e00\u4e2a\u67d3\u8272\u65b9\u6848\u540e\u53ea\u80fd\u4e0d\u53d8\u6216\u5168\u90e8\u7ffb\u8f6c\uff09\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u6709k\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u9700\u8981\u5728(min1,max1)/(min2,max2)\u4e2d\u9009\u62e9\u4e00\u79cd\uff0c\u5982\u4f55\u9009\u62e9\u4f7f\u6781\u5dee\u6700\u5c0f\u3002 \u4ee4min1<min2\uff0c\u8003\u8651\u5c06\u6bcf\u4e2a\u70b9\u5bf9min\u7684\u8f83\u5c0f\u503c\u653e\u5165set A\uff0c\u5728set B\u4e2d\u653e\u5165k\u4e2amin(max1,max2)\uff0c\u5f53\u7ecf\u8fc7\u67d0\u4e2a\u70b9\u65f6\u8ba1\u7b97\u4e0eB\u4e2d\u6700\u5927\u503c\u7684\u5dee\uff0c\u66f4\u65b0\u7b54\u6848\u3002\u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u70b9\u662fmin1\uff0c\u5728setA\u4e2d\u5220\u9664min1,\u63d2\u5165min2\uff0c\u5982\u679cmax1<max2\uff0c\u5728setB\u4e2d\u5220\u9664max1,\u63d2\u5165max2\u3002\u5982\u679c\u5f53\u524dA\u96c6\u5408\u9996\u90e8\u662fmin2\uff0c\u8bf4\u660e\u518d\u5411\u53f3\u65e0\u6cd5\u53d6\u6ee1k\u4e2a\u70b9\uff0c\u5904\u7406\u5373\u53ef\u5f97\u5230\u6700\u5927\u503c G. Pastoral Life in Stardew Valley Link \u7ed9\u4e00\u4e2a n\u00d7m n\u00d7m \u7684\u77e9\u9635\uff0c\u9009\u53d6\u4e00\u4e2a\u5b50\u77e9\u9635\uff0c\u5728\u5b50\u77e9\u9635\u4e2d\u653e\u4e00\u4e2a\u7a3b\u8349\u4eba\uff0c\u4f7f\u7a3b\u8349\u4eba\u80fd\u88ab\u653e\u5728\u5b50\u77e9\u9635\u4e2d\u7684\u4f5c\u7269\u5305\u56f4\uff0c\u6c42\u65b9\u6848\u6570\u3002 \u63a8\u53cd\u6b63\u4e5f\u4e0d\u4f1a\u63a8\u2026\u2026\u6253\u8868\u627e\u89c4\u5f8b\u4e86\u3002 I. Cockroaches Link \u7ed9m\u4e2a\u4e8c\u7ef4\u70b9\u3002\u9009\u62e9\u4e00\u4e2a\u5750\u6807\u70b9\uff0c\u5728\u5176\u540c\u884c/\u540c\u5217\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u5220\u9664\u3002\u95ee\u4e00\u6b21\u6700\u591a\u80fd\u5220\u9664\u591a\u5c11\u4e2a\u70b9\uff0c\u53ca\u5220\u9664\u6700\u591a\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff08\u5220\u9664\u7684\u70b9\u7f16\u53f7\u5168\u90e8\u76f8\u540c\u89c6\u4f5c\u540c\u4e00\u79cd\u65b9\u6848\uff09\u3002 \u6709\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a1.\u5168\u5728\u540c\u4e00\u884c/\u540c\u4e00\u5217\u53ea\u6709\u4e00\u79cd\uff1b2.\u6240\u6709\u7684\u884c\u3001\u5217\u5168\u4e0d\u76f8\u540c\uff0c\u6709n\u00d7(n-1)/2\u79cd\u65b9\u6848\u3002\u5269\u4e0b\u7684\u60c5\u51b5\u5219\u53d6\u70b9\u6570\u6700\u591a\u3001\u6b21\u591a\u7684\u884c\u548c\u5217\uff0c\u679a\u4e3e\u7b54\u6848\u5373\u53ef\u3002 K. Mr. Panda and Kakin Link \u5df2\u77e5 c,p c,p \uff0c\u6c42 X^{2^{30}+3}\u2261c\\ mod\\ p X^{2^{30}+3}\u2261c\\ mod\\ p \u6709 x^y\u2261z\\ mod \\ p x^y\u2261z\\ mod \\ p \uff0c\u53d6\u5bf9\u6570\u6709 y\u00b7lg(x)\u2261lg(z) \\ mod \\ p y\u00b7lg(x)\u2261lg(z) \\ mod \\ p \u4e24\u8fb9\u540c\u4e58inv(y)\u6709 lg(x)\u2261inv(y)\u00b7lg(z) \\ mod \\ p lg(x)\u2261inv(y)\u00b7lg(z) \\ mod \\ p \u63a8\u51fa x\u2261z^{inv(y)}\\ mod\\ p x\u2261z^{inv(y)}\\ mod\\ p \u5373 X=c^{inv({2^{30}+3})} \\ mod \\ p X=c^{inv({2^{30}+3})} \\ mod \\ p \u6240\u4ee5\u5feb\u901f\u5e42\u641e\u4e00\u4e0b\u5c31\u884c L. Ultra Weak Goldbach\u2019s Conjecture Link \u7ed9\u4f60\u4e00\u4e2a\u6570\uff0c\u628a\u5b83\u62c6\u62106\u4e2a\u7d20\u6570\u3002 n\u226411\u65e0\u89e3\uff0c\u5426\u5219n\u662f\u5947\u6570\u5219\u628a\u5b83\u62c6\u62102+2+2+3+\u5076\u6570\uff0cn\u662f\u5076\u6570\u5219\u628a\u5b83\u62c6\u62102+2+2+2+\u5076\u6570\uff0c\u66b4\u529b\u5206\u89e3\u5076\u6570\u4e3a\u4e24\u4e2a\u7d20\u6570\u5373\u53ef\u3002","title":"2018 China Collegiate Programming Contest Final (CCPC Final 2018)"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20China%20Collegiate%20Programming%20Contest%20Final%20%28CCPC-Final%202018%29/#a-mischievous-problem-setter","text":"\u7b7e\u5230","title":"A. Mischievous Problem Setter"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20China%20Collegiate%20Programming%20Contest%20Final%20%28CCPC-Final%202018%29/#b-balance-of-the-force","text":"\u7ed9\u4e00\u7cfb\u5217\u70b9\u9ed1\u767d\u67d3\u8272\uff0c\u67d3\u6210\u9ed1\u8272/\u767d\u8272\u53ef\u4ee5\u4f7f\u8fd9\u4e2a\u70b9\u5f97\u5230\u76f8\u5e94\u7684\u6743\u503c\uff0c\u5bf9\u5176\u4e2d\u7684\u4e00\u4e9b\u70b9\u8fde\u8fb9\uff0c\u8fde\u8fb9\u7684\u4e24\u4e2a\u70b9\u989c\u8272\u4e0d\u80fd\u76f8\u540c\uff0c\u8981\u4f7f\u67d3\u8272\u540e\u6240\u6709\u70b9\u6743\u503c\u7684\u6781\u5dee\u6700\u5c0f\uff0c\u6c42\u8fd9\u4e2a\u6781\u5dee\u3002 2-SAT\u5224\u65ad\u662f\u5426\u5b58\u5728\u89e3\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u7684\u67d3\u8272\u65b9\u6848\u662f\u786e\u5b9a\u7684\uff08\u6c42\u51fa\u4e00\u4e2a\u67d3\u8272\u65b9\u6848\u540e\u53ea\u80fd\u4e0d\u53d8\u6216\u5168\u90e8\u7ffb\u8f6c\uff09\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u6709k\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u9700\u8981\u5728(min1,max1)/(min2,max2)\u4e2d\u9009\u62e9\u4e00\u79cd\uff0c\u5982\u4f55\u9009\u62e9\u4f7f\u6781\u5dee\u6700\u5c0f\u3002 \u4ee4min1<min2\uff0c\u8003\u8651\u5c06\u6bcf\u4e2a\u70b9\u5bf9min\u7684\u8f83\u5c0f\u503c\u653e\u5165set A\uff0c\u5728set B\u4e2d\u653e\u5165k\u4e2amin(max1,max2)\uff0c\u5f53\u7ecf\u8fc7\u67d0\u4e2a\u70b9\u65f6\u8ba1\u7b97\u4e0eB\u4e2d\u6700\u5927\u503c\u7684\u5dee\uff0c\u66f4\u65b0\u7b54\u6848\u3002\u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u70b9\u662fmin1\uff0c\u5728setA\u4e2d\u5220\u9664min1,\u63d2\u5165min2\uff0c\u5982\u679cmax1<max2\uff0c\u5728setB\u4e2d\u5220\u9664max1,\u63d2\u5165max2\u3002\u5982\u679c\u5f53\u524dA\u96c6\u5408\u9996\u90e8\u662fmin2\uff0c\u8bf4\u660e\u518d\u5411\u53f3\u65e0\u6cd5\u53d6\u6ee1k\u4e2a\u70b9\uff0c\u5904\u7406\u5373\u53ef\u5f97\u5230\u6700\u5927\u503c","title":"B. Balance of the Force"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20China%20Collegiate%20Programming%20Contest%20Final%20%28CCPC-Final%202018%29/#g-pastoral-life-in-stardew-valley","text":"\u7ed9\u4e00\u4e2a n\u00d7m n\u00d7m \u7684\u77e9\u9635\uff0c\u9009\u53d6\u4e00\u4e2a\u5b50\u77e9\u9635\uff0c\u5728\u5b50\u77e9\u9635\u4e2d\u653e\u4e00\u4e2a\u7a3b\u8349\u4eba\uff0c\u4f7f\u7a3b\u8349\u4eba\u80fd\u88ab\u653e\u5728\u5b50\u77e9\u9635\u4e2d\u7684\u4f5c\u7269\u5305\u56f4\uff0c\u6c42\u65b9\u6848\u6570\u3002 \u63a8\u53cd\u6b63\u4e5f\u4e0d\u4f1a\u63a8\u2026\u2026\u6253\u8868\u627e\u89c4\u5f8b\u4e86\u3002","title":"G. Pastoral Life in Stardew Valley"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20China%20Collegiate%20Programming%20Contest%20Final%20%28CCPC-Final%202018%29/#i-cockroaches","text":"\u7ed9m\u4e2a\u4e8c\u7ef4\u70b9\u3002\u9009\u62e9\u4e00\u4e2a\u5750\u6807\u70b9\uff0c\u5728\u5176\u540c\u884c/\u540c\u5217\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u5220\u9664\u3002\u95ee\u4e00\u6b21\u6700\u591a\u80fd\u5220\u9664\u591a\u5c11\u4e2a\u70b9\uff0c\u53ca\u5220\u9664\u6700\u591a\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff08\u5220\u9664\u7684\u70b9\u7f16\u53f7\u5168\u90e8\u76f8\u540c\u89c6\u4f5c\u540c\u4e00\u79cd\u65b9\u6848\uff09\u3002 \u6709\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a1.\u5168\u5728\u540c\u4e00\u884c/\u540c\u4e00\u5217\u53ea\u6709\u4e00\u79cd\uff1b2.\u6240\u6709\u7684\u884c\u3001\u5217\u5168\u4e0d\u76f8\u540c\uff0c\u6709n\u00d7(n-1)/2\u79cd\u65b9\u6848\u3002\u5269\u4e0b\u7684\u60c5\u51b5\u5219\u53d6\u70b9\u6570\u6700\u591a\u3001\u6b21\u591a\u7684\u884c\u548c\u5217\uff0c\u679a\u4e3e\u7b54\u6848\u5373\u53ef\u3002","title":"I. Cockroaches"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20China%20Collegiate%20Programming%20Contest%20Final%20%28CCPC-Final%202018%29/#k-mr-panda-and-kakin","text":"\u5df2\u77e5 c,p c,p \uff0c\u6c42 X^{2^{30}+3}\u2261c\\ mod\\ p X^{2^{30}+3}\u2261c\\ mod\\ p \u6709 x^y\u2261z\\ mod \\ p x^y\u2261z\\ mod \\ p \uff0c\u53d6\u5bf9\u6570\u6709 y\u00b7lg(x)\u2261lg(z) \\ mod \\ p y\u00b7lg(x)\u2261lg(z) \\ mod \\ p \u4e24\u8fb9\u540c\u4e58inv(y)\u6709 lg(x)\u2261inv(y)\u00b7lg(z) \\ mod \\ p lg(x)\u2261inv(y)\u00b7lg(z) \\ mod \\ p \u63a8\u51fa x\u2261z^{inv(y)}\\ mod\\ p x\u2261z^{inv(y)}\\ mod\\ p \u5373 X=c^{inv({2^{30}+3})} \\ mod \\ p X=c^{inv({2^{30}+3})} \\ mod \\ p \u6240\u4ee5\u5feb\u901f\u5e42\u641e\u4e00\u4e0b\u5c31\u884c","title":"K. Mr. Panda and Kakin"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018%20China%20Collegiate%20Programming%20Contest%20Final%20%28CCPC-Final%202018%29/#l-ultra-weak-goldbachs-conjecture","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\uff0c\u628a\u5b83\u62c6\u62106\u4e2a\u7d20\u6570\u3002 n\u226411\u65e0\u89e3\uff0c\u5426\u5219n\u662f\u5947\u6570\u5219\u628a\u5b83\u62c6\u62102+2+2+3+\u5076\u6570\uff0cn\u662f\u5076\u6570\u5219\u628a\u5b83\u62c6\u62102+2+2+2+\u5076\u6570\uff0c\u66b4\u529b\u5206\u89e3\u5076\u6570\u4e3a\u4e24\u4e2a\u7d20\u6570\u5373\u53ef\u3002","title":"L. Ultra Weak Goldbach's Conjecture"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018-2019%20ACM-ICPC%2C%20Asia%20East%20Continent%20Finals/","text":"Name Date Solved A B C D E F G H I J K L 2018-2019 ACM-ICPC, Asia East Continent Finals 2019/10/8 6/12 . . \u00d8 O . O . . O \u00d8 . O C. Heretical \u2026 M\u00f6bius Link \u7ed9\u51fa\u4e00\u4e2a20\u00d710\u768401\u4e32\uff0c\u4e3a\u4e00\u6bb5\u8fde\u7eed\u7684Mobius\u51fd\u6570\u7684\u7edd\u5bf9\u503c\uff0c\u6c42\u8fd9\u6bb5\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\uff0c\u65e0\u89e3\u8f93\u51fa-1. \u9898\u89e3\uff1a\u6839\u636e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u53ef\u77e5\u6240\u6709\u5e73\u65b9\u6570\u7684\u500d\u6570\u7684\u503c\u90fd\u662f0\uff0c\u73b0\u5728\u53f3\u8fde\u7eed\u7684200\u4e2a\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u7edd\u5bf9\u503c\uff0c\u82e5\u5408\u6cd5\u53ef\u4ee5\u6c42\u51fa4\u30019\u300116\u300125\u300136\u300149\u300164\u300181\u3001100\u3001121\u3001144\u3001169\u3001196\u7684\u5927\u81f4\u4f4d\u7f6e\uff0c\u5373\u6c42\u51fa\u7b54\u6848x\u5bf9\u8fd9\u4e9b\u6570\u53d6\u6a21\u5f97\u5230\u7684\u503c\u7684\u5927\u81f4\u60c5\u51b5\uff08\u505adfs\u5224\u65ad\u5373\u53ef\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u5355\u70b9\u6c42\u51fa\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u503c\u505a\u5339\u914d\u6216\u8005\u7528\u4efb\u610f\u4f4d\u7f6e\u5f00\u5934\u7684\u7ebf\u6027\u7b5b\u5373\u53ef\u3002\u6ce8\u610f\u6b64\u9898\u9700\u8981\u526a\u679d\uff0c\u53ef\u4ee5\u53d1\u73b01e9\u4ee5\u5185200\u4e2a\u8fde\u7eed\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u4e0d\u53ef\u80fd\u51fa\u73b0100\u4e2a\u4ee5\u4e0a\u76840\uff0c\u5177\u4f53\u600e\u4e48\u7b97\u7684\u6211\u4e5f\u4e0d\u77e5\u9053\u3002 D. Deja vu of \u2026 Go Players Link \u7b7e\u5230 F. Interstellar \u2026 Fantasy Link I. Misunderstood \u2026 Missing Link \u6253\u602a\u517d\uff0c\u521d\u59cb\u65f6\u6709A\u7684\u653b\u51fb\u529b\uff0c\u6bcf\u8f6e\u589e\u957fD\uff0c\u521d\u59cb\u65f6\u4e3a0\uff0c\u6709n\u8f6e\uff0c\u6bcf\u8f6e\u5728\u4e09\u79cd\u64cd\u4f5c\u9009\u62e9\u4e00\u79cd\uff1a \u2460\u53d1\u8d77\u653b\u51fb\uff0c\u4ea7\u751fA+a[i]\u7684\u4f24\u5bb3 \u2461D=D+b[i] \u2462\u6c38\u4e45\u589e\u52a0\u653b\u51fb\u529bA=A+c[i] \u6c42\u6700\u5927\u53ef\u80fd\u4ea7\u751f\u7684\u603b\u4f24\u5bb3\u3002 \u9898\u89e3\uff1a\u5012\u7740DP\uff0c\u7edf\u8ba1i-n\u4e00\u5171\u8fdb\u884c\u7684\u653b\u51fb\u6b21\u6570cnt\u4ee5\u53ca\u4e4b\u540e\u6240\u6709\u653b\u51fb\u5230\u5f53\u524d\u70b9\u7684\u8ddd\u79bb\u4e4b\u548csum\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u591a\u4ea7\u751fa[i]\u7684\u4f24\u5bb3\uff1b\u5982\u679c\u9009\u62e92\uff0c\u6bcf\u4e00\u6b21\u653b\u51fbj\u7684\u4f24\u5bb3\u90fd\u4f1a\u589e\u52a0(j-i)\u00b7b[i]\uff1b\u5982\u679c\u9009\u62e93\uff0c\u6bcf\u4e00\u6b21\u653b\u51fb\u7684\u4f24\u5bb3\u589e\u52a0c[i]\u3002 \u8bbe\u7f6e\u72b6\u6001 dp[n][cnt][sum] \uff0c\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt - 1][sum - cnt + 1]+a[i]) dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt][sum - cnt] + b[i] * sum; dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt][sum - cnt] + c[i] * cnt; \u5373\u53ef\u6c42\u89e3\u3002 J. Philosophical \u2026 Balance Link \u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5148\u624b\u7ed9\u4e32\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u8d4b\u4e00\u4e2a\u503c p_i p_i \u5e76\u4fdd\u8bc1 p_i \\ge 0, \\sum_{i=1}^n p_i = 1 p_i \\ge 0, \\sum_{i=1}^n p_i = 1 \uff0c\u540e\u624b\u9009\u62e9\u4e00\u4e2a\u5b50\u4e32 j j \u3002\u6709\u5f0f\u5b50 \\sum_{k=1}^n p_k \\mathrm{lcp}(s_k,s_j) \\sum_{k=1}^n p_k \\mathrm{lcp}(s_k,s_j) \uff0c\u5148\u624b\u60f3\u4f7f\u5176\u5c3d\u53ef\u80fd\u5927\uff0c\u540e\u624b\u60f3\u4f7f\u5176\u5c3d\u53ef\u80fd\u5c0f\u3002\u5148\u624b\u8981\u5982\u4f55\u64cd\u4f5c\u624d\u80fd\u4f7f\u8fd9\u4e2a\u503c\u6700\u5927\uff0c\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5c06\u539f\u4e32\u53cd\u5411\uff0c\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u5bf9\u4e8e\u53cd\u4e32\u7684\u540e\u7f00\u6811\uff0c\u6b64\u65f6\u540e\u624b\u5982\u679c\u9009\u62e9\u67d0\u4e2a\u5b50\u6811 u u \u4e2d\u9009\u62e9\u4e32 s_j s_j \uff0c\u5728 p p \u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u8981\u4f7flcp\u6700\u5c0f\uff0c\u663e\u7136\u6700\u4f18\u89e3\u4e3a\u9009\u62e9\u5b50\u6811\u7684\u6839\u3002 \u5728\u540e\u7f00\u81ea\u52a8\u673a\u7684suffix link\u6811\u4e2d\uff0c\u5982\u679c\u5f53\u524dstate\u4e3anp\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u53d6\u5f53\u524d\u8282\u70b9\u7684len\u4f5c\u4e3a\u7b54\u6848\u3002\u5426\u5219\u9700\u8981\u5408\u5e76\u82e5\u5e72\u5b50\u6811\u7684\u7b54\u6848\uff0c\u7b54\u6848\u4e3a\u4e00\u4e2a\u7eb3\u4ec0\u5747\u8861\u7684\u6a21\u578b\uff0c\u5373\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684\u8d21\u732e\u76f8\u7b49\u3002\u90a3\u4e48\u8be5\u70b9\u7684\u8d21\u732e\u4e3a len[u]+x len[u]+x \uff0c\u5176\u4e2d$len[u])\u4e00\u5b9a\u4f1a\u53d6\u5230\uff0c x x \u4e3a\u7eb3\u4ec0\u5747\u8861\u4e0b\u53ef\u4ee5\u53d6\u5230\u7684\u6700\u5927\u503c\uff0c\u63a8\u4e00\u4e0b\u5b50\u6811\u7684 x x \u5f97\u5230 x = \\frac{1}{\\sum \\frac{1}{f_i}} x = \\frac{1}{\\sum \\frac{1}{f_i}} \uff0c\u90a3\u4e48\u5728suffix link\u6811\u4e0adfs\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002 L. Eventual \u2026 Journey Link \u6709 n \u4e2a\u8f66\u7ad9\uff0c\u76f8\u4e92\u4e4b\u95f4\u6709 m \u6761\u516c\u5171\u7684\u53cc\u5411\u94c1\u8def\u8fde\u901a\uff0c\u8f66\u7ad9\u5206\u6210 0,1 \u4e24\u79cd\u7c7b\u522b\uff0c\u4efb\u610f\u4e24\u4e2a 0 \u7c7b\u8f66\u7ad9\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u79c1\u6709\u7684\u94c1\u8def\u76f8\u4e92\u8fde\u63a5\uff0c1 \u7c7b\u8f66\u7ad9\u4e5f\u7c7b\u4f3c\u3002 \u73b0\u5728\uff0c\u4ece\u6bcf\u8f66\u7ad9 i \u51fa\u53d1\uff0c\u5230\u8f66\u7ad9 j \u7684\u6700\u5c11\u8d70\u8fc7\u7684\u94c1\u8def\u6570\u76ee\u4e3a D(u,v)\uff0c\u8981\u6c42\u4f60\u5bf9\u6bcf\u4e2a\u56fa\u5b9a\u7684\u8f66\u7ad9 i\uff0c\u90fd\u8f93\u51fa\u5230\u5176\u4ed6\u6240\u6709\u8f66\u7ad9\u7684 D(i,j) \u4e4b\u548c\u3002 \u9898\u89e3\uff1a\u5206\u7c7b\u8ba8\u8bba\u679a\u4e3e\u72b6\u6001\u5373\u53ef\u3002","title":"2018 2019 ACM ICPC, Asia East Continent Finals"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018-2019%20ACM-ICPC%2C%20Asia%20East%20Continent%20Finals/#c-heretical-mobius","text":"\u7ed9\u51fa\u4e00\u4e2a20\u00d710\u768401\u4e32\uff0c\u4e3a\u4e00\u6bb5\u8fde\u7eed\u7684Mobius\u51fd\u6570\u7684\u7edd\u5bf9\u503c\uff0c\u6c42\u8fd9\u6bb5\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\uff0c\u65e0\u89e3\u8f93\u51fa-1. \u9898\u89e3\uff1a\u6839\u636e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u53ef\u77e5\u6240\u6709\u5e73\u65b9\u6570\u7684\u500d\u6570\u7684\u503c\u90fd\u662f0\uff0c\u73b0\u5728\u53f3\u8fde\u7eed\u7684200\u4e2a\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u7edd\u5bf9\u503c\uff0c\u82e5\u5408\u6cd5\u53ef\u4ee5\u6c42\u51fa4\u30019\u300116\u300125\u300136\u300149\u300164\u300181\u3001100\u3001121\u3001144\u3001169\u3001196\u7684\u5927\u81f4\u4f4d\u7f6e\uff0c\u5373\u6c42\u51fa\u7b54\u6848x\u5bf9\u8fd9\u4e9b\u6570\u53d6\u6a21\u5f97\u5230\u7684\u503c\u7684\u5927\u81f4\u60c5\u51b5\uff08\u505adfs\u5224\u65ad\u5373\u53ef\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u5355\u70b9\u6c42\u51fa\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u503c\u505a\u5339\u914d\u6216\u8005\u7528\u4efb\u610f\u4f4d\u7f6e\u5f00\u5934\u7684\u7ebf\u6027\u7b5b\u5373\u53ef\u3002\u6ce8\u610f\u6b64\u9898\u9700\u8981\u526a\u679d\uff0c\u53ef\u4ee5\u53d1\u73b01e9\u4ee5\u5185200\u4e2a\u8fde\u7eed\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u4e0d\u53ef\u80fd\u51fa\u73b0100\u4e2a\u4ee5\u4e0a\u76840\uff0c\u5177\u4f53\u600e\u4e48\u7b97\u7684\u6211\u4e5f\u4e0d\u77e5\u9053\u3002","title":"C. Heretical \u2026 M\u00f6bius"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018-2019%20ACM-ICPC%2C%20Asia%20East%20Continent%20Finals/#d-deja-vu-of-go-players","text":"\u7b7e\u5230","title":"D. Deja vu of \u2026 Go Players"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018-2019%20ACM-ICPC%2C%20Asia%20East%20Continent%20Finals/#f-interstellar-fantasy","text":"","title":"F. Interstellar \u2026 Fantasy"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018-2019%20ACM-ICPC%2C%20Asia%20East%20Continent%20Finals/#i-misunderstood-missing","text":"\u6253\u602a\u517d\uff0c\u521d\u59cb\u65f6\u6709A\u7684\u653b\u51fb\u529b\uff0c\u6bcf\u8f6e\u589e\u957fD\uff0c\u521d\u59cb\u65f6\u4e3a0\uff0c\u6709n\u8f6e\uff0c\u6bcf\u8f6e\u5728\u4e09\u79cd\u64cd\u4f5c\u9009\u62e9\u4e00\u79cd\uff1a \u2460\u53d1\u8d77\u653b\u51fb\uff0c\u4ea7\u751fA+a[i]\u7684\u4f24\u5bb3 \u2461D=D+b[i] \u2462\u6c38\u4e45\u589e\u52a0\u653b\u51fb\u529bA=A+c[i] \u6c42\u6700\u5927\u53ef\u80fd\u4ea7\u751f\u7684\u603b\u4f24\u5bb3\u3002 \u9898\u89e3\uff1a\u5012\u7740DP\uff0c\u7edf\u8ba1i-n\u4e00\u5171\u8fdb\u884c\u7684\u653b\u51fb\u6b21\u6570cnt\u4ee5\u53ca\u4e4b\u540e\u6240\u6709\u653b\u51fb\u5230\u5f53\u524d\u70b9\u7684\u8ddd\u79bb\u4e4b\u548csum\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u591a\u4ea7\u751fa[i]\u7684\u4f24\u5bb3\uff1b\u5982\u679c\u9009\u62e92\uff0c\u6bcf\u4e00\u6b21\u653b\u51fbj\u7684\u4f24\u5bb3\u90fd\u4f1a\u589e\u52a0(j-i)\u00b7b[i]\uff1b\u5982\u679c\u9009\u62e93\uff0c\u6bcf\u4e00\u6b21\u653b\u51fb\u7684\u4f24\u5bb3\u589e\u52a0c[i]\u3002 \u8bbe\u7f6e\u72b6\u6001 dp[n][cnt][sum] \uff0c\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt - 1][sum - cnt + 1]+a[i]) dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt][sum - cnt] + b[i] * sum; dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt][sum - cnt] + c[i] * cnt; \u5373\u53ef\u6c42\u89e3\u3002","title":"I. Misunderstood \u2026 Missing"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018-2019%20ACM-ICPC%2C%20Asia%20East%20Continent%20Finals/#j-philosophical-balance","text":"\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5148\u624b\u7ed9\u4e32\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u8d4b\u4e00\u4e2a\u503c p_i p_i \u5e76\u4fdd\u8bc1 p_i \\ge 0, \\sum_{i=1}^n p_i = 1 p_i \\ge 0, \\sum_{i=1}^n p_i = 1 \uff0c\u540e\u624b\u9009\u62e9\u4e00\u4e2a\u5b50\u4e32 j j \u3002\u6709\u5f0f\u5b50 \\sum_{k=1}^n p_k \\mathrm{lcp}(s_k,s_j) \\sum_{k=1}^n p_k \\mathrm{lcp}(s_k,s_j) \uff0c\u5148\u624b\u60f3\u4f7f\u5176\u5c3d\u53ef\u80fd\u5927\uff0c\u540e\u624b\u60f3\u4f7f\u5176\u5c3d\u53ef\u80fd\u5c0f\u3002\u5148\u624b\u8981\u5982\u4f55\u64cd\u4f5c\u624d\u80fd\u4f7f\u8fd9\u4e2a\u503c\u6700\u5927\uff0c\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5c06\u539f\u4e32\u53cd\u5411\uff0c\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u5bf9\u4e8e\u53cd\u4e32\u7684\u540e\u7f00\u6811\uff0c\u6b64\u65f6\u540e\u624b\u5982\u679c\u9009\u62e9\u67d0\u4e2a\u5b50\u6811 u u \u4e2d\u9009\u62e9\u4e32 s_j s_j \uff0c\u5728 p p \u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u8981\u4f7flcp\u6700\u5c0f\uff0c\u663e\u7136\u6700\u4f18\u89e3\u4e3a\u9009\u62e9\u5b50\u6811\u7684\u6839\u3002 \u5728\u540e\u7f00\u81ea\u52a8\u673a\u7684suffix link\u6811\u4e2d\uff0c\u5982\u679c\u5f53\u524dstate\u4e3anp\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u53d6\u5f53\u524d\u8282\u70b9\u7684len\u4f5c\u4e3a\u7b54\u6848\u3002\u5426\u5219\u9700\u8981\u5408\u5e76\u82e5\u5e72\u5b50\u6811\u7684\u7b54\u6848\uff0c\u7b54\u6848\u4e3a\u4e00\u4e2a\u7eb3\u4ec0\u5747\u8861\u7684\u6a21\u578b\uff0c\u5373\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684\u8d21\u732e\u76f8\u7b49\u3002\u90a3\u4e48\u8be5\u70b9\u7684\u8d21\u732e\u4e3a len[u]+x len[u]+x \uff0c\u5176\u4e2d$len[u])\u4e00\u5b9a\u4f1a\u53d6\u5230\uff0c x x \u4e3a\u7eb3\u4ec0\u5747\u8861\u4e0b\u53ef\u4ee5\u53d6\u5230\u7684\u6700\u5927\u503c\uff0c\u63a8\u4e00\u4e0b\u5b50\u6811\u7684 x x \u5f97\u5230 x = \\frac{1}{\\sum \\frac{1}{f_i}} x = \\frac{1}{\\sum \\frac{1}{f_i}} \uff0c\u90a3\u4e48\u5728suffix link\u6811\u4e0adfs\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002","title":"J. Philosophical \u2026 Balance"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2018-2019%20ACM-ICPC%2C%20Asia%20East%20Continent%20Finals/#l-eventual-journey","text":"\u6709 n \u4e2a\u8f66\u7ad9\uff0c\u76f8\u4e92\u4e4b\u95f4\u6709 m \u6761\u516c\u5171\u7684\u53cc\u5411\u94c1\u8def\u8fde\u901a\uff0c\u8f66\u7ad9\u5206\u6210 0,1 \u4e24\u79cd\u7c7b\u522b\uff0c\u4efb\u610f\u4e24\u4e2a 0 \u7c7b\u8f66\u7ad9\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u79c1\u6709\u7684\u94c1\u8def\u76f8\u4e92\u8fde\u63a5\uff0c1 \u7c7b\u8f66\u7ad9\u4e5f\u7c7b\u4f3c\u3002 \u73b0\u5728\uff0c\u4ece\u6bcf\u8f66\u7ad9 i \u51fa\u53d1\uff0c\u5230\u8f66\u7ad9 j \u7684\u6700\u5c11\u8d70\u8fc7\u7684\u94c1\u8def\u6570\u76ee\u4e3a D(u,v)\uff0c\u8981\u6c42\u4f60\u5bf9\u6bcf\u4e2a\u56fa\u5b9a\u7684\u8f66\u7ad9 i\uff0c\u90fd\u8f93\u51fa\u5230\u5176\u4ed6\u6240\u6709\u8f66\u7ad9\u7684 D(i,j) \u4e4b\u548c\u3002 \u9898\u89e3\uff1a\u5206\u7c7b\u8ba8\u8bba\u679a\u4e3e\u72b6\u6001\u5373\u53ef\u3002","title":"L. Eventual \u2026 Journey"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/","text":"Name Date Solved A B C D E F G H I J K L 2019-2020 ICPC, Asia Jakarta Regional Contest 2019/10/31 9/12 O . O \u00d8 O \u00d8 O O . \u00d8 O \u00d8 A. Copying Homework Link \u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217a\uff0c\u8f93\u51fa\u5e8f\u5217b\u4f7f \\sum_{i=1}^n{|b_i-a_i|}\u2265n \\sum_{i=1}^n{|b_i-a_i|}\u2265n \u3002 \u8f93\u51fan-a[i]\u5373\u53ef\u3002 C. Even Path Link \u7ed9\u5b9a\u4e00\u4e2a\u7f51\u683c\uff0c\u70b9(i,j)\u7684\u503c\u4e3aR[i]+c[j]\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4ece (sx,sy) (sx,sy) \u8d70\u5230 (tx,ty) (tx,ty) \u7684\u5168\u4e3a\u5947\u6570\u7684\u8def\u5f84\u3002 \u5224\u65adsx-tx\uff0csy-ty\u7684R,C\u503c\u662f\u5426\u540c\u65f6\u5168\u4e3a\u5947\u6570\u6216\u8005\u5168\u4e3a\u5076\u6570\uff0c\u524d\u7f00\u548c\u641e\u4e00\u4e0b\u5c31\u597d\u3002 D. Find String in a Grid Link \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u77e9\u9635\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e00\u4e2a\u4e32\uff0c\u95ee\u5728\u77e9\u9635\u4e2d\u9009\u4efb\u610f\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u9996\u5148\u5411\u53f3\u8d70\u518d\u5411\u4e0b\u8d70\uff0c\u80fd\u627e\u5230\u591a\u5c11\u4e2a\u67e5\u8be2\u4e32\u3002 \u9898\u89e3\uff1a\u5c06\u6bcf\u4e2a\u67e5\u8be2\u4e32\u5207\u6210\u4e24\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206\u4e0e\u884c\u5339\u914d\uff0c\u540e\u534a\u90e8\u5206\u4e0e\u5217\u5339\u914d\uff0c\u5b57\u7b26\u77e9\u9635\u4e2d\u5982\u679c\u6709\u67d0\u4e2a\u70b9\u540c\u65f6\u4f5c\u4e3a\u5339\u914d\u7684\u884c\u7ed3\u5c3e\u548c\u5217\u5f00\u5934\uff0c\u5219\u8ba1\u7b97\u4e00\u6b21\u8d21\u732e\u3002 \u5c06\u884c\u4e32H\u548c\u5217\u4e32V\u5206\u522b\u5efa\u7acb\u4e00\u4e2aSA\uff0c\u53ef\u4ee5\u5f97\u5230SA\u4e2d\u7684\u4e00\u4e2a\u533a\u95f4(l,r)\u6ee1\u8db3 lcp(x,y)>=len(x) \uff0c\u5728\u5efa\u4e32\u7684\u65f6\u5019\u628a\u67e5\u8be2\u4e32\u4e5f\u52a0\u5165SA\u7684\u4e32\u4ee5\u786e\u5b9a\u4f4d\u7f6e\uff0c\u884c\u4e32\u9700\u8981\u53cd\u5411\uff08\u56e0\u4e3a\u67e5\u8be2\u7684\u662f\u516c\u5171\u540e\u7f00\uff09\uff0c\u4e8c\u5206\u627e\u51fa\u884c\u548c\u5217\u7684\u533a\u95f4(h_l,h_r),(v_l,v_r)\uff0c\u5982\u679c\u6709\u5b57\u7b26\u77e9\u9635\u4e0a\u7684\u70b9\u5728SA\u4e2d\u7684\u4f4d\u7f6e(pos_h,pos_v)\u6ee1\u8db3 h_l\u2264pos_h\u2264h_r h_l\u2264pos_h\u2264h_r \u4e14 v_l\u2264pos_v\u2264v_r v_l\u2264pos_v\u2264v_r \uff0c\u5219\u8ba1\u7b97\u4e00\u6b21\u5b83\u5bf9\u67e5\u8be2\u4e32\u7684\u8d21\u732e\u3002 \u8003\u8651\u4e8c\u7ef4\u6570\u70b9\uff0c\u6c42\u51fa\u6bcf\u4e2a\u67e5\u8be2\u4e32\u6bcf\u4e2a\u70b9\u7684\u884c\u5217\u533a\u95f4\uff0c\u6c42\u5757\u5185\u7684\u70b9\u6570\u548c\u5373\u53ef\u3002 E. Songwriter Link \u5df2\u77e5\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u548c\u4e0a\u4e00\u4e2a\u503c\u7684\u5173\u7cfb\uff08\u4e0a\u5347/\u4e0b\u964d/\u4e0d\u53d8\uff09\uff0c\u4e0a\u5347/\u4e0b\u964d\u7684\u8303\u56f4\u4e3a[1,k]\uff0c\u8981\u6c42\u5e8f\u5217\u7684\u6240\u6709\u503c\u90fd\u5728[l,r]\u533a\u95f4\u5185\uff0c\u6784\u9020\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5408\u6cd5\u5e8f\u5217\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8f93\u51fa-1\u3002 \u4ece\u5012\u63a8\u6c42\u51fa\u6bcf\u4e2a\u503c\u7684\u533a\u95f4\u8303\u56f4\uff0c\u5982\u679c\u6700\u5927\u503c\u5c0f\u4e8el\u6216\u6700\u5c0f\u503c\u5927\u4e8er\u5219\u65e0\u89e3\uff0c\u5426\u5219\u9012\u63a8\u6784\u9020\u5e8f\u5217\u5e76\u4f7f\u6bcf\u4e2a\u503c\u5c3d\u53ef\u80fd\u5c0f\u3002 F. Regular Forestation Link \u7ed9\u4e00\u68f5\u6811\uff0c\u6c42\u53bb\u6389\u4e00\u4e2a\u70b9\u662f\u7684\u5269\u4f59\u7684\u68ee\u6797\u4e2d\u7684\u65e0\u6839\u6811\u5168\u90e8\u540c\u6784\uff0c\u6700\u5927\u7684\u540c\u6784\u4e2a\u6570\u3002 \u663e\u7136\uff0c\u53ea\u6709\u5f53\u8fd9\u68f5\u6811\u4ec5\u6709\u4e00\u4e2a\u91cd\u5fc3\u4e14\u5b83\u7684\u5b50\u6811\u5927\u5c0f\u90fd\u76f8\u7b49\u65f6\u624d\u53ef\u80fd\u6709\u89e3\uff0c\u7136\u540e\u5224\u65e0\u6839\u6811\u540c\u6784\u540e\u76f4\u63a5\u8f93\u51fa\u91cd\u5fc3\u7684\u5ea6\u6570\u5373\u53ef\u3002 G. Performance Review Link \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u505am\u6b21\u4fee\u6539\uff0c\u7b2ci\u6b21\u4fee\u6539\u7ed9\u51fa\u4e00\u4e2a\u5e8f\u5217 a \u5c06\u524dk\u4e2a\u5c0f\u7684\u66ff\u6362\u4e3a a[i][0],a[i][1],a[i][k-1] \u8fd9\u4e9b\u6570\u5b57\uff0c\u95eem\u6b21\u4fee\u6539\u540e\u521d\u59cb\u7684\u7b2c1\u4e2a\u4eba\u662f\u5426\u4ecd\u5728\u5e8f\u5217\u4e2d\u3002 q\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u4fee\u6539\u7b2ci\u6b21\u4fee\u6539\u7684\u7b2cj\u4e2a\u503c\uff0c\u5c06\u5176\u4fee\u6539\u4e3ax\uff0c\u5e76\u56de\u7b54\u8be2\u95ee\u3002 \u8bb0\u5f55\u7b2c1\u4e2a\u4eba\u5728\u7b2ci\u6b21\u4fee\u6539\u540e\u7684rank\uff0c\u663e\u7136\u5bf9\u4e8eq\u6b21\u4fee\u6539\u6700\u591a\u53ea\u4f1a\u6539\u53d8\u4e00\u4f4d\uff0c\u4e5f\u5c31\u662f\u4f7f (j,n) \u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u503c+1\u6216-1\uff0c\u4fee\u6539\u540e\u5224\u65ad(1,n)\u7684rank\u662f\u5426\u90fd>0\u5373\u53ef\u3002 H. Twin Buildings Link \u7ed9\u5b9an\u5757\u77e9\u5f62\uff0c\u9009\u62e9\u4e00\u5757\u6216\u4e24\u5757\uff0c\u5e76\u5728\u5176\u4e2d\u653e\u5165\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5757\u77e9\u5f62\uff0c\u95ee\u653e\u5165\u7684\u77e9\u5f62\u7684\u9762\u79ef\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u5757\u6216\u4e24\u5757\u77e9\u5f62\u4e2d\u653e\u5165\uff0c\u5982\u679c\u662f\u4e00\u5757\u5c31\u662f\u77e9\u5f62\u9762\u79ef/2\uff0c\u5982\u679c\u662f\u4e24\u5757\uff0c\u9996\u5148\u4f7f\u6bcf\u4e2a\u77e9\u5f62\u7684L\u5927\u4e8eW\uff0c\u6309\u7167W\u964d\u5e8f\u6392\u5e8f\uff0c\u8bb0\u5f55L\u7684\u524d\u7f00\u6700\u5927\u503cpreL\uff0c\u904d\u5386\uff0c\u5f53\u524d\u77e9\u5f62\u7684\u6700\u5927\u8d21\u732e\u5373\u4e3a min(preL, a[i].L)*a[i].W \u3002 J. Tiling Terrace Link \u7ed9\u4e00\u4e2a01\u4e32\uff0c\u7ed9\u4e09\u79cd\u5b50\u4e32\u5206\u522b\u6709abc\u6743\u503c\uff080\\00\\010\uff09\uff0c\u8981\u6c42\u628a\u539f\u4e32\u5206\u5272\u6210\u591a\u4e2a\u8fd9\u4e09\u79cd\u4e32\uff0c\u5176\u4e2da\u4e32\u6700\u591a\u53ea\u80fd\u6709k\u4e2a\uff0c\u6c42\u6700\u5927\u6743\u503c\u548c\uff0c\u4fdd\u8bc11\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc750 \u663e\u7136dp\u4e00\u4e0b\uff0c\u7528 dp[i][j] \u8868\u793a\u524d i \u4f4d\uff0c\u6709 j \u4e2ac\u4e32\uff0c\u6700\u591a\u7684b\u4e32\u4e2a\u6570\u3002 \u90a3\u4e48\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3ec\u4e32\u4e2a\u6570\u8fdb\u884c\u679a\u4e3e\u7b54\u6848\u3002 \u8bben1\u4e3a\u53d6\u7684a\u4e32\uff0cn2\u4e3a\u53d6\u7684b\u4e32\uff0cn3\u4e3a\u53d6\u7684c\u4e32\u4e2a\u6570 \u90a3\u4e48\u7531\u4e8e\u679a\u4e3e\u7684\u662fc\u4e32\u4e2a\u6570\uff0cn2\u7684\u6700\u5927\u503c\uff0cn1\u7684\u4e2a\u6570\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u3002 \u7136\u540e\u8003\u8651\u5c06n2\u66ff\u6362\u6210n1\u7684\u60c5\u51b5\u5373\u53ef\u3002 K. Addition Robot Link \u7ed9\u4e00\u6bb5AB\u4e32\uff0c\u64cd\u4f5c1\u4e3a\u7ffb\u8f6c\uff0c\u5373\u628aL,R\u533a\u95f4\u5185\u7684A\u53d8B\uff0cB\u53d8A\uff1b\u64cd\u4f5c2\u4e3a\u67e5\u8be2\uff0c\u987a\u5e8f\u904d\u5386\u5b50\u4e32 S[l-r] ,\u4f20\u5165A\uff0cB\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u4e32\u7684\u5f53\u524d\u503c\u4e3aA\uff0c\u4f7fA=A+B\uff0c\u5426\u5219\u4f7fB=A+B\uff0c\u8f93\u51fa\u8ba1\u7b97\u540e\u7684A\uff0cB\u3002 \u628a\u8fd0\u7b97\u5904\u7406\u62102x2\u7684\u77e9\u9635\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5904\u7406\u64cd\u4f5c\u3002 L. Road Construction Link \u7ed9\u5b9a\u4e00\u68f5\u57fa\u73af\u6811\u4e0a\u7684\u8fb9\uff0c\u6bcf\u4e00\u6761\u8fb9\u53ef\u4ee5\u88ab\u6307\u5b9a\u7c7b\u7684\u5de5\u4eba\u7ef4\u4fee\uff0c\u6c42\u80fd\u4f7f\u6811\u4e0a\u70b9\u8054\u901a\u7684\u7ef4\u4fee\u65b9\u6848\u3002 \u5982\u679c\u5bf9\u4e8e\u8fb9\u548c\u5de5\u4eba\u4e00\u4e00\u8fde\u8fb9\uff0c\u8fb9\u6570\u53ef\u80fd\u8fbe\u5230 NK NK \uff0c\u8003\u8651\u7b80\u5316\u8fb9\u6570\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u8fb9\u5bf9\u5e94\u7684\u7c7b\u578b\u6570 M_i M_i \uff0c\u6709 \\sum_{i=1}^n M_i<=10000 \\sum_{i=1}^n M_i<=10000 \uff0c\u6240\u4ee5\u8ba9\u6811\u8fb9\u4e0e\u5de5\u4eba\u7c7b\u578b\u6570\u8fde\u8fb9\uff0c\u5e76\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u5de5\u4eba\u8ba1\u6570\uff0c\u8fde\u5411\u6c47\u70b9\u5373\u53ef\u3002 \u5bf9\u4e8e\u4e00\u68f5\u57fa\u73af\u6811\uff0c\u8981\u9009 n-1 n-1 \u6761\u8fb9\u4f7f\u5176\u8054\u901a\uff0c\u5047\u8bbe\u5176\u73af\u4e0a\u6709k\u6761\u8fb9\uff0c\u5fc5\u987b\u9009\u62e9\u201c\u73af\u4e0a\u7684k-1\u6761\u8fb9\u201d\u548c\u201c\u73af\u5916\u7684\u6240\u6709\u8fb9\u201d\u3002dfs\u6c42\u51fa\u57fa\u73af\u6811\u4e0a\u7684\u73af\uff0c\u5b58\u50a8\u201c\u73af\u5916\u7684\u8fb9\u201d\u4e3aA\u96c6\u5408\uff0c\u201c\u73af\u4e0a\u7684\u8fb9\u201d\u4e3aB\u96c6\u5408\u3002 \u9996\u5148\u5bf9\u8d77\u70b9\u5411A\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u5168\u90e8\u5339\u914d\uff1b\u518d\u5bf9\u8d77\u70b9\u5411B\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u8fb9\uff0c\u5224\u65ad\u603b\u7684\u6d41\u91cf\u662f\u5426 >=n-1 >=n-1 \u5373\u53ef\u3002","title":"2019 2020 ICPC, Asia Jakarta Regional Contest"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#a-copying-homework","text":"\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217a\uff0c\u8f93\u51fa\u5e8f\u5217b\u4f7f \\sum_{i=1}^n{|b_i-a_i|}\u2265n \\sum_{i=1}^n{|b_i-a_i|}\u2265n \u3002 \u8f93\u51fan-a[i]\u5373\u53ef\u3002","title":"A. Copying Homework"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#c-even-path","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7f51\u683c\uff0c\u70b9(i,j)\u7684\u503c\u4e3aR[i]+c[j]\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4ece (sx,sy) (sx,sy) \u8d70\u5230 (tx,ty) (tx,ty) \u7684\u5168\u4e3a\u5947\u6570\u7684\u8def\u5f84\u3002 \u5224\u65adsx-tx\uff0csy-ty\u7684R,C\u503c\u662f\u5426\u540c\u65f6\u5168\u4e3a\u5947\u6570\u6216\u8005\u5168\u4e3a\u5076\u6570\uff0c\u524d\u7f00\u548c\u641e\u4e00\u4e0b\u5c31\u597d\u3002","title":"C. Even Path"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#d-find-string-in-a-grid","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u77e9\u9635\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e00\u4e2a\u4e32\uff0c\u95ee\u5728\u77e9\u9635\u4e2d\u9009\u4efb\u610f\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u9996\u5148\u5411\u53f3\u8d70\u518d\u5411\u4e0b\u8d70\uff0c\u80fd\u627e\u5230\u591a\u5c11\u4e2a\u67e5\u8be2\u4e32\u3002 \u9898\u89e3\uff1a\u5c06\u6bcf\u4e2a\u67e5\u8be2\u4e32\u5207\u6210\u4e24\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206\u4e0e\u884c\u5339\u914d\uff0c\u540e\u534a\u90e8\u5206\u4e0e\u5217\u5339\u914d\uff0c\u5b57\u7b26\u77e9\u9635\u4e2d\u5982\u679c\u6709\u67d0\u4e2a\u70b9\u540c\u65f6\u4f5c\u4e3a\u5339\u914d\u7684\u884c\u7ed3\u5c3e\u548c\u5217\u5f00\u5934\uff0c\u5219\u8ba1\u7b97\u4e00\u6b21\u8d21\u732e\u3002 \u5c06\u884c\u4e32H\u548c\u5217\u4e32V\u5206\u522b\u5efa\u7acb\u4e00\u4e2aSA\uff0c\u53ef\u4ee5\u5f97\u5230SA\u4e2d\u7684\u4e00\u4e2a\u533a\u95f4(l,r)\u6ee1\u8db3 lcp(x,y)>=len(x) \uff0c\u5728\u5efa\u4e32\u7684\u65f6\u5019\u628a\u67e5\u8be2\u4e32\u4e5f\u52a0\u5165SA\u7684\u4e32\u4ee5\u786e\u5b9a\u4f4d\u7f6e\uff0c\u884c\u4e32\u9700\u8981\u53cd\u5411\uff08\u56e0\u4e3a\u67e5\u8be2\u7684\u662f\u516c\u5171\u540e\u7f00\uff09\uff0c\u4e8c\u5206\u627e\u51fa\u884c\u548c\u5217\u7684\u533a\u95f4(h_l,h_r),(v_l,v_r)\uff0c\u5982\u679c\u6709\u5b57\u7b26\u77e9\u9635\u4e0a\u7684\u70b9\u5728SA\u4e2d\u7684\u4f4d\u7f6e(pos_h,pos_v)\u6ee1\u8db3 h_l\u2264pos_h\u2264h_r h_l\u2264pos_h\u2264h_r \u4e14 v_l\u2264pos_v\u2264v_r v_l\u2264pos_v\u2264v_r \uff0c\u5219\u8ba1\u7b97\u4e00\u6b21\u5b83\u5bf9\u67e5\u8be2\u4e32\u7684\u8d21\u732e\u3002 \u8003\u8651\u4e8c\u7ef4\u6570\u70b9\uff0c\u6c42\u51fa\u6bcf\u4e2a\u67e5\u8be2\u4e32\u6bcf\u4e2a\u70b9\u7684\u884c\u5217\u533a\u95f4\uff0c\u6c42\u5757\u5185\u7684\u70b9\u6570\u548c\u5373\u53ef\u3002","title":"D. Find String in a Grid"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#e-songwriter","text":"\u5df2\u77e5\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u548c\u4e0a\u4e00\u4e2a\u503c\u7684\u5173\u7cfb\uff08\u4e0a\u5347/\u4e0b\u964d/\u4e0d\u53d8\uff09\uff0c\u4e0a\u5347/\u4e0b\u964d\u7684\u8303\u56f4\u4e3a[1,k]\uff0c\u8981\u6c42\u5e8f\u5217\u7684\u6240\u6709\u503c\u90fd\u5728[l,r]\u533a\u95f4\u5185\uff0c\u6784\u9020\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5408\u6cd5\u5e8f\u5217\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8f93\u51fa-1\u3002 \u4ece\u5012\u63a8\u6c42\u51fa\u6bcf\u4e2a\u503c\u7684\u533a\u95f4\u8303\u56f4\uff0c\u5982\u679c\u6700\u5927\u503c\u5c0f\u4e8el\u6216\u6700\u5c0f\u503c\u5927\u4e8er\u5219\u65e0\u89e3\uff0c\u5426\u5219\u9012\u63a8\u6784\u9020\u5e8f\u5217\u5e76\u4f7f\u6bcf\u4e2a\u503c\u5c3d\u53ef\u80fd\u5c0f\u3002","title":"E. Songwriter"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#f-regular-forestation","text":"\u7ed9\u4e00\u68f5\u6811\uff0c\u6c42\u53bb\u6389\u4e00\u4e2a\u70b9\u662f\u7684\u5269\u4f59\u7684\u68ee\u6797\u4e2d\u7684\u65e0\u6839\u6811\u5168\u90e8\u540c\u6784\uff0c\u6700\u5927\u7684\u540c\u6784\u4e2a\u6570\u3002 \u663e\u7136\uff0c\u53ea\u6709\u5f53\u8fd9\u68f5\u6811\u4ec5\u6709\u4e00\u4e2a\u91cd\u5fc3\u4e14\u5b83\u7684\u5b50\u6811\u5927\u5c0f\u90fd\u76f8\u7b49\u65f6\u624d\u53ef\u80fd\u6709\u89e3\uff0c\u7136\u540e\u5224\u65e0\u6839\u6811\u540c\u6784\u540e\u76f4\u63a5\u8f93\u51fa\u91cd\u5fc3\u7684\u5ea6\u6570\u5373\u53ef\u3002","title":"F. Regular Forestation"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#g-performance-review","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u505am\u6b21\u4fee\u6539\uff0c\u7b2ci\u6b21\u4fee\u6539\u7ed9\u51fa\u4e00\u4e2a\u5e8f\u5217 a \u5c06\u524dk\u4e2a\u5c0f\u7684\u66ff\u6362\u4e3a a[i][0],a[i][1],a[i][k-1] \u8fd9\u4e9b\u6570\u5b57\uff0c\u95eem\u6b21\u4fee\u6539\u540e\u521d\u59cb\u7684\u7b2c1\u4e2a\u4eba\u662f\u5426\u4ecd\u5728\u5e8f\u5217\u4e2d\u3002 q\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u4fee\u6539\u7b2ci\u6b21\u4fee\u6539\u7684\u7b2cj\u4e2a\u503c\uff0c\u5c06\u5176\u4fee\u6539\u4e3ax\uff0c\u5e76\u56de\u7b54\u8be2\u95ee\u3002 \u8bb0\u5f55\u7b2c1\u4e2a\u4eba\u5728\u7b2ci\u6b21\u4fee\u6539\u540e\u7684rank\uff0c\u663e\u7136\u5bf9\u4e8eq\u6b21\u4fee\u6539\u6700\u591a\u53ea\u4f1a\u6539\u53d8\u4e00\u4f4d\uff0c\u4e5f\u5c31\u662f\u4f7f (j,n) \u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u503c+1\u6216-1\uff0c\u4fee\u6539\u540e\u5224\u65ad(1,n)\u7684rank\u662f\u5426\u90fd>0\u5373\u53ef\u3002","title":"G. Performance Review"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#h-twin-buildings","text":"\u7ed9\u5b9an\u5757\u77e9\u5f62\uff0c\u9009\u62e9\u4e00\u5757\u6216\u4e24\u5757\uff0c\u5e76\u5728\u5176\u4e2d\u653e\u5165\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5757\u77e9\u5f62\uff0c\u95ee\u653e\u5165\u7684\u77e9\u5f62\u7684\u9762\u79ef\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u5757\u6216\u4e24\u5757\u77e9\u5f62\u4e2d\u653e\u5165\uff0c\u5982\u679c\u662f\u4e00\u5757\u5c31\u662f\u77e9\u5f62\u9762\u79ef/2\uff0c\u5982\u679c\u662f\u4e24\u5757\uff0c\u9996\u5148\u4f7f\u6bcf\u4e2a\u77e9\u5f62\u7684L\u5927\u4e8eW\uff0c\u6309\u7167W\u964d\u5e8f\u6392\u5e8f\uff0c\u8bb0\u5f55L\u7684\u524d\u7f00\u6700\u5927\u503cpreL\uff0c\u904d\u5386\uff0c\u5f53\u524d\u77e9\u5f62\u7684\u6700\u5927\u8d21\u732e\u5373\u4e3a min(preL, a[i].L)*a[i].W \u3002","title":"H. Twin Buildings"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#j-tiling-terrace","text":"\u7ed9\u4e00\u4e2a01\u4e32\uff0c\u7ed9\u4e09\u79cd\u5b50\u4e32\u5206\u522b\u6709abc\u6743\u503c\uff080\\00\\010\uff09\uff0c\u8981\u6c42\u628a\u539f\u4e32\u5206\u5272\u6210\u591a\u4e2a\u8fd9\u4e09\u79cd\u4e32\uff0c\u5176\u4e2da\u4e32\u6700\u591a\u53ea\u80fd\u6709k\u4e2a\uff0c\u6c42\u6700\u5927\u6743\u503c\u548c\uff0c\u4fdd\u8bc11\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc750 \u663e\u7136dp\u4e00\u4e0b\uff0c\u7528 dp[i][j] \u8868\u793a\u524d i \u4f4d\uff0c\u6709 j \u4e2ac\u4e32\uff0c\u6700\u591a\u7684b\u4e32\u4e2a\u6570\u3002 \u90a3\u4e48\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3ec\u4e32\u4e2a\u6570\u8fdb\u884c\u679a\u4e3e\u7b54\u6848\u3002 \u8bben1\u4e3a\u53d6\u7684a\u4e32\uff0cn2\u4e3a\u53d6\u7684b\u4e32\uff0cn3\u4e3a\u53d6\u7684c\u4e32\u4e2a\u6570 \u90a3\u4e48\u7531\u4e8e\u679a\u4e3e\u7684\u662fc\u4e32\u4e2a\u6570\uff0cn2\u7684\u6700\u5927\u503c\uff0cn1\u7684\u4e2a\u6570\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u3002 \u7136\u540e\u8003\u8651\u5c06n2\u66ff\u6362\u6210n1\u7684\u60c5\u51b5\u5373\u53ef\u3002","title":"J. Tiling Terrace"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#k-addition-robot","text":"\u7ed9\u4e00\u6bb5AB\u4e32\uff0c\u64cd\u4f5c1\u4e3a\u7ffb\u8f6c\uff0c\u5373\u628aL,R\u533a\u95f4\u5185\u7684A\u53d8B\uff0cB\u53d8A\uff1b\u64cd\u4f5c2\u4e3a\u67e5\u8be2\uff0c\u987a\u5e8f\u904d\u5386\u5b50\u4e32 S[l-r] ,\u4f20\u5165A\uff0cB\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u4e32\u7684\u5f53\u524d\u503c\u4e3aA\uff0c\u4f7fA=A+B\uff0c\u5426\u5219\u4f7fB=A+B\uff0c\u8f93\u51fa\u8ba1\u7b97\u540e\u7684A\uff0cB\u3002 \u628a\u8fd0\u7b97\u5904\u7406\u62102x2\u7684\u77e9\u9635\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5904\u7406\u64cd\u4f5c\u3002","title":"K. Addition Robot"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20Asia%20Jakarta%20Regional%20Contest/#l-road-construction","text":"\u7ed9\u5b9a\u4e00\u68f5\u57fa\u73af\u6811\u4e0a\u7684\u8fb9\uff0c\u6bcf\u4e00\u6761\u8fb9\u53ef\u4ee5\u88ab\u6307\u5b9a\u7c7b\u7684\u5de5\u4eba\u7ef4\u4fee\uff0c\u6c42\u80fd\u4f7f\u6811\u4e0a\u70b9\u8054\u901a\u7684\u7ef4\u4fee\u65b9\u6848\u3002 \u5982\u679c\u5bf9\u4e8e\u8fb9\u548c\u5de5\u4eba\u4e00\u4e00\u8fde\u8fb9\uff0c\u8fb9\u6570\u53ef\u80fd\u8fbe\u5230 NK NK \uff0c\u8003\u8651\u7b80\u5316\u8fb9\u6570\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u8fb9\u5bf9\u5e94\u7684\u7c7b\u578b\u6570 M_i M_i \uff0c\u6709 \\sum_{i=1}^n M_i<=10000 \\sum_{i=1}^n M_i<=10000 \uff0c\u6240\u4ee5\u8ba9\u6811\u8fb9\u4e0e\u5de5\u4eba\u7c7b\u578b\u6570\u8fde\u8fb9\uff0c\u5e76\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u5de5\u4eba\u8ba1\u6570\uff0c\u8fde\u5411\u6c47\u70b9\u5373\u53ef\u3002 \u5bf9\u4e8e\u4e00\u68f5\u57fa\u73af\u6811\uff0c\u8981\u9009 n-1 n-1 \u6761\u8fb9\u4f7f\u5176\u8054\u901a\uff0c\u5047\u8bbe\u5176\u73af\u4e0a\u6709k\u6761\u8fb9\uff0c\u5fc5\u987b\u9009\u62e9\u201c\u73af\u4e0a\u7684k-1\u6761\u8fb9\u201d\u548c\u201c\u73af\u5916\u7684\u6240\u6709\u8fb9\u201d\u3002dfs\u6c42\u51fa\u57fa\u73af\u6811\u4e0a\u7684\u73af\uff0c\u5b58\u50a8\u201c\u73af\u5916\u7684\u8fb9\u201d\u4e3aA\u96c6\u5408\uff0c\u201c\u73af\u4e0a\u7684\u8fb9\u201d\u4e3aB\u96c6\u5408\u3002 \u9996\u5148\u5bf9\u8d77\u70b9\u5411A\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u5168\u90e8\u5339\u914d\uff1b\u518d\u5bf9\u8d77\u70b9\u5411B\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u8fb9\uff0c\u5224\u65ad\u603b\u7684\u6d41\u91cf\u662f\u5426 >=n-1 >=n-1 \u5373\u53ef\u3002","title":"L. Road Construction"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/","text":"Name Date Solved A B C D E F G H I J K L 2019-2020 ICPC, NERC, Northern Eurasia Finals 2019/12/1 7/12 \u00d8 O . . O . . . \u00d8 O O O tag Link a\u3001set b\u3001\u4e71\u641e e\u3001\u66b4\u529b i\u3001\u6784\u9020\u4ea4\u4e92 j\u3001exgcd\u66b4\u529b k\u3001\u7ec4\u5408\u6570 l\u3001\u66b4\u529b A - Apprentice Learning Trajectory Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u533a\u95f4\u548c\u533a\u95f4\u6743\u503c\uff0c\u8868\u793a\u5728\u8fd9\u6bb5\u533a\u95f4\u5185\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u591a\u4e2a\u8fde\u7eed\u7684\u6743\u503c\u65f6\u95f4\uff0c\u6bcf\u4e2a\u65f6\u95f4\u83b7\u5f971\u70b9\u7b54\u6848\u3002\u6c42\u4e0d\u80fd\u65f6\u95f4\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u7b54\u6848\u3002 \u9898\u89e3\uff1a \u5e76\u4e0d\u592a\u4f1a\u7684set\u9898\uff0c\u968f\u4fbf\u601d\u8003\u4e00\u4e0b\u53ef\u77e5\u5b83\u5e94\u8be5\u662f\u4f18\u5148\u6743\u503c\u65f6\u95f4\u5c0f\u7684\u53d6\uff0c\u7136\u540e\u5c0f\u7684\u53d6\u5230\u4e0d\u80fd\u53d6\u4e86\u624d\u4f1a\u7528\u5927\u7684\u3002 \u7136\u540e\u8003\u8651\u66b4\u529b\u89e3\u6cd5\uff1a\u5bf9\u4e8e\u6240\u6709\u7684\u65f6\u95f4\u70b9 dp[i] dp[i] \u8868\u793a\u5230 i i \u65f6\u95f4\u80fd\u83b7\u5f97\u7684\u6700\u5927\u7b54\u6848\uff0c\u90a3\u4e48\u663e\u7136 dp[i]=max(dp[i-t[k]]+1) dp[i]=max(dp[i-t[k]]+1) \uff0c\u5176\u4e2d k k \u4e3a\u6240\u6709\u5408\u6cd5\u7684\u70b9\uff08\u5728\u533a\u95f4\u5185\u7684\u70b9\uff09\u3002 \u4f46\u662f\u590d\u6742\u5ea6\u8fbe\u5230 O(nt) O(nt) \uff0c\u800c t \\le 10^{18} t \\le 10^{18} \u663e\u7136\u662f\u4e0d\u80fd\u51fa\u73b0\u5728\u590d\u6742\u5ea6\u4e2d \u7136\u540e\u8003\u8651\u5230\u7531\u4e8e\u6bcf\u6bb5\u7684\u60c5\u51b5\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff0c\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u5757\u6c42\u89e3\u3002 \u9996\u5148\u5904\u7406\u51fa\u6bcf\u79cd\u533a\u95f4\u7684\u5de6\u7ec8\u70b9\u548c\u53f3\u7ec8\u70b9\u3002\u5373 s[i]-t[i],e[i] s[i]-t[i],e[i] \uff0c\u56e0\u4e3a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8d77\u70b9\uff0c\u663e\u7136\u662f\u4f18\u5148\u53d6\u4f1a\u8ba9\u8d77\u70b9\u66f4\u5c0f\u7684\u70b9\u3002\u7136\u540e\u5904\u7406\u6210\u67e5\u5206\u5e8f\u5217\u7684\u5f62\u5f0f\u5373\u53ef\uff0c\u7528set\u7ef4\u62a4\u5f53\u524d\u6700\u5c0f\u7684 t t \uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u8d77\u70b9\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(nlogn) O(nlogn) B - Balls of Buma Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8981\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4f7f\u5f97\u8fde\u8d77\u6765\u7684\u76f8\u540c\u5b57\u7b26\u5927\u4e8e\u7b49\u4e8e\u4e09\u4e2a\u5373\u53ef\u6d88\u53bb\u8fd9\u4e9b\u76f8\u540c\u5b57\u7b26\uff0c\u7136\u540e\u5982\u679c\u6269\u5145\u7684\u5b57\u7b26\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u4e09\u4e2a\u4e5f\u53ef\u4ee5\u6d88\u53bb\uff0c\u6c42\u80fd\u5168\u90e8\u5220\u6389\u7684\u65b9\u6848\u6570 yysy\uff0c\u8111\u762b\u8bbe\u5b9a\uff0c\u90a3\u4e48\u9996\u5148\u5fc5\u7136\u6bb5\u6570\u662f\u5947\u6570\uff0c\u5176\u6b21\u5de6\u53f3\u5b57\u7b26\u5bf9\u79f0\uff0c\u518d\u5176\u6b21\u5de6\u53f3\u548c\u5927\u4e8e\u7b49\u4e8e3\uff0c\u518d\u5176\u6b21\u4e2d\u95f4\u548c\u5927\u4e8e\u7b49\u4e8e2\u5373\u53ef\u3002\u7b54\u6848\u4e3a\u4e2d\u95f4\u548c+1 E - Elections Link \u9898\u610f\uff1an\u4e2a\u4eba\uff0cm\u573a\u9009\u4e3e\uff0c\u7ed9\u51fa\u77e9\u9635\u8868\u793a\u7b2ci\u573a\u7b2cj\u4e2a\u4eba\u7684\u6743\u91cd\uff0c\u8981\u6c42\u7b2cn\u4e2a\u4eba\u6b7b\uff0c\u6b7b\u7684\u5b9a\u4e49\u662f\u5b83\u4e0d\u662f\u6700\u5927\u503c\u6216\u8005\u53ea\u662f\u6700\u5927\u503c\u4e4b\u4e00\u3002\u6c42\u6700\u5c11\u5220\u6389\u591a\u5c11\u573a\u9009\u4e3e\u5e76\u8f93\u51fa\u65b9\u6848\u3002 \u7531\u4e8e\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u6240\u4ee5\u76f4\u63a5\u7206\u5c31\u8fc7\u4e86\uff0c\u679a\u4e3e\u8ba9\u4ed6\u6b7b\u7684\u90a3\u4e2a\u4eba\u662f\u8c01\uff0c\u7136\u540e\u505a\u5dee\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u52a0\uff0c\u76f4\u5230\u4e0d\u80fd\u8ba9\u4ed6\u6b7b\u7684\u8fb9\u754c\u7136\u540e\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002 I - Intriguing Selection Link \u9898\u610f\uff1a\u4ea4\u4e92\u9898\uff0c\u67092\u00d7n\u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u67091~2n\u7684\u6743\u503c\uff0c\u6bcf\u6b21\u8be2\u95eei\u548cj\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u9700\u8981\u77e5\u9053\u524dn\u4e2a\u4eba\u662f\u54ea\u4e9b\uff0c\u4f46\u662f\u4e0d\u80fd\u4f7f\u5f97\u524dn\u4e2a\u4eba\u7684\u5927\u5c0f\u5173\u7cfb\u5b8c\u5168\u77e5\u9053\uff0c\u8be2\u95ee\u6b21\u6570\u4e0d\u9650\uff08\u9650\u5236\u6bcf\u5bf9\u4eba\u4e0d\u91cd\u590d\u95ee\u7684\u6b21\u6570\uff09\u3002 \u5c06\u4eba\u5206\u62103\u7c7b\uff0c\u4e00\u7c7bn-1\u4e2a\uff0c\u4e8c\u7c7b2\u4e2a\uff0c\u4e09\u7c7bn-1\u4e2a \u5c06\u4e00\u7c7b\u4eba\u4e24\u4e24\u6bd4\u8f83\u5f97\u51fa\u4e00\u4e2a\u5173\u7cfb\u77e9\u9635\u3002\u4e8c\u7c7b\u4eba\u4e5f\u5982\u6b64\u3002 \u7136\u540e\u5c06\u4e00\u7c7b\u4e2d\u7684\u6700\u5c0f\u7684\u4e0e\u4e8c\u7c7b\u6700\u5c0f\u7684\u6bd4\u8f83\u5f97\u51fa\u66f4\u5c0f\u7684\uff0c\u5c06\u66f4\u5c0f\u7684\u6dd8\u6c70\uff0c\u4ece\u4e09\u7c7b\u4e2d\u53d6\u4e00\u4e2a\u8865\u9f50\uff0c\u76f4\u5230\u4e09\u7c7b\u4e3a\u7a7a\uff0c\u4e00\u7c7b\u548c\u4e8c\u7c7b\u4eba\u7684\u5e76\u96c6\u5373\u4e3a\u7b54\u6848\uff0c\u4e14\u4e00\u7c7b\u548c\u4e8c\u7c7b\u672c\u8eab\u6ca1\u6709\u8fdb\u884c\u6bd4\u8f83\u6240\u4ee5\u4e0d\u662f\u5b8c\u5168\u77e5\u9053\u4ed6\u4eec\u7684\u5173\u7cfb\u3002 J - Just Arrange the Icons Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u5206\u7c7b\uff0c\u6c42\u7bb1\u5b50\u5927\u5c0f\u4e3ak\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7bb1\u5b50\u53ea\u88c5\u4e00\u79cd\u7269\u54c1\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u81f3\u5c11\u586b\u5145\u5230k-1\u60c5\u51b5\u4e0b\u7bb1\u5b50\u7684\u6700\u5c0f\u4e2a\u6570\u3002\uff08k\u662f\u4efb\u610f\uff09 \u9996\u5148\u5904\u7406\u6210map\u5f62\u5f0f\uff0c\u5373\u7b2ci\u7c7b\u6709 x[i] x[i] \u4ef6\u7269\u54c1\uff0c\u7136\u540e\u9996\u5148\u8003\u8651k\u7684\u8303\u56f4\uff0c\u663e\u7136\u662f 1\uff5emin(x[i])+ 1 1\uff5emin(x[i])+ 1 \uff0c\u7136\u540e\u8003\u8651\u679a\u4e3e\u8fd9\u4e9b\u503c\u5904\u7406\u7b54\u6848\u3002 \u663e\u7136\uff0c\u5982\u679c\u4e00\u4e2ak\u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u5bf9\u6240\u6709\u7684i\u90fd\u6ee1\u8db3 k * t_1 + (k - 1) * t_2 = a_i, 0 \\le t1,t2 \u90a3\u4e48\u8fd9\u4e2a\u76f4\u63a5exgcd\u6c42\u662f\u5426\u6709\u6b63\u6574\u6570\u89e3\u5373\u53ef\u3002\u7136\u540e\u628a\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u5f04\u51fa\u6765\u6c42\u548c\u5c31\u53ef\u4ee5\u4e86\u3002 K - Key Storage Link \u9898\u610f\uff1a\u5bf9\u4e00\u4e2a\u6570n\uff0c\u4ece2\u5f00\u59cb\u53d6\u6a21\u6c42\u4f59\uff0c\u76f4\u5230n\u4e3a0\uff0c\u5f97\u5230\u4e00\u4e2a\u4f59\u6570\u5e8f\u5217\uff0c\u5bf9\u4f59\u6570\u5e8f\u5217\u6392\u5e8f\uff0c\u6c42\u4f59\u6570\u5e8f\u5217\u4e0en\u76f8\u7b49\u7684\u6570\u7684\u4e2a\u6570\u3002 \u7531\u4e8e\u6bcf\u4e2a\u6570\u7684\u4f59\u6570\u5e8f\u5217\u663e\u7136\u662f\u4e0d\u540c\u7684\uff0c\u663e\u7136\u5c31\u662f\u5408\u6cd5\u6392\u5217\u6570\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\uff0c\u5b83\u662f\u5408\u6cd5\u7684\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6a21\u6570\uff0c\u5b83\u7684\u4f59\u6570\u90fd\u662f\u5c0f\u4e8e\u6a21\u6570\u7684\uff0c\u7136\u540e\u5176\u5b9e\u9690\u85cf\u6761\u4ef6\u662f\u5b83\u4e0d\u80fd\u6709\u540e\u7f000\uff0c\u5373\u6700\u540e\u4e00\u4e2a\u6a21\u6570\u4e0d\u80fd\u4e3a0\u3002 \u90a3\u4e48\u663e\u7136\u5c31\u662f\u53ef\u91cd\u6392\u5217\u7684\u4e00\u4e2a\u9650\u5236\u6027\u7684\u53d8\u79cd\u3002\u4e0d\u8003\u8651\u540e\u7f000\u7684\u8bdd\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4f59\u6570\u5e8f\u5217\u9006\u6743\u6392\u5e8f\u4e4b\u540e\uff1a \\{a_1, a_2, \\dots a_n\\} \\{a_1, a_2, \\dots a_n\\} \uff0c a_i a_i \u548c\u4e0e a_i a_i \u76f8\u540c\u7684\u6743\u503c\uff0c\u5fc5\u987b\u653e\u5728 n+1-2-a[i]+1 n+1-2-a[i]+1 \u7684\u957f\u5ea6\u7684\u7a7a\u683c\u4e2d\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u7ec4\u5408\u6570\uff0c\u7136\u540e\u5b83\u524d\u7f00\u586b\u5145\u7269\u54c1\u5df2\u7ecf\u6709i\u4e2a\u4e86\uff0c\u7ec4\u5408\u6570\u7684\u4e0b\u90e8\u8fd8\u9700\u8981\u51cf\u6389\u4e00\u4e2a\u6743\u503c\uff0c\u89e3\u51fa\u6765\u5c31\u662f\u539f\u59cb\u7b54\u6848\u3002 \u7136\u540e\u518d\u6765\u8003\u8651\u540e\u7f000\uff0c\u5bf9\u4e8e\u540e\u7f000\u5728\u539f\u59cb\u7b54\u6848\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5b9e\u9645\u4e0a\u662f\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u5373\u53d6\u6700\u540e\u4e00\u4f4d\u4e3a0\uff0c\u628a0\u7684\u4e2a\u6570\u51cf\u4e00\uff0c\u7136\u540e\u518d\u8dd1\u4e00\u6b21\u539f\u59cb\u7b54\u6848\uff0c\u5373\u662f\u542b\u540e\u7f000\u7684\u5408\u6cd5\u7b54\u6848\uff0c\u51cf\u53bb\u5c31\u53ef\u4ee5\u4e86 \u5176\u5b9e\u770b\u9519\u9898\u4e86\u8fd8\u4ee5\u4e3a\u662f\u4e2a\u72b6\u538b\uff0c\u7ed3\u679c\u4e00\u770b\u7ec4\u6570\u5c31\u653e\u5f03\u4e86\uff0c\u4ee5\u540e\u6709\u673a\u4f1a\u51fa\u6210\u9898\u76ee\u3002 L - Lexicography Link \u9898\u610f\uff1a\u8111\u762b\uff0c\u7ed9nlr\uff0c\u8868\u793a\u7ed9\u51fan\u00d7l\u4e2a\u5b57\u7b26\u8981\u6784\u9020n\u4e2a\u957f\u5ea6\u4e3al\u7684\u5b57\u7b26\u4e32\uff0c\u4f7f\u5f97\u7b2cr\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6c42\u65b9\u6848\u3002 \u771f\u7684\u8111\u762b\uff0c\u663e\u7136\u662f\u4ece\u4e0a\u5f80\u4e0b\u7ed9\u5b57\u7b26\uff0c\u7136\u540e\u5982\u679c\u5f53\u524d\u4f4d\u4e0e\u524d\u4e00\u4e2a\u4f4d\u4e0d\u540c\u5373\u8868\u793a\u4e24\u4e2a\u4e32\u7684\u5b57\u5178\u5e8f\u5df2\u7ecf\u533a\u5206\u51fa\u6765\uff0c\u5c31\u4e0d\u7528\u7ba1\u5176\u4ed6\u7684\u4e86\uff0c\u7136\u540e\u6bd4r\u5927\u7684\u5b57\u7b26\u4e32\u4e5f\u4e0d\u7528\u7ba1\uff0c\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u6700\u5c0fr\u3002","title":"2019 2020 ICPC, NERC, Northern Eurasia Finals"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/#tag","text":"a\u3001set b\u3001\u4e71\u641e e\u3001\u66b4\u529b i\u3001\u6784\u9020\u4ea4\u4e92 j\u3001exgcd\u66b4\u529b k\u3001\u7ec4\u5408\u6570 l\u3001\u66b4\u529b","title":"tag"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/#a-apprentice-learning-trajectory","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u533a\u95f4\u548c\u533a\u95f4\u6743\u503c\uff0c\u8868\u793a\u5728\u8fd9\u6bb5\u533a\u95f4\u5185\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u591a\u4e2a\u8fde\u7eed\u7684\u6743\u503c\u65f6\u95f4\uff0c\u6bcf\u4e2a\u65f6\u95f4\u83b7\u5f971\u70b9\u7b54\u6848\u3002\u6c42\u4e0d\u80fd\u65f6\u95f4\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u7b54\u6848\u3002 \u9898\u89e3\uff1a \u5e76\u4e0d\u592a\u4f1a\u7684set\u9898\uff0c\u968f\u4fbf\u601d\u8003\u4e00\u4e0b\u53ef\u77e5\u5b83\u5e94\u8be5\u662f\u4f18\u5148\u6743\u503c\u65f6\u95f4\u5c0f\u7684\u53d6\uff0c\u7136\u540e\u5c0f\u7684\u53d6\u5230\u4e0d\u80fd\u53d6\u4e86\u624d\u4f1a\u7528\u5927\u7684\u3002 \u7136\u540e\u8003\u8651\u66b4\u529b\u89e3\u6cd5\uff1a\u5bf9\u4e8e\u6240\u6709\u7684\u65f6\u95f4\u70b9 dp[i] dp[i] \u8868\u793a\u5230 i i \u65f6\u95f4\u80fd\u83b7\u5f97\u7684\u6700\u5927\u7b54\u6848\uff0c\u90a3\u4e48\u663e\u7136 dp[i]=max(dp[i-t[k]]+1) dp[i]=max(dp[i-t[k]]+1) \uff0c\u5176\u4e2d k k \u4e3a\u6240\u6709\u5408\u6cd5\u7684\u70b9\uff08\u5728\u533a\u95f4\u5185\u7684\u70b9\uff09\u3002 \u4f46\u662f\u590d\u6742\u5ea6\u8fbe\u5230 O(nt) O(nt) \uff0c\u800c t \\le 10^{18} t \\le 10^{18} \u663e\u7136\u662f\u4e0d\u80fd\u51fa\u73b0\u5728\u590d\u6742\u5ea6\u4e2d \u7136\u540e\u8003\u8651\u5230\u7531\u4e8e\u6bcf\u6bb5\u7684\u60c5\u51b5\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff0c\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u5757\u6c42\u89e3\u3002 \u9996\u5148\u5904\u7406\u51fa\u6bcf\u79cd\u533a\u95f4\u7684\u5de6\u7ec8\u70b9\u548c\u53f3\u7ec8\u70b9\u3002\u5373 s[i]-t[i],e[i] s[i]-t[i],e[i] \uff0c\u56e0\u4e3a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8d77\u70b9\uff0c\u663e\u7136\u662f\u4f18\u5148\u53d6\u4f1a\u8ba9\u8d77\u70b9\u66f4\u5c0f\u7684\u70b9\u3002\u7136\u540e\u5904\u7406\u6210\u67e5\u5206\u5e8f\u5217\u7684\u5f62\u5f0f\u5373\u53ef\uff0c\u7528set\u7ef4\u62a4\u5f53\u524d\u6700\u5c0f\u7684 t t \uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u8d77\u70b9\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(nlogn) O(nlogn)","title":"A - Apprentice Learning Trajectory"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/#b-balls-of-buma","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8981\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4f7f\u5f97\u8fde\u8d77\u6765\u7684\u76f8\u540c\u5b57\u7b26\u5927\u4e8e\u7b49\u4e8e\u4e09\u4e2a\u5373\u53ef\u6d88\u53bb\u8fd9\u4e9b\u76f8\u540c\u5b57\u7b26\uff0c\u7136\u540e\u5982\u679c\u6269\u5145\u7684\u5b57\u7b26\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u4e09\u4e2a\u4e5f\u53ef\u4ee5\u6d88\u53bb\uff0c\u6c42\u80fd\u5168\u90e8\u5220\u6389\u7684\u65b9\u6848\u6570 yysy\uff0c\u8111\u762b\u8bbe\u5b9a\uff0c\u90a3\u4e48\u9996\u5148\u5fc5\u7136\u6bb5\u6570\u662f\u5947\u6570\uff0c\u5176\u6b21\u5de6\u53f3\u5b57\u7b26\u5bf9\u79f0\uff0c\u518d\u5176\u6b21\u5de6\u53f3\u548c\u5927\u4e8e\u7b49\u4e8e3\uff0c\u518d\u5176\u6b21\u4e2d\u95f4\u548c\u5927\u4e8e\u7b49\u4e8e2\u5373\u53ef\u3002\u7b54\u6848\u4e3a\u4e2d\u95f4\u548c+1","title":"B - Balls of Buma"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/#e-elections","text":"\u9898\u610f\uff1an\u4e2a\u4eba\uff0cm\u573a\u9009\u4e3e\uff0c\u7ed9\u51fa\u77e9\u9635\u8868\u793a\u7b2ci\u573a\u7b2cj\u4e2a\u4eba\u7684\u6743\u91cd\uff0c\u8981\u6c42\u7b2cn\u4e2a\u4eba\u6b7b\uff0c\u6b7b\u7684\u5b9a\u4e49\u662f\u5b83\u4e0d\u662f\u6700\u5927\u503c\u6216\u8005\u53ea\u662f\u6700\u5927\u503c\u4e4b\u4e00\u3002\u6c42\u6700\u5c11\u5220\u6389\u591a\u5c11\u573a\u9009\u4e3e\u5e76\u8f93\u51fa\u65b9\u6848\u3002 \u7531\u4e8e\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u6240\u4ee5\u76f4\u63a5\u7206\u5c31\u8fc7\u4e86\uff0c\u679a\u4e3e\u8ba9\u4ed6\u6b7b\u7684\u90a3\u4e2a\u4eba\u662f\u8c01\uff0c\u7136\u540e\u505a\u5dee\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u52a0\uff0c\u76f4\u5230\u4e0d\u80fd\u8ba9\u4ed6\u6b7b\u7684\u8fb9\u754c\u7136\u540e\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002","title":"E - Elections"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/#i-intriguing-selection","text":"\u9898\u610f\uff1a\u4ea4\u4e92\u9898\uff0c\u67092\u00d7n\u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u67091~2n\u7684\u6743\u503c\uff0c\u6bcf\u6b21\u8be2\u95eei\u548cj\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u9700\u8981\u77e5\u9053\u524dn\u4e2a\u4eba\u662f\u54ea\u4e9b\uff0c\u4f46\u662f\u4e0d\u80fd\u4f7f\u5f97\u524dn\u4e2a\u4eba\u7684\u5927\u5c0f\u5173\u7cfb\u5b8c\u5168\u77e5\u9053\uff0c\u8be2\u95ee\u6b21\u6570\u4e0d\u9650\uff08\u9650\u5236\u6bcf\u5bf9\u4eba\u4e0d\u91cd\u590d\u95ee\u7684\u6b21\u6570\uff09\u3002 \u5c06\u4eba\u5206\u62103\u7c7b\uff0c\u4e00\u7c7bn-1\u4e2a\uff0c\u4e8c\u7c7b2\u4e2a\uff0c\u4e09\u7c7bn-1\u4e2a \u5c06\u4e00\u7c7b\u4eba\u4e24\u4e24\u6bd4\u8f83\u5f97\u51fa\u4e00\u4e2a\u5173\u7cfb\u77e9\u9635\u3002\u4e8c\u7c7b\u4eba\u4e5f\u5982\u6b64\u3002 \u7136\u540e\u5c06\u4e00\u7c7b\u4e2d\u7684\u6700\u5c0f\u7684\u4e0e\u4e8c\u7c7b\u6700\u5c0f\u7684\u6bd4\u8f83\u5f97\u51fa\u66f4\u5c0f\u7684\uff0c\u5c06\u66f4\u5c0f\u7684\u6dd8\u6c70\uff0c\u4ece\u4e09\u7c7b\u4e2d\u53d6\u4e00\u4e2a\u8865\u9f50\uff0c\u76f4\u5230\u4e09\u7c7b\u4e3a\u7a7a\uff0c\u4e00\u7c7b\u548c\u4e8c\u7c7b\u4eba\u7684\u5e76\u96c6\u5373\u4e3a\u7b54\u6848\uff0c\u4e14\u4e00\u7c7b\u548c\u4e8c\u7c7b\u672c\u8eab\u6ca1\u6709\u8fdb\u884c\u6bd4\u8f83\u6240\u4ee5\u4e0d\u662f\u5b8c\u5168\u77e5\u9053\u4ed6\u4eec\u7684\u5173\u7cfb\u3002","title":"I - Intriguing Selection"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/#j-just-arrange-the-icons","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u5206\u7c7b\uff0c\u6c42\u7bb1\u5b50\u5927\u5c0f\u4e3ak\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7bb1\u5b50\u53ea\u88c5\u4e00\u79cd\u7269\u54c1\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u81f3\u5c11\u586b\u5145\u5230k-1\u60c5\u51b5\u4e0b\u7bb1\u5b50\u7684\u6700\u5c0f\u4e2a\u6570\u3002\uff08k\u662f\u4efb\u610f\uff09 \u9996\u5148\u5904\u7406\u6210map\u5f62\u5f0f\uff0c\u5373\u7b2ci\u7c7b\u6709 x[i] x[i] \u4ef6\u7269\u54c1\uff0c\u7136\u540e\u9996\u5148\u8003\u8651k\u7684\u8303\u56f4\uff0c\u663e\u7136\u662f 1\uff5emin(x[i])+ 1 1\uff5emin(x[i])+ 1 \uff0c\u7136\u540e\u8003\u8651\u679a\u4e3e\u8fd9\u4e9b\u503c\u5904\u7406\u7b54\u6848\u3002 \u663e\u7136\uff0c\u5982\u679c\u4e00\u4e2ak\u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u5bf9\u6240\u6709\u7684i\u90fd\u6ee1\u8db3 k * t_1 + (k - 1) * t_2 = a_i, 0 \\le t1,t2 \u90a3\u4e48\u8fd9\u4e2a\u76f4\u63a5exgcd\u6c42\u662f\u5426\u6709\u6b63\u6574\u6570\u89e3\u5373\u53ef\u3002\u7136\u540e\u628a\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u5f04\u51fa\u6765\u6c42\u548c\u5c31\u53ef\u4ee5\u4e86\u3002","title":"J - Just Arrange the Icons"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/#k-key-storage","text":"\u9898\u610f\uff1a\u5bf9\u4e00\u4e2a\u6570n\uff0c\u4ece2\u5f00\u59cb\u53d6\u6a21\u6c42\u4f59\uff0c\u76f4\u5230n\u4e3a0\uff0c\u5f97\u5230\u4e00\u4e2a\u4f59\u6570\u5e8f\u5217\uff0c\u5bf9\u4f59\u6570\u5e8f\u5217\u6392\u5e8f\uff0c\u6c42\u4f59\u6570\u5e8f\u5217\u4e0en\u76f8\u7b49\u7684\u6570\u7684\u4e2a\u6570\u3002 \u7531\u4e8e\u6bcf\u4e2a\u6570\u7684\u4f59\u6570\u5e8f\u5217\u663e\u7136\u662f\u4e0d\u540c\u7684\uff0c\u663e\u7136\u5c31\u662f\u5408\u6cd5\u6392\u5217\u6570\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\uff0c\u5b83\u662f\u5408\u6cd5\u7684\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6a21\u6570\uff0c\u5b83\u7684\u4f59\u6570\u90fd\u662f\u5c0f\u4e8e\u6a21\u6570\u7684\uff0c\u7136\u540e\u5176\u5b9e\u9690\u85cf\u6761\u4ef6\u662f\u5b83\u4e0d\u80fd\u6709\u540e\u7f000\uff0c\u5373\u6700\u540e\u4e00\u4e2a\u6a21\u6570\u4e0d\u80fd\u4e3a0\u3002 \u90a3\u4e48\u663e\u7136\u5c31\u662f\u53ef\u91cd\u6392\u5217\u7684\u4e00\u4e2a\u9650\u5236\u6027\u7684\u53d8\u79cd\u3002\u4e0d\u8003\u8651\u540e\u7f000\u7684\u8bdd\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4f59\u6570\u5e8f\u5217\u9006\u6743\u6392\u5e8f\u4e4b\u540e\uff1a \\{a_1, a_2, \\dots a_n\\} \\{a_1, a_2, \\dots a_n\\} \uff0c a_i a_i \u548c\u4e0e a_i a_i \u76f8\u540c\u7684\u6743\u503c\uff0c\u5fc5\u987b\u653e\u5728 n+1-2-a[i]+1 n+1-2-a[i]+1 \u7684\u957f\u5ea6\u7684\u7a7a\u683c\u4e2d\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u7ec4\u5408\u6570\uff0c\u7136\u540e\u5b83\u524d\u7f00\u586b\u5145\u7269\u54c1\u5df2\u7ecf\u6709i\u4e2a\u4e86\uff0c\u7ec4\u5408\u6570\u7684\u4e0b\u90e8\u8fd8\u9700\u8981\u51cf\u6389\u4e00\u4e2a\u6743\u503c\uff0c\u89e3\u51fa\u6765\u5c31\u662f\u539f\u59cb\u7b54\u6848\u3002 \u7136\u540e\u518d\u6765\u8003\u8651\u540e\u7f000\uff0c\u5bf9\u4e8e\u540e\u7f000\u5728\u539f\u59cb\u7b54\u6848\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5b9e\u9645\u4e0a\u662f\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u5373\u53d6\u6700\u540e\u4e00\u4f4d\u4e3a0\uff0c\u628a0\u7684\u4e2a\u6570\u51cf\u4e00\uff0c\u7136\u540e\u518d\u8dd1\u4e00\u6b21\u539f\u59cb\u7b54\u6848\uff0c\u5373\u662f\u542b\u540e\u7f000\u7684\u5408\u6cd5\u7b54\u6848\uff0c\u51cf\u53bb\u5c31\u53ef\u4ee5\u4e86 \u5176\u5b9e\u770b\u9519\u9898\u4e86\u8fd8\u4ee5\u4e3a\u662f\u4e2a\u72b6\u538b\uff0c\u7ed3\u679c\u4e00\u770b\u7ec4\u6570\u5c31\u653e\u5f03\u4e86\uff0c\u4ee5\u540e\u6709\u673a\u4f1a\u51fa\u6210\u9898\u76ee\u3002","title":"K - Key Storage"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Northern%20Eurasia%20Finals/#l-lexicography","text":"\u9898\u610f\uff1a\u8111\u762b\uff0c\u7ed9nlr\uff0c\u8868\u793a\u7ed9\u51fan\u00d7l\u4e2a\u5b57\u7b26\u8981\u6784\u9020n\u4e2a\u957f\u5ea6\u4e3al\u7684\u5b57\u7b26\u4e32\uff0c\u4f7f\u5f97\u7b2cr\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6c42\u65b9\u6848\u3002 \u771f\u7684\u8111\u762b\uff0c\u663e\u7136\u662f\u4ece\u4e0a\u5f80\u4e0b\u7ed9\u5b57\u7b26\uff0c\u7136\u540e\u5982\u679c\u5f53\u524d\u4f4d\u4e0e\u524d\u4e00\u4e2a\u4f4d\u4e0d\u540c\u5373\u8868\u793a\u4e24\u4e2a\u4e32\u7684\u5b57\u5178\u5e8f\u5df2\u7ecf\u533a\u5206\u51fa\u6765\uff0c\u5c31\u4e0d\u7528\u7ba1\u5176\u4ed6\u7684\u4e86\uff0c\u7136\u540e\u6bd4r\u5927\u7684\u5b57\u7b26\u4e32\u4e5f\u4e0d\u7528\u7ba1\uff0c\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u6700\u5c0fr\u3002","title":"L - Lexicography"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/","text":"Name Date Solved A B C D E F G H I J K L M N 2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest 2019/10/29 9/14 O O O . O O . O . O . O . O Tag Link a\u3001\u6a21\u62df b\u3001\u8d2a\u5fc3 c\u3001\u7ebf\u6bb5\u6811 e\u30012-sat f\u3001\u66b4\u529b h\u3001\u601d\u7ef4 j\u3001\u4e8c\u5206\u8d2a\u5fc3 l\u3001\u601d\u7ef4\u66b4\u529b n\u3001\u6865 A. Berstagram Link \u7b7e\u5230 B. The Feast and the Bus Link \u9898\u610f\uff1an\u4e2a\u4eba\uff0c\u5206k\u961f\uff0c\u8981\u6784\u9020\u4e00\u4e2a\u8f66\u8fd0\u9001\u6240\u6709\u4eba\uff0c\u6bcf\u8d9f\u8f66\u53ea\u80fd\u8fd0\u9001\u5b8c\u6574\u7684\u4e00\u961f\u4eba\u6216\u8005\u5b8c\u6574\u7684\u4e24\u961f\u4eba\uff0c\u6c42\u8d9f\u6b21\u00d7\u8f66\u7684\u5927\u5c0f\u7684\u6700\u5c0f\u503c\u3002n\u4e0d\u8d85\u8fc75e5\uff0ck\u4e0d\u8d85\u8fc78000\u3002 \u9898\u89e3\uff1a \u906e\u4f4f\u6570\u636e\u8303\u56f4\u8fd9\u9898\u53ef\u4ee5\u5f88\u591a\u89e3\u6cd5\uff0ck\u4e3a8000\u6240\u4ee5\u8003\u8651 O(k^2) \uff0c\u679a\u4e3e\u8d9f\u6b21x\uff0c\u53ef\u77e5x\u7684\u8303\u56f4\u4e3a [k/2, k] \uff0c\u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u4e00\u4e2a2\u00d7x\u7684\u76d2\u5b50\uff0c\u586b\u5165k\u4e2a\u6570\u4f7f\u5f97\u5217\u4e0a\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u8d2a\u5fc3\u6784\u9020\u51fa\u89e3\uff1a\u7b2c\u4e00\u5217\u653e\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff08k\u4e0d\u8db32\u00d7x\u65f6\u653e\u51650\uff09\uff0c\u7b2c\u4e8c\u5217\u6b21\u5927\u6b21\u5c0f\u2026\u2026\uff0c\u53ef\u4ee5\u8bc1\u660e\u53ea\u8981\u4efb\u610f\u8c03\u6362\u987a\u5e8f\u90fd\u4f1a\u4f7f\u6700\u5927\u503c\u53d8\u5927\u3002\u5373\u5982\u679c x \u4e0e y \u5728\u4e00\u5217\uff0c z \u4e0e p \u5728\u4e00\u5217\uff0c\u4ed6\u4eec\u6ee1\u8db3\u6761\u4ef6\u4e3a x>=y && z>=p && x>=z && p>=y \uff0c\u5219 max(x+y, z+p)<=max(x+p, z+y) \u6210\u7acb\u3002 C. Trip to Saint Petersburg Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e9b\u533a\u95f4\u4ee5\u53ca\u533a\u95f4\u7684\u6743\u503c\uff0c\u6c42 L\uff0cR \u4f7f\u5f97\u5b8c\u5168\u5305\u542b\u4e8e L\uff0cR \u7684\u533a\u95f4\u6743\u503c\u548c-k\u00d7\u533a\u95f4\u5927\u5c0f\u6700\u5927\u3002\u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002\uff08\u533a\u95f4\u6570\u91cf2e5\uff0c\u533a\u95f4\u8303\u56f4\u4e5f\u4e3a2e5\uff09 \u9898\u89e3\uff1a\u8003\u8651\u5230\u8fd9\u4e2a\u9898\u7684\u533a\u95f4\u7aef\u70b9\u6700\u5927\u503c\u4e5f\u53ea\u67092e5\uff0c\u4e0d\u9700\u8981\u79bb\u6563\u5316\u76f4\u63a5\u904d\u5386\u6c42\u89e3\u5373\u53ef\u3002\u5177\u4f53\u6765\u8bb2\u679a\u4e3eR\u7684\u4f4d\u7f6e\uff0c\u9700\u8981\u6c42\u51fa\u7684\u662fr\u5c0f\u4e8e\u7b49\u4e8eR\u7684\u6240\u6709\u533a\u95f4\u5728\u8f74\u4e0a\u6784\u6210\u7684\u6700\u5927\u503c\u3002\u7136\u540e\u5c31\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u6811\u4f18\u5316dp\u5373\u53ef\u3002 E. The Coronation Link \u7ed9\u5b9a n n \u4e2a\u957f\u5ea6\u4e3a m m \u768401\u4e32\uff0c\u53ef\u4ee5\u5bf9\u4efb\u610f\u4e32\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6c42\u6ee1\u8db3\u4efb\u610f\u4e24\u4e2a\u4e32\u81f3\u5c11\u6709k\u4f4d\u76f8\u540c\u7684\u7ffb\u8f6c\u65b9\u6848\uff0c\u5e76\u4f7f\u7ffb\u8f6c\u6b21\u6570\u6700\u5c0f\u3002 2-SAT\u95ee\u9898\u3002 \u8bbe\u4e32\u4e0d\u7ffb\u8f6c\u4e3a0\uff0c\u7ffb\u8f6c\u4e3a1\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e32\u90fd\u6709\u5982\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a a,b\u548ca,rev(b)\u76f8\u540c\u4f4d\u6570\u5747\u5927\u4e8e\u7b49\u4e8ek\uff0c\u6b64\u65f6a,b\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u9650\u5236\uff1b a,b\u76f8\u540c\u4e4b\u95f4\u4f4d\u6570\u5927\u4e8e\u7b49\u4e8ek\uff0ca,rev(b)\u4e4b\u95f4\u76f8\u540c\u4f4d\u6570\u5c0f\u4e8ek\uff0c\u6b64\u65f6a,b\u5fc5\u987b\u76f8\u540c\uff0c\u5373XOR(a,b)=0; a,b\u76f8\u540c\u4e4b\u95f4\u4f4d\u6570\u5c0f\u4e8e\u7b49\u4e8ek\uff0ca,rev(b)\u4e4b\u95f4\u76f8\u540c\u4f4d\u6570\u5927\u4e8ek\uff0c\u6b64\u65f6a,b\u5fc5\u987b\u76f8\u53cd\uff0c\u5373XOR(a,b)=1; a,b\u548ca,rev(b)\u76f8\u540c\u4f4d\u6570\u5747\u5c0f\u4e8ek\uff0c\u5373\u65e0\u8bba\u600e\u4e48\u7ffb\u8f6c\u90fd\u4e0d\u80fd\u4f7fa,b\u4e24\u8005\u5339\u914d\uff1b \u4e00\u65e6\u51fa\u73b04\uff0c\u6574\u7ec4\u60c5\u51b5\u4e00\u5b9a\u662f\u65e0\u89e3\u7684\u3002 \u76f8\u5f53\u4e8e\u539f\u4e32\u6240\u4ee3\u8868\u7684\u70b9\u5f62\u6210\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u4e2d\u7684\u5143\u7d20\u989c\u8272\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff08\u5373\u5982\u679c\u7ffb\u8f6c\u4e00\u4e2a\uff0c\u5fc5\u987b\u7ffb\u8f6c\u8be5\u5757\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff09\u3002 \u5efa\u5b8c\u56fe\u540e\u5bf9\u70b9 i i \u548c\u70b9 i+n\u200b i+n\u200b \u8fdb\u884cdfs\uff0c\u56e0\u4e3a\u56fe\u7684\u4e24\u4fa7\u5b8c\u5168\u5bf9\u79f0\uff0c\u4e00\u5b9a\u4f1a\u641c\u51fa\u4e00\u7ec4\u70b9\u5b8c\u5168\u76f8\u53cd\u7684\u4e24\u79cd\u67d3\u8272\u65b9\u6848\uff0c\u53ea\u8981\u9009\u62e9\u7ffb\u8f6c\u6b21\u6570\u8f83\u5c0f\u7684\u90a3\u4e00\u7ec4\u5373\u53ef\u3002\u6ce8\u610f\u5728dfs\u65f6\u9700\u8981\u5224\u5947\u73af\uff0c\u5982\u679c\u51fa\u73b0\u5947\u73af\u5219\u65e0\u89e3\u3002 F. Data Center Link \u7b7e\u5230 H. Happy Birthday Link \u7ed9\u5b9a0-9\u5404\u4e2a\u6570\u5b57\u7684\u4e2a\u6570\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u4e0d\u80fd\u7ec4\u6210\u7684\u6570\u5b57\u3002 \u7b54\u6848\u662f\u51fa\u73b0\u7684\u6700\u5c11\u6b21\u6570\u7684\u6570\u5b57\u591a1\u4e2a\uff0c\u5982\u679c\u662f0\u5c31\u5728\u524d\u9762\u52a01\u3002 J. The Parade Link \u7ed9\u5b9a\u4e86\u4e00\u4e9b\u8eab\u9ad8\u4e0d\u540c\u7684\u58eb\u5175\uff0c\u8eab\u9ad8\u4e3ai\u7684\u58eb\u5175\u6709c[i]\u4e2a\uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2ak\u884c\u7684\u77e9\u5f62\uff0c\u4f7f\u6bcf\u4e00\u884c\u7684\u4eba\u6570\u76f8\u7b49\uff0c\u4e14\u8be5\u884c\u7684\u6781\u5dee\u4e0d\u8d85\u8fc71\uff0c\u95ee\u8fd9\u4e2a\u77e9\u9635\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u4e8c\u5206\u6bcf\u884c\u957f\u5ea6x\uff0c\u5c06\u524d\u4e00\u7c7b\u4f59\u4e0b\u7684\u4eba\u6570pre\u4e0ei\u76f8\u52a0\uff0c\u5224\u65ad\u5176\u662f\u5426\u5927\u4e8ex\uff0c\u5982\u679c\u662fx\u5219\u6709\u8d21\u732e\uff0c\u5c06\u5269\u4e0b\u7684i\u6392\u6210\u957f\u5ea6\u4e3ax\u7684\u884c\uff0c\u5269\u4e0b\u7684\u503c\u66f4\u65b0pre. L. Divide The Students Link \u6709\u4e09\u7c7b\u4ebaa,b,c\uff0ca\u7c7b\u4e0ec\u7c7b\u4e0d\u80fd\u540c\u7ec4\uff0c\u5c06\u4ed6\u4eec\u5206\u62103\u7ec4\uff0c\u4f7f\u6700\u5927\u7ec4\u6570\u6700\u5c0f\u3002 \u5c06a\uff0cc\u4e2d\u8f83\u5927\u7684\u503c\u5206\u6210\u4e24\u4efd\uff0c\u6bcf\u6b21\u62ffb\u586b\u51453\u7c7b\u4e2d\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 N. Wires Link \u7ed9\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6bcf\u6b21\u53ef\u4ee5\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u4e00\u7aef\uff0c\u95ee\u6700\u5c11\u4fee\u6539\u591a\u5c11\u6b21\u80fd\u4f7f\u8054\u901a\u5757\u53d8\u4e3a\u53ea\u67091\u4e2a\uff08\u6ca1\u6709\u4efb\u4f55\u8fb9\u76f8\u8fde\u7684\u70b9\u89c6\u4e3a\u6e38\u79bb\uff0c\u4e0d\u7528\u4e0e\u5757\u8fde\u901a\uff09\u3002 \u5982\u679c\u6709n\u4e2a\u8054\u901a\u5757\u663e\u7136\u81f3\u5c11\u4fee\u6539n-1\u6b21\uff0c\u6bcf\u6b21\u9009\u62e9\u8054\u901a\u5757\u4e2d\u7684\u975e\u6865\u8fb9\u4e0e\u7b2c\u4e00\u4e2a\u8054\u901a\u5757\u76f8\u8fde\uff0c\u5982\u679c\u90fd\u4e3a\u6865\u8fb9\uff08\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff09\uff0c\u4fee\u6539\u94fe\u9996\u5373\u53ef\u3002\u6ce8\u610f\u91cd\u8fb9\u3002","title":"2019 2020 ICPC, NERC, Southern and Volga Russian Regional Contest"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#tag","text":"a\u3001\u6a21\u62df b\u3001\u8d2a\u5fc3 c\u3001\u7ebf\u6bb5\u6811 e\u30012-sat f\u3001\u66b4\u529b h\u3001\u601d\u7ef4 j\u3001\u4e8c\u5206\u8d2a\u5fc3 l\u3001\u601d\u7ef4\u66b4\u529b n\u3001\u6865","title":"Tag"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#a-berstagram","text":"\u7b7e\u5230","title":"A. Berstagram"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#b-the-feast-and-the-bus","text":"\u9898\u610f\uff1an\u4e2a\u4eba\uff0c\u5206k\u961f\uff0c\u8981\u6784\u9020\u4e00\u4e2a\u8f66\u8fd0\u9001\u6240\u6709\u4eba\uff0c\u6bcf\u8d9f\u8f66\u53ea\u80fd\u8fd0\u9001\u5b8c\u6574\u7684\u4e00\u961f\u4eba\u6216\u8005\u5b8c\u6574\u7684\u4e24\u961f\u4eba\uff0c\u6c42\u8d9f\u6b21\u00d7\u8f66\u7684\u5927\u5c0f\u7684\u6700\u5c0f\u503c\u3002n\u4e0d\u8d85\u8fc75e5\uff0ck\u4e0d\u8d85\u8fc78000\u3002 \u9898\u89e3\uff1a \u906e\u4f4f\u6570\u636e\u8303\u56f4\u8fd9\u9898\u53ef\u4ee5\u5f88\u591a\u89e3\u6cd5\uff0ck\u4e3a8000\u6240\u4ee5\u8003\u8651 O(k^2) \uff0c\u679a\u4e3e\u8d9f\u6b21x\uff0c\u53ef\u77e5x\u7684\u8303\u56f4\u4e3a [k/2, k] \uff0c\u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u4e00\u4e2a2\u00d7x\u7684\u76d2\u5b50\uff0c\u586b\u5165k\u4e2a\u6570\u4f7f\u5f97\u5217\u4e0a\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u8d2a\u5fc3\u6784\u9020\u51fa\u89e3\uff1a\u7b2c\u4e00\u5217\u653e\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff08k\u4e0d\u8db32\u00d7x\u65f6\u653e\u51650\uff09\uff0c\u7b2c\u4e8c\u5217\u6b21\u5927\u6b21\u5c0f\u2026\u2026\uff0c\u53ef\u4ee5\u8bc1\u660e\u53ea\u8981\u4efb\u610f\u8c03\u6362\u987a\u5e8f\u90fd\u4f1a\u4f7f\u6700\u5927\u503c\u53d8\u5927\u3002\u5373\u5982\u679c x \u4e0e y \u5728\u4e00\u5217\uff0c z \u4e0e p \u5728\u4e00\u5217\uff0c\u4ed6\u4eec\u6ee1\u8db3\u6761\u4ef6\u4e3a x>=y && z>=p && x>=z && p>=y \uff0c\u5219 max(x+y, z+p)<=max(x+p, z+y) \u6210\u7acb\u3002","title":"B. The Feast and the Bus"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#c-trip-to-saint-petersburg","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e9b\u533a\u95f4\u4ee5\u53ca\u533a\u95f4\u7684\u6743\u503c\uff0c\u6c42 L\uff0cR \u4f7f\u5f97\u5b8c\u5168\u5305\u542b\u4e8e L\uff0cR \u7684\u533a\u95f4\u6743\u503c\u548c-k\u00d7\u533a\u95f4\u5927\u5c0f\u6700\u5927\u3002\u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002\uff08\u533a\u95f4\u6570\u91cf2e5\uff0c\u533a\u95f4\u8303\u56f4\u4e5f\u4e3a2e5\uff09 \u9898\u89e3\uff1a\u8003\u8651\u5230\u8fd9\u4e2a\u9898\u7684\u533a\u95f4\u7aef\u70b9\u6700\u5927\u503c\u4e5f\u53ea\u67092e5\uff0c\u4e0d\u9700\u8981\u79bb\u6563\u5316\u76f4\u63a5\u904d\u5386\u6c42\u89e3\u5373\u53ef\u3002\u5177\u4f53\u6765\u8bb2\u679a\u4e3eR\u7684\u4f4d\u7f6e\uff0c\u9700\u8981\u6c42\u51fa\u7684\u662fr\u5c0f\u4e8e\u7b49\u4e8eR\u7684\u6240\u6709\u533a\u95f4\u5728\u8f74\u4e0a\u6784\u6210\u7684\u6700\u5927\u503c\u3002\u7136\u540e\u5c31\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u6811\u4f18\u5316dp\u5373\u53ef\u3002","title":"C. Trip to Saint Petersburg"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#e-the-coronation","text":"\u7ed9\u5b9a n n \u4e2a\u957f\u5ea6\u4e3a m m \u768401\u4e32\uff0c\u53ef\u4ee5\u5bf9\u4efb\u610f\u4e32\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6c42\u6ee1\u8db3\u4efb\u610f\u4e24\u4e2a\u4e32\u81f3\u5c11\u6709k\u4f4d\u76f8\u540c\u7684\u7ffb\u8f6c\u65b9\u6848\uff0c\u5e76\u4f7f\u7ffb\u8f6c\u6b21\u6570\u6700\u5c0f\u3002 2-SAT\u95ee\u9898\u3002 \u8bbe\u4e32\u4e0d\u7ffb\u8f6c\u4e3a0\uff0c\u7ffb\u8f6c\u4e3a1\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e32\u90fd\u6709\u5982\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a a,b\u548ca,rev(b)\u76f8\u540c\u4f4d\u6570\u5747\u5927\u4e8e\u7b49\u4e8ek\uff0c\u6b64\u65f6a,b\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u9650\u5236\uff1b a,b\u76f8\u540c\u4e4b\u95f4\u4f4d\u6570\u5927\u4e8e\u7b49\u4e8ek\uff0ca,rev(b)\u4e4b\u95f4\u76f8\u540c\u4f4d\u6570\u5c0f\u4e8ek\uff0c\u6b64\u65f6a,b\u5fc5\u987b\u76f8\u540c\uff0c\u5373XOR(a,b)=0; a,b\u76f8\u540c\u4e4b\u95f4\u4f4d\u6570\u5c0f\u4e8e\u7b49\u4e8ek\uff0ca,rev(b)\u4e4b\u95f4\u76f8\u540c\u4f4d\u6570\u5927\u4e8ek\uff0c\u6b64\u65f6a,b\u5fc5\u987b\u76f8\u53cd\uff0c\u5373XOR(a,b)=1; a,b\u548ca,rev(b)\u76f8\u540c\u4f4d\u6570\u5747\u5c0f\u4e8ek\uff0c\u5373\u65e0\u8bba\u600e\u4e48\u7ffb\u8f6c\u90fd\u4e0d\u80fd\u4f7fa,b\u4e24\u8005\u5339\u914d\uff1b \u4e00\u65e6\u51fa\u73b04\uff0c\u6574\u7ec4\u60c5\u51b5\u4e00\u5b9a\u662f\u65e0\u89e3\u7684\u3002 \u76f8\u5f53\u4e8e\u539f\u4e32\u6240\u4ee3\u8868\u7684\u70b9\u5f62\u6210\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u4e2d\u7684\u5143\u7d20\u989c\u8272\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff08\u5373\u5982\u679c\u7ffb\u8f6c\u4e00\u4e2a\uff0c\u5fc5\u987b\u7ffb\u8f6c\u8be5\u5757\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff09\u3002 \u5efa\u5b8c\u56fe\u540e\u5bf9\u70b9 i i \u548c\u70b9 i+n\u200b i+n\u200b \u8fdb\u884cdfs\uff0c\u56e0\u4e3a\u56fe\u7684\u4e24\u4fa7\u5b8c\u5168\u5bf9\u79f0\uff0c\u4e00\u5b9a\u4f1a\u641c\u51fa\u4e00\u7ec4\u70b9\u5b8c\u5168\u76f8\u53cd\u7684\u4e24\u79cd\u67d3\u8272\u65b9\u6848\uff0c\u53ea\u8981\u9009\u62e9\u7ffb\u8f6c\u6b21\u6570\u8f83\u5c0f\u7684\u90a3\u4e00\u7ec4\u5373\u53ef\u3002\u6ce8\u610f\u5728dfs\u65f6\u9700\u8981\u5224\u5947\u73af\uff0c\u5982\u679c\u51fa\u73b0\u5947\u73af\u5219\u65e0\u89e3\u3002","title":"E. The Coronation"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#f-data-center","text":"\u7b7e\u5230","title":"F. Data Center"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#h-happy-birthday","text":"\u7ed9\u5b9a0-9\u5404\u4e2a\u6570\u5b57\u7684\u4e2a\u6570\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u4e0d\u80fd\u7ec4\u6210\u7684\u6570\u5b57\u3002 \u7b54\u6848\u662f\u51fa\u73b0\u7684\u6700\u5c11\u6b21\u6570\u7684\u6570\u5b57\u591a1\u4e2a\uff0c\u5982\u679c\u662f0\u5c31\u5728\u524d\u9762\u52a01\u3002","title":"H. Happy Birthday"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#j-the-parade","text":"\u7ed9\u5b9a\u4e86\u4e00\u4e9b\u8eab\u9ad8\u4e0d\u540c\u7684\u58eb\u5175\uff0c\u8eab\u9ad8\u4e3ai\u7684\u58eb\u5175\u6709c[i]\u4e2a\uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2ak\u884c\u7684\u77e9\u5f62\uff0c\u4f7f\u6bcf\u4e00\u884c\u7684\u4eba\u6570\u76f8\u7b49\uff0c\u4e14\u8be5\u884c\u7684\u6781\u5dee\u4e0d\u8d85\u8fc71\uff0c\u95ee\u8fd9\u4e2a\u77e9\u9635\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u4e8c\u5206\u6bcf\u884c\u957f\u5ea6x\uff0c\u5c06\u524d\u4e00\u7c7b\u4f59\u4e0b\u7684\u4eba\u6570pre\u4e0ei\u76f8\u52a0\uff0c\u5224\u65ad\u5176\u662f\u5426\u5927\u4e8ex\uff0c\u5982\u679c\u662fx\u5219\u6709\u8d21\u732e\uff0c\u5c06\u5269\u4e0b\u7684i\u6392\u6210\u957f\u5ea6\u4e3ax\u7684\u884c\uff0c\u5269\u4e0b\u7684\u503c\u66f4\u65b0pre.","title":"J. The Parade"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#l-divide-the-students","text":"\u6709\u4e09\u7c7b\u4ebaa,b,c\uff0ca\u7c7b\u4e0ec\u7c7b\u4e0d\u80fd\u540c\u7ec4\uff0c\u5c06\u4ed6\u4eec\u5206\u62103\u7ec4\uff0c\u4f7f\u6700\u5927\u7ec4\u6570\u6700\u5c0f\u3002 \u5c06a\uff0cc\u4e2d\u8f83\u5927\u7684\u503c\u5206\u6210\u4e24\u4efd\uff0c\u6bcf\u6b21\u62ffb\u586b\u51453\u7c7b\u4e2d\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002","title":"L. Divide The Students"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/2019-2020%20ICPC%2C%20NERC%2C%20Southern%20and%20Volga%20Russian%20Regional%20Contest/#n-wires","text":"\u7ed9\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6bcf\u6b21\u53ef\u4ee5\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u4e00\u7aef\uff0c\u95ee\u6700\u5c11\u4fee\u6539\u591a\u5c11\u6b21\u80fd\u4f7f\u8054\u901a\u5757\u53d8\u4e3a\u53ea\u67091\u4e2a\uff08\u6ca1\u6709\u4efb\u4f55\u8fb9\u76f8\u8fde\u7684\u70b9\u89c6\u4e3a\u6e38\u79bb\uff0c\u4e0d\u7528\u4e0e\u5757\u8fde\u901a\uff09\u3002 \u5982\u679c\u6709n\u4e2a\u8054\u901a\u5757\u663e\u7136\u81f3\u5c11\u4fee\u6539n-1\u6b21\uff0c\u6bcf\u6b21\u9009\u62e9\u8054\u901a\u5757\u4e2d\u7684\u975e\u6865\u8fb9\u4e0e\u7b2c\u4e00\u4e2a\u8054\u901a\u5757\u76f8\u8fde\uff0c\u5982\u679c\u90fd\u4e3a\u6865\u8fb9\uff08\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff09\uff0c\u4fee\u6539\u94fe\u9996\u5373\u53ef\u3002\u6ce8\u610f\u91cd\u8fb9\u3002","title":"N. Wires"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/The%2013th%20Chinese%20Northeast%20Collegiate%20Programming%20Contest/","text":"Name Date Solved A B C D E F G H I J K L M N The 13 th Chinese Northeast Collegiate Programming Contest 2019/9/25 7/10 . O O . O \u00d8 O O . O","title":"The 13th Chinese Northeast Collegiate Programming Contest"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/The%202018%20ACM-ICPC%20Asia%20Beijing%20Regional%20Contest/","text":"Name Date Solved A B C D E F G H I J The 2018 ACM-ICPC Asia Beijing Regional Contest 2019/10/11 5/12 O \u00d8 . O . . . O O . A. Jin Yong\u2019s Wukong Ranking List Link \u6709\u5411\u56fe\u5224\u73af\uff0c20\u4e2a\u70b9 B. Heshen\u2019s Account Book Link \u6309\u9898\u610f\u6a21\u62df\uff0c\u6570\u636e\u6c34 \u7ed9\u82e5\u5e72\u884c\u5b57\u7b26\uff0c\u5305\u542b\u6570\u5b57\u5b57\u6bcd\u548c\u7a7a\u683c\u6362\u884c \u6c42\u6240\u6709\u8fde\u7eed\u7684\u975e\u7a7a\u4e32\u4e2d\uff0c\u4ee5\u6570\u5b57\u5f00\u5934\u6570\u5b57\u7ed3\u5c3e\uff0c\u5f00\u5934\u975e0\u7684\u4e32\uff0c\u5254\u9664\u5b57\u6bcd\u3002\u8fd8\u8981\u7edf\u8ba1\u6bcf\u884c\u8fd9\u6837\u7684\u4e32\u7684\u4e2a\u6570\uff0c\u5355\u4e2a\u6362\u884c\u4e0d\u5f71\u54cd\u4e32\u7684\u8fde\u7eed\u6027\u3002\u4f46\u662f\u6362\u884c\u524d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e0d\u80fd\u4e3a\u5b57\u6bcd\uff0c\u540e\u4e00\u4e2a\u4e5f\u4e0d\u80fd\u3002 D. Frog and Portal Link \u5171200\u4e2a\u70b9\uff0c\u521d\u59cb\u57280\u4f4d\u7f6e\uff0c\u8981\u5230201\u683c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8df31\u62162\u683c\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e9b\u4f20\u9001\u70b9\uff08\u5de6\u548c\u53f3\uff0c\u8868\u793a\u5230\u5de6\u8fb9\u683c\u5b50\u5fc5\u4f1a\u81ea\u52a8\u4f20\u9001\u5230\u53f3\u8fb9\u683c\u5b50\uff09\uff0c\u4f7f\u5f97\u5230201\u7684\u65b9\u6848\u6570\u6070\u4e3am \u9996\u5148\u8003\u8651\u65b9\u6848\u6570\u7684\u8bb0\u5f55\uff1a \u5bf9\u4f20\u9001\u70b9\u53f3\u5230\u5de6\u5efa\u8fb9 dp[i] \u8868\u793a i \u4f4d\u7f6e\u7684\u65b9\u6848\u4e2a\u6570 \u5982\u679c i \u7684\u5165\u5ea6\u4e3a1\uff08\u6700\u591a\u4e3a1\uff09\uff0c\u5219 dp[i] = 0 \uff0c\u5426\u5219 dp[i] = dp[i - 1] + dp[i - 2] + all(dp[edge[i]]) dp[n] \u5373\u4e3a\u603b\u65b9\u6848\u6570 \u7136\u540e\u8003\u8651\u5982\u4f55\u6784\u9020\u65b9\u6848 \u7531\u4e8em\u7684\u8303\u56f4\u4e3a 0 \\le M < 2^{32} \u8003\u8651\u4e8c\u8fdb\u5236\u679a\u4e3e \u7531\u4e8e\u8fd9\u4e2adp\u770b\u7740\u5c31\u50cf\u500d\u589e\u7684\u590d\u6742\u5ea6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u968f\u4fbf\u5199\u4e86 \u6bd4\u5982\uff1a 1 1 2 \u5982\u679c\u4e0d\u8df3\u7684\u8bdd\u4f1a\u4ea7\u751f\u4e00\u4e2a 3 \uff0c\u5bf9\u4e8c\u8fdb\u5236\u7684\u679a\u4e3e\u4e0d\u5229\uff0c\u6240\u4ee5\u72ec\u7acb\u51fa299\u81ea\u52a8\u6210\u73af\uff0c\u7136\u540e\u5c063\u53f7\u70b9\u8df3\u5230299\u5c31\u53ef\u4ee5\u5bf9\u7b54\u6848\u4e0d\u4ea7\u751f\u8d21\u732e\u3002 1 1 2 0 2 2 4 0 4 4 0 ... \u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u679a\u4e3e\u51fa\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u4f4d \u4f46\u662f\u95ee\u9898\u662f\u8981\u8df3\u5230\u6700\u540e\u4e00\u4f4d\uff0c\u6240\u4ee5\u7ee7\u7eed\u6784\u9020 1 1 2 0 2 2 x 2 2 4 0 4 4 x 4 4 x \u8868\u793a\u5f53\u524d\u4e3a0\uff0c\u5373\u5982\u679c\u5f53\u524d\u6570\u662fM\u9700\u8981\u7684\u5219\u76f4\u63a5\u8df3\u5230200\uff0c\u5426\u5219\u8df3\u5230199\u81ea\u73af\u3002 \u6ce8\u610f198\u4e5f\u8981\u81ea\u73af\u5426\u5219\u4f1a\u5bf9200\u4ea7\u751f\u5f71\u54cd\u3002 \uff28. Approximate Matching Link \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6a21\u5f0f\u4e32\uff0c\u5982\u679c\u4e00\u4e2a\u4e32\u7684\u4efb\u610f\u4e00\u4e2a\u4e0e\u6a21\u5f0f\u4e32\u957f\u5ea6\u76f8\u540c\u5b50\u4e32\u4e0e\u8be5\u6a21\u5f0f\u4e32\u53ea\u6709<=1\u4f4d\u4e0d\u540c\uff0c\u5219\u8fd9\u4e2a\u4e32\u4e0e\u7ed9\u7684\u6a21\u5f0f\u4e32\u8fd1\u4f3c\u5339\u914d\u3002\u6c42\u957f\u5ea6\u4e3an\uff0c\u4e14\u4e0e\u8be5\u6a21\u5f0f\u4e32\u8fd1\u4f3c\u5339\u914d\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u3002 \u88ab\u51fa\u70c2\u4e86\u7684\u9898\u2026\u2026\u628a\u539f\u4e32\u548c\u6240\u6709\u6539\u53d8\u4e00\u4f4d\u7684\u4e32\u52a0\u5165AC\u81ea\u52a8\u673a\uff0c\u7b54\u6848\u7b49\u4e8e\u5b57\u7b26\u4e32\u603b\u6570-\u4e0d\u542b\u4efb\u4f55\u6a21\u5f0f\u4e32\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\uff0c\u540e\u8005\u5728AC\u81ea\u52a8\u673a\u4e0adp\u8dd1\u4e00\u4e0b\u5c31\u597d\u3002 I. Palindromes Link \u8f93\u51fa\u957f\u5ea6\u4f18\u5148\u5b57\u5178\u5e8f\u7b2ck\u5927\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u56de\u6587\u4e32 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, \u2026 k\u5f88\u5927\u6240\u4ee5\u901a\u8fc7\u8ba1\u7b97\uff0c\u5b9e\u9645\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u4e3a\u4e0d\u7b97\u524d\u5bfc0\u7684\u539f\u56e0\u4f1a\u4ea7\u751f\u4e00\u4e9b\u9700\u8981\u7279\u522b\u5224\u65ad\u7684\u70b9\u3002 \u603b\u4e4b\u5c31\u662f\u9996\u5148\u5224\u65ad\u6709x\u4f4d\u6570\uff0c\u7136\u540e\u5199\u51fa\u8fd9(x/2)\u4f4d\u6570\u7684\u524d\u7f00\u8ba1\u6570\u5220\u53bb\u540e\u5269\u4e0b\u7684\u7b2c\u51e0\u4f4d\u5373\u53ef\u3002","title":"The 2018 ACM ICPC Asia Beijing Regional Contest"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/The%202018%20ACM-ICPC%20Asia%20Beijing%20Regional%20Contest/#a-jin-yongs-wukong-ranking-list","text":"\u6709\u5411\u56fe\u5224\u73af\uff0c20\u4e2a\u70b9","title":"A. Jin Yong\u2019s Wukong Ranking List"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/The%202018%20ACM-ICPC%20Asia%20Beijing%20Regional%20Contest/#b-heshens-account-book","text":"\u6309\u9898\u610f\u6a21\u62df\uff0c\u6570\u636e\u6c34 \u7ed9\u82e5\u5e72\u884c\u5b57\u7b26\uff0c\u5305\u542b\u6570\u5b57\u5b57\u6bcd\u548c\u7a7a\u683c\u6362\u884c \u6c42\u6240\u6709\u8fde\u7eed\u7684\u975e\u7a7a\u4e32\u4e2d\uff0c\u4ee5\u6570\u5b57\u5f00\u5934\u6570\u5b57\u7ed3\u5c3e\uff0c\u5f00\u5934\u975e0\u7684\u4e32\uff0c\u5254\u9664\u5b57\u6bcd\u3002\u8fd8\u8981\u7edf\u8ba1\u6bcf\u884c\u8fd9\u6837\u7684\u4e32\u7684\u4e2a\u6570\uff0c\u5355\u4e2a\u6362\u884c\u4e0d\u5f71\u54cd\u4e32\u7684\u8fde\u7eed\u6027\u3002\u4f46\u662f\u6362\u884c\u524d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e0d\u80fd\u4e3a\u5b57\u6bcd\uff0c\u540e\u4e00\u4e2a\u4e5f\u4e0d\u80fd\u3002","title":"B. Heshen's Account Book"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/The%202018%20ACM-ICPC%20Asia%20Beijing%20Regional%20Contest/#d-frog-and-portal","text":"\u5171200\u4e2a\u70b9\uff0c\u521d\u59cb\u57280\u4f4d\u7f6e\uff0c\u8981\u5230201\u683c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8df31\u62162\u683c\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e9b\u4f20\u9001\u70b9\uff08\u5de6\u548c\u53f3\uff0c\u8868\u793a\u5230\u5de6\u8fb9\u683c\u5b50\u5fc5\u4f1a\u81ea\u52a8\u4f20\u9001\u5230\u53f3\u8fb9\u683c\u5b50\uff09\uff0c\u4f7f\u5f97\u5230201\u7684\u65b9\u6848\u6570\u6070\u4e3am \u9996\u5148\u8003\u8651\u65b9\u6848\u6570\u7684\u8bb0\u5f55\uff1a \u5bf9\u4f20\u9001\u70b9\u53f3\u5230\u5de6\u5efa\u8fb9 dp[i] \u8868\u793a i \u4f4d\u7f6e\u7684\u65b9\u6848\u4e2a\u6570 \u5982\u679c i \u7684\u5165\u5ea6\u4e3a1\uff08\u6700\u591a\u4e3a1\uff09\uff0c\u5219 dp[i] = 0 \uff0c\u5426\u5219 dp[i] = dp[i - 1] + dp[i - 2] + all(dp[edge[i]]) dp[n] \u5373\u4e3a\u603b\u65b9\u6848\u6570 \u7136\u540e\u8003\u8651\u5982\u4f55\u6784\u9020\u65b9\u6848 \u7531\u4e8em\u7684\u8303\u56f4\u4e3a 0 \\le M < 2^{32} \u8003\u8651\u4e8c\u8fdb\u5236\u679a\u4e3e \u7531\u4e8e\u8fd9\u4e2adp\u770b\u7740\u5c31\u50cf\u500d\u589e\u7684\u590d\u6742\u5ea6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u968f\u4fbf\u5199\u4e86 \u6bd4\u5982\uff1a 1 1 2 \u5982\u679c\u4e0d\u8df3\u7684\u8bdd\u4f1a\u4ea7\u751f\u4e00\u4e2a 3 \uff0c\u5bf9\u4e8c\u8fdb\u5236\u7684\u679a\u4e3e\u4e0d\u5229\uff0c\u6240\u4ee5\u72ec\u7acb\u51fa299\u81ea\u52a8\u6210\u73af\uff0c\u7136\u540e\u5c063\u53f7\u70b9\u8df3\u5230299\u5c31\u53ef\u4ee5\u5bf9\u7b54\u6848\u4e0d\u4ea7\u751f\u8d21\u732e\u3002 1 1 2 0 2 2 4 0 4 4 0 ... \u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u679a\u4e3e\u51fa\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u4f4d \u4f46\u662f\u95ee\u9898\u662f\u8981\u8df3\u5230\u6700\u540e\u4e00\u4f4d\uff0c\u6240\u4ee5\u7ee7\u7eed\u6784\u9020 1 1 2 0 2 2 x 2 2 4 0 4 4 x 4 4 x \u8868\u793a\u5f53\u524d\u4e3a0\uff0c\u5373\u5982\u679c\u5f53\u524d\u6570\u662fM\u9700\u8981\u7684\u5219\u76f4\u63a5\u8df3\u5230200\uff0c\u5426\u5219\u8df3\u5230199\u81ea\u73af\u3002 \u6ce8\u610f198\u4e5f\u8981\u81ea\u73af\u5426\u5219\u4f1a\u5bf9200\u4ea7\u751f\u5f71\u54cd\u3002","title":"D. Frog and Portal"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/The%202018%20ACM-ICPC%20Asia%20Beijing%20Regional%20Contest/#h-approximate-matching","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6a21\u5f0f\u4e32\uff0c\u5982\u679c\u4e00\u4e2a\u4e32\u7684\u4efb\u610f\u4e00\u4e2a\u4e0e\u6a21\u5f0f\u4e32\u957f\u5ea6\u76f8\u540c\u5b50\u4e32\u4e0e\u8be5\u6a21\u5f0f\u4e32\u53ea\u6709<=1\u4f4d\u4e0d\u540c\uff0c\u5219\u8fd9\u4e2a\u4e32\u4e0e\u7ed9\u7684\u6a21\u5f0f\u4e32\u8fd1\u4f3c\u5339\u914d\u3002\u6c42\u957f\u5ea6\u4e3an\uff0c\u4e14\u4e0e\u8be5\u6a21\u5f0f\u4e32\u8fd1\u4f3c\u5339\u914d\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u3002 \u88ab\u51fa\u70c2\u4e86\u7684\u9898\u2026\u2026\u628a\u539f\u4e32\u548c\u6240\u6709\u6539\u53d8\u4e00\u4f4d\u7684\u4e32\u52a0\u5165AC\u81ea\u52a8\u673a\uff0c\u7b54\u6848\u7b49\u4e8e\u5b57\u7b26\u4e32\u603b\u6570-\u4e0d\u542b\u4efb\u4f55\u6a21\u5f0f\u4e32\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\uff0c\u540e\u8005\u5728AC\u81ea\u52a8\u673a\u4e0adp\u8dd1\u4e00\u4e0b\u5c31\u597d\u3002","title":"\uff28.  Approximate Matching"},{"location":"Training%20Logs/2019%E8%AE%AD%E7%BB%83%E8%B5%9B/The%202018%20ACM-ICPC%20Asia%20Beijing%20Regional%20Contest/#i-palindromes","text":"\u8f93\u51fa\u957f\u5ea6\u4f18\u5148\u5b57\u5178\u5e8f\u7b2ck\u5927\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u56de\u6587\u4e32 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, \u2026 k\u5f88\u5927\u6240\u4ee5\u901a\u8fc7\u8ba1\u7b97\uff0c\u5b9e\u9645\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u4e3a\u4e0d\u7b97\u524d\u5bfc0\u7684\u539f\u56e0\u4f1a\u4ea7\u751f\u4e00\u4e9b\u9700\u8981\u7279\u522b\u5224\u65ad\u7684\u70b9\u3002 \u603b\u4e4b\u5c31\u662f\u9996\u5148\u5224\u65ad\u6709x\u4f4d\u6570\uff0c\u7136\u540e\u5199\u51fa\u8fd9(x/2)\u4f4d\u6570\u7684\u524d\u7f00\u8ba1\u6570\u5220\u53bb\u540e\u5269\u4e0b\u7684\u7b2c\u51e0\u4f4d\u5373\u53ef\u3002","title":"I.  Palindromes"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%201/","text":"Name Date Solved A B C D E F G H I J K L 2020 Multi-University Training Contest 1 2020/7/21 7/12 . . . O O \u00d8 . . \u00d8 \u00d8 \u00d8 \u00d8 D. Distinct Sub-palindromes Link \u6c42\u957f\u5ea6\u4e3a n \u7684\u4efb\u610f\u4e32\u4e2d\uff0c\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u6700\u5c11\u7684\u6709\u591a\u5c11\u79cd \u957f\u5ea6\u4e3a 1,2,3 \u7684\u65f6\u5019\u968f\u4fbf\u586b\u90fd\u662f\u6700\u5c11\u4e2a\u6570 \u5927\u4e8e\u4e09\u7684\u53ea\u8981\u53d6\u4e09\u4e2a\u4e0d\u540c\u5b57\u7b26 abc \u5faa\u73af\u5373\u53ef\uff0c\u6700\u5c11\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e3a 3 \u4e2a Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/21 12:20 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 998244353 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); ll res = 1 ; for ( int i = 24 ; i <= 26 ; ++ i ) { res = res * i % mod ; } for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; R ( n ); if ( n == 1 ) { W ( 26 ); } else if ( n == 2 ) { W ( 676 ); } else if ( n == 3 ) { W ( 26 * 26 * 26 ); } else { W ( res ); } } return 0 ; } E. Fibonacci Sum Link \u6c42 \\sum_{i=0}^N (F^K_{i*C}) \\sum_{i=0}^N (F^K_{i*C}) \u5bf9 1e9+7 \u53d6\u6a21 \u5176\u4e2d F_0 = 0, F_1 = 1, F_i=F_{i-1}+F_{i-2} F_0 = 0, F_1 = 1, F_i=F_{i-1}+F_{i-2} \u4f17\u6240\u5468\u77e5 5 \u662f 1e9+7 \u7684\u539f\u6839\u6240\u4ee5\u968f\u4fbf\u505a\u4e00\u4e0b\u4e8c\u6b21\u5269\u4f59\u6765\u8868\u793a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u901a\u9879\u516c\u5f0f\u5373\u53ef\u3002 F_n = \\frac{1}{\\sqrt{5}}\\left[(\\frac{1+\\sqrt{5}}{2})^n-(\\frac{1-\\sqrt{5}}{n})^n\\right] F_n = \\frac{1}{\\sqrt{5}}\\left[(\\frac{1+\\sqrt{5}}{2})^n-(\\frac{1-\\sqrt{5}}{n})^n\\right] \u4e24\u4e2a\u5e38\u6570\u9879\u7528\u4e8c\u6b21\u5269\u4f59\u641e\u4e00\u641e\u5c31\u53d8\u6210 F_n = d(a^n-b^n) F_n = d(a^n-b^n) \u7136\u540e\u7b54\u6848\u5c31\u662f d^k \\sum_{i=0}^N \\left(a^{C*i}-b^{C*i}\\right)^K d^k \\sum_{i=0}^N \\left(a^{C*i}-b^{C*i}\\right)^K n \u5f88\u5927\u8981\u5bf9\u5176\u505a\u4e8c\u9879\u5f0f\u5c55\u5f00\u8f6c\u6362\u4e3a\u4e0e k \u76f8\u5173\u7684\u7b49\u6bd4\u6570\u5217\u901a\u9879\u7136\u540e\u505a\u5feb\u901f\u5e42\u5373\u53ef\u3002 \u5feb\u901f\u5e42\u53ef\u4ee5\u5bf9 1e9+8 \u53d6\u6a21\u505a\u6b27\u62c9\u964d\u5e42\u6765\u964d\u4f4e\u5e38\u6570\u3002 \u53e6\u5916\u7531\u4e8e\u6709\u591a\u7ec4\u6570\u636e\u672c\u9898\u590d\u6742\u5ea6\u51fa\u6ee1\u5176\u5b9e\u662f\u4e0d\u80fd\u8fc7\u7684\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const ll mod = 1e9 + 9 ; const int maxn = 1e5 + 5 ; ll C [ maxn ]; ll inv [ maxn ], pr1 [ maxn ], pr2 [ maxn ]; int cnt = 0 ; inline ll fastpow ( ll a , ll b ){ if ( a % mod == 0 ) b = b % ( mod - 1 ) + mod - 1 ; else b %= ( mod - 1 ); ll ans = 1 ; for (; b ; b >>= 1 , a = a * a % mod ) if ( b & 1 ) ans = ans * a % mod ; return ans ; } inline ll calc ( ll x , ll n ) { if ( x == 1 ) return n % mod ; return ( x * ( 1 - fastpow ( x , n )) % mod * fastpow ( 1 - x , mod - 2 ) % mod + mod ) % mod ; } int main (){ clock_t start , end ; start = clock (); int T ; cin >> T ; ll n , m , k ; inv [ 1 ] = 1 ; pr1 [ 0 ] = pr2 [ 0 ] = 1 ; for ( int i = 2 ; i < maxn ; ++ i ) inv [ i ] = ( mod - mod / i ) * inv [ mod % i ] % mod ; while ( T -- ) { ll s = 723398404 , r1 = 308495997 , r2 = 691504013 , ans = 0 ; scanf ( \"%lld%lld%lld\" , & n , & k , & m ); r1 = fastpow ( r1 , k ); r2 = fastpow ( r2 , k ); C [ 0 ] = 1 ; for ( register int i = 1 ; i <= m ; i ++ ){ C [ i ] = C [ i - 1 ] * ( m - i + 1 ) % mod * inv [ i ] % mod ; pr1 [ i ] = pr1 [ i - 1 ] * r1 % mod ; pr2 [ i ] = pr2 [ i - 1 ] * r2 % mod ; } for ( int i = 0 ; i <= m ; i ++ ) { ll x = C [ i ]; x = x * calc ( pr1 [ i ] * pr2 [ m - i ] % mod , n ) % mod ; x *= (( m - i ) % 2 == 1 ) ?- 1 : 1 ; ans = ( ans + x + mod ) % mod ; } ans = fastpow ( s , m ) * ans % mod ; printf ( \"%lld \\n \" , ans ); } // cout<<cnt<<endl; end = clock (); // cout<<(float)(end-start)*1000/CLOCKS_PER_SEC<<endl; return 0 ; } F. Finding a MEX Link \u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u70b9\u6743\u5e26\u4fee\u6c42\u4e00\u4e2a\u70b9\u76f4\u63a5\u76f8\u90bb\u7684\u70b9\u7684\u70b9\u6743 mex\uff0cn,m,q 1e5 a 1e9\uff0c\u65f6\u9650 3s \u5bf9\u70b9\u7684\u5ea6\u6570\u5206\u5757\u5373\u53ef\u3002 \u8be2\u95ee\u5bf9\u5927\u70b9\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6240\u6709\u7684\u76f4\u63a5\u76f8\u90bb\u70b9\u6743\uff0c\u5c0f\u70b9\u66b4\u529b\u6240\u6709\u4e34\u70b9\u3002 \u4fee\u6539\u5bf9\u76f8\u90bb\u7684\u6240\u6709\u5927\u70b9\u4fee\u6539\u6811\u72b6\u6570\u7ec4\u3002 \u590d\u6742\u5ea6 O(n\\sqrt n * \\log(n)) O(n\\sqrt n * \\log(n)) \u5173\u4e8e\u6811\u72b6\u6570\u7ec4\u4e0a\u4e8c\u5206\u6c42 mex \u505a\u5355 log \u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b\u3002\u8c8c\u4f3c\u4e8c\u5206 check \u505a\u53cc log \u4e5f\u53ef\u4ee5\u901a\u8fc7 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/24 20:11 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } const int BL = 350 ; int n , m ; int a [ maxn ]; VI edge [ maxn ], H [ maxn ], num [ maxn ]; int id [ maxn ], up [ BL ], tot , big [ maxn ]; vector < VI > BIT ; inline void add ( VI & now , int x , int k ) { x ++ ; while ( x < now . size ()) { now [ x ] += k ; x += x & - x ; } } inline int mex ( int u ) { int ret = 0 , ans = 0 ; for ( int i = up [ id [ u ]]; i >= 0 ; -- i ) { ans += 1 << i ; if ( ans >= BIT [ id [ u ]]. size () || ret + BIT [ id [ u ]][ ans ] < ans ) ans -= 1 << i ; else ret += BIT [ id [ u ]][ ans ]; } return ret ; } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , m ); BIT . clear (); tot = 0 ; for ( int i = 1 ; i <= n ; ++ i ) edge [ i ]. clear (), H [ i ]. clear (), num [ i ]. clear (), R ( a [ i ]); for ( int i = 0 ; i < m ; ++ i ) { int u , v ; R ( u , v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } for ( int i = 1 ; i <= n ; ++ i ) { num [ i ]. resize (( int ) edge [ i ]. size ()); if ( edge [ i ]. size () >= BL ) { big [ i ] = 1 ; BIT . emplace_back ( VI ( edge [ i ]. size () + 2 )); up [ tot ] = log2 ( edge [ i ]. size () + 1 ); id [ i ] = tot ; tot ++ ; } else big [ i ] = 0 ; for ( auto j : edge [ i ]) { if ( edge [ j ]. size () >= BL ) H [ i ]. push_back ( j ); if ( a [ j ] < ( int ) edge [ i ]. size ()) { if ( ++ num [ i ][ a [ j ]] == 1 && big [ i ]) add ( BIT . back (), a [ j ], 1 ); } } } int q ; R ( q ); while ( q -- ) { int op , u , x ; R ( op , u ); if ( op == 1 ) { R ( x ); for ( auto v : H [ u ]) { if ( a [ u ] < ( int ) edge [ v ]. size ()) if ( -- num [ v ][ a [ u ]] == 0 ) add ( BIT [ id [ v ]], a [ u ], - 1 ); if ( x < ( int ) edge [ v ]. size ()) if ( ++ num [ v ][ x ] == 1 ) add ( BIT [ id [ v ]], x , 1 ); } a [ u ] = x ; } else { if ( ! big [ u ]) { int res = edge [ u ]. size (); for ( int i = 0 ; i < edge [ u ]. size (); ++ i ) num [ u ][ i ] = 0 ; for ( auto v : edge [ u ]) if ( a [ v ] < edge [ u ]. size ()) num [ u ][ a [ v ]] ++ ; for ( int i = 0 ; i < edge [ u ]. size (); ++ i ) if ( num [ u ][ i ] == 0 ) { res = i ; break ; } W ( res ); } else { W ( mex ( u )); } } } } return 0 ; } I. Leading Robots Link upsolved by: Verly \u9898\u610f\uff1a\u6709n\u4e2a\u673a\u5668\u4eba\uff0ct\u65f6\u523b\u7684\u4f4d\u7f6e\u4e3a at^2+p at^2+p \uff0c\u95ee\u6709\u591a\u5c11\u4e2a\u673a\u5668\u4eba\u5904\u4e8e\u8fc7\u9886\u5148\u72b6\u6001\uff0c\u5f53\u4e14\u4ec5\u5f53\u5904\u4e8e\u6700\u524d\u7684\u673a\u5668\u4eba\u552f\u4e00\u65f6\u624d\u89c6\u4e3a\u9886\u5148\u3002 \u4ee4 x=t^2 x=t^2 \uff0c\u5219 y=ax+p y=ax+p \uff0c\u95ee\u6709\u591a\u5c11\u6761\u5c04\u7ebf\u5728\u67d0\u4e00\u65f6\u523b\u5904\u4e8e\u6700\u4e0a\u65b9\uff0c\u4e5f\u5c31\u662fBZOJ1007\u7684\u95ee\u9898\u3002\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u4e0b\u51f8\u5305\uff0c\u770b\u6808\u4e2d\u6709\u591a\u5c11\u70b9\u5373\u53ef\u3002 \u8fd9\u9053\u9898\u9700\u8981\u6ce8\u610f\u7684\u662f\u76f4\u7ebf\u7684\u4ea4\u70b9\u53ef\u80fd\u4f4d\u4e8ey\u8f74\u7684\u5de6\u4fa7\uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u9700\u8981\u505a\u4e00\u4e0b\u9884\u5904\u7406\u3002\u5bf9\u4e8e\u76f8\u540c\u7684p\u53ea\u4fdd\u7559\u6700\u5927\u7684a\uff0c\u4e14\u5bf9\u4e8e p_1<p_2 p_1<p_2 \u4fdd\u8bc1 a_1>a_2 a_1>a_2 \uff0c\u88ab\u4e22\u5f03\u7684\u6570\u636e\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\uff0c\u5904\u7406\u540e\u7684\u6570\u636e\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u76f4\u7ebf\u7684\u4ea4\u70b9\u5728y\u8f74\u53f3\u4fa7\u3002 \u5728\u8ba1\u7b97\u5b8c\u540e\u9700\u8981\u51cf\u53bb\u51fa\u73b0\u591a\u6b21\u7684ab\u70b9\u5bf9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 5e4 + 10 ; vector < pair < int , int > > ve , tmp ; int st [ maxn ]; bool vis [ maxn ]; bool cmp ( pair < int , int > a , pair < int , int > b , pair < int , int > c ) { return 1ll * ( a . second - b . second ) * ( c . first - a . first ) <= 1ll * ( a . second - c . second ) * ( b . first - a . first ); } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n ; scanf ( \"%d\" , & n ); tmp . clear (); ve . clear (); for ( int i = 0 ; i < n ; i ++ ) vis [ i ] = false ; for ( int i = 1 ; i <= n ; i ++ ) { pair < int , int > t ; scanf ( \"%d%d\" , & t . first , & t . second ); tmp . push_back ( t ); } sort ( tmp . begin (), tmp . end ()); for ( int i = n - 1 ; i >= 0 ; i -- ) { pair < int , int > t = { tmp [ i ]. second , tmp [ i ]. first }; if ( ve . size () > 0 && t . second == ve . back (). second && t . first == ve . back (). first ) vis [ ve . size () - 1 ] = true ; if ( ! ve . size ()) ve . push_back ( t ); else if ( t . second == ve . back (). second ) continue ; else if ( t . first > ve . back (). first ) ve . push_back ( t ); } sort ( ve . begin (), ve . end ()); int top = 0 , dsc = 0 ; for ( int i = 0 ; i < ( int ) ve . size (); i ++ ) { while ( top ) { if ( top > 1 && cmp ( ve [ st [ top - 1 ]], ve [ i ], ve [ st [ top ]])) top -- ; else break ; } st [ ++ top ] = i ; } for ( int i = 1 ; i <= top ; i ++ ) { if ( vis [ st [ i ]]) dsc ++ ; } printf ( \"%d \\n \" , top - dsc ); } return 0 ; } J. Math is Simple Link upsolved by: ffacs \u9898\u610f\uff1a\u6c42 \\sum\\limits_{1\\le a < b \\le n\\\\gcd(a,b)=1\\\\a+b \\ge n}{\\frac{1}{ab}} T\\le1e4,2\\le n\\le 1e8 T\\le1e4,2\\le n\\le 1e8 \uff0c\u8f93\u51fa\u6a21 998244353 998244353 \u610f\u4e49\u4e0b\u7684\u503c\uff0c \u65f6\u9650\u516d\u79d2 \u8fd9\u4e2a n n \u597d\u50cf\u4e0d\u662f\u5f88\u5927\u554a\uff0c\u80fd\u4e0d\u80fd\u9012\u63a8\u634f\uff1f\u4e0b\u9762\u8fd9\u4e2a \u5927\u4e8e\u7b49\u4e8e\u53f7\u4e5f\u592a\u70e6\u4e86\uff0c\u53d8\u6210\u7b49\u4e8e\u624d\u8212\u670d\u3002 \u8bbe f_n=\\sum\\limits_{1\\le a < b \\le n\\\\gcd(a,b)=1\\\\a+b \\ge n}{\\frac{1}{ab}} \u6765\u8003\u8651\u4e00\u4e0b f_n f_n \u6bd4 f_{n-1} f_{n-1} \u591a\u52a0\u4e0a\u4e86\u4ec0\u4e48\u4e1c\u897f\u3002 \\begin{align} f_n-f_{n-1}&=\\sum\\limits_{1\\le a < b=n\\\\gcd(a,b)=1\\\\a+b \\ge n}{\\frac{1}{ab}}-\\sum\\limits_{1\\le a < b \\le n-1\\\\gcd(a,b)=1\\\\a+b = n-1}{\\frac{1}{ab}} \\\\ &=\\frac{1}{n}\\sum_{1\\le a\\le n\\\\gcd(a,n)=1}\\frac{1}{a}-\\sum\\limits_{1\\le a < b \\le n-1\\\\gcd(a,b)=1\\\\a+b = n-1}{\\frac{1}{ab}} \\\\ \\end{align} \u73b0\u5728\u90fd\u662f\u7b49\u53f7\u4e86\uff0c\u53f3\u8fb9\u90a3\u4e2a\u592a\u4e11\u4e86\uff0c\u7b80\u5316\u4e00\u4e0b\uff0c\u4e0d\u59a8\u8bbe g(n)=\\sum\\limits_{1\\le a < b \\le n\\\\gcd(a,b)=1\\\\a+b = n}{\\frac{1}{ab}} \u8fd9\u6837 n-1 n-1 \u6362\u6210 n n \u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u548c\u662f\u5b9a\u503c\uff0c\u6211\u4eec\u53ea\u679a\u4e3e a a \u5373\u53ef\uff0c\u53c8\u6709 (a,b)=(a,n-a)=(a,n) (a,b)=(a,n-a)=(a,n) , \\frac{1}{ab}=\\frac{1}{a(n-a)}=\\frac{1}{n}(\\frac{1}{a}+\\frac{1}{n-a}) \\frac{1}{ab}=\\frac{1}{a(n-a)}=\\frac{1}{n}(\\frac{1}{a}+\\frac{1}{n-a}) \\begin{align} g(n)&=\\frac{1}{n}\\sum_{1\\le a<n-a \\le n\\\\(a,n)=1}(\\frac{1}{a}+\\frac{1}{n-a}) \\end{align} \u53d1\u73b0\u5728\u4e0d\u8003\u8651 (a,n)=1 (a,n)=1 \u7684\u65f6\u5019 \u9664\u4e86 a=n-a a=n-a \uff0c\u6240\u6709 \\frac{1}{a},1\\le a\\le n-1 \\frac{1}{a},1\\le a\\le n-1 \u90fd\u904d\u5386\u5230\u4e86\uff0c\u800c a=n-a a=n-a \u548c a=n a=n \u65f6\uff0c (a,n)\\neq 1 (a,n)\\neq 1 \uff0c\u8fd8\u6709\u8981\u6ce8\u610f n=2 n=2 \u7684\u65f6\u5019\u662f\u4e0d\u6210\u7acb\u7684\u3002\u6240\u4ee5\u53ef\u4ee5\u6539\u5199\u6210 g(n)=\\frac{1}{n}\\sum_{1\\le a \\le n\\\\gcd(a,n)=1}\\frac{1}{a} \u8fd9\u4e2a\u548c (4) (4) \u4e2d\u7684\u7b2c\u4e00\u9879\u5c45\u7136\u662f\u4e00\u6837\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5f97\u5230\u4e86 f_n-f_{n-1}=g_n-g_{n-1} \\\\ f_n-f_2=g_n-g_2 \\\\ f_n=g_n+\\frac{1}{2} \u5176\u4e2d g_n= \\left\\{ \\begin{array}{**lr**} \\frac{1}{n}\\sum\\limits_{1\\le a \\le n\\\\gcd(a,n)=1}\\frac{1}{a} \\\\ 0,n=2\\\\ \\end{array} \\right. \u8fd9\u4e2a g(n) g(n) \u770b\u8d77\u6765\u5c31\u5f88\u597d\u6c42 \\begin{align} g(n)&=\\frac{1}{n}\\sum_{1\\le a\\le n}\\frac{1}{a}\\sum_{d\\mid gcd(a,n)}\\mu(d) \\\\ &=\\frac{1}{n}\\sum_{d\\mid n}\\mu(d)\\sum_{d\\mid a}\\frac{1}{a} \\\\ &=\\frac{1}{n}\\sum_{d\\mid n}\\mu(d)\\sum_{a=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\frac{1}{ad} \\\\ &=\\frac{1}{n}\\sum_{d\\mid n}\\mu(d)\\frac{1}{d}\\sum_{a=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\frac{1}{a} \\end{align} \u540e\u9762\u5c31\u662f\u4e00\u4e2a\u8c03\u548c\u7ea7\u6570\u524d\u7f00\u548c\uff0c\u53c8\u56e0\u4e3a\u91cc\u9762\u6709 \\mu(d) \\mu(d) \u53c8\u8981\u6c42\u662f n n \u7684\u56e0\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5 \\text{dfs} \\text{dfs} \u7d20\u56e0\u5b50\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u7684\u56e0\u5b50\u5373\u53ef\u3002 K. Minimum Index Link upsolved by: Verly \u63a8\u8350\u9605\u8bfb \u91d1\u7b56-\u5b57\u7b26\u4e32\u7b97\u6cd5\u9009\u8bb2 \u5b66\u4e60\u4e00\u4e0bLyndon\u5faa\u73af\u3002 \u5bf9\u4e8eS\u7684\u67d0\u4e2a\u524d\u7f00 s[0,k] s[0,k] \uff0c\u628a\u5b83\u5206\u4e3a S[0,i-1] S[0,i-1] \u548c S[i,k] S[i,k] \uff0c\u5176\u4e2d s[0,i-1] s[0,i-1] \u7531 s_1s_2...s_g s_1s_2...s_g \u7ec4\u6210\uff0c\u4e14 s_1...s_{g} s_1...s_{g} \u4e3a s_{g}\u2264s_{g-1}\u2264..\u2264s_1 s_{g}\u2264s_{g-1}\u2264..\u2264s_1 \u7684Lyndon\u4e32\uff0c\u4e14\u6709 S[i,k]<s_g S[i,k]<s_g \uff0c S[i,k]=t_1t_2...t_hv S[i,k]=t_1t_2...t_hv \uff0c\u5176\u4e2d t_1=t_2=...=t_h t_1=t_2=...=t_h \uff0c\u4e14 v v \u4e3a t_1 t_1 \u7684\u771f\u524d\u7f00\uff0c j=k-|t_1| j=k-|t_1| \u3002 \u6240\u4ee5\u5728check\u5faa\u73af\u8282\u65f6\uff1a \u5982\u679c S[j]<S[k] S[j]<S[k] \uff0c\u4e5f\u5c31\u662f\u51fa\u73b0\u4e86\u5f62\u5982 abcabcabz abcabcabz \u7684\u60c5\u51b5 (i=0, j=5, k=8) (i=0, j=5, k=8) \uff0c\u6b64\u65f6\u7684\u7b54\u6848\u4e3a\u6240\u6709\u5faa\u73af\u4e32\u7684\u5f00\u5934\uff0c res[k]=i res[k]=i \u5982\u679c S[j]\u2265S[k] S[j]\u2265S[k] \uff0c\u5373 abcabcabc abcabcabc \u6216\u8005 abcabcabd(i=0,j=5,k=8,res[j]=3) abcabcabd(i=0,j=5,k=8,res[j]=3) \uff0c\u6b64\u65f6\u7684\u7b54\u6848\u4e3a\u6700\u8fd1\u7684\u4e00\u4e2a\u5faa\u73af\u4e32\u7684\u4e32\u9996\uff0c res[k]=res[j]+k-j res[k]=res[j]+k-j Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e6 + 10 ; const int mod = 1e9 + 7 ; char s [ maxn ]; int res [ maxn ]; void duval ( char s []) { int n = strlen ( s ), i = 0 ; while ( i < n ) { int j = i , k = i + 1 ; res [ i ] = i ; while ( k < n && s [ j ] <= s [ k ]) { if ( s [ j ] < s [ k ]) j = i , res [ k ] = i ; else res [ k ] = res [ j ] + k - j , j ++ ; k ++ ; } while ( i <= j ) i += k - j ; } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%s\" , s ); int n = strlen ( s ); duval ( s ); ll ans = 0 ; for ( int i = 0 , p = 1 ; i < n ; i ++ , p = 1ll * p * 1112 % mod ) ans = ( ans + 1ll * p * ( res [ i ] + 1 )) % mod ; printf ( \"%lld \\n \" , ans ); } return 0 ; } L. Mow Link \u7ed9\u4e00\u4e2a\u51f8\u5305\uff0c\u4f60\u53ef\u4ee5\u6bcf\u4e2a\u5355\u4f4d\u9762\u79ef\u7528 A \u7684\u4ee3\u4ef7\u6d82\u8272\uff0c\u6216\u8005\u7528\u4e00\u4e2a\u534a\u5f84\u4e3a r \u7684\u5706\u5f62\u7684\u533a\u57df\uff08\u4e0d\u80fd\u8d85\u51fa\u8fb9\u754c\uff09\u7ed9\u4e00\u4e2a\u5355\u4f4d\u9762\u79ef\u4ee5 B \u7684\u4ee3\u4ef7\u6d82\u8272\uff0c\u6c42\u5168\u90e8\u6d82\u6ee1\u8272\u7684\u6700\u5c11\u82b1\u8d39\u3002 \u8003\u8651\u5706\u5fc3\u7684\u8303\u56f4\u662f\u51f8\u5305\u6bcf\u6761\u8fb9\u5f80\u5185\u79fb\u52a8 r \u8ddd\u79bb\u6784\u6210\u7684\u65b0\u51f8\u5305\u3002\u5982\u679c A<B \u663e\u7136\u5168\u90e8\u7528 A \u6d82\u8272\u5373\u53ef\uff0c\u76f4\u63a5\u7b97\u539f\u51f8\u5305\u9762\u79ef\uff0c\u5426\u5219\u5c3d\u91cf\u7528 B \u6d82\u8272\uff0c\u6700\u5927\u8303\u56f4\u662f \u65b0\u51f8\u5305\u9762\u79ef+\u65b0\u51f8\u5305\u5468\u957f*r+pi*r*r \u65b0\u51f8\u5305\u9762\u79ef+\u65b0\u51f8\u5305\u5468\u957f*r+pi*r*r \u3002 \u53ef\u4ee5\u8003\u8651\u975e\u6247\u5f62\u7684\u533a\u57df\u5b9e\u9645\u662f\u5e73\u884c\u7ebf\u505a\u5207\u5272\u4e00\u5171\u662f\u65b0\u51f8\u5305\u5468\u957f\u90a3\u4e48\u957f\u7684\uff0c\u6247\u5f62\u533a\u57df\u62fc\u8d77\u6765\u5c31\u662f\u4e00\u4e2a\u5916\u89d2\u548c\u4e3a 2pi\u3002 \u6240\u4ee5\u9996\u5148\u628a\u51f8\u5305\u5904\u7406\u6210\u9006\u65f6\u9488\uff0c\u6bcf\u6761\u8fb9\u7528\u5411\u91cf\u8868\u793a\u7684\u8bdd\uff0c\u5411\u5de6\u65cb\u8f6c pi/2 \u5e76\u8868\u793a\u4e3a\u5355\u4f4d\u5411\u91cf\u5373\u662f\u5b83\u7684\u5355\u4f4d\u6cd5\u5411\u91cf\uff0c\u5f80\u8fd9\u4e2a\u79fb\u52a8 r \u7684\u8ddd\u79bb\uff0c\u7136\u540e\u505a\u534a\u5e73\u9762\u4ea4\u6c42\u51fa\u65b0\u51f8\u5305\u7684\u70b9\u96c6\uff0c\u6ce8\u610f\u5982\u679c\u65b0\u51f8\u5305\u70b9\u96c6 <= 2 \u5176\u5b9e\u8868\u793a\u5b83\u4e0d\u5b58\u5728\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/25 22:34 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 205 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } #define mp make_pair #define fi first #define se second #define pb push_back typedef double db ; const db eps = 1e-6 ; const db pi = acos ( - 1 ); int sign ( db k ){ if ( k > eps ) return 1 ; else if ( k <- eps ) return - 1 ; return 0 ; } int cmp ( db k1 , db k2 ){ return sign ( k1 - k2 );} int inmid ( db k1 , db k2 , db k3 ){ return sign ( k1 - k3 ) * sign ( k2 - k3 ) <= 0 ;} // k3 \u5728 [k1,k2] \u5185 struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} int operator == ( const point & k1 ) const { return cmp ( x , k1 . x ) == 0 && cmp ( y , k1 . y ) == 0 ;} // \u9006\u65f6\u9488\u65cb\u8f6c point turn ( db k1 ){ return ( point ){ x * cos ( k1 ) - y * sin ( k1 ), x * sin ( k1 ) + y * cos ( k1 )};} point turn90 (){ return ( point ){ - y , x };} bool operator < ( const point k1 ) const { int a = cmp ( x , k1 . x ); if ( a ==- 1 ) return 1 ; else if ( a == 1 ) return 0 ; else return cmp ( y , k1 . y ) ==- 1 ; } db abs (){ return sqrt ( x * x + y * y );} db abs2 (){ return x * x + y * y ;} db dis ( point k1 ){ return (( * this ) - k1 ). abs ();} point unit (){ db w = abs (); return ( point ){ x / w , y / w };} void scan (){ double k1 , k2 ; scanf ( \"%lf%lf\" , & k1 , & k2 ); x = k1 ; y = k2 ;} void print (){ printf ( \"%.11lf %.11lf \\n \" , x , y );} db getw (){ return atan2 ( y , x );} point getdel (){ if ( sign ( x ) ==- 1 || ( sign ( x ) == 0 && sign ( y ) ==- 1 )) return ( * this ) * ( - 1 ); else return ( * this );} int getP () const { return sign ( y ) == 1 || ( sign ( y ) == 0 && sign ( x ) ==- 1 );} }; int inmid ( point k1 , point k2 , point k3 ){ return inmid ( k1 . x , k2 . x , k3 . x ) && inmid ( k1 . y , k2 . y , k3 . y );} db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} db dot ( point k1 , point k2 ){ return k1 . x * k2 . x + k1 . y * k2 . y ;} db rad ( point k1 , point k2 ){ return atan2 ( cross ( k1 , k2 ), dot ( k1 , k2 ));} // -pi -> pi int compareangle ( point k1 , point k2 ){ return k1 . getP () < k2 . getP () || ( k1 . getP () == k2 . getP () && sign ( cross ( k1 , k2 )) > 0 ); } point proj ( point k1 , point k2 , point q ){ // q \u5230\u76f4\u7ebf k1,k2 \u7684\u6295\u5f71 point k = k2 - k1 ; return k1 + k * ( dot ( q - k1 , k ) / k . abs2 ()); } point reflect ( point k1 , point k2 , point q ){ return proj ( k1 , k2 , q ) * 2 - q ;} int clockwise ( point k1 , point k2 , point k3 ){ // k1 k2 k3 \u9006\u65f6\u9488 1 \u987a\u65f6\u9488 -1 \u5426\u5219 0 return sign ( cross ( k2 - k1 , k3 - k1 )); } int checkLL ( point k1 , point k2 , point k3 , point k4 ){ // \u6c42\u76f4\u7ebf (L) \u7ebf\u6bb5 (S)k1,k2 \u548c k3,k4 \u7684\u4ea4\u70b9 return cmp ( cross ( k3 - k1 , k4 - k1 ), cross ( k3 - k2 , k4 - k2 )) != 0 ; } point getLL ( point k1 , point k2 , point k3 , point k4 ){ db w1 = cross ( k1 - k3 , k4 - k3 ), w2 = cross ( k4 - k3 , k2 - k3 ); return ( k1 * w2 + k2 * w1 ) / ( w1 + w2 ); } int intersect ( db l1 , db r1 , db l2 , db r2 ){ if ( l1 > r1 ) swap ( l1 , r1 ); if ( l2 > r2 ) swap ( l2 , r2 ); return cmp ( r1 , l2 ) !=- 1 && cmp ( r2 , l1 ) !=- 1 ; } int checkSS ( point k1 , point k2 , point k3 , point k4 ){ return intersect ( k1 . x , k2 . x , k3 . x , k4 . x ) && intersect ( k1 . y , k2 . y , k3 . y , k4 . y ) && sign ( cross ( k3 - k1 , k4 - k1 )) * sign ( cross ( k3 - k2 , k4 - k2 )) <= 0 && sign ( cross ( k1 - k3 , k2 - k3 )) * sign ( cross ( k1 - k4 , k2 - k4 )) <= 0 ; } db disSP ( point k1 , point k2 , point q ){ point k3 = proj ( k1 , k2 , q ); if ( inmid ( k1 , k2 , k3 )) return q . dis ( k3 ); else return min ( q . dis ( k1 ), q . dis ( k2 )); } db disSS ( point k1 , point k2 , point k3 , point k4 ){ if ( checkSS ( k1 , k2 , k3 , k4 )) return 0 ; else return min ( min ( disSP ( k1 , k2 , k3 ), disSP ( k1 , k2 , k4 )), min ( disSP ( k3 , k4 , k1 ), disSP ( k3 , k4 , k2 ))); } int onS ( point k1 , point k2 , point q ){ return inmid ( k1 , k2 , q ) && sign ( cross ( k1 - q , k2 - k1 )) == 0 ;} struct circle { point o ; db r ; void scan (){ o . scan (); scanf ( \"%lf\" , & r );} int inside ( point k ){ return cmp ( r , o . dis ( k ));} }; struct line { // p[0]->p[1] point p [ 2 ]; line ( point k1 , point k2 ){ p [ 0 ] = k1 ; p [ 1 ] = k2 ;} point & operator [] ( int k ){ return p [ k ];} int include ( point k ){ return sign ( cross ( p [ 1 ] - p [ 0 ], k - p [ 0 ])) > 0 ;} point dir (){ return p [ 1 ] - p [ 0 ];} line push (){ // \u5411\u5916 ( \u5de6\u624b\u8fb9 ) \u5e73\u79fb eps const db eps = 1e-6 ; point delta = ( p [ 1 ] - p [ 0 ]). turn90 (). unit () * eps ; return { p [ 0 ] - delta , p [ 1 ] - delta }; } }; point getLL ( line k1 , line k2 ){ return getLL ( k1 [ 0 ], k1 [ 1 ], k2 [ 0 ], k2 [ 1 ]);} int parallel ( line k1 , line k2 ){ return sign ( cross ( k1 . dir (), k2 . dir ())) == 0 ;} int sameDir ( line k1 , line k2 ){ return parallel ( k1 , k2 ) && sign ( dot ( k1 . dir (), k2 . dir ())) == 1 ;} int operator < ( line k1 , line k2 ){ if ( sameDir ( k1 , k2 )) return k2 . include ( k1 [ 0 ]); return compareangle ( k1 . dir (), k2 . dir ()); } int checkpos ( line k1 , line k2 , line k3 ){ return k3 . include ( getLL ( k1 , k2 ));} vector < point > halfPlaneIS ( vector < line > & l ) { sort ( l . begin (), l . end ()); deque < line > q ; for ( int i = 0 ; i < ( int ) l . size (); ++ i ) { if ( i && sameDir ( l [ i ], l [ i - 1 ])) continue ; while ( q . size () > 1 && ! checkpos ( q [ q . size () - 2 ], q [ q . size () - 1 ], l [ i ])) q . pop_back (); while ( q . size () > 1 && ! checkpos ( q [ 1 ], q [ 0 ], l [ i ])) q . pop_front (); q . push_back ( l [ i ]); } while ( q . size () > 2 && ! checkpos ( q [ q . size () - 2 ], q [ q . size () - 1 ], q [ 0 ])) q . pop_back (); while ( q . size () > 2 && ! checkpos ( q [ 1 ], q [ 0 ], q [ q . size () - 1 ])) q . pop_front (); vector < point > ret ; for ( int i = 0 ; i < ( int ) q . size (); ++ i ) ret . push_back ( getLL ( q [ i ], q [( i + 1 ) % q . size ()])); return ret ; } db area ( vector < point > A ){ // \u591a\u8fb9\u5f62\u7528 vector<point> \u8868\u793a , \u9006\u65f6\u9488 db ans = 0 ; for ( int i = 0 ; i < A . size (); i ++ ) ans += cross ( A [ i ], A [( i + 1 ) % A . size ()]); return ans / 2 ; } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"my.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; db r , A , B ; R ( n , r , A , B ); vector < point > x ( n ); for ( int i = 0 ; i < n ; ++ i ) x [ i ]. scan (); db s = area ( x ); if ( sign ( s ) < 0 ) { reverse ( x . begin (), x . end ()); s = - s ; } vector < line > deal ; for ( int i = 0 ; i < n ; ++ i ) { point w = ( x [( i + 1 ) % n ] - x [ i ]). turn90 (). unit (); deal . emplace_back ( line ( x [ i ] + w * r , x [( i + 1 ) % n ] + w * r )); } auto real = halfPlaneIS ( deal ); db res = s * A ; if ( real . size () > 2 ) { db realv = area ( real ); db tmp = 0 ; for ( int i = 0 ; i < real . size (); ++ i ) tmp += real [ i ]. dis ( real [( i + 1 ) % real . size ()]); db all = ( realv + tmp * r + r * r * pi ); res = min ( res , all * B + ( s - all ) * A ); } W ( res ); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"2020 Multi University Training Contest 1"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%201/#d-distinct-sub-palindromes","text":"\u6c42\u957f\u5ea6\u4e3a n \u7684\u4efb\u610f\u4e32\u4e2d\uff0c\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u6700\u5c11\u7684\u6709\u591a\u5c11\u79cd \u957f\u5ea6\u4e3a 1,2,3 \u7684\u65f6\u5019\u968f\u4fbf\u586b\u90fd\u662f\u6700\u5c11\u4e2a\u6570 \u5927\u4e8e\u4e09\u7684\u53ea\u8981\u53d6\u4e09\u4e2a\u4e0d\u540c\u5b57\u7b26 abc \u5faa\u73af\u5373\u53ef\uff0c\u6700\u5c11\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e3a 3 \u4e2a Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/21 12:20 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 998244353 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); ll res = 1 ; for ( int i = 24 ; i <= 26 ; ++ i ) { res = res * i % mod ; } for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; R ( n ); if ( n == 1 ) { W ( 26 ); } else if ( n == 2 ) { W ( 676 ); } else if ( n == 3 ) { W ( 26 * 26 * 26 ); } else { W ( res ); } } return 0 ; }","title":"D. Distinct Sub-palindromes"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%201/#e-fibonacci-sum","text":"\u6c42 \\sum_{i=0}^N (F^K_{i*C}) \\sum_{i=0}^N (F^K_{i*C}) \u5bf9 1e9+7 \u53d6\u6a21 \u5176\u4e2d F_0 = 0, F_1 = 1, F_i=F_{i-1}+F_{i-2} F_0 = 0, F_1 = 1, F_i=F_{i-1}+F_{i-2} \u4f17\u6240\u5468\u77e5 5 \u662f 1e9+7 \u7684\u539f\u6839\u6240\u4ee5\u968f\u4fbf\u505a\u4e00\u4e0b\u4e8c\u6b21\u5269\u4f59\u6765\u8868\u793a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u901a\u9879\u516c\u5f0f\u5373\u53ef\u3002 F_n = \\frac{1}{\\sqrt{5}}\\left[(\\frac{1+\\sqrt{5}}{2})^n-(\\frac{1-\\sqrt{5}}{n})^n\\right] F_n = \\frac{1}{\\sqrt{5}}\\left[(\\frac{1+\\sqrt{5}}{2})^n-(\\frac{1-\\sqrt{5}}{n})^n\\right] \u4e24\u4e2a\u5e38\u6570\u9879\u7528\u4e8c\u6b21\u5269\u4f59\u641e\u4e00\u641e\u5c31\u53d8\u6210 F_n = d(a^n-b^n) F_n = d(a^n-b^n) \u7136\u540e\u7b54\u6848\u5c31\u662f d^k \\sum_{i=0}^N \\left(a^{C*i}-b^{C*i}\\right)^K d^k \\sum_{i=0}^N \\left(a^{C*i}-b^{C*i}\\right)^K n \u5f88\u5927\u8981\u5bf9\u5176\u505a\u4e8c\u9879\u5f0f\u5c55\u5f00\u8f6c\u6362\u4e3a\u4e0e k \u76f8\u5173\u7684\u7b49\u6bd4\u6570\u5217\u901a\u9879\u7136\u540e\u505a\u5feb\u901f\u5e42\u5373\u53ef\u3002 \u5feb\u901f\u5e42\u53ef\u4ee5\u5bf9 1e9+8 \u53d6\u6a21\u505a\u6b27\u62c9\u964d\u5e42\u6765\u964d\u4f4e\u5e38\u6570\u3002 \u53e6\u5916\u7531\u4e8e\u6709\u591a\u7ec4\u6570\u636e\u672c\u9898\u590d\u6742\u5ea6\u51fa\u6ee1\u5176\u5b9e\u662f\u4e0d\u80fd\u8fc7\u7684\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const ll mod = 1e9 + 9 ; const int maxn = 1e5 + 5 ; ll C [ maxn ]; ll inv [ maxn ], pr1 [ maxn ], pr2 [ maxn ]; int cnt = 0 ; inline ll fastpow ( ll a , ll b ){ if ( a % mod == 0 ) b = b % ( mod - 1 ) + mod - 1 ; else b %= ( mod - 1 ); ll ans = 1 ; for (; b ; b >>= 1 , a = a * a % mod ) if ( b & 1 ) ans = ans * a % mod ; return ans ; } inline ll calc ( ll x , ll n ) { if ( x == 1 ) return n % mod ; return ( x * ( 1 - fastpow ( x , n )) % mod * fastpow ( 1 - x , mod - 2 ) % mod + mod ) % mod ; } int main (){ clock_t start , end ; start = clock (); int T ; cin >> T ; ll n , m , k ; inv [ 1 ] = 1 ; pr1 [ 0 ] = pr2 [ 0 ] = 1 ; for ( int i = 2 ; i < maxn ; ++ i ) inv [ i ] = ( mod - mod / i ) * inv [ mod % i ] % mod ; while ( T -- ) { ll s = 723398404 , r1 = 308495997 , r2 = 691504013 , ans = 0 ; scanf ( \"%lld%lld%lld\" , & n , & k , & m ); r1 = fastpow ( r1 , k ); r2 = fastpow ( r2 , k ); C [ 0 ] = 1 ; for ( register int i = 1 ; i <= m ; i ++ ){ C [ i ] = C [ i - 1 ] * ( m - i + 1 ) % mod * inv [ i ] % mod ; pr1 [ i ] = pr1 [ i - 1 ] * r1 % mod ; pr2 [ i ] = pr2 [ i - 1 ] * r2 % mod ; } for ( int i = 0 ; i <= m ; i ++ ) { ll x = C [ i ]; x = x * calc ( pr1 [ i ] * pr2 [ m - i ] % mod , n ) % mod ; x *= (( m - i ) % 2 == 1 ) ?- 1 : 1 ; ans = ( ans + x + mod ) % mod ; } ans = fastpow ( s , m ) * ans % mod ; printf ( \"%lld \\n \" , ans ); } // cout<<cnt<<endl; end = clock (); // cout<<(float)(end-start)*1000/CLOCKS_PER_SEC<<endl; return 0 ; }","title":"E. Fibonacci Sum"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%201/#f-finding-a-mex","text":"\u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u70b9\u6743\u5e26\u4fee\u6c42\u4e00\u4e2a\u70b9\u76f4\u63a5\u76f8\u90bb\u7684\u70b9\u7684\u70b9\u6743 mex\uff0cn,m,q 1e5 a 1e9\uff0c\u65f6\u9650 3s \u5bf9\u70b9\u7684\u5ea6\u6570\u5206\u5757\u5373\u53ef\u3002 \u8be2\u95ee\u5bf9\u5927\u70b9\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6240\u6709\u7684\u76f4\u63a5\u76f8\u90bb\u70b9\u6743\uff0c\u5c0f\u70b9\u66b4\u529b\u6240\u6709\u4e34\u70b9\u3002 \u4fee\u6539\u5bf9\u76f8\u90bb\u7684\u6240\u6709\u5927\u70b9\u4fee\u6539\u6811\u72b6\u6570\u7ec4\u3002 \u590d\u6742\u5ea6 O(n\\sqrt n * \\log(n)) O(n\\sqrt n * \\log(n)) \u5173\u4e8e\u6811\u72b6\u6570\u7ec4\u4e0a\u4e8c\u5206\u6c42 mex \u505a\u5355 log \u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b\u3002\u8c8c\u4f3c\u4e8c\u5206 check \u505a\u53cc log \u4e5f\u53ef\u4ee5\u901a\u8fc7 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/24 20:11 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } const int BL = 350 ; int n , m ; int a [ maxn ]; VI edge [ maxn ], H [ maxn ], num [ maxn ]; int id [ maxn ], up [ BL ], tot , big [ maxn ]; vector < VI > BIT ; inline void add ( VI & now , int x , int k ) { x ++ ; while ( x < now . size ()) { now [ x ] += k ; x += x & - x ; } } inline int mex ( int u ) { int ret = 0 , ans = 0 ; for ( int i = up [ id [ u ]]; i >= 0 ; -- i ) { ans += 1 << i ; if ( ans >= BIT [ id [ u ]]. size () || ret + BIT [ id [ u ]][ ans ] < ans ) ans -= 1 << i ; else ret += BIT [ id [ u ]][ ans ]; } return ret ; } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , m ); BIT . clear (); tot = 0 ; for ( int i = 1 ; i <= n ; ++ i ) edge [ i ]. clear (), H [ i ]. clear (), num [ i ]. clear (), R ( a [ i ]); for ( int i = 0 ; i < m ; ++ i ) { int u , v ; R ( u , v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } for ( int i = 1 ; i <= n ; ++ i ) { num [ i ]. resize (( int ) edge [ i ]. size ()); if ( edge [ i ]. size () >= BL ) { big [ i ] = 1 ; BIT . emplace_back ( VI ( edge [ i ]. size () + 2 )); up [ tot ] = log2 ( edge [ i ]. size () + 1 ); id [ i ] = tot ; tot ++ ; } else big [ i ] = 0 ; for ( auto j : edge [ i ]) { if ( edge [ j ]. size () >= BL ) H [ i ]. push_back ( j ); if ( a [ j ] < ( int ) edge [ i ]. size ()) { if ( ++ num [ i ][ a [ j ]] == 1 && big [ i ]) add ( BIT . back (), a [ j ], 1 ); } } } int q ; R ( q ); while ( q -- ) { int op , u , x ; R ( op , u ); if ( op == 1 ) { R ( x ); for ( auto v : H [ u ]) { if ( a [ u ] < ( int ) edge [ v ]. size ()) if ( -- num [ v ][ a [ u ]] == 0 ) add ( BIT [ id [ v ]], a [ u ], - 1 ); if ( x < ( int ) edge [ v ]. size ()) if ( ++ num [ v ][ x ] == 1 ) add ( BIT [ id [ v ]], x , 1 ); } a [ u ] = x ; } else { if ( ! big [ u ]) { int res = edge [ u ]. size (); for ( int i = 0 ; i < edge [ u ]. size (); ++ i ) num [ u ][ i ] = 0 ; for ( auto v : edge [ u ]) if ( a [ v ] < edge [ u ]. size ()) num [ u ][ a [ v ]] ++ ; for ( int i = 0 ; i < edge [ u ]. size (); ++ i ) if ( num [ u ][ i ] == 0 ) { res = i ; break ; } W ( res ); } else { W ( mex ( u )); } } } } return 0 ; }","title":"F. Finding a MEX"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%201/#i-leading-robots","text":"upsolved by: Verly \u9898\u610f\uff1a\u6709n\u4e2a\u673a\u5668\u4eba\uff0ct\u65f6\u523b\u7684\u4f4d\u7f6e\u4e3a at^2+p at^2+p \uff0c\u95ee\u6709\u591a\u5c11\u4e2a\u673a\u5668\u4eba\u5904\u4e8e\u8fc7\u9886\u5148\u72b6\u6001\uff0c\u5f53\u4e14\u4ec5\u5f53\u5904\u4e8e\u6700\u524d\u7684\u673a\u5668\u4eba\u552f\u4e00\u65f6\u624d\u89c6\u4e3a\u9886\u5148\u3002 \u4ee4 x=t^2 x=t^2 \uff0c\u5219 y=ax+p y=ax+p \uff0c\u95ee\u6709\u591a\u5c11\u6761\u5c04\u7ebf\u5728\u67d0\u4e00\u65f6\u523b\u5904\u4e8e\u6700\u4e0a\u65b9\uff0c\u4e5f\u5c31\u662fBZOJ1007\u7684\u95ee\u9898\u3002\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u7684\u4e0b\u51f8\u5305\uff0c\u770b\u6808\u4e2d\u6709\u591a\u5c11\u70b9\u5373\u53ef\u3002 \u8fd9\u9053\u9898\u9700\u8981\u6ce8\u610f\u7684\u662f\u76f4\u7ebf\u7684\u4ea4\u70b9\u53ef\u80fd\u4f4d\u4e8ey\u8f74\u7684\u5de6\u4fa7\uff0c\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u9700\u8981\u505a\u4e00\u4e0b\u9884\u5904\u7406\u3002\u5bf9\u4e8e\u76f8\u540c\u7684p\u53ea\u4fdd\u7559\u6700\u5927\u7684a\uff0c\u4e14\u5bf9\u4e8e p_1<p_2 p_1<p_2 \u4fdd\u8bc1 a_1>a_2 a_1>a_2 \uff0c\u88ab\u4e22\u5f03\u7684\u6570\u636e\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\uff0c\u5904\u7406\u540e\u7684\u6570\u636e\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u76f4\u7ebf\u7684\u4ea4\u70b9\u5728y\u8f74\u53f3\u4fa7\u3002 \u5728\u8ba1\u7b97\u5b8c\u540e\u9700\u8981\u51cf\u53bb\u51fa\u73b0\u591a\u6b21\u7684ab\u70b9\u5bf9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 5e4 + 10 ; vector < pair < int , int > > ve , tmp ; int st [ maxn ]; bool vis [ maxn ]; bool cmp ( pair < int , int > a , pair < int , int > b , pair < int , int > c ) { return 1ll * ( a . second - b . second ) * ( c . first - a . first ) <= 1ll * ( a . second - c . second ) * ( b . first - a . first ); } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n ; scanf ( \"%d\" , & n ); tmp . clear (); ve . clear (); for ( int i = 0 ; i < n ; i ++ ) vis [ i ] = false ; for ( int i = 1 ; i <= n ; i ++ ) { pair < int , int > t ; scanf ( \"%d%d\" , & t . first , & t . second ); tmp . push_back ( t ); } sort ( tmp . begin (), tmp . end ()); for ( int i = n - 1 ; i >= 0 ; i -- ) { pair < int , int > t = { tmp [ i ]. second , tmp [ i ]. first }; if ( ve . size () > 0 && t . second == ve . back (). second && t . first == ve . back (). first ) vis [ ve . size () - 1 ] = true ; if ( ! ve . size ()) ve . push_back ( t ); else if ( t . second == ve . back (). second ) continue ; else if ( t . first > ve . back (). first ) ve . push_back ( t ); } sort ( ve . begin (), ve . end ()); int top = 0 , dsc = 0 ; for ( int i = 0 ; i < ( int ) ve . size (); i ++ ) { while ( top ) { if ( top > 1 && cmp ( ve [ st [ top - 1 ]], ve [ i ], ve [ st [ top ]])) top -- ; else break ; } st [ ++ top ] = i ; } for ( int i = 1 ; i <= top ; i ++ ) { if ( vis [ st [ i ]]) dsc ++ ; } printf ( \"%d \\n \" , top - dsc ); } return 0 ; }","title":"I. Leading Robots"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%201/#j-math-is-simple","text":"upsolved by: ffacs \u9898\u610f\uff1a\u6c42 \\sum\\limits_{1\\le a < b \\le n\\\\gcd(a,b)=1\\\\a+b \\ge n}{\\frac{1}{ab}} T\\le1e4,2\\le n\\le 1e8 T\\le1e4,2\\le n\\le 1e8 \uff0c\u8f93\u51fa\u6a21 998244353 998244353 \u610f\u4e49\u4e0b\u7684\u503c\uff0c \u65f6\u9650\u516d\u79d2 \u8fd9\u4e2a n n \u597d\u50cf\u4e0d\u662f\u5f88\u5927\u554a\uff0c\u80fd\u4e0d\u80fd\u9012\u63a8\u634f\uff1f\u4e0b\u9762\u8fd9\u4e2a \u5927\u4e8e\u7b49\u4e8e\u53f7\u4e5f\u592a\u70e6\u4e86\uff0c\u53d8\u6210\u7b49\u4e8e\u624d\u8212\u670d\u3002 \u8bbe f_n=\\sum\\limits_{1\\le a < b \\le n\\\\gcd(a,b)=1\\\\a+b \\ge n}{\\frac{1}{ab}} \u6765\u8003\u8651\u4e00\u4e0b f_n f_n \u6bd4 f_{n-1} f_{n-1} \u591a\u52a0\u4e0a\u4e86\u4ec0\u4e48\u4e1c\u897f\u3002 \\begin{align} f_n-f_{n-1}&=\\sum\\limits_{1\\le a < b=n\\\\gcd(a,b)=1\\\\a+b \\ge n}{\\frac{1}{ab}}-\\sum\\limits_{1\\le a < b \\le n-1\\\\gcd(a,b)=1\\\\a+b = n-1}{\\frac{1}{ab}} \\\\ &=\\frac{1}{n}\\sum_{1\\le a\\le n\\\\gcd(a,n)=1}\\frac{1}{a}-\\sum\\limits_{1\\le a < b \\le n-1\\\\gcd(a,b)=1\\\\a+b = n-1}{\\frac{1}{ab}} \\\\ \\end{align} \u73b0\u5728\u90fd\u662f\u7b49\u53f7\u4e86\uff0c\u53f3\u8fb9\u90a3\u4e2a\u592a\u4e11\u4e86\uff0c\u7b80\u5316\u4e00\u4e0b\uff0c\u4e0d\u59a8\u8bbe g(n)=\\sum\\limits_{1\\le a < b \\le n\\\\gcd(a,b)=1\\\\a+b = n}{\\frac{1}{ab}} \u8fd9\u6837 n-1 n-1 \u6362\u6210 n n \u6bd4\u8f83\u65b9\u4fbf\uff0c\u56e0\u4e3a\u548c\u662f\u5b9a\u503c\uff0c\u6211\u4eec\u53ea\u679a\u4e3e a a \u5373\u53ef\uff0c\u53c8\u6709 (a,b)=(a,n-a)=(a,n) (a,b)=(a,n-a)=(a,n) , \\frac{1}{ab}=\\frac{1}{a(n-a)}=\\frac{1}{n}(\\frac{1}{a}+\\frac{1}{n-a}) \\frac{1}{ab}=\\frac{1}{a(n-a)}=\\frac{1}{n}(\\frac{1}{a}+\\frac{1}{n-a}) \\begin{align} g(n)&=\\frac{1}{n}\\sum_{1\\le a<n-a \\le n\\\\(a,n)=1}(\\frac{1}{a}+\\frac{1}{n-a}) \\end{align} \u53d1\u73b0\u5728\u4e0d\u8003\u8651 (a,n)=1 (a,n)=1 \u7684\u65f6\u5019 \u9664\u4e86 a=n-a a=n-a \uff0c\u6240\u6709 \\frac{1}{a},1\\le a\\le n-1 \\frac{1}{a},1\\le a\\le n-1 \u90fd\u904d\u5386\u5230\u4e86\uff0c\u800c a=n-a a=n-a \u548c a=n a=n \u65f6\uff0c (a,n)\\neq 1 (a,n)\\neq 1 \uff0c\u8fd8\u6709\u8981\u6ce8\u610f n=2 n=2 \u7684\u65f6\u5019\u662f\u4e0d\u6210\u7acb\u7684\u3002\u6240\u4ee5\u53ef\u4ee5\u6539\u5199\u6210 g(n)=\\frac{1}{n}\\sum_{1\\le a \\le n\\\\gcd(a,n)=1}\\frac{1}{a} \u8fd9\u4e2a\u548c (4) (4) \u4e2d\u7684\u7b2c\u4e00\u9879\u5c45\u7136\u662f\u4e00\u6837\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5f97\u5230\u4e86 f_n-f_{n-1}=g_n-g_{n-1} \\\\ f_n-f_2=g_n-g_2 \\\\ f_n=g_n+\\frac{1}{2} \u5176\u4e2d g_n= \\left\\{ \\begin{array}{**lr**} \\frac{1}{n}\\sum\\limits_{1\\le a \\le n\\\\gcd(a,n)=1}\\frac{1}{a} \\\\ 0,n=2\\\\ \\end{array} \\right. \u8fd9\u4e2a g(n) g(n) \u770b\u8d77\u6765\u5c31\u5f88\u597d\u6c42 \\begin{align} g(n)&=\\frac{1}{n}\\sum_{1\\le a\\le n}\\frac{1}{a}\\sum_{d\\mid gcd(a,n)}\\mu(d) \\\\ &=\\frac{1}{n}\\sum_{d\\mid n}\\mu(d)\\sum_{d\\mid a}\\frac{1}{a} \\\\ &=\\frac{1}{n}\\sum_{d\\mid n}\\mu(d)\\sum_{a=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\frac{1}{ad} \\\\ &=\\frac{1}{n}\\sum_{d\\mid n}\\mu(d)\\frac{1}{d}\\sum_{a=1}^{\\lfloor\\frac{n}{d}\\rfloor}\\frac{1}{a} \\end{align} \u540e\u9762\u5c31\u662f\u4e00\u4e2a\u8c03\u548c\u7ea7\u6570\u524d\u7f00\u548c\uff0c\u53c8\u56e0\u4e3a\u91cc\u9762\u6709 \\mu(d) \\mu(d) \u53c8\u8981\u6c42\u662f n n \u7684\u56e0\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5 \\text{dfs} \\text{dfs} \u7d20\u56e0\u5b50\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u7684\u56e0\u5b50\u5373\u53ef\u3002","title":"J. Math is Simple"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%201/#k-minimum-index","text":"upsolved by: Verly \u63a8\u8350\u9605\u8bfb \u91d1\u7b56-\u5b57\u7b26\u4e32\u7b97\u6cd5\u9009\u8bb2 \u5b66\u4e60\u4e00\u4e0bLyndon\u5faa\u73af\u3002 \u5bf9\u4e8eS\u7684\u67d0\u4e2a\u524d\u7f00 s[0,k] s[0,k] \uff0c\u628a\u5b83\u5206\u4e3a S[0,i-1] S[0,i-1] \u548c S[i,k] S[i,k] \uff0c\u5176\u4e2d s[0,i-1] s[0,i-1] \u7531 s_1s_2...s_g s_1s_2...s_g \u7ec4\u6210\uff0c\u4e14 s_1...s_{g} s_1...s_{g} \u4e3a s_{g}\u2264s_{g-1}\u2264..\u2264s_1 s_{g}\u2264s_{g-1}\u2264..\u2264s_1 \u7684Lyndon\u4e32\uff0c\u4e14\u6709 S[i,k]<s_g S[i,k]<s_g \uff0c S[i,k]=t_1t_2...t_hv S[i,k]=t_1t_2...t_hv \uff0c\u5176\u4e2d t_1=t_2=...=t_h t_1=t_2=...=t_h \uff0c\u4e14 v v \u4e3a t_1 t_1 \u7684\u771f\u524d\u7f00\uff0c j=k-|t_1| j=k-|t_1| \u3002 \u6240\u4ee5\u5728check\u5faa\u73af\u8282\u65f6\uff1a \u5982\u679c S[j]<S[k] S[j]<S[k] \uff0c\u4e5f\u5c31\u662f\u51fa\u73b0\u4e86\u5f62\u5982 abcabcabz abcabcabz \u7684\u60c5\u51b5 (i=0, j=5, k=8) (i=0, j=5, k=8) \uff0c\u6b64\u65f6\u7684\u7b54\u6848\u4e3a\u6240\u6709\u5faa\u73af\u4e32\u7684\u5f00\u5934\uff0c res[k]=i res[k]=i \u5982\u679c S[j]\u2265S[k] S[j]\u2265S[k] \uff0c\u5373 abcabcabc abcabcabc \u6216\u8005 abcabcabd(i=0,j=5,k=8,res[j]=3) abcabcabd(i=0,j=5,k=8,res[j]=3) \uff0c\u6b64\u65f6\u7684\u7b54\u6848\u4e3a\u6700\u8fd1\u7684\u4e00\u4e2a\u5faa\u73af\u4e32\u7684\u4e32\u9996\uff0c res[k]=res[j]+k-j res[k]=res[j]+k-j Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e6 + 10 ; const int mod = 1e9 + 7 ; char s [ maxn ]; int res [ maxn ]; void duval ( char s []) { int n = strlen ( s ), i = 0 ; while ( i < n ) { int j = i , k = i + 1 ; res [ i ] = i ; while ( k < n && s [ j ] <= s [ k ]) { if ( s [ j ] < s [ k ]) j = i , res [ k ] = i ; else res [ k ] = res [ j ] + k - j , j ++ ; k ++ ; } while ( i <= j ) i += k - j ; } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%s\" , s ); int n = strlen ( s ); duval ( s ); ll ans = 0 ; for ( int i = 0 , p = 1 ; i < n ; i ++ , p = 1ll * p * 1112 % mod ) ans = ( ans + 1ll * p * ( res [ i ] + 1 )) % mod ; printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"K. Minimum Index"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%201/#l-mow","text":"\u7ed9\u4e00\u4e2a\u51f8\u5305\uff0c\u4f60\u53ef\u4ee5\u6bcf\u4e2a\u5355\u4f4d\u9762\u79ef\u7528 A \u7684\u4ee3\u4ef7\u6d82\u8272\uff0c\u6216\u8005\u7528\u4e00\u4e2a\u534a\u5f84\u4e3a r \u7684\u5706\u5f62\u7684\u533a\u57df\uff08\u4e0d\u80fd\u8d85\u51fa\u8fb9\u754c\uff09\u7ed9\u4e00\u4e2a\u5355\u4f4d\u9762\u79ef\u4ee5 B \u7684\u4ee3\u4ef7\u6d82\u8272\uff0c\u6c42\u5168\u90e8\u6d82\u6ee1\u8272\u7684\u6700\u5c11\u82b1\u8d39\u3002 \u8003\u8651\u5706\u5fc3\u7684\u8303\u56f4\u662f\u51f8\u5305\u6bcf\u6761\u8fb9\u5f80\u5185\u79fb\u52a8 r \u8ddd\u79bb\u6784\u6210\u7684\u65b0\u51f8\u5305\u3002\u5982\u679c A<B \u663e\u7136\u5168\u90e8\u7528 A \u6d82\u8272\u5373\u53ef\uff0c\u76f4\u63a5\u7b97\u539f\u51f8\u5305\u9762\u79ef\uff0c\u5426\u5219\u5c3d\u91cf\u7528 B \u6d82\u8272\uff0c\u6700\u5927\u8303\u56f4\u662f \u65b0\u51f8\u5305\u9762\u79ef+\u65b0\u51f8\u5305\u5468\u957f*r+pi*r*r \u65b0\u51f8\u5305\u9762\u79ef+\u65b0\u51f8\u5305\u5468\u957f*r+pi*r*r \u3002 \u53ef\u4ee5\u8003\u8651\u975e\u6247\u5f62\u7684\u533a\u57df\u5b9e\u9645\u662f\u5e73\u884c\u7ebf\u505a\u5207\u5272\u4e00\u5171\u662f\u65b0\u51f8\u5305\u5468\u957f\u90a3\u4e48\u957f\u7684\uff0c\u6247\u5f62\u533a\u57df\u62fc\u8d77\u6765\u5c31\u662f\u4e00\u4e2a\u5916\u89d2\u548c\u4e3a 2pi\u3002 \u6240\u4ee5\u9996\u5148\u628a\u51f8\u5305\u5904\u7406\u6210\u9006\u65f6\u9488\uff0c\u6bcf\u6761\u8fb9\u7528\u5411\u91cf\u8868\u793a\u7684\u8bdd\uff0c\u5411\u5de6\u65cb\u8f6c pi/2 \u5e76\u8868\u793a\u4e3a\u5355\u4f4d\u5411\u91cf\u5373\u662f\u5b83\u7684\u5355\u4f4d\u6cd5\u5411\u91cf\uff0c\u5f80\u8fd9\u4e2a\u79fb\u52a8 r \u7684\u8ddd\u79bb\uff0c\u7136\u540e\u505a\u534a\u5e73\u9762\u4ea4\u6c42\u51fa\u65b0\u51f8\u5305\u7684\u70b9\u96c6\uff0c\u6ce8\u610f\u5982\u679c\u65b0\u51f8\u5305\u70b9\u96c6 <= 2 \u5176\u5b9e\u8868\u793a\u5b83\u4e0d\u5b58\u5728\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/25 22:34 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 205 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } #define mp make_pair #define fi first #define se second #define pb push_back typedef double db ; const db eps = 1e-6 ; const db pi = acos ( - 1 ); int sign ( db k ){ if ( k > eps ) return 1 ; else if ( k <- eps ) return - 1 ; return 0 ; } int cmp ( db k1 , db k2 ){ return sign ( k1 - k2 );} int inmid ( db k1 , db k2 , db k3 ){ return sign ( k1 - k3 ) * sign ( k2 - k3 ) <= 0 ;} // k3 \u5728 [k1,k2] \u5185 struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} int operator == ( const point & k1 ) const { return cmp ( x , k1 . x ) == 0 && cmp ( y , k1 . y ) == 0 ;} // \u9006\u65f6\u9488\u65cb\u8f6c point turn ( db k1 ){ return ( point ){ x * cos ( k1 ) - y * sin ( k1 ), x * sin ( k1 ) + y * cos ( k1 )};} point turn90 (){ return ( point ){ - y , x };} bool operator < ( const point k1 ) const { int a = cmp ( x , k1 . x ); if ( a ==- 1 ) return 1 ; else if ( a == 1 ) return 0 ; else return cmp ( y , k1 . y ) ==- 1 ; } db abs (){ return sqrt ( x * x + y * y );} db abs2 (){ return x * x + y * y ;} db dis ( point k1 ){ return (( * this ) - k1 ). abs ();} point unit (){ db w = abs (); return ( point ){ x / w , y / w };} void scan (){ double k1 , k2 ; scanf ( \"%lf%lf\" , & k1 , & k2 ); x = k1 ; y = k2 ;} void print (){ printf ( \"%.11lf %.11lf \\n \" , x , y );} db getw (){ return atan2 ( y , x );} point getdel (){ if ( sign ( x ) ==- 1 || ( sign ( x ) == 0 && sign ( y ) ==- 1 )) return ( * this ) * ( - 1 ); else return ( * this );} int getP () const { return sign ( y ) == 1 || ( sign ( y ) == 0 && sign ( x ) ==- 1 );} }; int inmid ( point k1 , point k2 , point k3 ){ return inmid ( k1 . x , k2 . x , k3 . x ) && inmid ( k1 . y , k2 . y , k3 . y );} db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} db dot ( point k1 , point k2 ){ return k1 . x * k2 . x + k1 . y * k2 . y ;} db rad ( point k1 , point k2 ){ return atan2 ( cross ( k1 , k2 ), dot ( k1 , k2 ));} // -pi -> pi int compareangle ( point k1 , point k2 ){ return k1 . getP () < k2 . getP () || ( k1 . getP () == k2 . getP () && sign ( cross ( k1 , k2 )) > 0 ); } point proj ( point k1 , point k2 , point q ){ // q \u5230\u76f4\u7ebf k1,k2 \u7684\u6295\u5f71 point k = k2 - k1 ; return k1 + k * ( dot ( q - k1 , k ) / k . abs2 ()); } point reflect ( point k1 , point k2 , point q ){ return proj ( k1 , k2 , q ) * 2 - q ;} int clockwise ( point k1 , point k2 , point k3 ){ // k1 k2 k3 \u9006\u65f6\u9488 1 \u987a\u65f6\u9488 -1 \u5426\u5219 0 return sign ( cross ( k2 - k1 , k3 - k1 )); } int checkLL ( point k1 , point k2 , point k3 , point k4 ){ // \u6c42\u76f4\u7ebf (L) \u7ebf\u6bb5 (S)k1,k2 \u548c k3,k4 \u7684\u4ea4\u70b9 return cmp ( cross ( k3 - k1 , k4 - k1 ), cross ( k3 - k2 , k4 - k2 )) != 0 ; } point getLL ( point k1 , point k2 , point k3 , point k4 ){ db w1 = cross ( k1 - k3 , k4 - k3 ), w2 = cross ( k4 - k3 , k2 - k3 ); return ( k1 * w2 + k2 * w1 ) / ( w1 + w2 ); } int intersect ( db l1 , db r1 , db l2 , db r2 ){ if ( l1 > r1 ) swap ( l1 , r1 ); if ( l2 > r2 ) swap ( l2 , r2 ); return cmp ( r1 , l2 ) !=- 1 && cmp ( r2 , l1 ) !=- 1 ; } int checkSS ( point k1 , point k2 , point k3 , point k4 ){ return intersect ( k1 . x , k2 . x , k3 . x , k4 . x ) && intersect ( k1 . y , k2 . y , k3 . y , k4 . y ) && sign ( cross ( k3 - k1 , k4 - k1 )) * sign ( cross ( k3 - k2 , k4 - k2 )) <= 0 && sign ( cross ( k1 - k3 , k2 - k3 )) * sign ( cross ( k1 - k4 , k2 - k4 )) <= 0 ; } db disSP ( point k1 , point k2 , point q ){ point k3 = proj ( k1 , k2 , q ); if ( inmid ( k1 , k2 , k3 )) return q . dis ( k3 ); else return min ( q . dis ( k1 ), q . dis ( k2 )); } db disSS ( point k1 , point k2 , point k3 , point k4 ){ if ( checkSS ( k1 , k2 , k3 , k4 )) return 0 ; else return min ( min ( disSP ( k1 , k2 , k3 ), disSP ( k1 , k2 , k4 )), min ( disSP ( k3 , k4 , k1 ), disSP ( k3 , k4 , k2 ))); } int onS ( point k1 , point k2 , point q ){ return inmid ( k1 , k2 , q ) && sign ( cross ( k1 - q , k2 - k1 )) == 0 ;} struct circle { point o ; db r ; void scan (){ o . scan (); scanf ( \"%lf\" , & r );} int inside ( point k ){ return cmp ( r , o . dis ( k ));} }; struct line { // p[0]->p[1] point p [ 2 ]; line ( point k1 , point k2 ){ p [ 0 ] = k1 ; p [ 1 ] = k2 ;} point & operator [] ( int k ){ return p [ k ];} int include ( point k ){ return sign ( cross ( p [ 1 ] - p [ 0 ], k - p [ 0 ])) > 0 ;} point dir (){ return p [ 1 ] - p [ 0 ];} line push (){ // \u5411\u5916 ( \u5de6\u624b\u8fb9 ) \u5e73\u79fb eps const db eps = 1e-6 ; point delta = ( p [ 1 ] - p [ 0 ]). turn90 (). unit () * eps ; return { p [ 0 ] - delta , p [ 1 ] - delta }; } }; point getLL ( line k1 , line k2 ){ return getLL ( k1 [ 0 ], k1 [ 1 ], k2 [ 0 ], k2 [ 1 ]);} int parallel ( line k1 , line k2 ){ return sign ( cross ( k1 . dir (), k2 . dir ())) == 0 ;} int sameDir ( line k1 , line k2 ){ return parallel ( k1 , k2 ) && sign ( dot ( k1 . dir (), k2 . dir ())) == 1 ;} int operator < ( line k1 , line k2 ){ if ( sameDir ( k1 , k2 )) return k2 . include ( k1 [ 0 ]); return compareangle ( k1 . dir (), k2 . dir ()); } int checkpos ( line k1 , line k2 , line k3 ){ return k3 . include ( getLL ( k1 , k2 ));} vector < point > halfPlaneIS ( vector < line > & l ) { sort ( l . begin (), l . end ()); deque < line > q ; for ( int i = 0 ; i < ( int ) l . size (); ++ i ) { if ( i && sameDir ( l [ i ], l [ i - 1 ])) continue ; while ( q . size () > 1 && ! checkpos ( q [ q . size () - 2 ], q [ q . size () - 1 ], l [ i ])) q . pop_back (); while ( q . size () > 1 && ! checkpos ( q [ 1 ], q [ 0 ], l [ i ])) q . pop_front (); q . push_back ( l [ i ]); } while ( q . size () > 2 && ! checkpos ( q [ q . size () - 2 ], q [ q . size () - 1 ], q [ 0 ])) q . pop_back (); while ( q . size () > 2 && ! checkpos ( q [ 1 ], q [ 0 ], q [ q . size () - 1 ])) q . pop_front (); vector < point > ret ; for ( int i = 0 ; i < ( int ) q . size (); ++ i ) ret . push_back ( getLL ( q [ i ], q [( i + 1 ) % q . size ()])); return ret ; } db area ( vector < point > A ){ // \u591a\u8fb9\u5f62\u7528 vector<point> \u8868\u793a , \u9006\u65f6\u9488 db ans = 0 ; for ( int i = 0 ; i < A . size (); i ++ ) ans += cross ( A [ i ], A [( i + 1 ) % A . size ()]); return ans / 2 ; } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"my.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; db r , A , B ; R ( n , r , A , B ); vector < point > x ( n ); for ( int i = 0 ; i < n ; ++ i ) x [ i ]. scan (); db s = area ( x ); if ( sign ( s ) < 0 ) { reverse ( x . begin (), x . end ()); s = - s ; } vector < line > deal ; for ( int i = 0 ; i < n ; ++ i ) { point w = ( x [( i + 1 ) % n ] - x [ i ]). turn90 (). unit (); deal . emplace_back ( line ( x [ i ] + w * r , x [( i + 1 ) % n ] + w * r )); } auto real = halfPlaneIS ( deal ); db res = s * A ; if ( real . size () > 2 ) { db realv = area ( real ); db tmp = 0 ; for ( int i = 0 ; i < real . size (); ++ i ) tmp += real [ i ]. dis ( real [( i + 1 ) % real . size ()]); db all = ( realv + tmp * r + r * r * pi ); res = min ( res , all * B + ( s - all ) * A ); } W ( res ); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"L. Mow"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%202/","text":"Name Date Solved A B C D E F G H I J K L 2020 Multi-University Training Contest 2 2020/7/23 7/12 O . . . O O \u00d8 . \u00d8 O . O A. Total Eclipse Link \u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u70b9\u6743\uff0c\u6bcf\u6b21\u53d6\u4e00\u4e2a\u6700\u5927\u7684\u751f\u6210\u5b50\u56fe\u5c06\u8fd9\u4e9b\u70b9\u7684\u6743-1\uff0c\u5982\u679c\u51cf\u52300\u5c31\u4e0d\u80fd\u9009\u4ed6\u4e86\uff0c\u7136\u540e\u6c42\u6700\u5c11\u6b65\u6570\uff0c\u662f\u4e00\u4e2a\u5047\u9898\u539f\u5148\u5e76\u6ca1\u6709\u8bf4\u8981\u53d6\u6700\u5927\u7684\u70b9\u6570\u3002 \u53ef\u4ee5\u9006\u7740\u505a\u5e76\u67e5\u96c6\uff0c\u6700\u5927\u6743\u7684\u80af\u5b9a\u662f\u7528\u66f4\u591a\u7684\u6b21\u6570\uff0c\u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\u4e0d\u65ad\u8fde\u8fb9\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; vector < int > edge [ maxn ]; int b [ maxn ], c [ maxn ]; bool vis [ maxn ]; bool cmp ( int i , int j ) { return b [ i ] > b [ j ]; } int pre [ maxn ]; int Find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = Find ( pre [ x ]); } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & b [ i ]); for ( int i = 1 ; i <= n ; i ++ ) edge [ i ]. clear (); for ( int i = 1 ; i <= n ; i ++ ) vis [ i ] = false ; for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = i ; for ( int i = 1 ; i <= m ; i ++ ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } int tot = 0 ; for ( int i = 1 ; i <= n ; i ++ ) c [ i ] = i ; c [ n + 1 ] = 0 ; sort ( c + 1 , c + n + 1 , cmp ); ll res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int u = c [ i ]; int root = - 1 ; for ( auto v : edge [ u ]) { int fv = Find ( v ); if ( vis [ fv ]) { if ( root == - 1 ) root = fv ; else { if ( root != fv ) { pre [ fv ] = root ; tot -- ; } } } } vis [ u ] = true ; if ( root == - 1 ) { tot ++ ; } if ( root != - 1 ) pre [ u ] = root ; int now = b [ c [ i ]] - b [ c [ i + 1 ]]; res += 1ll * now * tot ; } printf ( \"%lld \\n \" , res ); } return 0 ; } E. New Equipments Link n \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u6709a\uff0cb\uff0cc\u5c5e\u6027\uff0c\u6709\u65e0\u9650\u4e2a\u88c5\u5907\uff0c\u6c42\u5176\u4e2dk\u4e2a\u4eba\u62ff\u4e00\u79cd\u88c5\u5907j\uff0c\u83b7\u5f97\u7684\u6700\u5c0f \\sum a_i*j^2+b_i*j+c_i \\sum a_i*j^2+b_i*j+c_i \u3002\u8981\u6c42 k=1~n \u7684\u6240\u6709\u7b54\u6848\u3002 \u76f4\u63a5\u9884\u5904\u7406\u6bcf\u4e2a\u4eba\u5bf9\u79f0\u8f74\u5de6\u53f3 50 \u4e2a\u70b9\uff0c\u4e00\u5171\u70b9\u6570 50*50+50=2550\uff0c\u5728\u4e8c\u5206\u56fe\u4e0a\u8dd1\u6700\u5c0f\u8d39\u7528\u6d41\u5373\u53ef\uff0c\u5bf9\u4e8e\u7b54\u6848\u589e\u52a0\u5c06\u6b8b\u4f59\u7f51\u7edc\u589e\u5e7f\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; const ll INF = 0x3f3f3f3f3f3f3f3fll ; struct Edge { int from , to , cap , flow ; ll cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int path [ maxn ], a [ maxn ]; ll dis [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void add ( int from , int to , int cap , ll cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , ll & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = INF ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == INF ) return false ; //\u6c42\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 //if(1ll * dis[t] * a[t] > 0) return false; \u6c42\u53ef\u884c\u6d41\u6700\u5c0f\u8d39\u7528\uff0c\u56e0\u6b64\u5f53\u8d39\u7528\u589e\u91cf\u5927\u4e8e0\u65f6\u4e0d\u7ee7\u7eed\u589e\u52a0\u6d41\u91cf flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } ll mincostMaxFlow ( int s , int t ) { int flow = 0 ; ll cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; ll a [ 55 ], b [ 55 ], c [ 55 ]; int n , m , tot ; map < int , int > mp ; ll cal ( int x , int p ) { return a [ x ] * p * p + b [ x ] * p + c [ x ]; } void addEdge ( int x ) { ll p = - b [ x ] / ( 2 * a [ x ]); int cnt = 0 ; if ( p < 0 ) p = 0 ; if ( p > m ) p = m ; int l = p , r = p + 1 ; while ( cnt <= 50 ) { if ( l < 1 && r > m ) break ; if ( l >= 1 ) { if ( mp . count ( l ) == 0 ) mp [ l ] = tot ++ ; int v = mp [ l ]; ll val = cal ( x , l ); ans . add ( x , v , 1 , val ); l -- ; cnt ++ ; } if ( r <= m ) { if ( mp . count ( r ) == 0 ) mp [ r ] = tot ++ ; int v = mp [ r ]; ll val = cal ( x , r ); ans . add ( x , v , 1 , val ); r ++ ; cnt ++ ; } } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld%lld%lld\" , & a [ i ], & b [ i ], & c [ i ]); mp . clear (); int SS = 0 , T = 4001 , S = T + 1 ; ans . init ( S ); tot = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) addEdge ( i ); for ( int i = 1 ; i <= n ; i ++ ) ans . add ( SS , i , 1 , 0 ); for ( int i = n + 1 ; i < tot ; i ++ ) ans . add ( i , T , 1 , 0 ); ll res = 0 ; for ( int k = 1 ; k <= n ; k ++ ) { ans . add ( S , SS , 1 , 0 ); res += ans . mincostMaxFlow ( S , T ); printf ( \"%lld%c\" , res , \" \\n \" [ k == n ]); } } return 0 ; } F. The Oculus Link fib[1] = 1, fib[2] = 2, fib[i] = fib[i - 1] + fib[i - 2] \u5df2\u77e5\u4e00\u4e2a\u6570\u5b57\u7528 fib \u548c\u4ece\u9ad8\u5230\u4f4e\u8d2a\u5fc3\u548c\u8868\u793a\u662f\u552f\u4e00\u7684\u3002 \u7ed9 A B \u4e24\u4e2a\u6570\u5b57\u7528 fib \u7684\u8868\u793a\u65b9\u6848\uff0c\u7ed9\u51fa C=A*B C=A*B \u7528 fib \u8868\u793a\u65b9\u6848\u7684\u9519\u8bef\u65b9\u6848\uff08\u662f\u6b63\u786e\u65b9\u6848\u4e2d\u628a\u4e00\u4e2a1\u53d8\u4e3a0\uff09\uff0c\u6c42\u6539\u7684\u662f\u54ea\u4e2a\u4f4d\u7f6e\u3002 \u76f4\u63a5 hash\uff0c\u7531\u4e8e\u4e58\u6cd5\u548c\u52a0\u6cd5\u5bf9\u53d6\u6a21\u90fd\u662f\u5929\u7136\u6210\u7acb\u7684\u3002 \u8003\u8651\u5c06 fib_i fib_i \u7684 hash \u503c\u5904\u7406\u51fa\u6765\uff0c\u8bd5\u586b\u6bcf\u4e00\u4f4d\u5408\u6cd5\u7684 C \u4e3a 0 \u7684\u70b9\u5373\u53ef\u3002\u8d5b\u4e2d\u4f7f\u7528\u53cc hash \u901a\u8fc7\uff0c\u5b9e\u9645\u81ea\u7136\u6ea2\u51fa\u90fd\u53ef\u4ee5\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/23 14:13 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e7 + 50 ; const int mod = 1e9 + 7 ; const int mod2 = 998244353 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } ll f [ maxn ] = { 1 , 1 , 2 }; ll g [ maxn ] = { 1 , 1 , 2 }; int vis [ maxn ]; int main ( int argc , char * argv []) { for ( int i = 3 ; i <= 1e7 + 1 ; ++ i ) { f [ i ] = ( f [ i - 2 ] + f [ i - 1 ]) % mod ; g [ i ] = ( g [ i - 2 ] + g [ i - 1 ]) % mod2 ; } int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n1 , n2 , n3 ; R ( n1 ); ll m1 = 0 , m2 = 0 , m3 = 0 ; ll g1 = 0 , g2 = 0 , g3 = 0 ; for ( int i = 1 ; i <= n1 ; ++ i ) { int x ; R ( x ); if ( x == 1 ) { m1 = ( m1 + f [ i ]) % mod ; g1 = ( g1 + g [ i ]) % mod2 ; } } R ( n2 ); for ( int i = 1 ; i <= n2 ; ++ i ) { int x ; R ( x ); if ( x == 1 ) { m2 = ( m2 + f [ i ]) % mod ; g2 = ( g2 + g [ i ]) % mod2 ; } } ll mc = m1 * m2 % mod ; ll gc = g1 * g2 % mod2 ; R ( n3 ); for ( int i = 1 ; i <= n3 ; ++ i ) { R ( vis [ i ]); if ( vis [ i ] == 1 ) { m3 = ( m3 + f [ i ]) % mod ; g3 = ( g3 + g [ i ]) % mod2 ; } } vis [ 0 ] = 0 ; vis [ n3 + 1 ] = 0 ; int flag = 0 ; for ( int i = 1 ; i <= n3 ; ++ i ) { if ( ! vis [ i - 1 ] && ! vis [ i + 1 ] && ! vis [ i ]) { m3 = ( m3 + f [ i ]) % mod ; g3 = ( g3 + g [ i ]) % mod2 ; if (( mc - m3 ) % mod == 0 && ( gc - g3 ) % mod2 == 0 ) { flag = i ; break ; } m3 = ( m3 - f [ i ]) % mod ; g3 = ( g3 - g [ i ]) % mod2 ; } } W ( flag ); } return 0 ; } G. In Search of Gold Link \u4e00\u68f5\u6811\uff0c\u6bcf\u6761\u8fb9\u6709 ab \u4e24\u79cd\u8fb9\u6743\uff0c\u6c42\u5c06\u5176 k \u6761\u8fb9\u505a a \u8fb9\u6743\uff0c \u53e6\u5916 n-1-k \u6761\u505a b \u8fb9\u6743\uff0c\u6c42\u6700\u5c0f\u76f4\u5f84\u3002\u5176\u4e2d n \\le 2e4, k \\le 20 n \\le 2e4, k \\le 20 \u9996\u5148\u8003\u8651\u7b54\u6848\u663e\u7136\u662f\u6ee1\u8db3\u4e8c\u5206\u6027\u8d28\u7684\uff0c\u8003\u8651\u4e8c\u5206\u76f4\u5f84\u3002 \u5bf9\u4e8e\u5f53\u524d\u76f4\u5f84 x\uff0c\u505a dp \u6c42\u51fa\u662f\u5426\u53ef\u4ee5\u4ee5 x \u505a\u76f4\u5f84\u3002 \u5177\u4f53\u6765\u8bf4 dp_{u,i}=min(dp_{v,i-1}+a,dp_{v,i}+b) dp_{u,i}=min(dp_{v,i-1}+a,dp_{v,i}+b) \u3002\u6bd4\u8f83\u663e\u7136\u7684\u8f6c\u79fb\uff0c\u7528\u7c7b\u4f3c\u6811\u4e0a\u80cc\u5305\u7684\u5f62\u5f0f\u505a\u5373\u53ef\uff0c\u590d\u6742\u5ea6 O(nk) O(nk) \u3002\u611f\u89c9\u5f88\u5bb9\u6613\u5199\u6210 O(nk^2) O(nk^2) \uff0c\u9700\u8981\u6ce8\u610f\u5b50\u6811\u5927\u5c0f\u7684\u526a\u679d\u3002 \u52a0\u4e0a\u4e8c\u5206\u590d\u6742\u5ea6\u5c31\u662f O(nklog(1e9)) O(nklog(1e9)) \u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 21:15 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e4 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S ); } template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } struct E { int v , a , b ; }; vector < E > edge [ maxn ]; ll f [ maxn ][ 50 ], h [ maxn ], mid , l , r , ans ; int sz [ maxn ]; int n , m ; inline void up ( ll & a , ll b ) { a > b ? ( a = b ) : 0 ; } void dfs ( int u , int pre ) { sz [ u ] = 0 ; for ( int i = 0 ; i <= m ; ++ i ) f [ u ][ i ] = 0 ; for ( auto x : edge [ u ]) { int v = x . v ; if ( v == pre ) continue ; dfs ( v , u ); int a = x . a , b = x . b ; for ( int i = 0 ; i <= m ; ++ i ) h [ i ] = mid + 1 ; for ( int i = 0 ; i <= min ( sz [ u ], m ); ++ i ) { for ( int j = 0 ; j <= sz [ v ] && i + j <= m ; ++ j ) { if ( f [ u ][ i ] + f [ v ][ j ] + a <= mid ) up ( h [ i + j + 1 ], max ( f [ u ][ i ], f [ v ][ j ] + a )); if ( f [ u ][ i ] + f [ v ][ j ] + b <= mid ) up ( h [ i + j ], max ( f [ u ][ i ], f [ v ][ j ] + b )); } } sz [ u ] += sz [ v ] + 1 ; for ( int i = 0 ; i <= min ( sz [ u ], m ); ++ i ) f [ u ][ i ] = h [ i ]; } } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"my.out\", \"w\", stdout); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , m ); for ( int i = 0 ; i <= n ; ++ i ) edge [ i ]. clear (); l = 0 , r = 0 ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , a , b ; R ( u , v , a , b ); edge [ u ]. push_back ({ v , a , b }); edge [ v ]. push_back ({ u , a , b }); r += max ( a , b ); } while ( l <= r ) { mid = l + r >> 1 ; dfs ( 1 , 0 ); if ( f [ 1 ][ m ] <= mid ) r = ( ans = mid ) - 1 ; else l = mid + 1 ; } W ( ans ); } return 0 ; } I. It\u2019s All Squares Link \u7ed9\u4e8c\u7ef4\u6743\u503c\u77e9\u9635\uff0c\u7ed9 k \u6b21\u95ed\u5408\u8def\u5f84\uff0c\u6c42\u8def\u5f84\u5185\u5757\u7684\u6743\u503c\u548c\u3002 \u76f4\u63a5\u505a\u51fa\u6240\u6709\u8fb9\u754c\uff0c\u5dee\u5206\u6240\u6709\u5de6\u53f3\u79fb\u52a8\u7684\u8def\u5f84\uff0c\u5bf9\u6bcf\u4e00\u5217\u6c42\u548c\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/28 10:55 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 405 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , m , q ; int flag [ maxn ][ maxn ]; int w [ maxn ][ maxn ]; int vis [ maxn * maxn ]; char s [( int ) 4e6 + 50 ]; char t [] = \"UDLR\" ; int xc [] = { 0 , 0 , - 1 , 1 }; int yc [] = { 1 , - 1 , 0 , 0 }; int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"my.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , m , q ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= m ; ++ j ) R ( w [ i ][ j ]); for ( int i = 0 ; i <= n ; ++ i ) for ( int j = 0 ; j <= m ; ++ j ) flag [ i ][ j ] = - 1 ; for ( int i = 1 ; i <= n * m ; ++ i ) vis [ i ] = - 1 ; while ( q -- ) { int x , y ; R ( x , y ); R ( s ); int L = x , R = x , U = y , D = y ; for ( int i = 0 ; s [ i ]; ++ i ) { for ( int j = 0 ; j < 4 ; ++ j ) { if ( s [ i ] == t [ j ]) { x += xc [ j ]; y += yc [ j ]; break ; } } L = min ( L , x ); R = max ( R , x ); U = max ( U , y ); D = min ( D , y ); if ( s [ i ] == 'L' || s [ i ] == 'R' ) { flag [ x + ( s [ i ] == 'L' )][ y + 1 ] = q ; } } // W(L, R, U, D); ll res = 0 ; for ( int i = L ; i <= R ; ++ i ) { for ( int j = D , now = 0 ; j <= U ; ++ j ) { now ^= ( flag [ i ][ j ] == q ); if ( now && vis [ w [ i ][ j ]] != q ) { vis [ w [ i ][ j ]] = q ; res ++ ; } } } W ( res ); } } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; } J. Lead of Wisdom Link \u7ed9 50 \u4e2a\u7269\u54c1\u6bcf\u4e2a\u6709 abcd \u56db\u4e2a\u6743\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u79cd\u7c7b\uff0c\u6bcf\u79cd\u53ea\u80fd\u6311\u4e00\u4e2a\u3002 \u6c42\u6700\u5927\u5316 DMG=(100+\u2211i\u2208Sai)(100+\u2211i\u2208Sbi)(100+\u2211i\u2208Sci)(100+\u2211i\u2208Sdi) \u76f4\u63a5\u7206\u641c\uff0c\u628a\u4e00\u4e2a\u7269\u54c1\u90fd\u6ca1\u6709\u7684\u79cd\u7c7b\u8df3\u8fc7\u8fd8\u6709\u5c06\u5b8c\u5168\u9006\u5e8f\u5bf9\u53bb\u6389\u5373\u53ef\u526a\u679d\u901a\u8fc7\u3002 \u9700\u8981\u5206\u6790\u590d\u6742\u5ea6\uff0c\u6700\u5927\u7684\u60c5\u51b5\u5e94\u8be5\u662f\u6bcf\u79cd\u7269\u54c1 3 \u4e2a\uff0c\u6700\u540e\u4e00\u7ec4 2 \u4e2a\uff0c\u9700\u8981 3^{16}*2 3^{16}*2 \u7684\u641c\u7d22\u6811\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/23 12:24 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 51 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } struct node { int a , b , c , d ; void set ( int x , int y , int z , int k ) { a = x , b = y , c = z , d = k ; } }; node s [ maxn ][ maxn ]; node pre [ maxn ]; node now ; int sz [ maxn ]; int nxt [ maxn ]; int n , k ; ll res = 0 ; inline void cal () { res = max ( res , 1ll * ( 100 + now . a ) * ( 100 + now . b ) * ( 100 + now . c ) * ( 100 + now . d )); } inline void dfs ( int dep ) { if ( dep == k ) { cal (); return ; } if ( sz [ dep ] == 0 ) { dfs ( dep + 1 ); } else { for ( int i = 0 ; i < sz [ dep ]; ++ i ) { now . a += s [ dep ][ i ]. a ; now . b += s [ dep ][ i ]. b ; now . c += s [ dep ][ i ]. c ; now . d += s [ dep ][ i ]. d ; if ( s [ dep ][ i ]. a <= 0 && s [ dep ][ i ]. b <= 0 && s [ dep ][ i ]. c <= 0 && s [ dep ][ i ]. d <= 0 ) continue ; dfs ( nxt [ dep ]); } now . a -= pre [ dep ]. a ; now . b -= pre [ dep ]. b ; now . c -= pre [ dep ]. c ; now . d -= pre [ dep ]. d ; } } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , k ); for ( int i = 0 ; i < k ; ++ i ) sz [ i ] = 0 , pre [ i ]. set ( 0 , 0 , 0 , 0 ); int t , a , b , c , d ; for ( int i = 0 ; i < n ; ++ i ) { R ( t , a , b , c , d ); s [ t - 1 ][ sz [ t - 1 ] ++ ] = { a - pre [ t - 1 ]. a , b - pre [ t - 1 ]. b , c - pre [ t - 1 ]. c , d - pre [ t - 1 ]. d }; pre [ t - 1 ]. set ( a , b , c , d ); } for ( int i = 0 ; i < k ; i = nxt [ i ]) { int j = i + 1 ; for (; j < k ; ++ j ) { if ( sz [ j ]) break ; } nxt [ i ] = j ; } res = 0 ; now . set ( 0 , 0 , 0 , 0 ); dfs ( 0 ); W ( res ); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; } L. String Distance Link \u7ed9\u4e00\u4e2a 1e5 \u957f\u5ea6\u7684 s \u4e32\uff0c\u4e00\u4e2a 20 \u957f\u5ea6\u7684 t \u4e32\uff0cq\uff08 1e5 \uff09 \u6b21\u8be2\u95ee [l,r] [l,r] \uff0c\u95ee s[l...r] \u6700\u5c11\u9700\u8981\u6539\u52a8\u591a\u5c11\u6b21\uff08\u5728\u4efb\u610f\u4f4d\u7f6e\u5220\u9664\u6216\u6dfb\u52a0\u5b57\u7b26\uff09\u628a\u4ed6\u53d8\u6210 t \u4e32\u3002 \u8003\u8651\u79bb\u7ebf\u8be2\u95ee\uff0c\u5bf9\u4e8e\u8be2\u95ee\u4e3a r \u7684\u4e00\u6b21\u6027\u5904\u7406\u5b8c\u3002 \u8003\u8651\u7b54\u6848\u5176\u5b9e\u662f r - l + 1 + t - 2 * lcs(s[l...r], t) r - l + 1 + t - 2 * lcs(s[l...r], t) \u505a dp\uff0c dp_{i,j,k} dp_{i,j,k} \u8868\u793a s \u5230\u4e86\u7b2c i \u4f4d\uff0c\u4e0e t \u7684\u524d j \u4f4d\u7684 lcs \u4e3a k \u79bb i \u7684\u6700\u8fd1\u70b9\u662f\u54ea\u4e00\u4f4d\u3002 \u8f6c\u79fb\u6bd4\u8f83\u8f7b\u677e\uff0c\u53ea\u8981\u9884\u5904\u7406\u4e86 a\\to z a\\to z \u5728 t \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e x\uff0c\u6bd4\u5982\u6211\u73b0\u5728\u679a\u4e3e\u5230 s[i] s[i] \uff0c\u90a3\u4e48 dp[i][x\\to m][1] dp[i][x\\to m][1] \u90fd\u4e3a i\uff0c\u7136\u540e\u505a\u8f6c\u79fb\uff0c\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u3002 \u5230\u4e86\u4e00\u4e2a r \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4ece\u5927\u5230\u5c0f\u679a\u4e3e k\uff0c\u5982\u679c\u6709\u4e00\u4e2a dp[i][j][k] dp[i][j][k] \u7684\u503c\u4e0d\u5c0f\u4e8e l \u5219\u8bf4\u660e lcs \u4e3a k\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n*m*m+q*logq+q*m*m) O(n*m*m+q*logq+q*m*m) \uff0c\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(m*m+m*26) O(m*m+m*26) Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/23 14:58 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } char s [ maxn ]; char t [ 25 ]; int n , m ; struct op { int idx ; int l , r ; bool operator < ( const op & oth ) const { return r < oth . r ; } } p [ maxn ]; int dp [ 25 ][ 25 ], pd [ 25 ][ 25 ]; int ans [ maxn ], fi [ 26 ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%s%s\" , s + 1 , t + 1 ); n = strlen ( s + 1 ); m = strlen ( t + 1 ); for ( int i = 0 ; i < 26 ; ++ i ) fi [ i ] = - 1 ; for ( int i = 1 ; i <= m ; ++ i ) if ( fi [ t [ i ] - 'a' ] == - 1 ) fi [ t [ i ] - 'a' ] = i ; int q ; R ( q ); int l , r ; for ( int i = 0 ; i < q ; ++ i ) { R ( l , r ); p [ i ] = { i , l , r }; } sort ( p , p + q ); int now = 0 ; memset ( dp , 0 , sizeof dp ); memset ( pd , 0 , sizeof pd ); for ( int i = 1 ; i <= n ; ++ i ) { if ( fi [ s [ i ] - 'a' ] != - 1 ) dp [ fi [ s [ i ] - 'a' ]][ 1 ] = i ; for ( int j = 2 ; j <= m ; ++ j ) { for ( int k = 2 ; k <= m ; ++ k ) { dp [ j ][ k ] = pd [ j ][ k ]; } if ( s [ i ] == t [ j ]) { for ( int k = 1 ; k < m ; ++ k ) { dp [ j ][ k + 1 ] = pd [ j - 1 ][ k ]; } } } // cerr << i << \" ** : \\n\"; for ( int j = 1 ; j <= m ; ++ j ) { for ( int k = 1 ; k <= m ; ++ k ) { if ( dp [ j ][ k ] < dp [ j - 1 ][ k ]) dp [ j ][ k ] = dp [ j - 1 ][ k ]; pd [ j ][ k ] = dp [ j ][ k ]; // cerr << pd[j][k] << \" \"; } // cerr << endl; } while ( now < q && p [ now ]. r == i ) { ans [ p [ now ]. idx ] = p [ now ]. r - p [ now ]. l + 1 + m ; for ( int j = m ; j >= 1 ; -- j ) { if ( pd [ m ][ j ] >= p [ now ]. l ) { ans [ p [ now ]. idx ] = p [ now ]. r - p [ now ]. l + 1 + m - j * 2 ; break ; } } now ++ ; } } for ( int i = 0 ; i < q ; ++ i ) W ( ans [ i ]); } return 0 ; }","title":"2020 Multi University Training Contest 2"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%202/#a-total-eclipse","text":"\u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u70b9\u6743\uff0c\u6bcf\u6b21\u53d6\u4e00\u4e2a\u6700\u5927\u7684\u751f\u6210\u5b50\u56fe\u5c06\u8fd9\u4e9b\u70b9\u7684\u6743-1\uff0c\u5982\u679c\u51cf\u52300\u5c31\u4e0d\u80fd\u9009\u4ed6\u4e86\uff0c\u7136\u540e\u6c42\u6700\u5c11\u6b65\u6570\uff0c\u662f\u4e00\u4e2a\u5047\u9898\u539f\u5148\u5e76\u6ca1\u6709\u8bf4\u8981\u53d6\u6700\u5927\u7684\u70b9\u6570\u3002 \u53ef\u4ee5\u9006\u7740\u505a\u5e76\u67e5\u96c6\uff0c\u6700\u5927\u6743\u7684\u80af\u5b9a\u662f\u7528\u66f4\u591a\u7684\u6b21\u6570\uff0c\u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\u4e0d\u65ad\u8fde\u8fb9\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; vector < int > edge [ maxn ]; int b [ maxn ], c [ maxn ]; bool vis [ maxn ]; bool cmp ( int i , int j ) { return b [ i ] > b [ j ]; } int pre [ maxn ]; int Find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = Find ( pre [ x ]); } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & b [ i ]); for ( int i = 1 ; i <= n ; i ++ ) edge [ i ]. clear (); for ( int i = 1 ; i <= n ; i ++ ) vis [ i ] = false ; for ( int i = 1 ; i <= n ; i ++ ) pre [ i ] = i ; for ( int i = 1 ; i <= m ; i ++ ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } int tot = 0 ; for ( int i = 1 ; i <= n ; i ++ ) c [ i ] = i ; c [ n + 1 ] = 0 ; sort ( c + 1 , c + n + 1 , cmp ); ll res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int u = c [ i ]; int root = - 1 ; for ( auto v : edge [ u ]) { int fv = Find ( v ); if ( vis [ fv ]) { if ( root == - 1 ) root = fv ; else { if ( root != fv ) { pre [ fv ] = root ; tot -- ; } } } } vis [ u ] = true ; if ( root == - 1 ) { tot ++ ; } if ( root != - 1 ) pre [ u ] = root ; int now = b [ c [ i ]] - b [ c [ i + 1 ]]; res += 1ll * now * tot ; } printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"A. Total Eclipse"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%202/#e-new-equipments","text":"n \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u6709a\uff0cb\uff0cc\u5c5e\u6027\uff0c\u6709\u65e0\u9650\u4e2a\u88c5\u5907\uff0c\u6c42\u5176\u4e2dk\u4e2a\u4eba\u62ff\u4e00\u79cd\u88c5\u5907j\uff0c\u83b7\u5f97\u7684\u6700\u5c0f \\sum a_i*j^2+b_i*j+c_i \\sum a_i*j^2+b_i*j+c_i \u3002\u8981\u6c42 k=1~n \u7684\u6240\u6709\u7b54\u6848\u3002 \u76f4\u63a5\u9884\u5904\u7406\u6bcf\u4e2a\u4eba\u5bf9\u79f0\u8f74\u5de6\u53f3 50 \u4e2a\u70b9\uff0c\u4e00\u5171\u70b9\u6570 50*50+50=2550\uff0c\u5728\u4e8c\u5206\u56fe\u4e0a\u8dd1\u6700\u5c0f\u8d39\u7528\u6d41\u5373\u53ef\uff0c\u5bf9\u4e8e\u7b54\u6848\u589e\u52a0\u5c06\u6b8b\u4f59\u7f51\u7edc\u589e\u5e7f\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; const ll INF = 0x3f3f3f3f3f3f3f3fll ; struct Edge { int from , to , cap , flow ; ll cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int path [ maxn ], a [ maxn ]; ll dis [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void add ( int from , int to , int cap , ll cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , ll & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = INF ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == INF ) return false ; //\u6c42\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 //if(1ll * dis[t] * a[t] > 0) return false; \u6c42\u53ef\u884c\u6d41\u6700\u5c0f\u8d39\u7528\uff0c\u56e0\u6b64\u5f53\u8d39\u7528\u589e\u91cf\u5927\u4e8e0\u65f6\u4e0d\u7ee7\u7eed\u589e\u52a0\u6d41\u91cf flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } ll mincostMaxFlow ( int s , int t ) { int flow = 0 ; ll cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; ll a [ 55 ], b [ 55 ], c [ 55 ]; int n , m , tot ; map < int , int > mp ; ll cal ( int x , int p ) { return a [ x ] * p * p + b [ x ] * p + c [ x ]; } void addEdge ( int x ) { ll p = - b [ x ] / ( 2 * a [ x ]); int cnt = 0 ; if ( p < 0 ) p = 0 ; if ( p > m ) p = m ; int l = p , r = p + 1 ; while ( cnt <= 50 ) { if ( l < 1 && r > m ) break ; if ( l >= 1 ) { if ( mp . count ( l ) == 0 ) mp [ l ] = tot ++ ; int v = mp [ l ]; ll val = cal ( x , l ); ans . add ( x , v , 1 , val ); l -- ; cnt ++ ; } if ( r <= m ) { if ( mp . count ( r ) == 0 ) mp [ r ] = tot ++ ; int v = mp [ r ]; ll val = cal ( x , r ); ans . add ( x , v , 1 , val ); r ++ ; cnt ++ ; } } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld%lld%lld\" , & a [ i ], & b [ i ], & c [ i ]); mp . clear (); int SS = 0 , T = 4001 , S = T + 1 ; ans . init ( S ); tot = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) addEdge ( i ); for ( int i = 1 ; i <= n ; i ++ ) ans . add ( SS , i , 1 , 0 ); for ( int i = n + 1 ; i < tot ; i ++ ) ans . add ( i , T , 1 , 0 ); ll res = 0 ; for ( int k = 1 ; k <= n ; k ++ ) { ans . add ( S , SS , 1 , 0 ); res += ans . mincostMaxFlow ( S , T ); printf ( \"%lld%c\" , res , \" \\n \" [ k == n ]); } } return 0 ; }","title":"E. New Equipments"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%202/#f-the-oculus","text":"fib[1] = 1, fib[2] = 2, fib[i] = fib[i - 1] + fib[i - 2] \u5df2\u77e5\u4e00\u4e2a\u6570\u5b57\u7528 fib \u548c\u4ece\u9ad8\u5230\u4f4e\u8d2a\u5fc3\u548c\u8868\u793a\u662f\u552f\u4e00\u7684\u3002 \u7ed9 A B \u4e24\u4e2a\u6570\u5b57\u7528 fib \u7684\u8868\u793a\u65b9\u6848\uff0c\u7ed9\u51fa C=A*B C=A*B \u7528 fib \u8868\u793a\u65b9\u6848\u7684\u9519\u8bef\u65b9\u6848\uff08\u662f\u6b63\u786e\u65b9\u6848\u4e2d\u628a\u4e00\u4e2a1\u53d8\u4e3a0\uff09\uff0c\u6c42\u6539\u7684\u662f\u54ea\u4e2a\u4f4d\u7f6e\u3002 \u76f4\u63a5 hash\uff0c\u7531\u4e8e\u4e58\u6cd5\u548c\u52a0\u6cd5\u5bf9\u53d6\u6a21\u90fd\u662f\u5929\u7136\u6210\u7acb\u7684\u3002 \u8003\u8651\u5c06 fib_i fib_i \u7684 hash \u503c\u5904\u7406\u51fa\u6765\uff0c\u8bd5\u586b\u6bcf\u4e00\u4f4d\u5408\u6cd5\u7684 C \u4e3a 0 \u7684\u70b9\u5373\u53ef\u3002\u8d5b\u4e2d\u4f7f\u7528\u53cc hash \u901a\u8fc7\uff0c\u5b9e\u9645\u81ea\u7136\u6ea2\u51fa\u90fd\u53ef\u4ee5\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/23 14:13 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e7 + 50 ; const int mod = 1e9 + 7 ; const int mod2 = 998244353 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } ll f [ maxn ] = { 1 , 1 , 2 }; ll g [ maxn ] = { 1 , 1 , 2 }; int vis [ maxn ]; int main ( int argc , char * argv []) { for ( int i = 3 ; i <= 1e7 + 1 ; ++ i ) { f [ i ] = ( f [ i - 2 ] + f [ i - 1 ]) % mod ; g [ i ] = ( g [ i - 2 ] + g [ i - 1 ]) % mod2 ; } int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n1 , n2 , n3 ; R ( n1 ); ll m1 = 0 , m2 = 0 , m3 = 0 ; ll g1 = 0 , g2 = 0 , g3 = 0 ; for ( int i = 1 ; i <= n1 ; ++ i ) { int x ; R ( x ); if ( x == 1 ) { m1 = ( m1 + f [ i ]) % mod ; g1 = ( g1 + g [ i ]) % mod2 ; } } R ( n2 ); for ( int i = 1 ; i <= n2 ; ++ i ) { int x ; R ( x ); if ( x == 1 ) { m2 = ( m2 + f [ i ]) % mod ; g2 = ( g2 + g [ i ]) % mod2 ; } } ll mc = m1 * m2 % mod ; ll gc = g1 * g2 % mod2 ; R ( n3 ); for ( int i = 1 ; i <= n3 ; ++ i ) { R ( vis [ i ]); if ( vis [ i ] == 1 ) { m3 = ( m3 + f [ i ]) % mod ; g3 = ( g3 + g [ i ]) % mod2 ; } } vis [ 0 ] = 0 ; vis [ n3 + 1 ] = 0 ; int flag = 0 ; for ( int i = 1 ; i <= n3 ; ++ i ) { if ( ! vis [ i - 1 ] && ! vis [ i + 1 ] && ! vis [ i ]) { m3 = ( m3 + f [ i ]) % mod ; g3 = ( g3 + g [ i ]) % mod2 ; if (( mc - m3 ) % mod == 0 && ( gc - g3 ) % mod2 == 0 ) { flag = i ; break ; } m3 = ( m3 - f [ i ]) % mod ; g3 = ( g3 - g [ i ]) % mod2 ; } } W ( flag ); } return 0 ; }","title":"F. The Oculus"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%202/#g-in-search-of-gold","text":"\u4e00\u68f5\u6811\uff0c\u6bcf\u6761\u8fb9\u6709 ab \u4e24\u79cd\u8fb9\u6743\uff0c\u6c42\u5c06\u5176 k \u6761\u8fb9\u505a a \u8fb9\u6743\uff0c \u53e6\u5916 n-1-k \u6761\u505a b \u8fb9\u6743\uff0c\u6c42\u6700\u5c0f\u76f4\u5f84\u3002\u5176\u4e2d n \\le 2e4, k \\le 20 n \\le 2e4, k \\le 20 \u9996\u5148\u8003\u8651\u7b54\u6848\u663e\u7136\u662f\u6ee1\u8db3\u4e8c\u5206\u6027\u8d28\u7684\uff0c\u8003\u8651\u4e8c\u5206\u76f4\u5f84\u3002 \u5bf9\u4e8e\u5f53\u524d\u76f4\u5f84 x\uff0c\u505a dp \u6c42\u51fa\u662f\u5426\u53ef\u4ee5\u4ee5 x \u505a\u76f4\u5f84\u3002 \u5177\u4f53\u6765\u8bf4 dp_{u,i}=min(dp_{v,i-1}+a,dp_{v,i}+b) dp_{u,i}=min(dp_{v,i-1}+a,dp_{v,i}+b) \u3002\u6bd4\u8f83\u663e\u7136\u7684\u8f6c\u79fb\uff0c\u7528\u7c7b\u4f3c\u6811\u4e0a\u80cc\u5305\u7684\u5f62\u5f0f\u505a\u5373\u53ef\uff0c\u590d\u6742\u5ea6 O(nk) O(nk) \u3002\u611f\u89c9\u5f88\u5bb9\u6613\u5199\u6210 O(nk^2) O(nk^2) \uff0c\u9700\u8981\u6ce8\u610f\u5b50\u6811\u5927\u5c0f\u7684\u526a\u679d\u3002 \u52a0\u4e0a\u4e8c\u5206\u590d\u6742\u5ea6\u5c31\u662f O(nklog(1e9)) O(nklog(1e9)) \u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 21:15 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e4 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S ); } template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } struct E { int v , a , b ; }; vector < E > edge [ maxn ]; ll f [ maxn ][ 50 ], h [ maxn ], mid , l , r , ans ; int sz [ maxn ]; int n , m ; inline void up ( ll & a , ll b ) { a > b ? ( a = b ) : 0 ; } void dfs ( int u , int pre ) { sz [ u ] = 0 ; for ( int i = 0 ; i <= m ; ++ i ) f [ u ][ i ] = 0 ; for ( auto x : edge [ u ]) { int v = x . v ; if ( v == pre ) continue ; dfs ( v , u ); int a = x . a , b = x . b ; for ( int i = 0 ; i <= m ; ++ i ) h [ i ] = mid + 1 ; for ( int i = 0 ; i <= min ( sz [ u ], m ); ++ i ) { for ( int j = 0 ; j <= sz [ v ] && i + j <= m ; ++ j ) { if ( f [ u ][ i ] + f [ v ][ j ] + a <= mid ) up ( h [ i + j + 1 ], max ( f [ u ][ i ], f [ v ][ j ] + a )); if ( f [ u ][ i ] + f [ v ][ j ] + b <= mid ) up ( h [ i + j ], max ( f [ u ][ i ], f [ v ][ j ] + b )); } } sz [ u ] += sz [ v ] + 1 ; for ( int i = 0 ; i <= min ( sz [ u ], m ); ++ i ) f [ u ][ i ] = h [ i ]; } } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"my.out\", \"w\", stdout); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , m ); for ( int i = 0 ; i <= n ; ++ i ) edge [ i ]. clear (); l = 0 , r = 0 ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , a , b ; R ( u , v , a , b ); edge [ u ]. push_back ({ v , a , b }); edge [ v ]. push_back ({ u , a , b }); r += max ( a , b ); } while ( l <= r ) { mid = l + r >> 1 ; dfs ( 1 , 0 ); if ( f [ 1 ][ m ] <= mid ) r = ( ans = mid ) - 1 ; else l = mid + 1 ; } W ( ans ); } return 0 ; }","title":"G. In Search of Gold"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%202/#i-its-all-squares","text":"\u7ed9\u4e8c\u7ef4\u6743\u503c\u77e9\u9635\uff0c\u7ed9 k \u6b21\u95ed\u5408\u8def\u5f84\uff0c\u6c42\u8def\u5f84\u5185\u5757\u7684\u6743\u503c\u548c\u3002 \u76f4\u63a5\u505a\u51fa\u6240\u6709\u8fb9\u754c\uff0c\u5dee\u5206\u6240\u6709\u5de6\u53f3\u79fb\u52a8\u7684\u8def\u5f84\uff0c\u5bf9\u6bcf\u4e00\u5217\u6c42\u548c\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/28 10:55 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 405 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , m , q ; int flag [ maxn ][ maxn ]; int w [ maxn ][ maxn ]; int vis [ maxn * maxn ]; char s [( int ) 4e6 + 50 ]; char t [] = \"UDLR\" ; int xc [] = { 0 , 0 , - 1 , 1 }; int yc [] = { 1 , - 1 , 0 , 0 }; int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"my.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , m , q ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= m ; ++ j ) R ( w [ i ][ j ]); for ( int i = 0 ; i <= n ; ++ i ) for ( int j = 0 ; j <= m ; ++ j ) flag [ i ][ j ] = - 1 ; for ( int i = 1 ; i <= n * m ; ++ i ) vis [ i ] = - 1 ; while ( q -- ) { int x , y ; R ( x , y ); R ( s ); int L = x , R = x , U = y , D = y ; for ( int i = 0 ; s [ i ]; ++ i ) { for ( int j = 0 ; j < 4 ; ++ j ) { if ( s [ i ] == t [ j ]) { x += xc [ j ]; y += yc [ j ]; break ; } } L = min ( L , x ); R = max ( R , x ); U = max ( U , y ); D = min ( D , y ); if ( s [ i ] == 'L' || s [ i ] == 'R' ) { flag [ x + ( s [ i ] == 'L' )][ y + 1 ] = q ; } } // W(L, R, U, D); ll res = 0 ; for ( int i = L ; i <= R ; ++ i ) { for ( int j = D , now = 0 ; j <= U ; ++ j ) { now ^= ( flag [ i ][ j ] == q ); if ( now && vis [ w [ i ][ j ]] != q ) { vis [ w [ i ][ j ]] = q ; res ++ ; } } } W ( res ); } } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"I. It's All Squares"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%202/#j-lead-of-wisdom","text":"\u7ed9 50 \u4e2a\u7269\u54c1\u6bcf\u4e2a\u6709 abcd \u56db\u4e2a\u6743\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u79cd\u7c7b\uff0c\u6bcf\u79cd\u53ea\u80fd\u6311\u4e00\u4e2a\u3002 \u6c42\u6700\u5927\u5316 DMG=(100+\u2211i\u2208Sai)(100+\u2211i\u2208Sbi)(100+\u2211i\u2208Sci)(100+\u2211i\u2208Sdi) \u76f4\u63a5\u7206\u641c\uff0c\u628a\u4e00\u4e2a\u7269\u54c1\u90fd\u6ca1\u6709\u7684\u79cd\u7c7b\u8df3\u8fc7\u8fd8\u6709\u5c06\u5b8c\u5168\u9006\u5e8f\u5bf9\u53bb\u6389\u5373\u53ef\u526a\u679d\u901a\u8fc7\u3002 \u9700\u8981\u5206\u6790\u590d\u6742\u5ea6\uff0c\u6700\u5927\u7684\u60c5\u51b5\u5e94\u8be5\u662f\u6bcf\u79cd\u7269\u54c1 3 \u4e2a\uff0c\u6700\u540e\u4e00\u7ec4 2 \u4e2a\uff0c\u9700\u8981 3^{16}*2 3^{16}*2 \u7684\u641c\u7d22\u6811\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/23 12:24 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 51 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } struct node { int a , b , c , d ; void set ( int x , int y , int z , int k ) { a = x , b = y , c = z , d = k ; } }; node s [ maxn ][ maxn ]; node pre [ maxn ]; node now ; int sz [ maxn ]; int nxt [ maxn ]; int n , k ; ll res = 0 ; inline void cal () { res = max ( res , 1ll * ( 100 + now . a ) * ( 100 + now . b ) * ( 100 + now . c ) * ( 100 + now . d )); } inline void dfs ( int dep ) { if ( dep == k ) { cal (); return ; } if ( sz [ dep ] == 0 ) { dfs ( dep + 1 ); } else { for ( int i = 0 ; i < sz [ dep ]; ++ i ) { now . a += s [ dep ][ i ]. a ; now . b += s [ dep ][ i ]. b ; now . c += s [ dep ][ i ]. c ; now . d += s [ dep ][ i ]. d ; if ( s [ dep ][ i ]. a <= 0 && s [ dep ][ i ]. b <= 0 && s [ dep ][ i ]. c <= 0 && s [ dep ][ i ]. d <= 0 ) continue ; dfs ( nxt [ dep ]); } now . a -= pre [ dep ]. a ; now . b -= pre [ dep ]. b ; now . c -= pre [ dep ]. c ; now . d -= pre [ dep ]. d ; } } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , k ); for ( int i = 0 ; i < k ; ++ i ) sz [ i ] = 0 , pre [ i ]. set ( 0 , 0 , 0 , 0 ); int t , a , b , c , d ; for ( int i = 0 ; i < n ; ++ i ) { R ( t , a , b , c , d ); s [ t - 1 ][ sz [ t - 1 ] ++ ] = { a - pre [ t - 1 ]. a , b - pre [ t - 1 ]. b , c - pre [ t - 1 ]. c , d - pre [ t - 1 ]. d }; pre [ t - 1 ]. set ( a , b , c , d ); } for ( int i = 0 ; i < k ; i = nxt [ i ]) { int j = i + 1 ; for (; j < k ; ++ j ) { if ( sz [ j ]) break ; } nxt [ i ] = j ; } res = 0 ; now . set ( 0 , 0 , 0 , 0 ); dfs ( 0 ); W ( res ); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"J. Lead of Wisdom"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%202/#l-string-distance","text":"\u7ed9\u4e00\u4e2a 1e5 \u957f\u5ea6\u7684 s \u4e32\uff0c\u4e00\u4e2a 20 \u957f\u5ea6\u7684 t \u4e32\uff0cq\uff08 1e5 \uff09 \u6b21\u8be2\u95ee [l,r] [l,r] \uff0c\u95ee s[l...r] \u6700\u5c11\u9700\u8981\u6539\u52a8\u591a\u5c11\u6b21\uff08\u5728\u4efb\u610f\u4f4d\u7f6e\u5220\u9664\u6216\u6dfb\u52a0\u5b57\u7b26\uff09\u628a\u4ed6\u53d8\u6210 t \u4e32\u3002 \u8003\u8651\u79bb\u7ebf\u8be2\u95ee\uff0c\u5bf9\u4e8e\u8be2\u95ee\u4e3a r \u7684\u4e00\u6b21\u6027\u5904\u7406\u5b8c\u3002 \u8003\u8651\u7b54\u6848\u5176\u5b9e\u662f r - l + 1 + t - 2 * lcs(s[l...r], t) r - l + 1 + t - 2 * lcs(s[l...r], t) \u505a dp\uff0c dp_{i,j,k} dp_{i,j,k} \u8868\u793a s \u5230\u4e86\u7b2c i \u4f4d\uff0c\u4e0e t \u7684\u524d j \u4f4d\u7684 lcs \u4e3a k \u79bb i \u7684\u6700\u8fd1\u70b9\u662f\u54ea\u4e00\u4f4d\u3002 \u8f6c\u79fb\u6bd4\u8f83\u8f7b\u677e\uff0c\u53ea\u8981\u9884\u5904\u7406\u4e86 a\\to z a\\to z \u5728 t \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e x\uff0c\u6bd4\u5982\u6211\u73b0\u5728\u679a\u4e3e\u5230 s[i] s[i] \uff0c\u90a3\u4e48 dp[i][x\\to m][1] dp[i][x\\to m][1] \u90fd\u4e3a i\uff0c\u7136\u540e\u505a\u8f6c\u79fb\uff0c\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u3002 \u5230\u4e86\u4e00\u4e2a r \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4ece\u5927\u5230\u5c0f\u679a\u4e3e k\uff0c\u5982\u679c\u6709\u4e00\u4e2a dp[i][j][k] dp[i][j][k] \u7684\u503c\u4e0d\u5c0f\u4e8e l \u5219\u8bf4\u660e lcs \u4e3a k\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(n*m*m+q*logq+q*m*m) O(n*m*m+q*logq+q*m*m) \uff0c\u7528\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(m*m+m*26) O(m*m+m*26) Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/23 14:58 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } char s [ maxn ]; char t [ 25 ]; int n , m ; struct op { int idx ; int l , r ; bool operator < ( const op & oth ) const { return r < oth . r ; } } p [ maxn ]; int dp [ 25 ][ 25 ], pd [ 25 ][ 25 ]; int ans [ maxn ], fi [ 26 ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%s%s\" , s + 1 , t + 1 ); n = strlen ( s + 1 ); m = strlen ( t + 1 ); for ( int i = 0 ; i < 26 ; ++ i ) fi [ i ] = - 1 ; for ( int i = 1 ; i <= m ; ++ i ) if ( fi [ t [ i ] - 'a' ] == - 1 ) fi [ t [ i ] - 'a' ] = i ; int q ; R ( q ); int l , r ; for ( int i = 0 ; i < q ; ++ i ) { R ( l , r ); p [ i ] = { i , l , r }; } sort ( p , p + q ); int now = 0 ; memset ( dp , 0 , sizeof dp ); memset ( pd , 0 , sizeof pd ); for ( int i = 1 ; i <= n ; ++ i ) { if ( fi [ s [ i ] - 'a' ] != - 1 ) dp [ fi [ s [ i ] - 'a' ]][ 1 ] = i ; for ( int j = 2 ; j <= m ; ++ j ) { for ( int k = 2 ; k <= m ; ++ k ) { dp [ j ][ k ] = pd [ j ][ k ]; } if ( s [ i ] == t [ j ]) { for ( int k = 1 ; k < m ; ++ k ) { dp [ j ][ k + 1 ] = pd [ j - 1 ][ k ]; } } } // cerr << i << \" ** : \\n\"; for ( int j = 1 ; j <= m ; ++ j ) { for ( int k = 1 ; k <= m ; ++ k ) { if ( dp [ j ][ k ] < dp [ j - 1 ][ k ]) dp [ j ][ k ] = dp [ j - 1 ][ k ]; pd [ j ][ k ] = dp [ j ][ k ]; // cerr << pd[j][k] << \" \"; } // cerr << endl; } while ( now < q && p [ now ]. r == i ) { ans [ p [ now ]. idx ] = p [ now ]. r - p [ now ]. l + 1 + m ; for ( int j = m ; j >= 1 ; -- j ) { if ( pd [ m ][ j ] >= p [ now ]. l ) { ans [ p [ now ]. idx ] = p [ now ]. r - p [ now ]. l + 1 + m - j * 2 ; break ; } } now ++ ; } } for ( int i = 0 ; i < q ; ++ i ) W ( ans [ i ]); } return 0 ; }","title":"L. String Distance"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%203/","text":"Name Date Solved A B C D E F G H I J K 2020 Multi-University Training Contest 3 2020/7/28 7/11 \u00d8 . \u00d8 O O . \u00d8 O O . . A. Tokitsukaze, CSL and Palindrome Game Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u56de\u6587\u4e32S\uff0cTokitsukaze\u548cCSL\u6bcf\u6b21\u4f1a\u9009\u62e9\u56de\u6587\u5b50\u4e32 S_{a..b} S_{a..b} \u548c S_{c..d} S_{c..d} \u3002\u6709\u4e00\u4e2a\u7a7a\u4e32P\uff0c\u6bcf\u6b21\u4f1a\u7b49\u6982\u7387\u7684\u5728a-z\u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u5b57\u7b26\uff0c E(S) E(S) \u8868\u793aS\u6210\u4e3aP\u5b50\u4e32\u7684\u64cd\u4f5c\u6b21\u6570\u671f\u671b\u3002\u6bd4\u8f83 E(S_{a...b}) E(S_{a...b}) \u548c E(S_{c...d}) E(S_{c...d}) \u7684\u671f\u671b\u5927\u5c0f\u3002 \u63a8\u8350\u9605\u8bfb \u300a\u6d45\u8c08\u751f\u6210\u51fd\u6570\u5728\u63b7\u9ab0\u5b50\u95ee\u9898\u4e0a\u7684\u5e94\u7528\u300b , \u5e76\u518d\u6b21\u63a8\u8350\u9605\u8bfb \u91d1\u7b56-\u5b57\u7b26\u4e32\u7b97\u6cd5\u9009\u8bb2 \u6765\u83b7\u53d6\u672c\u9898\u76f8\u5173\u524d\u7f6e\u77e5\u8bc6 \u524d\u7f6e\u77e5\u8bc61\uff1a\u5bf9\u4e8e\u4e32S\uff0c\u5982\u679c S[1,i]=S[n-i+1,n] S[1,i]=S[n-i+1,n] (\u957f\u5ea6\u4e3ai\u7684\u524d\u7f00\u7b49\u4e8e\u540e\u7f00\uff09\uff0c\u5219\u79f0 S[1,i] S[1,i] \u662fS\u7684\u4e00\u4e2aborder\u3002 E(S)=\\sum_i^{|S|}a_i*m^i E(S)=\\sum_i^{|S|}a_i*m^i \uff0c\u5176\u4e2d a_i a_i \u4ee3\u8868\u524d\u7f00 S[1,i] S[1,i] \u662f\u5426\u662f S S \u7684border \u56e0\u4e3a\u540e\u9762\u5e26\u4e86\u4e2ai\u7684\u5e42\u6b21\uff0c\u663e\u7136\u8d8a\u9760\u540e\u7684\u524d\u7f00\u8d21\u732e\u8d8a\u5927\uff0c\u6240\u4ee5\u5bf9\u4e8e E(S_{a...b}) E(S_{a...b}) \u548c E(S_{c...d}) E(S_{c...d}) \uff0c\u6bd4\u8f83\u4e00\u4e0b\u4ed6\u4eec\u7684\u5b57\u5178\u5e8f\u5c31\u597d\u3002 \u524d\u7f6e\u77e5\u8bc62\uff1a\u56de\u6587\u4e32\u7684border\u7531\u662flogn\u7ea7\u522b\u4e2a\u7b49\u5dee\u6570\u5217\u62fc\u63a5\u6210\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u4e00\u76f4\u6cbf\u7740fail\u6811\u5f80\u4e0a\u8df3\u5c31\u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u6240\u6709border\u3002\u7136\u540e\u6839\u636e\u7b49\u5dee\u6027\u8d28\uff0c\u9884\u5904\u7406\u4e00\u4e0bborder\u7684\u82e5\u5e72\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u6bcf\u6b21\u5bf9\u4e24\u7ec4\u7b49\u5dee\u6570\u5217\u4ece\u540e\u5f80\u524d\u505a\u6bd4\u8f83\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; const int N = 26 ; struct node { int s , d , r ; }; struct PAM { int n , p , last ; int nex [ maxn ][ N ], fail [ maxn ], cnt [ maxn ], num [ maxn ], len [ maxn ], S [ maxn ], pos [ maxn ]; int diff [ maxn ], pre [ maxn ]; int newnode ( int l ) { for ( int i = 0 ; i < N ; i ++ ) nex [ p ][ i ] = 0 ; cnt [ p ] = num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } void init () { n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; fail [ 0 ] = 1 ; } int get_fail ( int x ) { while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } void add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); if ( ! nex [ cur ][ c ]) { int now = newnode ( len [ cur ] + 2 ); fail [ now ] = nex [ get_fail ( fail [ cur ])][ c ]; nex [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } last = nex [ cur ][ c ]; diff [ last ] = len [ last ] - len [ fail [ last ]]; if ( diff [ last ] != diff [ fail [ last ]] || len [ fail [ last ]] == 0 || len [ fail [ last ]] == - 1 ) pre [ last ] = last ; else pre [ last ] = pre [ fail [ last ]]; num [ last ] ++ ; pos [ n ] = last ; } vector < node > getBorder ( int x , int lim ) { x = pos [ x ]; vector < node > ve ; while ( len [ x ] > 0 ) { int y = pre [ x ]; if ( len [ y ] <= lim ) { if ( len [ x ] <= lim ) ve . push_back ({ len [ x ], diff [ x ], ( len [ x ] - len [ y ]) / diff [ x ] }); else ve . push_back ({ lim , diff [ x ], ( lim - len [ y ]) / diff [ x ] }); } x = fail [ y ]; } ve . push_back ({ 0 , 0 , 0 }); return ve ; } int comp ( int a , int b , int c , int d ) { auto A = getBorder ( b , b - a + 1 ); auto B = getBorder ( d , d - c + 1 ); int i = 0 , j = 0 , lenA = A . size (), lenB = B . size (); while ( i < lenA - 1 && j < lenB - 1 ) { if ( A [ i ]. s != B [ j ]. s ) return A [ i ]. s < B [ j ]. s ? - 1 : 1 ; if ( A [ i ]. d == B [ j ]. d ) { if ( A [ i ]. r == B [ j ]. r ) i ++ , j ++ ; else if ( A [ i ]. r > B [ j ]. r ) { A [ i ]. s -= ( B [ j ]. r + 1 ) * A [ i ]. d ; A [ i ]. r -= B [ j ]. r + 1 ; j ++ ; if ( A [ i ]. r == 0 ) i ++ ; } else { B [ j ]. s -= ( A [ i ]. r + 1 ) * B [ j ]. d ; B [ j ]. r -= A [ i ]. r + 1 ; i ++ ; if ( B [ j ]. r == 0 ) j ++ ; } } else { if ( A [ i ]. r == 0 && B [ j ]. r == 0 ) i ++ , j ++ ; else if ( A [ i ]. r == 0 ) return A [ i + 1 ]. s < B [ j ]. s - B [ j ]. d ? - 1 : 1 ; else if ( B [ j ]. r == 0 ) return A [ i ]. s - A [ i ]. d < B [ j + 1 ]. s ? - 1 : 1 ; else return A [ i ]. d > B [ j ]. d ? - 1 : 1 ; } } if ( i == lenA - 1 && j == lenB - 1 ) return 0 ; return i < lenA - 1 ? - 1 : 1 ; } } pam ; char s [ maxn ]; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , q , a , b , c , d ; pam . init (); scanf ( \"%d%s\" , & n , s ); for ( int i = 0 ; i < n ; i ++ ) pam . add ( s [ i ] - 'a' ); scanf ( \"%d\" , & q ); while ( q -- ) { scanf ( \"%d%d%d%d\" , & a , & b , & c , & d ); int res = pam . comp ( a , b , c , d ); if ( res == 0 ) puts ( \"draw\" ); else if ( res == 1 ) puts ( \"cslnb\" ); else puts ( \"sjfnb\" ); } } return 0 ; } C. Tokitsukaze and Colorful Tree Link D. Tokitsukaze and Multiple Link \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5408\u5e76\u4efb\u610f\u4e24\u4e2a\u8fde\u7eed\u7684\u70b9\uff0c\u6743\u503c\u6539\u4e3a\u4ed6\u4eec\u7684\u548c\uff0c\u95ee\u82e5\u5e72\u6b21\u4ee5\u540e\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u662f p \u7684\u500d\u6570\u3002 n 1e5 \u8d2a\u5fc3\u5373\u53ef\uff0c\u53d6\u5c3d\u91cf\u5c11\u7684\u6570\u91cf\u548c\u4e3a p \u7684\u500d\u6570\u5c31\u4e00\u5b9a\u4f1a\u53d6\u3002 \u505a\u524d\u7f00 map\uff0c\u524d\u7f00\u548c\u5bf9 p \u53d6\u6a21\u5373\u53ef\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u524d\u7f00\u548c\u76f8\u540c\u7684\u5c31\u6e05\u7a7a map \u5e76\u628a\u7b54\u6848\u52a0\u4e00\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/28 12:09 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } map < int , int > mp ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n , p ; R ( n , p ); int now = 0 ; int res = 0 ; mp . clear (); mp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { int x ; R ( x ); now += x ; now %= p ; if ( mp [ now ]) { mp . clear (); res ++ ; } mp [ now ] = i ; } W ( res ); } return 0 ; } E. Little W and Contest Link \u6709\u4e24\u79cd\u4eba\uff0c\u4e00\u79cd\u5199\u4ee3\u7801\u4e00\u79cd\u770b\u9898\uff0c\u6c42\u7ec4\u6210\u4e09\u4eba\u961f\u4f0d\u8d77\u7801\u6709\u4e24\u4e2a\u5199\u4ee3\u7801\u7684\u6570\u91cf\u3002\u6709\u5408\u5e76\u64cd\u4f5c\u8868\u793a\u4ed6\u4eec\u5408\u5e76\u4e4b\u540e\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u961f\u4f0d\u3002 \u8003\u8651\u5408\u5e76\u9020\u6210\u7684\u5f71\u54cd\u5373\u53ef\uff0c\u5176\u5b9e\u6bcf\u6b21\u5408\u5e76\u90fd\u5728\u51cf\u5c0f\u7b54\u6848\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; vector < ll > V ; ll siz [ maxn ][ 3 ]; int fa [ maxn ]; int getfa ( int n ) { return fa [ n ] == n ? n : fa [ n ] = getfa ( fa [ n ]); } int main () { int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; ll cnt [ 3 ] = { 0 , 0 , 0 }; for ( int i = 1 ; i <= n ; i ++ ) siz [ i ][ 1 ] = siz [ i ][ 2 ] = 0 , fa [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) { int x ; scanf ( \"%d\" , & x ); siz [ i ][ x ] = 1 ; cnt [ x ] ++ ; } ll ans = cnt [ 1 ] * cnt [ 2 ] * ( cnt [ 2 ] - 1 ) / 2 ; if ( cnt [ 2 ] >= 3 ) ans += cnt [ 2 ] * ( cnt [ 2 ] - 1 ) * ( cnt [ 2 ] - 2 ) / 6 ; printf ( \"%lld \\n \" , ans % mod ); for ( int i = 1 ; i < n ; i ++ ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); u = getfa ( u ); v = getfa ( v ); ans = ans - siz [ u ][ 1 ] * siz [ v ][ 2 ] * ( cnt [ 2 ] - siz [ u ][ 2 ] - siz [ v ][ 2 ]) - siz [ u ][ 2 ] * siz [ v ][ 2 ] * ( cnt [ 2 ] - siz [ u ][ 2 ] - siz [ v ][ 2 ]) - siz [ u ][ 2 ] * siz [ v ][ 2 ] * ( cnt [ 1 ] - siz [ u ][ 1 ] - siz [ v ][ 1 ]) - siz [ u ][ 2 ] * siz [ v ][ 1 ] * ( cnt [ 2 ] - siz [ u ][ 2 ] - siz [ v ][ 2 ]); printf ( \"%lld \\n \" , ans % mod ); fa [ u ] = v ; siz [ v ][ 1 ] += siz [ u ][ 1 ]; siz [ v ][ 2 ] += siz [ u ][ 2 ]; } } return 0 ; } G. Tokitsukaze and Rescue Link \u9898\u610f\uff1a\u4e00\u5f20\u5b8c\u5168\u56fe\uff0c\u8fb9\u6743\u968f\u673a\uff0c\u5220k(k<=5\uff0c\u5220\u5b8c\u4fdd\u8bc1\u56fe\u8054\u901a)\u6761\u8fb9\uff0c\u95ee\u5220\u5b8c\u4e4b\u540eS\u5230T\u7684\u6700\u77ed\u8def\u6700\u5927\u503c\u662f\u591a\u5c11\u3002 \u6bcf\u6b21\u66b4\u529b\u679a\u4e3e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5220\u8fb9\uff0c\u590d\u6742\u5ea6 O(n^2c^k) O(n^2c^k) \uff0cc\u4e3a\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u6570\uff0c\u56e0\u4e3a\u8fb9\u6743\u968f\u673a\uff0cc\u4e00\u5b9a\u5f88\u5c0f\uff0c\u66b4\u529b\u6c42\u89e3\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; const int maxn = 50 + 10 ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; bool vis ; } edge [ maxn * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; edge [ cnt ]. vis = false ; head [ u ] = cnt ; } pair < int , int > pre [ maxn ]; void dij ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { if ( edge [ i ]. vis ) continue ; int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; pre [ v ] = { u , i }; que . push ({ dis [ v ], v }); } } } } int n , k , res ; void dfs ( int dep ) { if ( dep == k ) { dij ( 1 ); res = max ( res , dis [ n ]); return ; } dij ( 1 ); int now = n ; vector < int > path ; while ( now != 1 ) { path . push_back ( pre [ now ]. second ); now = pre [ now ]. first ; } for ( auto x : path ) { edge [ x ]. vis = edge [ x ^ 1 ]. vis = 1 ; dfs ( dep + 1 ); edge [ x ]. vis = edge [ x ^ 1 ]. vis = 0 ; } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & k ); cnt = - 1 ; res = 0 ; memset ( head , 0xff , sizeof head ); for ( int i = 1 ; i <= ( n - 1 ) * n / 2 ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ); add ( v , u , w ); } dfs ( 0 ); printf ( \"%d \\n \" , res ); } return 0 ; } H. Triangle Collision Link \u4e00\u4e2a\u7403\u5728\u4e09\u89d2\u5f62\u91cc\u9762\u8df3\uff0c\u65e0\u80fd\u91cf\u635f\u5931\uff0c\u6c42 t \u6b21\u78b0\u649e\u7ecf\u8fc7\u7684\u8def\u7a0b\u3002 \u5c06\u4e09\u89d2\u5f62\u5c55\u5f00\u6709\u5faa\u73af\u8282\uff0c\u4e8c\u5206\u6c42\u65f6\u95f4\u5373\u53ef\u3002\u7406\u8bba\u4e0a\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 1e6 + 5 ; vector < ll > V ; int pre [ maxn ]; double L , x , y , vx , vy , h ; int k ; const double SQ3 = sqrt ( 3 ); bool check ( double t ) { ll cnt = 0 ; double nx = x + vx * t ; double ny = y + vy * t ; if ( ny <= 0 ) cnt ++ , ny =- ny ; cnt += ( ll )( ny / h ); double x1 = nx - 1.0 / SQ3 * ny , x2 = nx + 1.0 / SQ3 * ny ; if ( x1 > L / 2 ) { cnt += 1 + ( ll )( x1 - L / 2 ) / L ; } if ( x2 > L / 2 ) { cnt += 1 + ( ll )( x2 - L / 2 ) / L ; } if ( x1 <- L / 2 ) { cnt += 1 - ( ll )( x1 + L / 2 ) / L ; } if ( x2 <=- L / 2 ) { cnt += 1 - ( ll )( x2 + L / 2 ) / L ; } return cnt >= k ; } int main () { int T ; cin >> T ; while ( T -- ) { scanf ( \"%lf%lf%lf%lf%lf%d\" , & L , & x , & y , & vx , & vy , & k ); h = SQ3 * L / 2 ; double l = 0 , r = 1e13 ; while ( r - l > 0.00001 ){ double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; } printf ( \"%.8f \\n \" , l ); } return 0 ; } I. Parentheses Matching Link \u6709\u4e00\u4e9b\u4f4d\u7f6e\u6ca1\u6709\u786e\u5b9a\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u8981\u4f7f\u62ec\u53f7\u5e8f\u5217\u5408\u6cd5\u7684\u6700\u5c0f\u5b57\u5178\u5e8f\u89e3\u3002 \u627e\u5230\u672a\u5339\u914d\u5de6\u62ec\u53f7\u7684\u53ef\u4ee5\u653e\u7684\u6700\u53f3\u70b9\uff0c\u548c\u672a\u5339\u914d\u53f3\u62ec\u53f7\u53ef\u4ee5\u653e\u7684\u6700\u5de6\u8fb9\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; char s [ maxn ]; int main () { int q ; scanf ( \"%d\" , & q ); while ( q -- ) { scanf ( \"%s\" , s + 1 ); int n = strlen ( s + 1 ); stack < int > l ; queue < int > que ; for ( int i = 1 ; i <= n ; i ++ ) { if ( s [ i ] == '(' ) l . push ( i ); else if ( s [ i ] == ')' ) { if ( l . empty ()) que . push ( i ); else l . pop (); } } bool flag = false ; for ( int i = 1 ; i <= n ; i ++ ) { if ( que . empty ()) break ; if ( s [ i ] == '*' ) { if ( que . front () < i ) { flag = true ; break ; } s [ i ] = '(' ; que . pop (); } } if ( flag || ! que . empty ()) { puts ( \"No solution!\" ); continue ; } while ( ! l . empty ()) { que . push ( l . top ()); l . pop ();} for ( int i = n ; i >= 1 ; i -- ) { if ( que . empty ()) break ; if ( s [ i ] == '*' ) { if ( que . front () > i ) { flag = true ; break ; } s [ i ] = ')' ; que . pop (); } } if ( flag || ! que . empty ()) { puts ( \"No solution!\" ); continue ; } for ( int i = 1 ; i <= n ; i ++ ) if ( s [ i ] != '*' ) printf ( \"%c\" , s [ i ]); puts ( \"\" ); } return 0 ; }","title":"2020 Multi University Training Contest 3"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%203/#a-tokitsukaze-csl-and-palindrome-game","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u56de\u6587\u4e32S\uff0cTokitsukaze\u548cCSL\u6bcf\u6b21\u4f1a\u9009\u62e9\u56de\u6587\u5b50\u4e32 S_{a..b} S_{a..b} \u548c S_{c..d} S_{c..d} \u3002\u6709\u4e00\u4e2a\u7a7a\u4e32P\uff0c\u6bcf\u6b21\u4f1a\u7b49\u6982\u7387\u7684\u5728a-z\u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u5b57\u7b26\uff0c E(S) E(S) \u8868\u793aS\u6210\u4e3aP\u5b50\u4e32\u7684\u64cd\u4f5c\u6b21\u6570\u671f\u671b\u3002\u6bd4\u8f83 E(S_{a...b}) E(S_{a...b}) \u548c E(S_{c...d}) E(S_{c...d}) \u7684\u671f\u671b\u5927\u5c0f\u3002 \u63a8\u8350\u9605\u8bfb \u300a\u6d45\u8c08\u751f\u6210\u51fd\u6570\u5728\u63b7\u9ab0\u5b50\u95ee\u9898\u4e0a\u7684\u5e94\u7528\u300b , \u5e76\u518d\u6b21\u63a8\u8350\u9605\u8bfb \u91d1\u7b56-\u5b57\u7b26\u4e32\u7b97\u6cd5\u9009\u8bb2 \u6765\u83b7\u53d6\u672c\u9898\u76f8\u5173\u524d\u7f6e\u77e5\u8bc6 \u524d\u7f6e\u77e5\u8bc61\uff1a\u5bf9\u4e8e\u4e32S\uff0c\u5982\u679c S[1,i]=S[n-i+1,n] S[1,i]=S[n-i+1,n] (\u957f\u5ea6\u4e3ai\u7684\u524d\u7f00\u7b49\u4e8e\u540e\u7f00\uff09\uff0c\u5219\u79f0 S[1,i] S[1,i] \u662fS\u7684\u4e00\u4e2aborder\u3002 E(S)=\\sum_i^{|S|}a_i*m^i E(S)=\\sum_i^{|S|}a_i*m^i \uff0c\u5176\u4e2d a_i a_i \u4ee3\u8868\u524d\u7f00 S[1,i] S[1,i] \u662f\u5426\u662f S S \u7684border \u56e0\u4e3a\u540e\u9762\u5e26\u4e86\u4e2ai\u7684\u5e42\u6b21\uff0c\u663e\u7136\u8d8a\u9760\u540e\u7684\u524d\u7f00\u8d21\u732e\u8d8a\u5927\uff0c\u6240\u4ee5\u5bf9\u4e8e E(S_{a...b}) E(S_{a...b}) \u548c E(S_{c...d}) E(S_{c...d}) \uff0c\u6bd4\u8f83\u4e00\u4e0b\u4ed6\u4eec\u7684\u5b57\u5178\u5e8f\u5c31\u597d\u3002 \u524d\u7f6e\u77e5\u8bc62\uff1a\u56de\u6587\u4e32\u7684border\u7531\u662flogn\u7ea7\u522b\u4e2a\u7b49\u5dee\u6570\u5217\u62fc\u63a5\u6210\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u4e00\u76f4\u6cbf\u7740fail\u6811\u5f80\u4e0a\u8df3\u5c31\u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u6240\u6709border\u3002\u7136\u540e\u6839\u636e\u7b49\u5dee\u6027\u8d28\uff0c\u9884\u5904\u7406\u4e00\u4e0bborder\u7684\u82e5\u5e72\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u6bcf\u6b21\u5bf9\u4e24\u7ec4\u7b49\u5dee\u6570\u5217\u4ece\u540e\u5f80\u524d\u505a\u6bd4\u8f83\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; const int N = 26 ; struct node { int s , d , r ; }; struct PAM { int n , p , last ; int nex [ maxn ][ N ], fail [ maxn ], cnt [ maxn ], num [ maxn ], len [ maxn ], S [ maxn ], pos [ maxn ]; int diff [ maxn ], pre [ maxn ]; int newnode ( int l ) { for ( int i = 0 ; i < N ; i ++ ) nex [ p ][ i ] = 0 ; cnt [ p ] = num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } void init () { n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; fail [ 0 ] = 1 ; } int get_fail ( int x ) { while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } void add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); if ( ! nex [ cur ][ c ]) { int now = newnode ( len [ cur ] + 2 ); fail [ now ] = nex [ get_fail ( fail [ cur ])][ c ]; nex [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } last = nex [ cur ][ c ]; diff [ last ] = len [ last ] - len [ fail [ last ]]; if ( diff [ last ] != diff [ fail [ last ]] || len [ fail [ last ]] == 0 || len [ fail [ last ]] == - 1 ) pre [ last ] = last ; else pre [ last ] = pre [ fail [ last ]]; num [ last ] ++ ; pos [ n ] = last ; } vector < node > getBorder ( int x , int lim ) { x = pos [ x ]; vector < node > ve ; while ( len [ x ] > 0 ) { int y = pre [ x ]; if ( len [ y ] <= lim ) { if ( len [ x ] <= lim ) ve . push_back ({ len [ x ], diff [ x ], ( len [ x ] - len [ y ]) / diff [ x ] }); else ve . push_back ({ lim , diff [ x ], ( lim - len [ y ]) / diff [ x ] }); } x = fail [ y ]; } ve . push_back ({ 0 , 0 , 0 }); return ve ; } int comp ( int a , int b , int c , int d ) { auto A = getBorder ( b , b - a + 1 ); auto B = getBorder ( d , d - c + 1 ); int i = 0 , j = 0 , lenA = A . size (), lenB = B . size (); while ( i < lenA - 1 && j < lenB - 1 ) { if ( A [ i ]. s != B [ j ]. s ) return A [ i ]. s < B [ j ]. s ? - 1 : 1 ; if ( A [ i ]. d == B [ j ]. d ) { if ( A [ i ]. r == B [ j ]. r ) i ++ , j ++ ; else if ( A [ i ]. r > B [ j ]. r ) { A [ i ]. s -= ( B [ j ]. r + 1 ) * A [ i ]. d ; A [ i ]. r -= B [ j ]. r + 1 ; j ++ ; if ( A [ i ]. r == 0 ) i ++ ; } else { B [ j ]. s -= ( A [ i ]. r + 1 ) * B [ j ]. d ; B [ j ]. r -= A [ i ]. r + 1 ; i ++ ; if ( B [ j ]. r == 0 ) j ++ ; } } else { if ( A [ i ]. r == 0 && B [ j ]. r == 0 ) i ++ , j ++ ; else if ( A [ i ]. r == 0 ) return A [ i + 1 ]. s < B [ j ]. s - B [ j ]. d ? - 1 : 1 ; else if ( B [ j ]. r == 0 ) return A [ i ]. s - A [ i ]. d < B [ j + 1 ]. s ? - 1 : 1 ; else return A [ i ]. d > B [ j ]. d ? - 1 : 1 ; } } if ( i == lenA - 1 && j == lenB - 1 ) return 0 ; return i < lenA - 1 ? - 1 : 1 ; } } pam ; char s [ maxn ]; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , q , a , b , c , d ; pam . init (); scanf ( \"%d%s\" , & n , s ); for ( int i = 0 ; i < n ; i ++ ) pam . add ( s [ i ] - 'a' ); scanf ( \"%d\" , & q ); while ( q -- ) { scanf ( \"%d%d%d%d\" , & a , & b , & c , & d ); int res = pam . comp ( a , b , c , d ); if ( res == 0 ) puts ( \"draw\" ); else if ( res == 1 ) puts ( \"cslnb\" ); else puts ( \"sjfnb\" ); } } return 0 ; }","title":"A. Tokitsukaze, CSL and Palindrome Game"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%203/#c-tokitsukaze-and-colorful-tree","text":"","title":"C. Tokitsukaze and Colorful Tree"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%203/#d-tokitsukaze-and-multiple","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5408\u5e76\u4efb\u610f\u4e24\u4e2a\u8fde\u7eed\u7684\u70b9\uff0c\u6743\u503c\u6539\u4e3a\u4ed6\u4eec\u7684\u548c\uff0c\u95ee\u82e5\u5e72\u6b21\u4ee5\u540e\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u662f p \u7684\u500d\u6570\u3002 n 1e5 \u8d2a\u5fc3\u5373\u53ef\uff0c\u53d6\u5c3d\u91cf\u5c11\u7684\u6570\u91cf\u548c\u4e3a p \u7684\u500d\u6570\u5c31\u4e00\u5b9a\u4f1a\u53d6\u3002 \u505a\u524d\u7f00 map\uff0c\u524d\u7f00\u548c\u5bf9 p \u53d6\u6a21\u5373\u53ef\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u524d\u7f00\u548c\u76f8\u540c\u7684\u5c31\u6e05\u7a7a map \u5e76\u628a\u7b54\u6848\u52a0\u4e00\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/28 12:09 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } map < int , int > mp ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n , p ; R ( n , p ); int now = 0 ; int res = 0 ; mp . clear (); mp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { int x ; R ( x ); now += x ; now %= p ; if ( mp [ now ]) { mp . clear (); res ++ ; } mp [ now ] = i ; } W ( res ); } return 0 ; }","title":"D. Tokitsukaze and Multiple"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%203/#e-little-w-and-contest","text":"\u6709\u4e24\u79cd\u4eba\uff0c\u4e00\u79cd\u5199\u4ee3\u7801\u4e00\u79cd\u770b\u9898\uff0c\u6c42\u7ec4\u6210\u4e09\u4eba\u961f\u4f0d\u8d77\u7801\u6709\u4e24\u4e2a\u5199\u4ee3\u7801\u7684\u6570\u91cf\u3002\u6709\u5408\u5e76\u64cd\u4f5c\u8868\u793a\u4ed6\u4eec\u5408\u5e76\u4e4b\u540e\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u961f\u4f0d\u3002 \u8003\u8651\u5408\u5e76\u9020\u6210\u7684\u5f71\u54cd\u5373\u53ef\uff0c\u5176\u5b9e\u6bcf\u6b21\u5408\u5e76\u90fd\u5728\u51cf\u5c0f\u7b54\u6848\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; vector < ll > V ; ll siz [ maxn ][ 3 ]; int fa [ maxn ]; int getfa ( int n ) { return fa [ n ] == n ? n : fa [ n ] = getfa ( fa [ n ]); } int main () { int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; ll cnt [ 3 ] = { 0 , 0 , 0 }; for ( int i = 1 ; i <= n ; i ++ ) siz [ i ][ 1 ] = siz [ i ][ 2 ] = 0 , fa [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) { int x ; scanf ( \"%d\" , & x ); siz [ i ][ x ] = 1 ; cnt [ x ] ++ ; } ll ans = cnt [ 1 ] * cnt [ 2 ] * ( cnt [ 2 ] - 1 ) / 2 ; if ( cnt [ 2 ] >= 3 ) ans += cnt [ 2 ] * ( cnt [ 2 ] - 1 ) * ( cnt [ 2 ] - 2 ) / 6 ; printf ( \"%lld \\n \" , ans % mod ); for ( int i = 1 ; i < n ; i ++ ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); u = getfa ( u ); v = getfa ( v ); ans = ans - siz [ u ][ 1 ] * siz [ v ][ 2 ] * ( cnt [ 2 ] - siz [ u ][ 2 ] - siz [ v ][ 2 ]) - siz [ u ][ 2 ] * siz [ v ][ 2 ] * ( cnt [ 2 ] - siz [ u ][ 2 ] - siz [ v ][ 2 ]) - siz [ u ][ 2 ] * siz [ v ][ 2 ] * ( cnt [ 1 ] - siz [ u ][ 1 ] - siz [ v ][ 1 ]) - siz [ u ][ 2 ] * siz [ v ][ 1 ] * ( cnt [ 2 ] - siz [ u ][ 2 ] - siz [ v ][ 2 ]); printf ( \"%lld \\n \" , ans % mod ); fa [ u ] = v ; siz [ v ][ 1 ] += siz [ u ][ 1 ]; siz [ v ][ 2 ] += siz [ u ][ 2 ]; } } return 0 ; }","title":"E. Little W and Contest"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%203/#g-tokitsukaze-and-rescue","text":"\u9898\u610f\uff1a\u4e00\u5f20\u5b8c\u5168\u56fe\uff0c\u8fb9\u6743\u968f\u673a\uff0c\u5220k(k<=5\uff0c\u5220\u5b8c\u4fdd\u8bc1\u56fe\u8054\u901a)\u6761\u8fb9\uff0c\u95ee\u5220\u5b8c\u4e4b\u540eS\u5230T\u7684\u6700\u77ed\u8def\u6700\u5927\u503c\u662f\u591a\u5c11\u3002 \u6bcf\u6b21\u66b4\u529b\u679a\u4e3e\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5220\u8fb9\uff0c\u590d\u6742\u5ea6 O(n^2c^k) O(n^2c^k) \uff0cc\u4e3a\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u6570\uff0c\u56e0\u4e3a\u8fb9\u6743\u968f\u673a\uff0cc\u4e00\u5b9a\u5f88\u5c0f\uff0c\u66b4\u529b\u6c42\u89e3\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; const int maxn = 50 + 10 ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; bool vis ; } edge [ maxn * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; edge [ cnt ]. vis = false ; head [ u ] = cnt ; } pair < int , int > pre [ maxn ]; void dij ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { if ( edge [ i ]. vis ) continue ; int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; pre [ v ] = { u , i }; que . push ({ dis [ v ], v }); } } } } int n , k , res ; void dfs ( int dep ) { if ( dep == k ) { dij ( 1 ); res = max ( res , dis [ n ]); return ; } dij ( 1 ); int now = n ; vector < int > path ; while ( now != 1 ) { path . push_back ( pre [ now ]. second ); now = pre [ now ]. first ; } for ( auto x : path ) { edge [ x ]. vis = edge [ x ^ 1 ]. vis = 1 ; dfs ( dep + 1 ); edge [ x ]. vis = edge [ x ^ 1 ]. vis = 0 ; } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & k ); cnt = - 1 ; res = 0 ; memset ( head , 0xff , sizeof head ); for ( int i = 1 ; i <= ( n - 1 ) * n / 2 ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ); add ( v , u , w ); } dfs ( 0 ); printf ( \"%d \\n \" , res ); } return 0 ; }","title":"G. Tokitsukaze and Rescue"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%203/#h-triangle-collision","text":"\u4e00\u4e2a\u7403\u5728\u4e09\u89d2\u5f62\u91cc\u9762\u8df3\uff0c\u65e0\u80fd\u91cf\u635f\u5931\uff0c\u6c42 t \u6b21\u78b0\u649e\u7ecf\u8fc7\u7684\u8def\u7a0b\u3002 \u5c06\u4e09\u89d2\u5f62\u5c55\u5f00\u6709\u5faa\u73af\u8282\uff0c\u4e8c\u5206\u6c42\u65f6\u95f4\u5373\u53ef\u3002\u7406\u8bba\u4e0a\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 1e6 + 5 ; vector < ll > V ; int pre [ maxn ]; double L , x , y , vx , vy , h ; int k ; const double SQ3 = sqrt ( 3 ); bool check ( double t ) { ll cnt = 0 ; double nx = x + vx * t ; double ny = y + vy * t ; if ( ny <= 0 ) cnt ++ , ny =- ny ; cnt += ( ll )( ny / h ); double x1 = nx - 1.0 / SQ3 * ny , x2 = nx + 1.0 / SQ3 * ny ; if ( x1 > L / 2 ) { cnt += 1 + ( ll )( x1 - L / 2 ) / L ; } if ( x2 > L / 2 ) { cnt += 1 + ( ll )( x2 - L / 2 ) / L ; } if ( x1 <- L / 2 ) { cnt += 1 - ( ll )( x1 + L / 2 ) / L ; } if ( x2 <=- L / 2 ) { cnt += 1 - ( ll )( x2 + L / 2 ) / L ; } return cnt >= k ; } int main () { int T ; cin >> T ; while ( T -- ) { scanf ( \"%lf%lf%lf%lf%lf%d\" , & L , & x , & y , & vx , & vy , & k ); h = SQ3 * L / 2 ; double l = 0 , r = 1e13 ; while ( r - l > 0.00001 ){ double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; } printf ( \"%.8f \\n \" , l ); } return 0 ; }","title":"H. Triangle Collision"},{"location":"Training%20Logs/2020%20Multi-University%20Training%20Contest/2020%20Multi-University%20Training%20Contest%203/#i-parentheses-matching","text":"\u6709\u4e00\u4e9b\u4f4d\u7f6e\u6ca1\u6709\u786e\u5b9a\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u8981\u4f7f\u62ec\u53f7\u5e8f\u5217\u5408\u6cd5\u7684\u6700\u5c0f\u5b57\u5178\u5e8f\u89e3\u3002 \u627e\u5230\u672a\u5339\u914d\u5de6\u62ec\u53f7\u7684\u53ef\u4ee5\u653e\u7684\u6700\u53f3\u70b9\uff0c\u548c\u672a\u5339\u914d\u53f3\u62ec\u53f7\u53ef\u4ee5\u653e\u7684\u6700\u5de6\u8fb9\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; char s [ maxn ]; int main () { int q ; scanf ( \"%d\" , & q ); while ( q -- ) { scanf ( \"%s\" , s + 1 ); int n = strlen ( s + 1 ); stack < int > l ; queue < int > que ; for ( int i = 1 ; i <= n ; i ++ ) { if ( s [ i ] == '(' ) l . push ( i ); else if ( s [ i ] == ')' ) { if ( l . empty ()) que . push ( i ); else l . pop (); } } bool flag = false ; for ( int i = 1 ; i <= n ; i ++ ) { if ( que . empty ()) break ; if ( s [ i ] == '*' ) { if ( que . front () < i ) { flag = true ; break ; } s [ i ] = '(' ; que . pop (); } } if ( flag || ! que . empty ()) { puts ( \"No solution!\" ); continue ; } while ( ! l . empty ()) { que . push ( l . top ()); l . pop ();} for ( int i = n ; i >= 1 ; i -- ) { if ( que . empty ()) break ; if ( s [ i ] == '*' ) { if ( que . front () > i ) { flag = true ; break ; } s [ i ] = ')' ; que . pop (); } } if ( flag || ! que . empty ()) { puts ( \"No solution!\" ); continue ; } for ( int i = 1 ; i <= n ; i ++ ) if ( s [ i ] != '*' ) printf ( \"%c\" , s [ i ]); puts ( \"\" ); } return 0 ; }","title":"I. Parentheses Matching"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/","text":"\u603b\u4e4b\u6ca1\u6709\u4ec0\u4e48\u76d0\u5206\uff0c\u5f3a\u8c03\u5b89\u5168\u95ee\u9898 \u4e0b\u5348\u6bd4\u8d5b Link \u7b7e\u5230\u98de\u5feb\uff0c2 \u9898 rank1\uff0c\u6700\u540e\u4e00\u5c0f\u65f6\u56de\u53bb\u6536\u62fe\u4e1c\u897f\u7136\u540e\u9e3d\u4e86\uff0c\u8d70\u7684\u65f6\u5019 rank8\uff0c\u6700\u540e rank12 Name Date Solved A B C D E F G H I J 2020 CCPC Wannafly Winter Camp Day1 (Div.1&2) 2020/1/12 7/10 O O O . O O . O O . To-do list Link E A. \u671f\u671b\u9006\u5e8f\u5bf9 Link \u6c42\u4e00\u4e2a\u6392\u5217\uff0c\u6392\u5e8f\u4e00\u4e2a\u533a\u95f4\u5bf9\u4f7f\u5f97\u671f\u671b\u9006\u5e8f\u5bf9\u6700\u5c11\u6c42\u671f\u671b\u3002\u5373\u5bf9\u4e8e [l_i,r_i] [l_i,r_i] \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6574\u6570 j j \uff0c x_i=j x_i=j \u7684\u6982\u7387\u90fd\u662f (r_i-l_i+1)^{-1} (r_i-l_i+1)^{-1} \u663e\u7136\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4 [a,b] [a,b] \u548c [c,d] [c,d] \u3002\u82e5 a + b < c + d a + b < c + d \uff0c\u663e\u7136 [a,b] [a,b] \u5e94\u8be5\u5728 [c,d] [c,d] \u524d\u9762\u7136\u540e\u7531\u4e8e\u8fd9\u4e2a\u4e1c\u897f\u662f\u5355\u5411\u6709\u53ef\u4f20\u9012\u6027\u7684\u6240\u4ee5\u76f4\u63a5\u5bf9\u533a\u95f4\u6309\u6743\u6392\u5e8f\uff0c\u7136\u540e\u8ba1\u7b97\u671f\u671b\u5373\u53ef \u7531\u4e8e n\\le 5\\cdot 10^3 n\\le 5\\cdot 10^3 \u8ba1\u7b97\u671f\u671b\u7684\u65b9\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5bf9\u6c42\u5b83\u53ef\u80fd\u662f\u9006\u5e8f\u5bf9\u7684\u671f\u671b\u7136\u540e\u6c42\u548c\u5373\u53ef \u6240\u4ee5\u672c\u9898\u8003\u8651\u6e05\u695a\u6bcf\u4e2a\u70b9\u5bf9\u7684\u671f\u671b\u5373\u53ef Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/12 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e3 + 50 ; const int mod = 998244353 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; int l [ maxn ], r [ maxn ]; int idx [ maxn ]; ll inv [ maxn ]; ll cal ( int i , int j ) { i = idx [ i ], j = idx [ j ]; ll a = l [ i ], b = r [ i ], c = l [ j ], d = r [ j ]; ll res = 0 ; if ( c >= b ) ; else if ( c <= a && d >= b ) { res = ( a - c ) * ( b - a + 1 ) + ( b - a + 1 ) * ( b - a ) / 2 ; } else if ( a <= c && d <= b ) { res = ( b * 2 - c - d ) * ( d - c + 1 ) / 2 ; } else if ( a <= c && d >= b ) { res = ( b - c ) * ( b - c + 1 ) / 2 ; } return res % mod * inv [ i ] % mod * inv [ j ] % mod ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & l [ i ], & r [ i ]), idx [ i ] = i ; inv [ i ] = qp ( r [ i ] - l [ i ] + 1 , mod - 2 ); } sort ( idx + 1 , idx + 1 + n , []( int x , int y ) { return l [ x ] + r [ x ] < l [ y ] + r [ y ]; }); ll res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i + 1 ; j <= n ; ++ j ) { res = ( res + cal ( i , j )) % mod ; } } printf ( \"%lld \\n \" , res % mod ); // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; } B. \u5bc6\u7801\u5b66 Link \u6709\u4e2a\u52a0\u6a21\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u8f93\u5165\u52a0\u5bc6 m m \u6b21\u540e\u6bcf\u4e2a\u4e32\u7684\u5f62\u5f0f\uff0c\u6c42\u539f\u4e32 \u7b7e\u5230\u9898\uff0c\u51cf\u6a21\u5012\u63a8\u5373\u53ef Code by Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1000 + 10 ; char s [ maxn ][ 110 ]; int x [ maxn ], y [ maxn ]; int getid ( char c ) { if ( c >= 'a' && c <= 'z' ) return c - 'a' ; if ( c >= 'A' && c <= 'z' ) return c - 'A' + 26 ; } int getch ( int c ) { if ( c >= 0 && c <= 25 ) return c + 'a' ; return c - 26 + 'A' ; } int len [ maxn ]; int main () { int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d%d\" , & x [ i ], & y [ i ]); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%s\" , s [ i ]); len [ i ] = strlen ( s [ i ]); } for ( int i = m ; i >= 1 ; i -- ) { int nx = x [ i ], ny = y [ i ], lenx = len [ nx ], leny = len [ ny ]; for ( int i = 0 ; s [ ny ][ i ]; i ++ ) { char a = s [ nx ][ i % lenx ], b = s [ ny ][ i ]; int z = ( getid ( b ) + 52 - getid ( a )) % 52 ; s [ ny ][ i ] = getch ( z ); } } for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%s \\n \" , s [ i ]); return 0 ; } Code by badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/4/18 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e3 + 50 ; const int mod = 1e9 + 7 ; int n , m ; char s [ maxn ][ 105 ]; int len [ maxn ]; int chartoint ( char x ) { if ( isupper ( x )) return x - 'A' + 26 ; return x - 'a' ; } char inttochar ( int x ) { if ( x < 26 ) return x + 'a' ; return x + 'A' - 26 ; } void back ( char & x , char y ) { int xx = chartoint ( x ); int yy = chartoint ( y ); xx = ( xx - yy + 52 ) % 52 ; x = inttochar ( xx ); } void roll_back ( int x , int y ) { for ( int i = 0 ; i < len [ x ]; ++ i ) { back ( s [ x ][ i ], s [ y ][ i % len [ y ]]); } } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); vector < pair < int , int > > a ( m ); for ( int i = 0 ; i < m ; ++ i ) scanf ( \"%d%d\" , & a [ i ]. first , & a [ i ]. second ); for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%s\" , s [ i ]), len [ i ] = strlen ( s [ i ]); for ( int i = m - 1 ; i >= 0 ; -- i ) roll_back ( a [ i ]. second , a [ i ]. first ); for ( int i = 1 ; i <= n ; ++ i ) { printf ( \"%s \\n \" , s [ i ]); } return 0 ; } C. \u67d3\u8272\u56fe Link \u4ee4 g(n,k) g(n,k) \u4e3a n n \u4e2a\u70b9\u7684\u65e0\u5411\u56fe\u5bf9\u70b9\u67d3\u6210 k k \u79cd\u989c\u8272\u6700\u591a\u7684\u8fb9\u6570\uff0c\u6c42 \\sum_{i=l}^{r} g(n,i) \\sum_{i=l}^{r} g(n,i) g(n,i)=\\frac{n^2-\\sum_{i=l}^r{(\\lceil\\frac{n}{i}\\rceil)}^2\\cdot(n\\%i)+{\\lfloor\\frac{n}{i}\\rfloor}^2\\cdot(i-n\\%i)}{2} \u5bf9\u8be5\u5f0f\u5206\u5757\uff0c\u5f53 i\\le\\sqrt{n} i\\le\\sqrt{n} \u65f6\u5bf9\u6bcf\u4e2a\u70b9\u5355\u70b9\u6c42\u503c\uff0c\u5f53 i\\ge\\sqrt{n} i\\ge\\sqrt{n} \u65f6\u5bf9 \\lfloor\\frac{n}{i}\\rfloor \\lfloor\\frac{n}{i}\\rfloor \u5206\u5757\u6c42\u548c\uff0c\u5176\u4e2d \\sum_{i=l}^ri \\sum_{i=l}^ri \u548c n\\%i n\\%i \u5747\u4e3a\u7b49\u5dee\u6570\u5217\uff0c\u800c \\lfloor\\frac{n}{i}\\rfloor \\lfloor\\frac{n}{i}\\rfloor \u5728\u5355\u4e2a\u5757\u5185\u76f8\u7b49\uff0c\u6bcf\u6b21\u6c42 l-1,r l-1,r \u7684\u524d\u7f00\u548c\u5dee\u5206\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; #define int ll const int mod = 998244353 ; ll qp ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } signed main () { int t ; scanf ( \"%lld\" , & t ); while ( t -- ) { ll n , l , r ; scanf ( \"%lld%lld%lld\" , & n , & l , & r ); int m = sqrt ( n ); ll res = 0 ; res = 1ll * n * n % mod * ( r - l + 1 ) % mod ; if ( m > r ) m = r ; for ( int i = l ; i <= m ; i ++ ) { res = ( res - ( n / i + 1 ) * ( n / i + 1 ) % mod * ( n % i ) % mod + mod - ( n / i ) * ( n / i ) % mod * ( i - n % i ) % mod + mod ) % mod ; } if ( m < l - 1 ) m = l - 1 ; int x = n / ( m + 1 ), posl = m + 1 ; for ( int i = x ; i >= 1 && posl <= r ; i -- ) { int posr = n / i ; if ( posr > r ) posr = r ; ll a = n % posl , b = n % posr ; ll left = ( a + b ) * ( posr - posl + 1 ) % mod * qp ( 2 ) % mod ; ll right = (( posl + posr ) * ( posr - posl + 1 ) % mod * qp ( 2 ) % mod - left + mod ) % mod ; res = ( res - 1ll * ( i + 1 ) * ( i + 1 ) % mod * left % mod + mod - 1ll * i * i % mod * right % mod + mod ) % mod ; posl = posr + 1 ; if ( posr == r ) break ; } res = res * qp ( 2 ) % mod ; printf ( \"%lld \\n \" , res ); } return 0 ; } E. \u6811\u4e0e\u8def\u5f84 Link Code #include <bits/stdc++.h> using namespace std ; const int N = 500010 ; typedef long long LL ; int n , m ; struct edge { int b , nt ; } e [ N * 2 ]; int p [ N ], nn ; int fa [ N ][ 32 ]; LL f [ N ], g [ N ], h [ N ]; void anode ( int x , int y ){ nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; swap ( x , y ); nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; } int deep [ N ]; void dfsLCA ( int x , int ff =- 1 , int dd = 0 ){ for ( int i = 1 ;( 1 << i ) <= dd ; i ++ ){ fa [ x ][ i ] = fa [ fa [ x ][ i - 1 ] ][ i - 1 ]; } deep [ x ] = dd ; for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == ff ) continue ; fa [ t ][ 0 ] = x ; dfsLCA ( t , x , dd + 1 ); } } int LCA ( int x , int y ){ if ( deep [ x ] < deep [ y ]) swap ( x , y ); int t = deep [ x ] - deep [ y ]; for ( int i = 0 ;( 1 << i ) <= t ; i ++ ) if ( t & ( 1 << i )) x = fa [ x ][ i ]; if ( x == y ) return y ; for ( int i = 30 ; i >= 0 ; i -- ){ if ( fa [ x ][ i ] != fa [ y ][ i ]){ x = fa [ x ][ i ]; y = fa [ y ][ i ]; } } return fa [ x ][ 0 ]; } int findf ( int x , int d ){ for ( int i = 0 ;( 1 << i ) <= d ; i ++ ) if ( d & ( 1 << i )) x = fa [ x ][ i ]; return x ; } LL ans [ N ]; void dfs1 ( int x ){ for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa [ x ][ 0 ]) continue ; dfs1 ( t ); g [ x ] += g [ t ]; h [ x ] += h [ t ]; } g [ x ] += h [ x ]; } void dfs2 ( int x ){ for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa [ x ][ 0 ]) continue ; dfs2 ( t ); f [ x ] += f [ t ]; } f [ x ] += g [ x ]; } void getAns ( int x , LL now ){ ans [ x ] = now ; for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa [ x ][ 0 ]) continue ; getAns ( t , now - g [ t ]); } } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i < n ; i ++ ){ int aa , bb ; scanf ( \"%d%d\" , & aa , & bb ); anode ( aa , bb ); } dfsLCA ( 1 ); LL asum = 0 ; for ( int i = 1 ; i <= m ; i ++ ){ int aa , bb ; scanf ( \"%d%d\" , & aa , & bb ); if ( aa == bb ) continue ; if ( fa [ aa ][ 0 ] == bb || fa [ bb ][ 0 ] == aa ) continue ; int cc = LCA ( aa , bb ); int dis = 2 * deep [ cc ] - deep [ aa ] - deep [ bb ]; dis =- dis ; if ( deep [ aa ] < deep [ bb ]) swap ( aa , bb ); f [ aa ] += dis - 1 ; f [ bb ] += dis - 1 ; if ( bb == cc ){ g [ aa ] += dis - 1 ; g [ cc ] += dis - 1 ; h [ fa [ aa ][ 0 ]] -= 2 ; h [ cc ] += 2 ; } else { g [ aa ] += dis - 1 ; h [ fa [ aa ][ 0 ]] -= 2 ; h [ cc ] -= 2ll * ( deep [ aa ] - deep [ cc ] - 1 ) + 1 - dis ; g [ bb ] += dis - 1 ; h [ fa [ bb ][ 0 ]] -= 2 ; h [ cc ] -= 2ll * ( deep [ bb ] - deep [ cc ] - 1 ) + 1 - dis ; h [ cc ] += 2 ; g [ cc ] -= 2 ; } asum += 1ll * ( deep [ aa ] - deep [ cc ]) * ( deep [ bb ] - deep [ cc ]); } dfs1 ( 1 ); dfs2 ( 1 ); getAns ( 1 , asum ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%lld \\n \" , ans [ i ]); return 0 ; } F. \u4e58\u6cd5 Link \u7ed9\u51fa\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u5168\u79ef\u4e2d\u7b2c k k \u5927\u7684\u6570 \u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u5bf9\u7b54\u6848\u8fdb\u884c check\uff0c\u6bcf\u6b21\u6c42\u6bd4\u5f53\u524d\u4e8c\u5206\u7684\u7b54\u6848\u5c0f\u7684\u6570\u7684\u4e2a\u6570\uff0c\u53ef\u4ee5\u8003\u8651\u5c06 B B \u5e8f\u5217\u6392\u5e8f\uff0c\u679a\u4e3e\u6240\u6709 A A \u5957\u4e00\u5c42\u4e8c\u5206\u6c42\u51fa\u5c0f\u4e8e\u5b83\u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef Code #include <bits/stdc++.h> using namespace std ; const int N = 100010 ; typedef long long LL ; int n , m ; LL k ; LL MAXN = 1000000000000000ll ; LL A [ N ], B [ N ]; int L , R ; int findf ( int f , LL x , LL y ){ //yz=x; if ( ! f ){ LL l = 1 , r = m , rtn = 0 ; while ( l <= r ){ LL mid = l + r >> 1 ; if ( B [ mid ] * y >= x ){ rtn = mid ; l = mid + 1 ; } else r = mid - 1 ; } return rtn ; } else { LL l = 1 , r = m , rtn = m + 1 ; while ( l <= r ){ LL mid = l + r >> 1 ; if ( B [ mid ] * y >= x ){ rtn = mid ; r = mid - 1 ; } else l = mid + 1 ; } return m - rtn + 1 ; } } int check ( LL x ){ LL cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ if ( A [ i ] == 0 ){ if ( x < 0 ) cnt += m ; } else { int f = ( A [ i ] > 0 ); cnt += findf ( f , x , A [ i ]); } } return cnt >= k ; } LL solve (){ LL l =- MAXN , r = MAXN , rtn = MAXN * 10 ; while ( l <= r ){ LL mid = l + r >> 1 ; if ( check ( mid )){ rtn = mid ; l = mid + 1 ; } else r = mid - 1 ; } return rtn ; } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d%d%lld\" , & n , & m , & k ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & A [ i ]); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%lld\" , & B [ i ]); sort ( B + 1 , B + 1 + m ); LL ans = solve (); printf ( \"%lld\" , ans ); return 0 ; } H. \u6700\u5927\u516c\u7ea6\u6570 Link \u6c42 y y \u4f7f\u5f97\u5728 [1,n] [1,n] \u4e2d\u4e0d\u5b58\u5728 gcd(i,k)=gcd(y,k) gcd(i,k)=gcd(y,k) \u961f\u53cb\u4e00\u770b\u662f\u4e2a\u5927\u6570\uff0c\u56e0\u4e3a\u5982\u679c n=500, k=1 n=500, k=1 \u663e\u7136\u662f n n \u4e2d\u6240\u6709\u7684\u7d20\u6570\u79ef \u7136\u540e\u968f\u4fbf\u63a8\u4e00\u63a8\u8bbe p p \u662f n n \u4e2d\u6240\u6709\u7684\u7d20\u6570\u96c6\u5408\uff0c\u7b54\u6848\u5c31\u662f k \\cdot \\prod p k \\cdot \\prod p Code T = int ( input ()) def prim ( x ): for i in range ( 2 , x ): if ( x % i == 0 ): return False return True for kase in range ( T ): n , k = map ( int , input () . split ()) ans = k for i in range ( 2 , int ( n / k ) + 1 ): if prim ( i ): ans *= i print ( ans ) I. K\u5c0f\u6570\u67e5\u8be2 Link \u533a\u95f4\u63a8\u5e73\u6700\u5927\u503c + \u533a\u95f4\u67e5\u8be2\u7b2c k \u5c0f \u5206\u5757 + \u4e8c\u5206\u7b54\u6848\u590d\u6742\u5ea6\u53ef\u8fc7 \u6b63\u89e3\u6811\u5957\u6811\u4e0d\u4f1a\u5199 \u53e6\u5916\u533a\u95f4\u63a8\u5e73\u6700\u5927\u503c\u662f segment beats Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/12 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 8e4 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} const int maxb = 1005 ; const int inf = 8e4 + 50 ; int n , m ; int belong [ maxn ], lpos [ maxb ], rpos [ maxb ]; int val [ maxn ], lazy [ maxn ], op [ maxb ]; int block ; void rebuild ( int idx ) { for ( int i = lpos [ idx ]; i <= rpos [ idx ]; ++ i ) { if ( val [ i ] > op [ idx ]) val [ i ] = op [ idx ]; lazy [ i ] = val [ i ]; } sort ( lazy + lpos [ idx ], lazy + rpos [ idx ] + 1 ); // op[idx] = inf; } void update ( int l , int r , int w ) { if ( belong [ l ] == belong [ r ]) { for ( int i = l ; i <= r ; ++ i ) { if ( val [ i ] > w ) val [ i ] = w ; } rebuild ( belong [ l ]); return ; } for ( int i = l ; i <= rpos [ belong [ l ]]; ++ i ) { if ( val [ i ] > w ) val [ i ] = w ; } for ( int i = belong [ l ] + 1 ; i < belong [ r ]; ++ i ) { if ( op [ i ] > w ) op [ i ] = w ; } for ( int i = lpos [ belong [ r ]]; i <= r ; ++ i ) { if ( val [ i ] > w ) val [ i ] = w ; } rebuild ( belong [ l ]), rebuild ( belong [ r ]); } int sz ; void rebuild () { for ( int i = 1 ; i <= sz ; ++ i ) { op [ i ] = 0 ; for ( int j = lpos [ i ]; j <= rpos [ i ]; ++ j ) { // if (val[j] > op[i]) val[j] = op[i]; lazy [ j ] = val [ j ]; op [ i ] = max ( op [ i ], val [ j ]); } sort ( lazy + lpos [ i ], lazy + rpos [ i ] + 1 ); // for (int j = lpos[i]; j <= rpos[i]; ++j) { // printf(\"%d \", lazy[j]); // } // printf(\" | \"); } // printf(\"\\n\"); } bool check ( int x , int l , int r , int w ) { int res = 0 ; if ( op [ belong [ l ]] < x ) { res += rpos [ belong [ l ]] - l + 1 ; } else { for ( int i = l ; i <= rpos [ belong [ l ]]; ++ i ) { if ( val [ i ] < x ) res ++ ; } } for ( int i = belong [ l ] + 1 ; i < belong [ r ]; ++ i ) { if ( op [ i ] < x ) res += rpos [ i ] - lpos [ i ] + 1 ; else { res += lower_bound ( lazy + lpos [ i ], lazy + rpos [ i ] + 1 , x ) - lazy - lpos [ i ]; } } if ( op [ belong [ r ]] < x ) { res += r - lpos [ belong [ r ]] + 1 ; } else { for ( int i = lpos [ belong [ r ]]; i <= r ; ++ i ) { if ( val [ i ] < x ) res ++ ; } } return res < w ; } int query ( int l , int r , int w ) { if ( belong [ l ] == belong [ r ]) { vector < int > tmp ; for ( int i = l ; i <= r ; ++ i ) { if ( val [ i ] > op [ belong [ i ]]) tmp . push_back ( op [ belong [ i ]]); else tmp . push_back ( val [ i ]); } sort ( tmp . begin (), tmp . end ()); return tmp [ w - 1 ]; } int L = 1 , R = inf ; int res = 0 ; while ( L <= R ) { int mid = L + R >> 1 ; if ( check ( mid , l , r , w )) { res = mid ; L = mid + 1 ; } else { R = mid - 1 ; } } return res ; } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); // block = n; block = sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & val [ i ]); lazy [ i ] = val [ i ]; belong [ i ] = ( i - 1 ) / block + 1 ; } sz = ( n - 1 ) / block + 1 ; for ( int i = 1 ; i <= sz ; ++ i ) { lpos [ i ] = 1 + ( i - 1 ) * block ; rpos [ i ] = i * block ; } rpos [ sz ] = n ; rebuild (); int op , l , r , x ; for ( int i = 1 ; i <= m ; ++ i ) { scanf ( \"%d%d%d%d\" , & op , & l , & r , & x ); if ( op == 1 ) { update ( l , r , x ); } else { printf ( \"%d \\n \" , query ( l , r , x )); } } return 0 ; }","title":"Day1"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#_1","text":"\u7b7e\u5230\u98de\u5feb\uff0c2 \u9898 rank1\uff0c\u6700\u540e\u4e00\u5c0f\u65f6\u56de\u53bb\u6536\u62fe\u4e1c\u897f\u7136\u540e\u9e3d\u4e86\uff0c\u8d70\u7684\u65f6\u5019 rank8\uff0c\u6700\u540e rank12 Name Date Solved A B C D E F G H I J 2020 CCPC Wannafly Winter Camp Day1 (Div.1&2) 2020/1/12 7/10 O O O . O O . O O .","title":"\u4e0b\u5348\u6bd4\u8d5b"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#to-do-list","text":"E","title":"To-do list"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#a","text":"\u6c42\u4e00\u4e2a\u6392\u5217\uff0c\u6392\u5e8f\u4e00\u4e2a\u533a\u95f4\u5bf9\u4f7f\u5f97\u671f\u671b\u9006\u5e8f\u5bf9\u6700\u5c11\u6c42\u671f\u671b\u3002\u5373\u5bf9\u4e8e [l_i,r_i] [l_i,r_i] \u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6574\u6570 j j \uff0c x_i=j x_i=j \u7684\u6982\u7387\u90fd\u662f (r_i-l_i+1)^{-1} (r_i-l_i+1)^{-1} \u663e\u7136\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u533a\u95f4 [a,b] [a,b] \u548c [c,d] [c,d] \u3002\u82e5 a + b < c + d a + b < c + d \uff0c\u663e\u7136 [a,b] [a,b] \u5e94\u8be5\u5728 [c,d] [c,d] \u524d\u9762\u7136\u540e\u7531\u4e8e\u8fd9\u4e2a\u4e1c\u897f\u662f\u5355\u5411\u6709\u53ef\u4f20\u9012\u6027\u7684\u6240\u4ee5\u76f4\u63a5\u5bf9\u533a\u95f4\u6309\u6743\u6392\u5e8f\uff0c\u7136\u540e\u8ba1\u7b97\u671f\u671b\u5373\u53ef \u7531\u4e8e n\\le 5\\cdot 10^3 n\\le 5\\cdot 10^3 \u8ba1\u7b97\u671f\u671b\u7684\u65b9\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5bf9\u6c42\u5b83\u53ef\u80fd\u662f\u9006\u5e8f\u5bf9\u7684\u671f\u671b\u7136\u540e\u6c42\u548c\u5373\u53ef \u6240\u4ee5\u672c\u9898\u8003\u8651\u6e05\u695a\u6bcf\u4e2a\u70b9\u5bf9\u7684\u671f\u671b\u5373\u53ef Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/12 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e3 + 50 ; const int mod = 998244353 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; int l [ maxn ], r [ maxn ]; int idx [ maxn ]; ll inv [ maxn ]; ll cal ( int i , int j ) { i = idx [ i ], j = idx [ j ]; ll a = l [ i ], b = r [ i ], c = l [ j ], d = r [ j ]; ll res = 0 ; if ( c >= b ) ; else if ( c <= a && d >= b ) { res = ( a - c ) * ( b - a + 1 ) + ( b - a + 1 ) * ( b - a ) / 2 ; } else if ( a <= c && d <= b ) { res = ( b * 2 - c - d ) * ( d - c + 1 ) / 2 ; } else if ( a <= c && d >= b ) { res = ( b - c ) * ( b - c + 1 ) / 2 ; } return res % mod * inv [ i ] % mod * inv [ j ] % mod ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & l [ i ], & r [ i ]), idx [ i ] = i ; inv [ i ] = qp ( r [ i ] - l [ i ] + 1 , mod - 2 ); } sort ( idx + 1 , idx + 1 + n , []( int x , int y ) { return l [ x ] + r [ x ] < l [ y ] + r [ y ]; }); ll res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i + 1 ; j <= n ; ++ j ) { res = ( res + cal ( i , j )) % mod ; } } printf ( \"%lld \\n \" , res % mod ); // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"A. \u671f\u671b\u9006\u5e8f\u5bf9"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#b","text":"\u6709\u4e2a\u52a0\u6a21\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u8f93\u5165\u52a0\u5bc6 m m \u6b21\u540e\u6bcf\u4e2a\u4e32\u7684\u5f62\u5f0f\uff0c\u6c42\u539f\u4e32 \u7b7e\u5230\u9898\uff0c\u51cf\u6a21\u5012\u63a8\u5373\u53ef Code by Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1000 + 10 ; char s [ maxn ][ 110 ]; int x [ maxn ], y [ maxn ]; int getid ( char c ) { if ( c >= 'a' && c <= 'z' ) return c - 'a' ; if ( c >= 'A' && c <= 'z' ) return c - 'A' + 26 ; } int getch ( int c ) { if ( c >= 0 && c <= 25 ) return c + 'a' ; return c - 26 + 'A' ; } int len [ maxn ]; int main () { int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d%d\" , & x [ i ], & y [ i ]); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%s\" , s [ i ]); len [ i ] = strlen ( s [ i ]); } for ( int i = m ; i >= 1 ; i -- ) { int nx = x [ i ], ny = y [ i ], lenx = len [ nx ], leny = len [ ny ]; for ( int i = 0 ; s [ ny ][ i ]; i ++ ) { char a = s [ nx ][ i % lenx ], b = s [ ny ][ i ]; int z = ( getid ( b ) + 52 - getid ( a )) % 52 ; s [ ny ][ i ] = getch ( z ); } } for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%s \\n \" , s [ i ]); return 0 ; } Code by badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/4/18 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e3 + 50 ; const int mod = 1e9 + 7 ; int n , m ; char s [ maxn ][ 105 ]; int len [ maxn ]; int chartoint ( char x ) { if ( isupper ( x )) return x - 'A' + 26 ; return x - 'a' ; } char inttochar ( int x ) { if ( x < 26 ) return x + 'a' ; return x + 'A' - 26 ; } void back ( char & x , char y ) { int xx = chartoint ( x ); int yy = chartoint ( y ); xx = ( xx - yy + 52 ) % 52 ; x = inttochar ( xx ); } void roll_back ( int x , int y ) { for ( int i = 0 ; i < len [ x ]; ++ i ) { back ( s [ x ][ i ], s [ y ][ i % len [ y ]]); } } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); vector < pair < int , int > > a ( m ); for ( int i = 0 ; i < m ; ++ i ) scanf ( \"%d%d\" , & a [ i ]. first , & a [ i ]. second ); for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%s\" , s [ i ]), len [ i ] = strlen ( s [ i ]); for ( int i = m - 1 ; i >= 0 ; -- i ) roll_back ( a [ i ]. second , a [ i ]. first ); for ( int i = 1 ; i <= n ; ++ i ) { printf ( \"%s \\n \" , s [ i ]); } return 0 ; }","title":"B. \u5bc6\u7801\u5b66"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#c","text":"\u4ee4 g(n,k) g(n,k) \u4e3a n n \u4e2a\u70b9\u7684\u65e0\u5411\u56fe\u5bf9\u70b9\u67d3\u6210 k k \u79cd\u989c\u8272\u6700\u591a\u7684\u8fb9\u6570\uff0c\u6c42 \\sum_{i=l}^{r} g(n,i) \\sum_{i=l}^{r} g(n,i) g(n,i)=\\frac{n^2-\\sum_{i=l}^r{(\\lceil\\frac{n}{i}\\rceil)}^2\\cdot(n\\%i)+{\\lfloor\\frac{n}{i}\\rfloor}^2\\cdot(i-n\\%i)}{2} \u5bf9\u8be5\u5f0f\u5206\u5757\uff0c\u5f53 i\\le\\sqrt{n} i\\le\\sqrt{n} \u65f6\u5bf9\u6bcf\u4e2a\u70b9\u5355\u70b9\u6c42\u503c\uff0c\u5f53 i\\ge\\sqrt{n} i\\ge\\sqrt{n} \u65f6\u5bf9 \\lfloor\\frac{n}{i}\\rfloor \\lfloor\\frac{n}{i}\\rfloor \u5206\u5757\u6c42\u548c\uff0c\u5176\u4e2d \\sum_{i=l}^ri \\sum_{i=l}^ri \u548c n\\%i n\\%i \u5747\u4e3a\u7b49\u5dee\u6570\u5217\uff0c\u800c \\lfloor\\frac{n}{i}\\rfloor \\lfloor\\frac{n}{i}\\rfloor \u5728\u5355\u4e2a\u5757\u5185\u76f8\u7b49\uff0c\u6bcf\u6b21\u6c42 l-1,r l-1,r \u7684\u524d\u7f00\u548c\u5dee\u5206\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; #define int ll const int mod = 998244353 ; ll qp ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } signed main () { int t ; scanf ( \"%lld\" , & t ); while ( t -- ) { ll n , l , r ; scanf ( \"%lld%lld%lld\" , & n , & l , & r ); int m = sqrt ( n ); ll res = 0 ; res = 1ll * n * n % mod * ( r - l + 1 ) % mod ; if ( m > r ) m = r ; for ( int i = l ; i <= m ; i ++ ) { res = ( res - ( n / i + 1 ) * ( n / i + 1 ) % mod * ( n % i ) % mod + mod - ( n / i ) * ( n / i ) % mod * ( i - n % i ) % mod + mod ) % mod ; } if ( m < l - 1 ) m = l - 1 ; int x = n / ( m + 1 ), posl = m + 1 ; for ( int i = x ; i >= 1 && posl <= r ; i -- ) { int posr = n / i ; if ( posr > r ) posr = r ; ll a = n % posl , b = n % posr ; ll left = ( a + b ) * ( posr - posl + 1 ) % mod * qp ( 2 ) % mod ; ll right = (( posl + posr ) * ( posr - posl + 1 ) % mod * qp ( 2 ) % mod - left + mod ) % mod ; res = ( res - 1ll * ( i + 1 ) * ( i + 1 ) % mod * left % mod + mod - 1ll * i * i % mod * right % mod + mod ) % mod ; posl = posr + 1 ; if ( posr == r ) break ; } res = res * qp ( 2 ) % mod ; printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"C. \u67d3\u8272\u56fe"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#e","text":"Code #include <bits/stdc++.h> using namespace std ; const int N = 500010 ; typedef long long LL ; int n , m ; struct edge { int b , nt ; } e [ N * 2 ]; int p [ N ], nn ; int fa [ N ][ 32 ]; LL f [ N ], g [ N ], h [ N ]; void anode ( int x , int y ){ nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; swap ( x , y ); nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; } int deep [ N ]; void dfsLCA ( int x , int ff =- 1 , int dd = 0 ){ for ( int i = 1 ;( 1 << i ) <= dd ; i ++ ){ fa [ x ][ i ] = fa [ fa [ x ][ i - 1 ] ][ i - 1 ]; } deep [ x ] = dd ; for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == ff ) continue ; fa [ t ][ 0 ] = x ; dfsLCA ( t , x , dd + 1 ); } } int LCA ( int x , int y ){ if ( deep [ x ] < deep [ y ]) swap ( x , y ); int t = deep [ x ] - deep [ y ]; for ( int i = 0 ;( 1 << i ) <= t ; i ++ ) if ( t & ( 1 << i )) x = fa [ x ][ i ]; if ( x == y ) return y ; for ( int i = 30 ; i >= 0 ; i -- ){ if ( fa [ x ][ i ] != fa [ y ][ i ]){ x = fa [ x ][ i ]; y = fa [ y ][ i ]; } } return fa [ x ][ 0 ]; } int findf ( int x , int d ){ for ( int i = 0 ;( 1 << i ) <= d ; i ++ ) if ( d & ( 1 << i )) x = fa [ x ][ i ]; return x ; } LL ans [ N ]; void dfs1 ( int x ){ for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa [ x ][ 0 ]) continue ; dfs1 ( t ); g [ x ] += g [ t ]; h [ x ] += h [ t ]; } g [ x ] += h [ x ]; } void dfs2 ( int x ){ for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa [ x ][ 0 ]) continue ; dfs2 ( t ); f [ x ] += f [ t ]; } f [ x ] += g [ x ]; } void getAns ( int x , LL now ){ ans [ x ] = now ; for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa [ x ][ 0 ]) continue ; getAns ( t , now - g [ t ]); } } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i < n ; i ++ ){ int aa , bb ; scanf ( \"%d%d\" , & aa , & bb ); anode ( aa , bb ); } dfsLCA ( 1 ); LL asum = 0 ; for ( int i = 1 ; i <= m ; i ++ ){ int aa , bb ; scanf ( \"%d%d\" , & aa , & bb ); if ( aa == bb ) continue ; if ( fa [ aa ][ 0 ] == bb || fa [ bb ][ 0 ] == aa ) continue ; int cc = LCA ( aa , bb ); int dis = 2 * deep [ cc ] - deep [ aa ] - deep [ bb ]; dis =- dis ; if ( deep [ aa ] < deep [ bb ]) swap ( aa , bb ); f [ aa ] += dis - 1 ; f [ bb ] += dis - 1 ; if ( bb == cc ){ g [ aa ] += dis - 1 ; g [ cc ] += dis - 1 ; h [ fa [ aa ][ 0 ]] -= 2 ; h [ cc ] += 2 ; } else { g [ aa ] += dis - 1 ; h [ fa [ aa ][ 0 ]] -= 2 ; h [ cc ] -= 2ll * ( deep [ aa ] - deep [ cc ] - 1 ) + 1 - dis ; g [ bb ] += dis - 1 ; h [ fa [ bb ][ 0 ]] -= 2 ; h [ cc ] -= 2ll * ( deep [ bb ] - deep [ cc ] - 1 ) + 1 - dis ; h [ cc ] += 2 ; g [ cc ] -= 2 ; } asum += 1ll * ( deep [ aa ] - deep [ cc ]) * ( deep [ bb ] - deep [ cc ]); } dfs1 ( 1 ); dfs2 ( 1 ); getAns ( 1 , asum ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%lld \\n \" , ans [ i ]); return 0 ; }","title":"E. \u6811\u4e0e\u8def\u5f84"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#f","text":"\u7ed9\u51fa\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u5168\u79ef\u4e2d\u7b2c k k \u5927\u7684\u6570 \u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u5bf9\u7b54\u6848\u8fdb\u884c check\uff0c\u6bcf\u6b21\u6c42\u6bd4\u5f53\u524d\u4e8c\u5206\u7684\u7b54\u6848\u5c0f\u7684\u6570\u7684\u4e2a\u6570\uff0c\u53ef\u4ee5\u8003\u8651\u5c06 B B \u5e8f\u5217\u6392\u5e8f\uff0c\u679a\u4e3e\u6240\u6709 A A \u5957\u4e00\u5c42\u4e8c\u5206\u6c42\u51fa\u5c0f\u4e8e\u5b83\u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef Code #include <bits/stdc++.h> using namespace std ; const int N = 100010 ; typedef long long LL ; int n , m ; LL k ; LL MAXN = 1000000000000000ll ; LL A [ N ], B [ N ]; int L , R ; int findf ( int f , LL x , LL y ){ //yz=x; if ( ! f ){ LL l = 1 , r = m , rtn = 0 ; while ( l <= r ){ LL mid = l + r >> 1 ; if ( B [ mid ] * y >= x ){ rtn = mid ; l = mid + 1 ; } else r = mid - 1 ; } return rtn ; } else { LL l = 1 , r = m , rtn = m + 1 ; while ( l <= r ){ LL mid = l + r >> 1 ; if ( B [ mid ] * y >= x ){ rtn = mid ; r = mid - 1 ; } else l = mid + 1 ; } return m - rtn + 1 ; } } int check ( LL x ){ LL cnt = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ if ( A [ i ] == 0 ){ if ( x < 0 ) cnt += m ; } else { int f = ( A [ i ] > 0 ); cnt += findf ( f , x , A [ i ]); } } return cnt >= k ; } LL solve (){ LL l =- MAXN , r = MAXN , rtn = MAXN * 10 ; while ( l <= r ){ LL mid = l + r >> 1 ; if ( check ( mid )){ rtn = mid ; l = mid + 1 ; } else r = mid - 1 ; } return rtn ; } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d%d%lld\" , & n , & m , & k ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & A [ i ]); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%lld\" , & B [ i ]); sort ( B + 1 , B + 1 + m ); LL ans = solve (); printf ( \"%lld\" , ans ); return 0 ; }","title":"F. \u4e58\u6cd5"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#h","text":"\u6c42 y y \u4f7f\u5f97\u5728 [1,n] [1,n] \u4e2d\u4e0d\u5b58\u5728 gcd(i,k)=gcd(y,k) gcd(i,k)=gcd(y,k) \u961f\u53cb\u4e00\u770b\u662f\u4e2a\u5927\u6570\uff0c\u56e0\u4e3a\u5982\u679c n=500, k=1 n=500, k=1 \u663e\u7136\u662f n n \u4e2d\u6240\u6709\u7684\u7d20\u6570\u79ef \u7136\u540e\u968f\u4fbf\u63a8\u4e00\u63a8\u8bbe p p \u662f n n \u4e2d\u6240\u6709\u7684\u7d20\u6570\u96c6\u5408\uff0c\u7b54\u6848\u5c31\u662f k \\cdot \\prod p k \\cdot \\prod p Code T = int ( input ()) def prim ( x ): for i in range ( 2 , x ): if ( x % i == 0 ): return False return True for kase in range ( T ): n , k = map ( int , input () . split ()) ans = k for i in range ( 2 , int ( n / k ) + 1 ): if prim ( i ): ans *= i print ( ans )","title":"H. \u6700\u5927\u516c\u7ea6\u6570"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day1/#i-k","text":"\u533a\u95f4\u63a8\u5e73\u6700\u5927\u503c + \u533a\u95f4\u67e5\u8be2\u7b2c k \u5c0f \u5206\u5757 + \u4e8c\u5206\u7b54\u6848\u590d\u6742\u5ea6\u53ef\u8fc7 \u6b63\u89e3\u6811\u5957\u6811\u4e0d\u4f1a\u5199 \u53e6\u5916\u533a\u95f4\u63a8\u5e73\u6700\u5927\u503c\u662f segment beats Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/12 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 8e4 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} const int maxb = 1005 ; const int inf = 8e4 + 50 ; int n , m ; int belong [ maxn ], lpos [ maxb ], rpos [ maxb ]; int val [ maxn ], lazy [ maxn ], op [ maxb ]; int block ; void rebuild ( int idx ) { for ( int i = lpos [ idx ]; i <= rpos [ idx ]; ++ i ) { if ( val [ i ] > op [ idx ]) val [ i ] = op [ idx ]; lazy [ i ] = val [ i ]; } sort ( lazy + lpos [ idx ], lazy + rpos [ idx ] + 1 ); // op[idx] = inf; } void update ( int l , int r , int w ) { if ( belong [ l ] == belong [ r ]) { for ( int i = l ; i <= r ; ++ i ) { if ( val [ i ] > w ) val [ i ] = w ; } rebuild ( belong [ l ]); return ; } for ( int i = l ; i <= rpos [ belong [ l ]]; ++ i ) { if ( val [ i ] > w ) val [ i ] = w ; } for ( int i = belong [ l ] + 1 ; i < belong [ r ]; ++ i ) { if ( op [ i ] > w ) op [ i ] = w ; } for ( int i = lpos [ belong [ r ]]; i <= r ; ++ i ) { if ( val [ i ] > w ) val [ i ] = w ; } rebuild ( belong [ l ]), rebuild ( belong [ r ]); } int sz ; void rebuild () { for ( int i = 1 ; i <= sz ; ++ i ) { op [ i ] = 0 ; for ( int j = lpos [ i ]; j <= rpos [ i ]; ++ j ) { // if (val[j] > op[i]) val[j] = op[i]; lazy [ j ] = val [ j ]; op [ i ] = max ( op [ i ], val [ j ]); } sort ( lazy + lpos [ i ], lazy + rpos [ i ] + 1 ); // for (int j = lpos[i]; j <= rpos[i]; ++j) { // printf(\"%d \", lazy[j]); // } // printf(\" | \"); } // printf(\"\\n\"); } bool check ( int x , int l , int r , int w ) { int res = 0 ; if ( op [ belong [ l ]] < x ) { res += rpos [ belong [ l ]] - l + 1 ; } else { for ( int i = l ; i <= rpos [ belong [ l ]]; ++ i ) { if ( val [ i ] < x ) res ++ ; } } for ( int i = belong [ l ] + 1 ; i < belong [ r ]; ++ i ) { if ( op [ i ] < x ) res += rpos [ i ] - lpos [ i ] + 1 ; else { res += lower_bound ( lazy + lpos [ i ], lazy + rpos [ i ] + 1 , x ) - lazy - lpos [ i ]; } } if ( op [ belong [ r ]] < x ) { res += r - lpos [ belong [ r ]] + 1 ; } else { for ( int i = lpos [ belong [ r ]]; i <= r ; ++ i ) { if ( val [ i ] < x ) res ++ ; } } return res < w ; } int query ( int l , int r , int w ) { if ( belong [ l ] == belong [ r ]) { vector < int > tmp ; for ( int i = l ; i <= r ; ++ i ) { if ( val [ i ] > op [ belong [ i ]]) tmp . push_back ( op [ belong [ i ]]); else tmp . push_back ( val [ i ]); } sort ( tmp . begin (), tmp . end ()); return tmp [ w - 1 ]; } int L = 1 , R = inf ; int res = 0 ; while ( L <= R ) { int mid = L + R >> 1 ; if ( check ( mid , l , r , w )) { res = mid ; L = mid + 1 ; } else { R = mid - 1 ; } } return res ; } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); // block = n; block = sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & val [ i ]); lazy [ i ] = val [ i ]; belong [ i ] = ( i - 1 ) / block + 1 ; } sz = ( n - 1 ) / block + 1 ; for ( int i = 1 ; i <= sz ; ++ i ) { lpos [ i ] = 1 + ( i - 1 ) * block ; rpos [ i ] = i * block ; } rpos [ sz ] = n ; rebuild (); int op , l , r , x ; for ( int i = 1 ; i <= m ; ++ i ) { scanf ( \"%d%d%d%d\" , & op , & l , & r , & x ); if ( op == 1 ) { update ( l , r , x ); } else { printf ( \"%d \\n \" , query ( l , r , x )); } } return 0 ; }","title":"I. K\u5c0f\u6570\u67e5\u8be2"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/","text":"\u65e9\u4e0a\u8bb2\u8bfe Link Div2 \u6570\u636e\u7ed3\u6784\uff0c\u5c5e\u5b9e\u6ca1\u6709\u4ec0\u4e48\u76d0\u5206\uff0c\u4ece\u6808\u5230\u7ebf\u6bb5\u6811 \u6700\u5927\u6536\u83b7\u662f\u660e\u786e\u4e86 Segment Beats \u7684\u590d\u6742\u5ea6\u662f O(nlogn)\uff0c\u53ef\u4ee5\u653e\u5fc3\u7684\u4f7f\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c \u4e0b\u5348\u6bd4\u8d5b Link Name Date Solved A B C D E F G H I J K 2020 CCPC Wannafly Winter Camp Day2 (Div.1&2) 2020/1/13 7/11 O . O . O O . O . O O \u4ecd\u7136\u5728\u524d 20 \u540d\uff0c\u5f88\u591a\u4e32\u548c\u56fe\u9898\uff0c\u8fd8\u662f\u6709\u70b9\u96be\u9876 To-do list Link C/F/J/K A. \u6258\u7c73\u7684\u5b57\u7b26\u4e32 Link \u6c42\u6240\u6709\u5b50\u4e32\u4e2d\u5143\u97f3\u5b57\u6bcd\u5360\u6bd4\u7684\u5e73\u5747\u503c \u663e\u7136 ans=\\sum{\\frac{x}{len}} ans=\\sum{\\frac{x}{len}} \uff0c\u82e5\u5bf9\u5355\u70b9\u8ba1\u7b97\u8d21\u732e\uff0c\u90a3\u4e48 ans_i = \\sum\\frac{1}{len} ans_i = \\sum\\frac{1}{len} \u8003\u8651\u8fd9\u6837\u7684\u60c5\u51b5 (1------i----n) \u5176\u4e2d [1,i] \u957f\u5ea6\u4e3a x \uff0c [i,n] \u957f\u5ea6\u4e3a y \uff0c\u8bbe x \\le y x \\le y \u663e\u7136\u5bf9\u4e8e [1,x] \u957f\u5ea6\u7684\u4e32\u6bcf\u4e2a\u90fd\u6709\u671f\u671b 1\uff0c\u7136\u540e\u5bf9\u4e8e [x+1,y] \u7684\u4e32\u671f\u671b\u4e2a\u6570\u4e3a x \u3002\u8ba1\u7b97\u5f0f\u4e3a\uff1a \\sum_{i=x+1}^{y}\\frac{x}{i} \\sum_{i=x+1}^{y}\\frac{x}{i} \uff0c\u5bf9\u4e8e [y+1,x+y-1] \u7684\u4e32\u671f\u671b\u4e3a [x-1,1] \u8ba1\u7b97\u5f0f\u4e3a\uff1a \\sum_{i=y+1}^{x+y-1}\\frac{x+y-i}{i} \\sum_{i=y+1}^{x+y-1}\\frac{x+y-i}{i} \u5316\u7b80\u4e3a {x+y}\\cdot\\sum_{i=y+1}^{x+y-1}\\frac{1}{i}-\\sum_{i=y+1}^{x+y-1}1 {x+y}\\cdot\\sum_{i=y+1}^{x+y-1}\\frac{1}{i}-\\sum_{i=y+1}^{x+y-1}1 \u5bf9\u4e8e \\frac{1}{i} \\frac{1}{i} \u6c42\u524d\u7f00\u548c\u5373\u53ef \u5982\u679c x > y x > y \u53ef\u4ee5\u8003\u8651\u4ea4\u6362\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u5bf9\u79f0\u6027 Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/13 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct Frac { ll a , b ; void getJian () { ll gcd = abs ( __gcd ( a , b )); a /= gcd ; b /= gcd ; if ( b < 0 ) { a = - a ; b = - b ; } } Frac ( ll a_ = 1 , ll b_ = 1 ) { a = a_ ; b = b_ ; getJian (); } Frac add ( const Frac & oth ) { ll bt = b * oth . b ; ll at = a * oth . b + oth . a * b ; return Frac ( at , bt ); } Frac multi ( const Frac & oth ) { a *= oth . a ; b *= oth . b ; getJian (); return * this ; } bool operator < ( const Frac & oth ) const { return a * oth . b < b * oth . a ; } bool operator == ( const Frac & oth ) const { return a * oth . b == b * oth . a ; } bool operator <= ( const Frac & oth ) const { return a * oth . b <= b * oth . a ; } }; char s [ maxn ]; double pre [ maxn ]; //double pre2[maxn]; int main ( int argc , char * argv []) { scanf ( \"%s\" , s + 1 ); int len = strlen ( s + 1 ); for ( int i = 1 ; i <= len ; ++ i ) { pre [ i ] = pre [ i - 1 ] + 1.0 / i ; // pre2[i] = pre2[i - 1] + pre[i]; } double res = 0 ; for ( int i = 1 ; i <= len ; ++ i ) { if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u' || s [ i ] == 'y' ) { int x = i ; int y = len - i + 1 ; // res += x * pre[y] - pre2[x - 1]; if ( x > y ) swap ( x , y ); res ++ ; res += x * ( pre [ y ] - pre [ x ]); res += ( x + y ) * ( pre [ x + y - 1 ] - pre [ y ]); // res += (y - x) - x * (pre[y] - pre[x]); } } res /= len + ( double ) len * ( len - 1 ) / 2 ; printf ( \"%.10f \\n \" , res ); return 0 ; } C. \u7eb3\u65b0\u4e00\u767e\u7684\u77f3\u5b50\u6e38\u620f Link Code #include <bits/stdc++.h> using namespace std ; const int N = 500010 ; typedef long long LL ; int n , m ; int cnt [ 100 ]; LL nowx ; int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ){ LL aa ; scanf ( \"%lld\" , & aa ); LL ans = 0 ; if ( aa > nowx ) ans ++ ; LL t = nowx ^ aa ; int flag =- 1 ; for ( int i = 62 ; i >= 0 ; i -- ){ if ( t & ( 1ll << i )){ flag = i ; break ; } } if ( flag !=- 1 ){ ans += cnt [ flag ]; } for ( int i = 0 ; aa ; i ++ ){ if ( aa & 1 ) cnt [ i ] ++ ; aa >>= 1 ; } nowx = t ; printf ( \"%lld \\n \" , ans ); } return 0 ; } E. \u9614\u529b\u68af\u7684\u6811 Link \u7ed9\u4e00\u9897\u5e26\u70b9\u6743\u6709\u6839\u6811 \u5bf9\u4e8e\u4efb\u610f\u4e00\u9897\u5b50\u6811\u5b9a\u4e49\u5b83\u7684\u7ed3\u5b9e\u7a0b\u5ea6\u4e3a\u5bf9\u5b83\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u7684\u7f16\u53f7\u6392\u5e8f\u540e\u83b7\u5f97\u6570\u7ec4 a, \\sum_{i=1}^{k-1}(a_{i+1}-a_i)^2 \\sum_{i=1}^{k-1}(a_{i+1}-a_i)^2 \u663e\u7136\u8003\u8651\u4e24\u4e2a\u533a\u95f4\u600e\u4e48\u5408\u5e76\uff0c\u9996\u5148\u4e24\u4e2a\u4e0d\u4ea4\u53c9\u533a\u95f4\u7684\u5143\u7d20\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\u6743\u503c\uff0c\u6240\u4ee5\u76f4\u63a5\u5408\u5e76\u7b54\u6848\u518d\u52a0\u4e0a\u8fb9\u754c\u7684\u7b54\u6848\u5373\u53ef \u76f4\u63a5\u8003\u8651\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/13 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int root [ maxn ]; int ls [ 1800000 ], rs [ 1800000 ]; ll res [ maxn ]; int sz = 0 ; struct node { int lnum , rnum ; ll ans ; } p [ 1800000 ]; void pushup ( int rt ) { p [ rt ]. ans = p [ ls [ rt ]]. ans + p [ rs [ rt ]]. ans ; if ( p [ ls [ rt ]]. lnum ) p [ rt ]. lnum = p [ ls [ rt ]]. lnum ; else p [ rt ]. lnum = p [ rs [ rt ]]. lnum ; if ( p [ rs [ rt ]]. rnum ) p [ rt ]. rnum = p [ rs [ rt ]]. rnum ; else p [ rt ]. rnum = p [ ls [ rt ]]. rnum ; if ( p [ rs [ rt ]]. lnum == 0 || p [ ls [ rt ]]. rnum == 0 ) return ; p [ rt ]. ans += ( ll )( p [ rs [ rt ]]. lnum - p [ ls [ rt ]]. rnum ) * ( p [ rs [ rt ]]. lnum - p [ ls [ rt ]]. rnum ); } void insert ( int & k , int l , int r , int val ){ if ( ! k ) k = ++ sz ; if ( l == r ) { p [ k ]. lnum = p [ k ]. rnum = val ; p [ k ]. ans = 0 ; // sum[k] = 1; return ; } int mid = ( l + r ) >> 1 ; if ( val <= mid ) insert ( ls [ k ], l , mid , val ); else insert ( rs [ k ], mid + 1 , r , val ); pushup ( k ); // sum[k] = sum[ls[k]] + sum[rs[k]]; } //int query(int k, int l, int r, int rank) { // if (l == r) return l; // int mid = (l + r) >> 1; // if (sum[ls[k]] >= rank) return query(ls[k], l, mid, rank); // else return query(rs[k], mid + 1, r, rank - sum[ls[k]]); //} int merge ( int x , int y ) { if ( ! x ) return y ; if ( ! y ) return x ; ls [ x ] = merge ( ls [ x ], ls [ y ]); rs [ x ] = merge ( rs [ x ], rs [ y ]); pushup ( x ); // sum[x] = sum[ls[x]] + sum[rs[x]]; return x ; } int n ; vector < int > edge [ maxn ]; void dfs ( int u ) { insert ( root [ u ], 1 , n , u ); for ( auto v : edge [ u ]) { dfs ( v ); merge ( root [ u ], root [ v ]); } res [ u ] = p [ root [ u ]]. ans ; } int main ( int argc , char * argv []) { scanf ( \"%d\" , & n ); for ( int i = 2 ; i <= n ; ++ i ) { int rt ; scanf ( \"%d\" , & rt ); edge [ rt ]. push_back ( i ); } dfs ( 1 ); for ( int i = 1 ; i <= n ; ++ i ) { printf ( \"%lld \\n \" , res [ i ]); } return 0 ; } F. \u91c7\u8611\u83c7\u7684\u514b\u62c9\u8389\u4e1d Link Code #include <bits/stdc++.h> using namespace std ; const int N = 2000010 ; typedef long long LL ; int n , m ; struct edge { int b , nt , w ; } e [ N ]; int fa [ N ], wfa [ N ], sz [ N ]; int dfn [ N ], tt ; int p [ N ], nn ; void anode ( int x , int y , int z ){ nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; e [ nn ]. w = z ; swap ( x , y ); nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; e [ nn ]. w = z ; } void dfs ( int x , int ff = 0 ){ dfn [ x ] =++ tt ; sz [ x ] = 1 ; for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == ff ) continue ; fa [ t ] = x ; wfa [ t ] = e [ i ]. w ; dfs ( t , x ); sz [ x ] += sz [ t ]; } } int ROOT , ls [ N * 2 ], rs [ N * 2 ]; LL sum [ N * 2 ]; int cnt ; void build ( int & rt , int l , int r ){ rt =++ cnt ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( ls [ rt ], l , mid ); build ( rs [ rt ], mid + 1 , r ); } void pushup ( int rt ){ sum [ rt ] = sum [ ls [ rt ]] + sum [ rs [ rt ]]; } void update ( int rt , int l , int r , int x , int v ){ if ( l == r ){ sum [ rt ] += v ; return ; } int mid = l + r >> 1 ; if ( x <= mid ) update ( ls [ rt ], l , mid , x , v ); else update ( rs [ rt ], mid + 1 , r , x , v ); pushup ( rt ); } LL query ( int rt , int l , int r , int x , int y ){ if ( l == x && r == y ) return sum [ rt ]; int mid = l + r >> 1 ; if ( y <= mid ) return query ( ls [ rt ], l , mid , x , y ); else if ( x > mid ) return query ( rs [ rt ], mid + 1 , r , x , y ); else return query ( ls [ rt ], l , mid , x , mid ) + query ( rs [ rt ], mid + 1 , r , mid + 1 , y ); } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d\" , & n ); for ( int i = 1 ; i < n ; i ++ ){ int aa , bb , cc ; scanf ( \"%d%d%d\" , & aa , & bb , & cc ); anode ( aa , bb , cc ); } dfs ( 1 ); build ( ROOT , 1 , n ); scanf ( \"%d\" , & m ); int nowR = 1 ; for ( int tk = 1 ; tk <= m ; tk ++ ){ int op ; scanf ( \"%d\" , & op ); if ( op == 1 ){ int aa , bb ; scanf ( \"%d%d\" , & aa , & bb ); update ( ROOT , 1 , n , dfn [ aa ], bb ); } else { int aa ; scanf ( \"%d\" , & aa ); nowR = aa ; } LL ans = 0 ; for ( int i = p [ nowR ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa [ nowR ]) continue ; ans += 1ll * e [ i ]. w * query ( ROOT , 1 , n , dfn [ t ], dfn [ t ] + sz [ t ] - 1 ); } ans += 1ll * wfa [ nowR ] * ( sum [ ROOT ] - query ( ROOT , 1 , n , dfn [ nowR ], dfn [ nowR ] + sz [ nowR ] - 1 ) ) ; printf ( \"%lld \\n \" , ans ); } return 0 ; } H. \u53c1\u4f70\u7231\u62a0\u7684\u5e8f\u5217 Link \u9898\u610f\u76f8\u5f53\u4e8e\u6c42\u4e00\u4e2a\u6700\u5927\u7684 m \u4f7f\u5f97 m \u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\u53ef\u4ee5\u901a\u8fc7\u4e00\u6761\u957f\u5ea6\u4e0d\u8d85\u8fc7 n - 1 \u7684\u8def\u5f84\u901a\u8fc7\u6240\u6709\u7684\u8fb9 \u663e\u7136\u5bf9\u4e8e m \u4e3a\u5947\u6570\u65f6\uff0c\u5b8c\u5168\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e3a\u5076\u6570\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u6761\u6b27\u62c9\u8def\u4f7f\u5f97\u901a\u8fc7\u6240\u6709\u70b9 \u5bf9\u4e8e m \u4e3a\u5076\u6570\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5947\u5076\u70b9\u591a\u8fde\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u53d8\u4e3a\u5076\u6570\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6b27\u62c9\u8def\u6c42\u89e3 \u6b27\u62c9\u8def\u7b97\u6cd5\u4e3a\uff1a fleury m \u4e3a\u5076\u6570\u65f6 n \u6700\u5927\u4e3a m * m / 2 m \u4e3a\u5947\u6570\u65f6 n \u6700\u5927\u4e3a m * (m - 1) / 2 + 1 Code #include <bits/stdc++.h> #define ll long long using namespace std ; const int N = 2010 ; const int mod = 1e9 + 7 ; ll n ; ll cal2 ( ll x ) { return x * x / 2 ; } ll cal1 ( ll x ) { return x * ( x - 1 ) / 2 + 1 ; } struct edge { int a , b , nt , pre ; } e [ N * N ]; int p [ N ], nn ; void anode ( int x , int y ){ e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; if ( p [ x ] !=- 1 ) e [ p [ x ]]. pre = nn ; p [ x ] = nn ; e [ nn ]. a = x ; e [ nn ]. pre =- 1 ; nn ++ ; swap ( x , y ); e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; if ( p [ x ] !=- 1 ) e [ p [ x ]]. pre = nn ; p [ x ] = nn ; e [ nn ]. a = x ; e [ nn ]. pre =- 1 ; nn ++ ; } void del ( int i ){ if ( e [ i ]. pre !=- 1 ) e [ e [ i ]. pre ]. nt = e [ i ]. nt ; if ( e [ i ]. nt !=- 1 ) e [ e [ i ]. nt ]. pre = e [ i ]. pre ; if ( i == p [ e [ i ]. a ]) p [ e [ i ]. a ] = e [ i ]. nt ; } void add ( int i ){ e [ i ]. nt = p [ e [ i ]. a ]; if ( p [ e [ i ]. a ] !=- 1 ) e [ p [ e [ i ]. a ]]. pre = i ; p [ e [ i ]. a ] = i ; } void build ( int m ){ for ( int i = 1 ; i <= m ; i ++ ) p [ i ] =- 1 ; for ( int i = 1 ; i <= m ; i ++ ){ for ( int j = i + 1 ; j <= m ; j ++ ) anode ( i , j ); } if ( m & 1 ) return ; for ( int i = 1 ; i <= m ; i += 2 ){ anode ( i , i + 1 ); } } int st [ N * N ], ans [ N * N ]; void dfs ( int x ){ st [ ++ st [ 0 ]] = x ; for ( int i = p [ x ]; i !=- 1 ; i = e [ i ]. nt ){ int t = e [ i ]. b ; del ( i ); del ( i ^ 1 ); dfs ( t ); break ; } } void solve (){ st [ ++ st [ 0 ]] = 1 ; while ( st [ 0 ]){ int u = st [ st [ 0 ] -- ], flag = 0 ; if ( p [ u ] !=- 1 ) dfs ( u ); else ans [ ++ ans [ 0 ]] = u ; } } int main ( int argc , char * argv []) { #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); freopen ( \"out.txt\" , \"w\" , stdout ); #endif scanf ( \"%lld\" , & n ); if ( n == 1 ){ printf ( \"1 \\n 1\" ); return 0 ; } ll l = 1 , r = 1e9 + 5 ; ll res = 0 ; while ( l <= r ) { ll mid = l + r >> 1 ; if ( cal1 ( mid * 2 + 1 ) > n ) { r = mid - 1 ; } else { res = mid * 2 + 1 ; l = mid + 1 ; } } l = 1 , r = 1e9 + 5 ; ll res1 = 0 ; while ( l <= r ) { ll mid = l + r >> 1 ; if ( cal2 ( mid * 2 ) > n ) { r = mid - 1 ; } else { res1 = mid * 2 ; l = mid + 1 ; } } res = max ( res , res1 ); printf ( \"%lld \\n \" , res ); if ( n > 2000000 ) return 0 ; build ( res ); solve (); while ( ans [ 0 ] < n ) ans [ ++ ans [ 0 ]] = 1 ; for ( int i = 1 ; i <= n ; i ++ ){ printf ( \"%d%c\" , ans [ i ],( i == n ) ? '\\n' : ' ' ); } return 0 ; } J. \u90a6\u90a6\u76842-SAT\u6a21\u677f Link Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; int main () { int n ; scanf ( \"%d\" , & n ); if ( n == 1 ) return 0 * puts ( \"0\" ); printf ( \"%d \\n \" , n ); for ( int i = 1 ; i < n ; i ++ ) printf ( \"%d %d \\n \" , - i , i + 1 ); printf ( \"%d %d \\n \" , - n , - n ); return 0 ; } \u9898\u76ee\u9644\u5f55 #include <cstdio> using namespace std ; const int N = 3010 ; int g [ N << 1 ], nxt [ N << 1 ], v [ N << 1 ], num ; int q [ N << 1 ], t ; bool vis [ N << 1 ]; int CNT ; int n , m ; void add ( int x , int y ){ nxt [ ++ num ] = g [ x ]; v [ num ] = y ; g [ x ] = num ; } bool dfs ( int x ){ CNT ++ ; if ( vis [ x > n ? x - n : x + n ]) return 0 ; if ( vis [ x ]) return 1 ; vis [ q [ ++ t ] = x ] = 1 ; for ( int i = g [ x ]; i ; i = nxt [ i ]) if ( ! dfs ( v [ i ])) return 0 ; return 1 ; } bool solve (){ for ( int i = 1 ; i <= n ; i ++ ) if ( ! vis [ i ] &&! vis [ i + n ]){ t = 0 ; if ( ! dfs ( i )){ while ( t ) vis [ q [ t -- ]] = 0 ; if ( ! dfs ( i + n )) return 0 ; } } return 1 ; } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ) { int x , y ; scanf ( \"%d%d\" , & x , & y ); if ( x < 0 ) x = n - x ; if ( y < 0 ) y = n - y ; add ( x > n ? x - n : x + n , y ); add ( y > n ? y - n : y + n , x ); } solve (); return 0 ; } K. \u7834\u5fd2\u5934\u7684\u533f\u540d\u4fe1 Link Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 5e5 * 26 ; const int N = 5e5 + 10 ; int trie [ maxn ][ 26 ], cnt ; int tag [ maxn ]; int fail [ maxn ]; int val [ maxn ], dep [ maxn ]; void ins ( char * s , int V ) { int root = 0 ; for ( int i = 0 ; s [ i ]; i ++ ) { int id = s [ i ] - 'a' , fa = root ; if ( ! trie [ root ][ id ]) trie [ root ][ id ] = ++ cnt ; root = trie [ root ][ id ]; dep [ root ] = dep [ fa ] + 1 ; } tag [ root ] = true ; val [ root ] = min ( val [ root ], V ); } void build () { queue < int > que ; for ( int i = 0 ; i < 26 ; i ++ ) if ( trie [ 0 ][ i ]) que . push ( trie [ 0 ][ i ]); while ( ! que . empty ()) { int k = que . front (); que . pop (); for ( int i = 0 ; i < 26 ; i ++ ) { if ( trie [ k ][ i ]) { fail [ trie [ k ][ i ]] = trie [ fail [ k ]][ i ]; que . push ( trie [ k ][ i ]); } else trie [ k ][ i ] = trie [ fail [ k ]][ i ]; } } } char s [ maxn ], t [ maxn ]; ll dp [ N ]; void query () { int u = 0 , len = strlen ( t + 1 ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 ; for ( int i = 1 ; i <= len ; i ++ ) { u = trie [ u ][ t [ i ] - 'a' ]; int en = u ; while ( en ) { if ( tag [ en ] && dp [ i - dep [ en ]] != 0x3f3f3f3f ) dp [ i ] = min ( dp [ i ], dp [ i - dep [ en ]] + val [ en ]); en = fail [ en ]; } } if ( dp [ len ] == 0x3f3f3f3f3f3f3f3f ) dp [ len ] = - 1 ; printf ( \"%lld \\n \" , dp [ len ]); } int main () { int n , x ; scanf ( \"%d\" , & n ); memset ( val , 0x3f , sizeof val ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%s%d\" , s , & x ); ins ( s , x ); } build (); scanf ( \"%s\" , t + 1 ); query (); return 0 ; }","title":"Day2"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#_1","text":"Div2 \u6570\u636e\u7ed3\u6784\uff0c\u5c5e\u5b9e\u6ca1\u6709\u4ec0\u4e48\u76d0\u5206\uff0c\u4ece\u6808\u5230\u7ebf\u6bb5\u6811 \u6700\u5927\u6536\u83b7\u662f\u660e\u786e\u4e86 Segment Beats \u7684\u590d\u6742\u5ea6\u662f O(nlogn)\uff0c\u53ef\u4ee5\u653e\u5fc3\u7684\u4f7f\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c","title":"\u65e9\u4e0a\u8bb2\u8bfe"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#_2","text":"Name Date Solved A B C D E F G H I J K 2020 CCPC Wannafly Winter Camp Day2 (Div.1&2) 2020/1/13 7/11 O . O . O O . O . O O \u4ecd\u7136\u5728\u524d 20 \u540d\uff0c\u5f88\u591a\u4e32\u548c\u56fe\u9898\uff0c\u8fd8\u662f\u6709\u70b9\u96be\u9876","title":"\u4e0b\u5348\u6bd4\u8d5b"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#to-do-list","text":"C/F/J/K","title":"To-do list"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#a","text":"\u6c42\u6240\u6709\u5b50\u4e32\u4e2d\u5143\u97f3\u5b57\u6bcd\u5360\u6bd4\u7684\u5e73\u5747\u503c \u663e\u7136 ans=\\sum{\\frac{x}{len}} ans=\\sum{\\frac{x}{len}} \uff0c\u82e5\u5bf9\u5355\u70b9\u8ba1\u7b97\u8d21\u732e\uff0c\u90a3\u4e48 ans_i = \\sum\\frac{1}{len} ans_i = \\sum\\frac{1}{len} \u8003\u8651\u8fd9\u6837\u7684\u60c5\u51b5 (1------i----n) \u5176\u4e2d [1,i] \u957f\u5ea6\u4e3a x \uff0c [i,n] \u957f\u5ea6\u4e3a y \uff0c\u8bbe x \\le y x \\le y \u663e\u7136\u5bf9\u4e8e [1,x] \u957f\u5ea6\u7684\u4e32\u6bcf\u4e2a\u90fd\u6709\u671f\u671b 1\uff0c\u7136\u540e\u5bf9\u4e8e [x+1,y] \u7684\u4e32\u671f\u671b\u4e2a\u6570\u4e3a x \u3002\u8ba1\u7b97\u5f0f\u4e3a\uff1a \\sum_{i=x+1}^{y}\\frac{x}{i} \\sum_{i=x+1}^{y}\\frac{x}{i} \uff0c\u5bf9\u4e8e [y+1,x+y-1] \u7684\u4e32\u671f\u671b\u4e3a [x-1,1] \u8ba1\u7b97\u5f0f\u4e3a\uff1a \\sum_{i=y+1}^{x+y-1}\\frac{x+y-i}{i} \\sum_{i=y+1}^{x+y-1}\\frac{x+y-i}{i} \u5316\u7b80\u4e3a {x+y}\\cdot\\sum_{i=y+1}^{x+y-1}\\frac{1}{i}-\\sum_{i=y+1}^{x+y-1}1 {x+y}\\cdot\\sum_{i=y+1}^{x+y-1}\\frac{1}{i}-\\sum_{i=y+1}^{x+y-1}1 \u5bf9\u4e8e \\frac{1}{i} \\frac{1}{i} \u6c42\u524d\u7f00\u548c\u5373\u53ef \u5982\u679c x > y x > y \u53ef\u4ee5\u8003\u8651\u4ea4\u6362\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u5bf9\u79f0\u6027 Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/13 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct Frac { ll a , b ; void getJian () { ll gcd = abs ( __gcd ( a , b )); a /= gcd ; b /= gcd ; if ( b < 0 ) { a = - a ; b = - b ; } } Frac ( ll a_ = 1 , ll b_ = 1 ) { a = a_ ; b = b_ ; getJian (); } Frac add ( const Frac & oth ) { ll bt = b * oth . b ; ll at = a * oth . b + oth . a * b ; return Frac ( at , bt ); } Frac multi ( const Frac & oth ) { a *= oth . a ; b *= oth . b ; getJian (); return * this ; } bool operator < ( const Frac & oth ) const { return a * oth . b < b * oth . a ; } bool operator == ( const Frac & oth ) const { return a * oth . b == b * oth . a ; } bool operator <= ( const Frac & oth ) const { return a * oth . b <= b * oth . a ; } }; char s [ maxn ]; double pre [ maxn ]; //double pre2[maxn]; int main ( int argc , char * argv []) { scanf ( \"%s\" , s + 1 ); int len = strlen ( s + 1 ); for ( int i = 1 ; i <= len ; ++ i ) { pre [ i ] = pre [ i - 1 ] + 1.0 / i ; // pre2[i] = pre2[i - 1] + pre[i]; } double res = 0 ; for ( int i = 1 ; i <= len ; ++ i ) { if ( s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u' || s [ i ] == 'y' ) { int x = i ; int y = len - i + 1 ; // res += x * pre[y] - pre2[x - 1]; if ( x > y ) swap ( x , y ); res ++ ; res += x * ( pre [ y ] - pre [ x ]); res += ( x + y ) * ( pre [ x + y - 1 ] - pre [ y ]); // res += (y - x) - x * (pre[y] - pre[x]); } } res /= len + ( double ) len * ( len - 1 ) / 2 ; printf ( \"%.10f \\n \" , res ); return 0 ; }","title":"A. \u6258\u7c73\u7684\u5b57\u7b26\u4e32"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#c","text":"Code #include <bits/stdc++.h> using namespace std ; const int N = 500010 ; typedef long long LL ; int n , m ; int cnt [ 100 ]; LL nowx ; int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ){ LL aa ; scanf ( \"%lld\" , & aa ); LL ans = 0 ; if ( aa > nowx ) ans ++ ; LL t = nowx ^ aa ; int flag =- 1 ; for ( int i = 62 ; i >= 0 ; i -- ){ if ( t & ( 1ll << i )){ flag = i ; break ; } } if ( flag !=- 1 ){ ans += cnt [ flag ]; } for ( int i = 0 ; aa ; i ++ ){ if ( aa & 1 ) cnt [ i ] ++ ; aa >>= 1 ; } nowx = t ; printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"C. \u7eb3\u65b0\u4e00\u767e\u7684\u77f3\u5b50\u6e38\u620f"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#e","text":"\u7ed9\u4e00\u9897\u5e26\u70b9\u6743\u6709\u6839\u6811 \u5bf9\u4e8e\u4efb\u610f\u4e00\u9897\u5b50\u6811\u5b9a\u4e49\u5b83\u7684\u7ed3\u5b9e\u7a0b\u5ea6\u4e3a\u5bf9\u5b83\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u7684\u7f16\u53f7\u6392\u5e8f\u540e\u83b7\u5f97\u6570\u7ec4 a, \\sum_{i=1}^{k-1}(a_{i+1}-a_i)^2 \\sum_{i=1}^{k-1}(a_{i+1}-a_i)^2 \u663e\u7136\u8003\u8651\u4e24\u4e2a\u533a\u95f4\u600e\u4e48\u5408\u5e76\uff0c\u9996\u5148\u4e24\u4e2a\u4e0d\u4ea4\u53c9\u533a\u95f4\u7684\u5143\u7d20\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\u6743\u503c\uff0c\u6240\u4ee5\u76f4\u63a5\u5408\u5e76\u7b54\u6848\u518d\u52a0\u4e0a\u8fb9\u754c\u7684\u7b54\u6848\u5373\u53ef \u76f4\u63a5\u8003\u8651\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/13 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int root [ maxn ]; int ls [ 1800000 ], rs [ 1800000 ]; ll res [ maxn ]; int sz = 0 ; struct node { int lnum , rnum ; ll ans ; } p [ 1800000 ]; void pushup ( int rt ) { p [ rt ]. ans = p [ ls [ rt ]]. ans + p [ rs [ rt ]]. ans ; if ( p [ ls [ rt ]]. lnum ) p [ rt ]. lnum = p [ ls [ rt ]]. lnum ; else p [ rt ]. lnum = p [ rs [ rt ]]. lnum ; if ( p [ rs [ rt ]]. rnum ) p [ rt ]. rnum = p [ rs [ rt ]]. rnum ; else p [ rt ]. rnum = p [ ls [ rt ]]. rnum ; if ( p [ rs [ rt ]]. lnum == 0 || p [ ls [ rt ]]. rnum == 0 ) return ; p [ rt ]. ans += ( ll )( p [ rs [ rt ]]. lnum - p [ ls [ rt ]]. rnum ) * ( p [ rs [ rt ]]. lnum - p [ ls [ rt ]]. rnum ); } void insert ( int & k , int l , int r , int val ){ if ( ! k ) k = ++ sz ; if ( l == r ) { p [ k ]. lnum = p [ k ]. rnum = val ; p [ k ]. ans = 0 ; // sum[k] = 1; return ; } int mid = ( l + r ) >> 1 ; if ( val <= mid ) insert ( ls [ k ], l , mid , val ); else insert ( rs [ k ], mid + 1 , r , val ); pushup ( k ); // sum[k] = sum[ls[k]] + sum[rs[k]]; } //int query(int k, int l, int r, int rank) { // if (l == r) return l; // int mid = (l + r) >> 1; // if (sum[ls[k]] >= rank) return query(ls[k], l, mid, rank); // else return query(rs[k], mid + 1, r, rank - sum[ls[k]]); //} int merge ( int x , int y ) { if ( ! x ) return y ; if ( ! y ) return x ; ls [ x ] = merge ( ls [ x ], ls [ y ]); rs [ x ] = merge ( rs [ x ], rs [ y ]); pushup ( x ); // sum[x] = sum[ls[x]] + sum[rs[x]]; return x ; } int n ; vector < int > edge [ maxn ]; void dfs ( int u ) { insert ( root [ u ], 1 , n , u ); for ( auto v : edge [ u ]) { dfs ( v ); merge ( root [ u ], root [ v ]); } res [ u ] = p [ root [ u ]]. ans ; } int main ( int argc , char * argv []) { scanf ( \"%d\" , & n ); for ( int i = 2 ; i <= n ; ++ i ) { int rt ; scanf ( \"%d\" , & rt ); edge [ rt ]. push_back ( i ); } dfs ( 1 ); for ( int i = 1 ; i <= n ; ++ i ) { printf ( \"%lld \\n \" , res [ i ]); } return 0 ; }","title":"E. \u9614\u529b\u68af\u7684\u6811"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#f","text":"Code #include <bits/stdc++.h> using namespace std ; const int N = 2000010 ; typedef long long LL ; int n , m ; struct edge { int b , nt , w ; } e [ N ]; int fa [ N ], wfa [ N ], sz [ N ]; int dfn [ N ], tt ; int p [ N ], nn ; void anode ( int x , int y , int z ){ nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; e [ nn ]. w = z ; swap ( x , y ); nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; e [ nn ]. w = z ; } void dfs ( int x , int ff = 0 ){ dfn [ x ] =++ tt ; sz [ x ] = 1 ; for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == ff ) continue ; fa [ t ] = x ; wfa [ t ] = e [ i ]. w ; dfs ( t , x ); sz [ x ] += sz [ t ]; } } int ROOT , ls [ N * 2 ], rs [ N * 2 ]; LL sum [ N * 2 ]; int cnt ; void build ( int & rt , int l , int r ){ rt =++ cnt ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( ls [ rt ], l , mid ); build ( rs [ rt ], mid + 1 , r ); } void pushup ( int rt ){ sum [ rt ] = sum [ ls [ rt ]] + sum [ rs [ rt ]]; } void update ( int rt , int l , int r , int x , int v ){ if ( l == r ){ sum [ rt ] += v ; return ; } int mid = l + r >> 1 ; if ( x <= mid ) update ( ls [ rt ], l , mid , x , v ); else update ( rs [ rt ], mid + 1 , r , x , v ); pushup ( rt ); } LL query ( int rt , int l , int r , int x , int y ){ if ( l == x && r == y ) return sum [ rt ]; int mid = l + r >> 1 ; if ( y <= mid ) return query ( ls [ rt ], l , mid , x , y ); else if ( x > mid ) return query ( rs [ rt ], mid + 1 , r , x , y ); else return query ( ls [ rt ], l , mid , x , mid ) + query ( rs [ rt ], mid + 1 , r , mid + 1 , y ); } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d\" , & n ); for ( int i = 1 ; i < n ; i ++ ){ int aa , bb , cc ; scanf ( \"%d%d%d\" , & aa , & bb , & cc ); anode ( aa , bb , cc ); } dfs ( 1 ); build ( ROOT , 1 , n ); scanf ( \"%d\" , & m ); int nowR = 1 ; for ( int tk = 1 ; tk <= m ; tk ++ ){ int op ; scanf ( \"%d\" , & op ); if ( op == 1 ){ int aa , bb ; scanf ( \"%d%d\" , & aa , & bb ); update ( ROOT , 1 , n , dfn [ aa ], bb ); } else { int aa ; scanf ( \"%d\" , & aa ); nowR = aa ; } LL ans = 0 ; for ( int i = p [ nowR ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa [ nowR ]) continue ; ans += 1ll * e [ i ]. w * query ( ROOT , 1 , n , dfn [ t ], dfn [ t ] + sz [ t ] - 1 ); } ans += 1ll * wfa [ nowR ] * ( sum [ ROOT ] - query ( ROOT , 1 , n , dfn [ nowR ], dfn [ nowR ] + sz [ nowR ] - 1 ) ) ; printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"F. \u91c7\u8611\u83c7\u7684\u514b\u62c9\u8389\u4e1d"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#h","text":"\u9898\u610f\u76f8\u5f53\u4e8e\u6c42\u4e00\u4e2a\u6700\u5927\u7684 m \u4f7f\u5f97 m \u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\u53ef\u4ee5\u901a\u8fc7\u4e00\u6761\u957f\u5ea6\u4e0d\u8d85\u8fc7 n - 1 \u7684\u8def\u5f84\u901a\u8fc7\u6240\u6709\u7684\u8fb9 \u663e\u7136\u5bf9\u4e8e m \u4e3a\u5947\u6570\u65f6\uff0c\u5b8c\u5168\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e3a\u5076\u6570\uff0c\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u6761\u6b27\u62c9\u8def\u4f7f\u5f97\u901a\u8fc7\u6240\u6709\u70b9 \u5bf9\u4e8e m \u4e3a\u5076\u6570\u65f6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5947\u5076\u70b9\u591a\u8fde\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u53d8\u4e3a\u5076\u6570\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6b27\u62c9\u8def\u6c42\u89e3 \u6b27\u62c9\u8def\u7b97\u6cd5\u4e3a\uff1a fleury m \u4e3a\u5076\u6570\u65f6 n \u6700\u5927\u4e3a m * m / 2 m \u4e3a\u5947\u6570\u65f6 n \u6700\u5927\u4e3a m * (m - 1) / 2 + 1 Code #include <bits/stdc++.h> #define ll long long using namespace std ; const int N = 2010 ; const int mod = 1e9 + 7 ; ll n ; ll cal2 ( ll x ) { return x * x / 2 ; } ll cal1 ( ll x ) { return x * ( x - 1 ) / 2 + 1 ; } struct edge { int a , b , nt , pre ; } e [ N * N ]; int p [ N ], nn ; void anode ( int x , int y ){ e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; if ( p [ x ] !=- 1 ) e [ p [ x ]]. pre = nn ; p [ x ] = nn ; e [ nn ]. a = x ; e [ nn ]. pre =- 1 ; nn ++ ; swap ( x , y ); e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; if ( p [ x ] !=- 1 ) e [ p [ x ]]. pre = nn ; p [ x ] = nn ; e [ nn ]. a = x ; e [ nn ]. pre =- 1 ; nn ++ ; } void del ( int i ){ if ( e [ i ]. pre !=- 1 ) e [ e [ i ]. pre ]. nt = e [ i ]. nt ; if ( e [ i ]. nt !=- 1 ) e [ e [ i ]. nt ]. pre = e [ i ]. pre ; if ( i == p [ e [ i ]. a ]) p [ e [ i ]. a ] = e [ i ]. nt ; } void add ( int i ){ e [ i ]. nt = p [ e [ i ]. a ]; if ( p [ e [ i ]. a ] !=- 1 ) e [ p [ e [ i ]. a ]]. pre = i ; p [ e [ i ]. a ] = i ; } void build ( int m ){ for ( int i = 1 ; i <= m ; i ++ ) p [ i ] =- 1 ; for ( int i = 1 ; i <= m ; i ++ ){ for ( int j = i + 1 ; j <= m ; j ++ ) anode ( i , j ); } if ( m & 1 ) return ; for ( int i = 1 ; i <= m ; i += 2 ){ anode ( i , i + 1 ); } } int st [ N * N ], ans [ N * N ]; void dfs ( int x ){ st [ ++ st [ 0 ]] = x ; for ( int i = p [ x ]; i !=- 1 ; i = e [ i ]. nt ){ int t = e [ i ]. b ; del ( i ); del ( i ^ 1 ); dfs ( t ); break ; } } void solve (){ st [ ++ st [ 0 ]] = 1 ; while ( st [ 0 ]){ int u = st [ st [ 0 ] -- ], flag = 0 ; if ( p [ u ] !=- 1 ) dfs ( u ); else ans [ ++ ans [ 0 ]] = u ; } } int main ( int argc , char * argv []) { #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); freopen ( \"out.txt\" , \"w\" , stdout ); #endif scanf ( \"%lld\" , & n ); if ( n == 1 ){ printf ( \"1 \\n 1\" ); return 0 ; } ll l = 1 , r = 1e9 + 5 ; ll res = 0 ; while ( l <= r ) { ll mid = l + r >> 1 ; if ( cal1 ( mid * 2 + 1 ) > n ) { r = mid - 1 ; } else { res = mid * 2 + 1 ; l = mid + 1 ; } } l = 1 , r = 1e9 + 5 ; ll res1 = 0 ; while ( l <= r ) { ll mid = l + r >> 1 ; if ( cal2 ( mid * 2 ) > n ) { r = mid - 1 ; } else { res1 = mid * 2 ; l = mid + 1 ; } } res = max ( res , res1 ); printf ( \"%lld \\n \" , res ); if ( n > 2000000 ) return 0 ; build ( res ); solve (); while ( ans [ 0 ] < n ) ans [ ++ ans [ 0 ]] = 1 ; for ( int i = 1 ; i <= n ; i ++ ){ printf ( \"%d%c\" , ans [ i ],( i == n ) ? '\\n' : ' ' ); } return 0 ; }","title":"H. \u53c1\u4f70\u7231\u62a0\u7684\u5e8f\u5217"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#j-2-sat","text":"Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; int main () { int n ; scanf ( \"%d\" , & n ); if ( n == 1 ) return 0 * puts ( \"0\" ); printf ( \"%d \\n \" , n ); for ( int i = 1 ; i < n ; i ++ ) printf ( \"%d %d \\n \" , - i , i + 1 ); printf ( \"%d %d \\n \" , - n , - n ); return 0 ; } \u9898\u76ee\u9644\u5f55 #include <cstdio> using namespace std ; const int N = 3010 ; int g [ N << 1 ], nxt [ N << 1 ], v [ N << 1 ], num ; int q [ N << 1 ], t ; bool vis [ N << 1 ]; int CNT ; int n , m ; void add ( int x , int y ){ nxt [ ++ num ] = g [ x ]; v [ num ] = y ; g [ x ] = num ; } bool dfs ( int x ){ CNT ++ ; if ( vis [ x > n ? x - n : x + n ]) return 0 ; if ( vis [ x ]) return 1 ; vis [ q [ ++ t ] = x ] = 1 ; for ( int i = g [ x ]; i ; i = nxt [ i ]) if ( ! dfs ( v [ i ])) return 0 ; return 1 ; } bool solve (){ for ( int i = 1 ; i <= n ; i ++ ) if ( ! vis [ i ] &&! vis [ i + n ]){ t = 0 ; if ( ! dfs ( i )){ while ( t ) vis [ q [ t -- ]] = 0 ; if ( ! dfs ( i + n )) return 0 ; } } return 1 ; } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ) { int x , y ; scanf ( \"%d%d\" , & x , & y ); if ( x < 0 ) x = n - x ; if ( y < 0 ) y = n - y ; add ( x > n ? x - n : x + n , y ); add ( y > n ? y - n : y + n , x ); } solve (); return 0 ; }","title":"J. \u90a6\u90a6\u76842-SAT\u6a21\u677f"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day2/#k","text":"Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 5e5 * 26 ; const int N = 5e5 + 10 ; int trie [ maxn ][ 26 ], cnt ; int tag [ maxn ]; int fail [ maxn ]; int val [ maxn ], dep [ maxn ]; void ins ( char * s , int V ) { int root = 0 ; for ( int i = 0 ; s [ i ]; i ++ ) { int id = s [ i ] - 'a' , fa = root ; if ( ! trie [ root ][ id ]) trie [ root ][ id ] = ++ cnt ; root = trie [ root ][ id ]; dep [ root ] = dep [ fa ] + 1 ; } tag [ root ] = true ; val [ root ] = min ( val [ root ], V ); } void build () { queue < int > que ; for ( int i = 0 ; i < 26 ; i ++ ) if ( trie [ 0 ][ i ]) que . push ( trie [ 0 ][ i ]); while ( ! que . empty ()) { int k = que . front (); que . pop (); for ( int i = 0 ; i < 26 ; i ++ ) { if ( trie [ k ][ i ]) { fail [ trie [ k ][ i ]] = trie [ fail [ k ]][ i ]; que . push ( trie [ k ][ i ]); } else trie [ k ][ i ] = trie [ fail [ k ]][ i ]; } } } char s [ maxn ], t [ maxn ]; ll dp [ N ]; void query () { int u = 0 , len = strlen ( t + 1 ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 ; for ( int i = 1 ; i <= len ; i ++ ) { u = trie [ u ][ t [ i ] - 'a' ]; int en = u ; while ( en ) { if ( tag [ en ] && dp [ i - dep [ en ]] != 0x3f3f3f3f ) dp [ i ] = min ( dp [ i ], dp [ i - dep [ en ]] + val [ en ]); en = fail [ en ]; } } if ( dp [ len ] == 0x3f3f3f3f3f3f3f3f ) dp [ len ] = - 1 ; printf ( \"%lld \\n \" , dp [ len ]); } int main () { int n , x ; scanf ( \"%d\" , & n ); memset ( val , 0x3f , sizeof val ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%s%d\" , s , & x ); ins ( s , x ); } build (); scanf ( \"%s\" , t + 1 ); query (); return 0 ; }","title":"K. \u7834\u5fd2\u5934\u7684\u533f\u540d\u4fe1"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day3/","text":"\u65e9\u4e0a\u8bb2\u8bfe Link \u4e13\u533a Div1\uff0c\u8bb2\u4e86\u4e9b\u5f88 np \u7684\u56fe\u8bba\u6211\u51c6\u5907\u4ee5\u540e\u8865\u4e00\u8865\uff0c\u603b\u4e4b\u4e00\u4e2a\u90fd\u4e0d\u4f1a circle-square tree \u5f26\u56fe \u70b9\u53cc\u8054\u901a km \u4e0a\u4e0b\u754c\u8d39\u7528\u6d41 \u6700\u5927\u6d41 \u6700\u5c0f\u5272 \u7ade\u8d5b\u56fe \u5b8c\u7f8e\u6d88\u9664\u5e8f\u5217 \u4e09\uff08\u56db\uff09\u5143\u73af\u8ba1\u6570 gomory-hu tree meet-in-middle \u7136\u540e\u626f\u4e86\u5f88\u4e45\u7684\u6253\u6bd4\u8d5b\u65b9\u6cd5\u548c\u961f\u4f0d\u95f4\u65b9\u6cd5\uff0c\u5b66\u5230\u5f88\u591a \u6211\u51b3\u5b9a\u4e4b\u540e\u8ddf\u961f\u53cb\u591a battle \u7b7e\u5230\u901f\u5ea6\u8bf7\u559d\u5976\u8336 \u4e0b\u5348\u6bd4\u8d5b Link Name Date Solved A B C D E F G H I J 2020 CCPC Wannafly Winter Camp Day3 (Div.1&2) 2020/1/13 4/10 O . O . O . O . . . \u603b\u4e4b\u6709\u70b9\u96be\u9876\uff0c\u611f\u89c9\u9898\u76ee\u753b\u98ce\u7a81\u53d8\uff0c\u88ab\u6570\u8bba\u9898\u641e\u9ebb\u4e86\uff0c\u7b7e\u5b8c\u5230\u6bcf\u9898\u505a\u4e86\uff0c\u53c8\u4e0d\u4f1a\u53cd\u6f14\u5c31\u6b47\u903c\u4e86\u3002\u7136\u540e rank 21\uff0c\u7b2c\u4e00\u6b21\u51fa 20 \u540d To-do list Link A\\G A. \u9ed1\u8272\u6c14\u7403 Link Code #include <bits/stdc++.h> using namespace std ; const int N = 2010 ; typedef long long LL ; int n , m ; int f [ N ][ N ]; int a [ N ]; int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & f [ i ][ j ]); } if ( n == 2 ){ printf ( \"1 1\" ); return 0 ; } for ( int i = 2 ; i < n ; i ++ ) a [ i + 1 ] = f [ 1 ][ i + 1 ] - f [ 1 ][ i ]; int t = a [ 3 ], s = f [ 2 ][ 3 ]; a [ 2 ] = ( s - t ) / 2 ; a [ 1 ] = f [ 1 ][ 2 ] - a [ 2 ]; for ( int i = 3 ; i <= n ; i ++ ) a [ i ] += a [ i - 1 ]; for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d%c\" , a [ i ],( i == n ) ? '\\n' : ' ' ); return 0 ; } C. \u65e0\u5411\u56fe\u5b9a\u5411 Link \u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u7ed9\u6bcf\u4e2a\u70b9\u5b9a\u5411\u4f7f\u5f97\u5176\u6210\u4e3a\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe(DAG)\uff0c\u6c42\u6700\u77ed\u7684\u6700\u957f\u8def\u5f84 \u6211\u7684\u505a\u6cd5\u662f\u968f\u673a\u5bf9\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u6240\u6709\u8fb9\u6309\u70b9\u5927\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21\u7ebf\u6027 dp \u6c42\u51fa\u6700\u5927\u503c\uff0c\u53d6\u5176\u6700\u5c0f\u503c\u5373\u53ef \u5f53\u7136\u6b63\u89e3\u53ef\u4ee5\u72b6\u538b\u4f18\u5316\u56fe\u7684\u67d3\u8272 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 20 ; vector < int > G [ maxn ]; int a [ maxn ]; int n ; int dp [ maxn ]; int main () { int m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; ++ i ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); u -- , v -- ; G [ u ]. push_back ( v ); G [ v ]. push_back ( u ); } if ( n == 1 ) printf ( \"0 \\n \" ); else { for ( int i = 0 ; i < n ; ++ i ) a [ i ] = i ; int res = m ; for ( int i = 0 ; i < 100000 ; ++ i ) { random_shuffle ( a , a + n ); for ( int i = 0 ; i < n ; ++ i ) dp [ i ] = 0 ; int now = 0 ; for ( int i = 0 ; i < n ; ++ i ) { for ( auto v : G [ a [ i ]]) { dp [ v ] = max ( dp [ v ], dp [ a [ i ]] + 1 ); now = max ( now , dp [ v ]); } } res = min ( res , now ); } printf ( \"%d \\n \" , res - 1 ); } return 0 ; } E. \u68cb\u6280\u54e5 Link \u7ed9\u51fa\u4e00\u4e2a\u4e8c\u4f4d 01 \u77e9\u9635\uff0c\u4e24\u4eba\u535a\u5f08\u6bcf\u6b21\u9009\u53d6\u4e00\u4e2a\u9ed1\u5757\u4f7f\u5f97\u5305\u542b\u8be5\u9ed1\u5757\u6240\u6709\u5de6\u4e0a\u7684\u70b9\u53d6\u53cd\uff0c\u6ca1\u6709\u9ed1\u5757\u65f6\u5f53\u524d\u9009\u624b\u5931\u8d25\uff0c\u4e24\u4eba\u90fd\u60f3\u8ba9\u5148\u624b\u83b7\u80dc \u5176\u5b9e\u5206\u6790\u4e00\u4e0b\u53d1\u73b0\u600e\u4e48\u53d6\u80dc\u8d1f\u90fd\u662f\u786e\u5b9a\u7684\uff0c\u53ea\u9700\u8981\u4ece\u540e\u5f80\u524d\u628a\u60c5\u51b5\u679a\u4e3e\u4e00\u6b21\u5373\u53ef Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/14 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 505 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; char mp [ maxn ][ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%s\" , mp [ i ] + 1 ); } int flag = 0 ; int tmp = 0 ; for ( int i = n ; i >= 1 ; -- i ) { for ( int j = m ; j >= 1 ; -- j ) { if ( tmp % 2 == 1 ) { mp [ i ][ j ] = mp [ i ][ j ] == '1' ? '0' : '1' ; } if ( mp [ i ][ j ] == '1' ) { flag ++ ; tmp ++ ; } } } if ( tmp % 2 == 0 ) puts ( \"aoligei\" ); else puts ( \"call\" ); } return 0 ; } G. \u706b\u5c71\u54e5\u5468\u6e38\u4e16\u754c Link Code #include <bits/stdc++.h> using namespace std ; const int N = 500010 ; typedef long long LL ; int n , k ; struct edge { int b , nt ; LL w ; } e [ N * 2 ]; int p [ N ], nn ; void anode ( int x , int y , int z ){ nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; e [ nn ]. w = z ; swap ( x , y ); nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; e [ nn ]. w = z ; } LL d [ N ]; int flag [ N ]; LL ans [ N ]; void dfs ( int x , int fa = 0 ){ for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa ) continue ; dfs ( t , x ); if ( flag [ t ]){ d [ x ] = max ( d [ x ], d [ t ] + e [ i ]. w ); flag [ x ] = 1 ; ans [ 0 ] += e [ i ]. w * 2 ; } } } void dfs2 ( int x , LL ex = 0 , LL fm = 0 , int fa = 0 ){ ans [ x ] = ex + ans [ 0 ] - max ( fm , d [ x ]); LL mf =- 1 , mx = 0 , cmx = 0 , cmf =- 1 ; for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa ||! flag [ t ]) continue ; if ( d [ t ] + e [ i ]. w > mx ){ cmx = mx ; cmf = mf ; mx = d [ t ] + e [ i ]. w ; mf = t ; } else if ( d [ t ] + e [ i ]. w > cmx ){ cmx = d [ t ] + e [ i ]. w ; cmf = t ; } } for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa ) continue ; if ( t == mf ){ LL tfm = max ( fm , cmx ) + e [ i ]. w ; dfs2 ( t , ex , tfm , x ); } else { LL tfm = max ( fm , mx ) + e [ i ]. w ; if ( ! flag [ t ]) dfs2 ( t , ex + 2 * e [ i ]. w , tfm , x ); else dfs2 ( t , ex , tfm , x ); } } } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i < n ; i ++ ){ int aa , bb , cc ; scanf ( \"%d%d%d\" , & aa , & bb , & cc ); anode ( aa , bb , cc ); } for ( int i = 1 ; i <= k ; i ++ ){ int aa ; scanf ( \"%d\" , & aa ); flag [ aa ] = 1 ; } dfs ( 1 ); dfs2 ( 1 ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%lld \\n \" , ans [ i ]); return 0 ; }","title":"Day3"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day3/#_1","text":"\u4e13\u533a Div1\uff0c\u8bb2\u4e86\u4e9b\u5f88 np \u7684\u56fe\u8bba\u6211\u51c6\u5907\u4ee5\u540e\u8865\u4e00\u8865\uff0c\u603b\u4e4b\u4e00\u4e2a\u90fd\u4e0d\u4f1a circle-square tree \u5f26\u56fe \u70b9\u53cc\u8054\u901a km \u4e0a\u4e0b\u754c\u8d39\u7528\u6d41 \u6700\u5927\u6d41 \u6700\u5c0f\u5272 \u7ade\u8d5b\u56fe \u5b8c\u7f8e\u6d88\u9664\u5e8f\u5217 \u4e09\uff08\u56db\uff09\u5143\u73af\u8ba1\u6570 gomory-hu tree meet-in-middle \u7136\u540e\u626f\u4e86\u5f88\u4e45\u7684\u6253\u6bd4\u8d5b\u65b9\u6cd5\u548c\u961f\u4f0d\u95f4\u65b9\u6cd5\uff0c\u5b66\u5230\u5f88\u591a \u6211\u51b3\u5b9a\u4e4b\u540e\u8ddf\u961f\u53cb\u591a battle \u7b7e\u5230\u901f\u5ea6\u8bf7\u559d\u5976\u8336","title":"\u65e9\u4e0a\u8bb2\u8bfe"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day3/#_2","text":"Name Date Solved A B C D E F G H I J 2020 CCPC Wannafly Winter Camp Day3 (Div.1&2) 2020/1/13 4/10 O . O . O . O . . . \u603b\u4e4b\u6709\u70b9\u96be\u9876\uff0c\u611f\u89c9\u9898\u76ee\u753b\u98ce\u7a81\u53d8\uff0c\u88ab\u6570\u8bba\u9898\u641e\u9ebb\u4e86\uff0c\u7b7e\u5b8c\u5230\u6bcf\u9898\u505a\u4e86\uff0c\u53c8\u4e0d\u4f1a\u53cd\u6f14\u5c31\u6b47\u903c\u4e86\u3002\u7136\u540e rank 21\uff0c\u7b2c\u4e00\u6b21\u51fa 20 \u540d","title":"\u4e0b\u5348\u6bd4\u8d5b"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day3/#to-do-list","text":"A\\G","title":"To-do list"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day3/#a","text":"Code #include <bits/stdc++.h> using namespace std ; const int N = 2010 ; typedef long long LL ; int n , m ; int f [ N ][ N ]; int a [ N ]; int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & f [ i ][ j ]); } if ( n == 2 ){ printf ( \"1 1\" ); return 0 ; } for ( int i = 2 ; i < n ; i ++ ) a [ i + 1 ] = f [ 1 ][ i + 1 ] - f [ 1 ][ i ]; int t = a [ 3 ], s = f [ 2 ][ 3 ]; a [ 2 ] = ( s - t ) / 2 ; a [ 1 ] = f [ 1 ][ 2 ] - a [ 2 ]; for ( int i = 3 ; i <= n ; i ++ ) a [ i ] += a [ i - 1 ]; for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d%c\" , a [ i ],( i == n ) ? '\\n' : ' ' ); return 0 ; }","title":"A. \u9ed1\u8272\u6c14\u7403"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day3/#c","text":"\u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u7ed9\u6bcf\u4e2a\u70b9\u5b9a\u5411\u4f7f\u5f97\u5176\u6210\u4e3a\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe(DAG)\uff0c\u6c42\u6700\u77ed\u7684\u6700\u957f\u8def\u5f84 \u6211\u7684\u505a\u6cd5\u662f\u968f\u673a\u5bf9\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u6240\u6709\u8fb9\u6309\u70b9\u5927\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21\u7ebf\u6027 dp \u6c42\u51fa\u6700\u5927\u503c\uff0c\u53d6\u5176\u6700\u5c0f\u503c\u5373\u53ef \u5f53\u7136\u6b63\u89e3\u53ef\u4ee5\u72b6\u538b\u4f18\u5316\u56fe\u7684\u67d3\u8272 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 20 ; vector < int > G [ maxn ]; int a [ maxn ]; int n ; int dp [ maxn ]; int main () { int m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; ++ i ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); u -- , v -- ; G [ u ]. push_back ( v ); G [ v ]. push_back ( u ); } if ( n == 1 ) printf ( \"0 \\n \" ); else { for ( int i = 0 ; i < n ; ++ i ) a [ i ] = i ; int res = m ; for ( int i = 0 ; i < 100000 ; ++ i ) { random_shuffle ( a , a + n ); for ( int i = 0 ; i < n ; ++ i ) dp [ i ] = 0 ; int now = 0 ; for ( int i = 0 ; i < n ; ++ i ) { for ( auto v : G [ a [ i ]]) { dp [ v ] = max ( dp [ v ], dp [ a [ i ]] + 1 ); now = max ( now , dp [ v ]); } } res = min ( res , now ); } printf ( \"%d \\n \" , res - 1 ); } return 0 ; }","title":"C. \u65e0\u5411\u56fe\u5b9a\u5411"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day3/#e","text":"\u7ed9\u51fa\u4e00\u4e2a\u4e8c\u4f4d 01 \u77e9\u9635\uff0c\u4e24\u4eba\u535a\u5f08\u6bcf\u6b21\u9009\u53d6\u4e00\u4e2a\u9ed1\u5757\u4f7f\u5f97\u5305\u542b\u8be5\u9ed1\u5757\u6240\u6709\u5de6\u4e0a\u7684\u70b9\u53d6\u53cd\uff0c\u6ca1\u6709\u9ed1\u5757\u65f6\u5f53\u524d\u9009\u624b\u5931\u8d25\uff0c\u4e24\u4eba\u90fd\u60f3\u8ba9\u5148\u624b\u83b7\u80dc \u5176\u5b9e\u5206\u6790\u4e00\u4e0b\u53d1\u73b0\u600e\u4e48\u53d6\u80dc\u8d1f\u90fd\u662f\u786e\u5b9a\u7684\uff0c\u53ea\u9700\u8981\u4ece\u540e\u5f80\u524d\u628a\u60c5\u51b5\u679a\u4e3e\u4e00\u6b21\u5373\u53ef Code /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/1/14 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 505 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; char mp [ maxn ][ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%s\" , mp [ i ] + 1 ); } int flag = 0 ; int tmp = 0 ; for ( int i = n ; i >= 1 ; -- i ) { for ( int j = m ; j >= 1 ; -- j ) { if ( tmp % 2 == 1 ) { mp [ i ][ j ] = mp [ i ][ j ] == '1' ? '0' : '1' ; } if ( mp [ i ][ j ] == '1' ) { flag ++ ; tmp ++ ; } } } if ( tmp % 2 == 0 ) puts ( \"aoligei\" ); else puts ( \"call\" ); } return 0 ; }","title":"E. \u68cb\u6280\u54e5"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day3/#g","text":"Code #include <bits/stdc++.h> using namespace std ; const int N = 500010 ; typedef long long LL ; int n , k ; struct edge { int b , nt ; LL w ; } e [ N * 2 ]; int p [ N ], nn ; void anode ( int x , int y , int z ){ nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; e [ nn ]. w = z ; swap ( x , y ); nn ++ ; e [ nn ]. b = y ; e [ nn ]. nt = p [ x ]; p [ x ] = nn ; e [ nn ]. w = z ; } LL d [ N ]; int flag [ N ]; LL ans [ N ]; void dfs ( int x , int fa = 0 ){ for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa ) continue ; dfs ( t , x ); if ( flag [ t ]){ d [ x ] = max ( d [ x ], d [ t ] + e [ i ]. w ); flag [ x ] = 1 ; ans [ 0 ] += e [ i ]. w * 2 ; } } } void dfs2 ( int x , LL ex = 0 , LL fm = 0 , int fa = 0 ){ ans [ x ] = ex + ans [ 0 ] - max ( fm , d [ x ]); LL mf =- 1 , mx = 0 , cmx = 0 , cmf =- 1 ; for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa ||! flag [ t ]) continue ; if ( d [ t ] + e [ i ]. w > mx ){ cmx = mx ; cmf = mf ; mx = d [ t ] + e [ i ]. w ; mf = t ; } else if ( d [ t ] + e [ i ]. w > cmx ){ cmx = d [ t ] + e [ i ]. w ; cmf = t ; } } for ( int i = p [ x ]; i ; i = e [ i ]. nt ){ int t = e [ i ]. b ; if ( t == fa ) continue ; if ( t == mf ){ LL tfm = max ( fm , cmx ) + e [ i ]. w ; dfs2 ( t , ex , tfm , x ); } else { LL tfm = max ( fm , mx ) + e [ i ]. w ; if ( ! flag [ t ]) dfs2 ( t , ex + 2 * e [ i ]. w , tfm , x ); else dfs2 ( t , ex , tfm , x ); } } } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i < n ; i ++ ){ int aa , bb , cc ; scanf ( \"%d%d%d\" , & aa , & bb , & cc ); anode ( aa , bb , cc ); } for ( int i = 1 ; i <= k ; i ++ ){ int aa ; scanf ( \"%d\" , & aa ); flag [ aa ] = 1 ; } dfs ( 1 ); dfs2 ( 1 ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%lld \\n \" , ans [ i ]); return 0 ; }","title":"G. \u706b\u5c71\u54e5\u5468\u6e38\u4e16\u754c"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day5/","text":"\u4e0a\u5348\u8bb2\u8bfe Link \u6765\u81ea\u5206\u5757\u7237 nzhtl1477 \u7684\u4e09\u767e\u9875\u5206\u5757 ppt \u628a\u4eba\u90fd\u8bb2\u6655\u4e86 \u4e0b\u5348\u6bd4\u8d5b Link \u603b\u4e4b\u8d8a\u6253\u8d8a\u83dc\uff0c\u6765\u81ea dls \u7684\u8ff7\u60d1\u9898\u76ee Name Date Solved A B C D E F G H I J 2020 CCPC Wannafly Winter Camp Day5 (Div.1&2) 2020/1/16 4/10 O . . . O . O . . O To-do list Link G\\J\\I A. Alternative Accounts Link \u6709\u81f3\u591a\u4e09\u573a\u6bd4\u8d5b\uff0cn \u4e2a\u8d26\u53f7\uff0c\u4e00\u4e2a\u4eba\u53ef\u80fd\u6709\u591a\u4e2a\u8d26\u53f7\uff0c\u4f46\u662f\u4e00\u4e2a\u4eba\u5728\u4e00\u573a\u6bd4\u8d5b\u4e2d\u6700\u591a\u4f7f\u7528\u4e00\u4e2a\u8d26\u53f7\uff0c\u6c42\u6700\u5c11\u7684\u4eba\u6570 \u9996\u5148\u6709 8 \u79cd\u8d26\u53f7\uff0c\u6309\u7167\u4e09\u573a\u6bd4\u8d5b\u6765\u8fdb\u884c\u4e8c\u8fdb\u5236\u538b\u4f4d\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u6309\u4f4d\u4e0e\u4e3a 0 \u7684\u8d26\u53f7\u90fd\u53ef\u80fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\uff0c\u53e6\u5916\u53ef\u4ee5\u5206\u6790\u51fa\u5982\u679c x \u4e2a\u8d26\u53f7\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\uff0c\u90a3\u4e48\u603b\u91cf\u5c06\u51cf\u5c11 x - 1\uff0c\u6240\u4ee5\u5bf9\u4efb\u610f\u8d26\u53f7\u5176\u5b9e\u53ea\u8981\u627e\u51fa\u53ef\u884c\u5bf9\u80fd\u8ba9\u5b83\u51cf\u5c11\uff0c\u672c\u8eab\u5e76\u4e0d\u5e26\u6743\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u5b58\u5728\u4f18\u5148\u6027\u95ee\u9898\u3002\u6240\u4ee5\u8003\u8651\u8d2a\u5fc3\u7684\u51cf\u6389\u6240\u6709\u7684\u8fb9\u5373\u53ef\u3002\u987a\u5e8f\u5148\u662f\u51cf\u53bb\u5185\u90e8\u4e09\u5143\u73af\uff0c\u518d\u51cf\u53bb\u4e00\u5bf9\u4e8c\u7684\u8fb9\uff0c\u6700\u540e\u51cf\u53bb\u5185\u90e8\u8fb9\u5373\u53ef\u5b8c\u5168\u51cf\u6389\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; int a [ maxn ], s [ 10 ]; int main () { int n , k ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < k ; i ++ ) { int t , x ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d\" , & x ); a [ x ] |= ( 1 << i ); } } for ( int i = 1 ; i <= n ; i ++ ) s [ a [ i ]] ++ ; int res = n ; res -= s [ 0 ]; for ( int i = 1 ; i <= 4 ; i *= 2 ) { int x = i , y = 7 ^ i ; int tmp = min ( s [ x ], s [ y ]); res -= tmp ; s [ x ] -= tmp , s [ y ] -= tmp ; } int tmp = min ({ s [ 1 ], s [ 2 ], s [ 4 ]}); res -= 2 * tmp ; s [ 1 ] -= tmp , s [ 2 ] -= tmp , s [ 4 ] -= tmp ; for ( int i = 1 ; i <= 4 ; i *= 2 ) { for ( int j = i * 2 ; j <= 4 ; j *= 2 ) { int tmp = min ( s [ i ], s [ j ]); res -= tmp ; s [ i ] -= tmp , s [ j ] -= tmp ; } } printf ( \"%d \\n \" , res ); return 0 ; } E. Matching Problem Link \u7ed9 a\uff0cb \u4e24\u4e2a\u5e8f\u5217\uff0cb \u5e8f\u5217\u957f\u5ea6\u4e3a 4\uff0c\u6c42 a \u7684\u5b50\u5e8f\u5217\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u548c b \u7684\u6bcf\u4e2a\u7b49\u4e8e\u3001\u4e0d\u7b49\u5173\u7cfb\u4e00\u6837 \u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff0c\u4ee3\u7801\u6709\u70b9\u957f Code #include <bits/stdc++.h> using namespace std ; const int N = 310 ; typedef long long LL ; int n , m ; int a [ N ], b [ N ]; int hx [ N ], hy [ N ]; map < int , int > mp ; int tt ; int findf ( int x ){ int l = 1 , r = hy [ 0 ]; while ( l <= r ){ int mid = l + r >> 1 ; if ( hy [ mid ] > x ) r = mid - 1 ; else if ( hy [ mid ] < x ) l = mid + 1 ; else return mid ; } } LL cnt [ N ], sum [ N ], cnt2 [ N ], cnt3 [ N ]; int judge (){ for ( int i = 1 ; i <= 4 ; i ++ ) cnt [ b [ i ]] ++ ; LL mx = 0 ; for ( int i = 1 ; i <= 4 ; i ++ ) mx = max ( mx , cnt [ i ]); for ( int i = 1 ; i <= 4 ; i ++ ) cnt [ i ] = 0 ; return mx ; } void solve1 (){ for ( int i = 1 ; i <= n ; i ++ ) cnt [ a [ i ]] ++ ; LL ans = 0 ; m = hy [ 0 ]; for ( int i = 1 ; i <= m ; i ++ ) sum [ i ] = cnt [ i ] + sum [ i - 1 ]; for ( int i = 1 ; i <= m ; i ++ ){ for ( int j = i + 1 ; j <= m ; j ++ ){ for ( int k = j + 1 ; k <= m ; k ++ ){ ans += cnt [ i ] * cnt [ j ] * cnt [ k ] * ( sum [ m ] - sum [ k ]); } } } printf ( \"%lld \\n \" , ans ); } void solve2 (){ int idxa =- 1 , idxb =- 1 , mx = 0 , mf ; m = hy [ 0 ]; for ( int i = 1 ; i <= 4 ; i ++ ){ cnt [ b [ i ]] ++ ; if ( cnt [ b [ i ]] > mx ){ mx = cnt [ b [ i ]]; mf = b [ i ]; } } for ( int i = 1 ; i <= 4 ; i ++ ) cnt [ b [ i ]] = 0 ; for ( int i = 1 ; i <= 4 ; i ++ ){ if ( b [ i ] == mf ) continue ; if ( idxa ==- 1 ) idxa = i ; else idxb = i ; } LL ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = i + 1 ; j <= n ; j ++ ){ if ( a [ i ] != a [ j ]) continue ; for ( int k = 1 ; k <= m ; k ++ ) cnt [ k ] = 0 ; for ( int k = 1 ; k <= m ; k ++ ) cnt2 [ k ] = 0 ; if ( idxb == idxa + 1 ){ if ( idxa == 1 ){ for ( int k = 1 ; k < i ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } else if ( idxa == 2 ){ for ( int k = i + 1 ; k < j ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } else { for ( int k = j + 1 ; k <= n ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } if ( b [ idxa ] == b [ idxb ]){ for ( int k = 1 ; k <= m ; k ++ ) if ( k != a [ i ]) ans += ( cnt [ k ] + cnt2 [ k ]) * ( cnt [ k ] + cnt2 [ k ] - 1 ) / 2 ; } else { LL sum1 = 0 , sum2 = 0 ; for ( int k = 1 ; k <= m ; k ++ ) if ( k != a [ i ]) sum1 += cnt [ k ]; for ( int k = 1 ; k <= m ; k ++ ) if ( k != a [ i ]) sum2 += ( sum1 - cnt [ k ]) * cnt [ k ]; ans += sum2 / 2 ; } } else { if ( idxa == 1 ){ for ( int k = 1 ; k < i ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } else if ( idxa == 2 ){ for ( int k = i + 1 ; k < j ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } if ( idxb == 3 ){ for ( int k = i + 1 ; k < j ; k ++ ) if ( a [ k ] != a [ i ]) cnt2 [ a [ k ]] ++ ; } else if ( idxb == 4 ){ for ( int k = j + 1 ; k <= n ; k ++ ) if ( a [ k ] != a [ i ]) cnt2 [ a [ k ]] ++ ; } if ( b [ idxa ] == b [ idxb ]){ for ( int k = 1 ; k <= m ; k ++ ){ if ( k != a [ i ]) ans += cnt [ k ] * cnt2 [ k ]; } } else { LL sum1 = 0 ; for ( int k = 1 ; k <= m ; k ++ ) if ( k != a [ i ]) sum1 += cnt2 [ k ]; for ( int k = 1 ; k <= m ; k ++ ){ ans += cnt [ k ] * ( sum1 - cnt2 [ k ]); } } } } } printf ( \"%lld \\n \" , ans ); } void solve3 (){ int idx =- 1 , mx = 0 , mf ; m = hy [ 0 ]; for ( int i = 1 ; i <= 4 ; i ++ ){ cnt [ b [ i ]] ++ ; if ( cnt [ b [ i ]] > mx ){ mx = cnt [ b [ i ]]; mf = b [ i ]; } } for ( int i = 1 ; i <= 4 ; i ++ ) cnt [ b [ i ]] = 0 ; for ( int i = 1 ; i <= 4 ; i ++ ){ if ( b [ i ] == mf ) continue ; idx = i ; break ; } LL ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = i + 1 ; j <= n ; j ++ ){ if ( a [ i ] != a [ j ]) continue ; LL sum1 = i - 1 , sum2 = j - i - 1 , sum3 = n - j ; for ( int k = 1 ; k <= m ; k ++ ) cnt [ k ] = cnt2 [ k ] = cnt3 [ k ] = 0 ; for ( int k = 1 ; k < i ; k ++ ) cnt [ a [ k ]] ++ ; for ( int k = i + 1 ; k < j ; k ++ ) cnt2 [ a [ k ]] ++ ; for ( int k = j + 1 ; k <= n ; k ++ ) cnt3 [ a [ k ]] ++ ; //aaab if ( idx == 4 ) ans += cnt [ a [ i ]] * ( sum3 - cnt3 [ a [ i ]]); //aaba if ( idx == 3 ) ans += cnt [ a [ i ]] * ( sum2 - cnt2 [ a [ i ]]); //abaa if ( idx == 2 ) ans += cnt3 [ a [ i ]] * ( sum2 - cnt2 [ a [ i ]]); //baaa if ( idx == 1 ) ans += ( sum1 - cnt [ a [ i ]]) * cnt3 [ a [ i ]]; } } printf ( \"%lld \\n \" , ans ); } void solve4 (){ for ( int i = 1 ; i <= n ; i ++ ) cnt [ a [ i ]] ++ ; LL ans = 0 ; m = hy [ 0 ]; for ( int i = 1 ; i <= m ; i ++ ) if ( cnt [ a [ i ]] >= 4 ) ans += ( cnt [ a [ i ]] * ( cnt [ a [ i ]] - 1 ) * ( cnt [ a [ i ]] - 2 ) * ( cnt [ a [ i ]] - 3 ) ) / 24 ; printf ( \"%lld \\n \" , ans ); } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]), hx [ ++ hx [ 0 ]] = a [ i ]; for ( int i = 1 ; i <= 4 ; i ++ ){ scanf ( \"%d\" , & b [ i ]); if ( ! mp [ b [ i ]]) mp [ b [ i ]] =++ tt ; b [ i ] = mp [ b [ i ]]; } sort ( hx + 1 , hx + 1 + hx [ 0 ]); hy [ ++ hy [ 0 ]] = hx [ 1 ]; for ( int i = 2 ; i <= hx [ 0 ]; i ++ ) if ( hx [ i ] != hx [ i - 1 ]) hy [ ++ hy [ 0 ]] = hx [ i ]; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = findf ( a [ i ]); int st = judge (); switch ( st ){ case 1 : solve1 (); return 0 ; case 2 : solve2 (); return 0 ; case 3 : solve3 (); return 0 ; case 4 : solve4 (); return 0 ; } return 0 ; } G. Cryptographically Secure Pseudorandom Number Generator Link Code #include <bits/stdc++.h> using namespace std ; const int N = 2000010 ; typedef long long LL ; int n , m ; LL p ; LL inv [ N ]; LL v [ N ], v2 [ N ]; int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); freopen ( \"out.txt\" , \"w\" , stdout ); #endif int T ; scanf ( \"%d\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & p ); LL mn = p + 1 ; n = 0 ; m = 0 ; inv [ 1 ] = 1 ; for ( int i = 2 , sz = min ( N ,( int ) p ); i < sz ; i ++ ){ inv [ i ] = ( p - p / i ) * inv [ p % i ] % p ; if ( inv [ i ] < mn ){ n ++ ; v [ n ] = i ; v2 [ n ] = inv [ i ]; mn = inv [ i ]; if ( i >= mn ) break ; } } m = n ; for ( int i = m - 2 ; i >= 1 ; i -- ){ n ++ ; v [ n ] = v2 [ i ]; v2 [ n ] = v [ i ]; } printf ( \"%d \\n \" , n ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%lld %lld \\n \" , v [ i ], v2 [ i ]); } return 0 ; } J. Xor on Figures Link Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int mod = 1e9 + 7 ; struct Base { #define TYPE bitset<1024> static const int len = 1024 ; bool rel ; int sz ; TYPE a [ len ]; TYPE & operator []( int x ) { return a [ x ]; } TYPE operator []( int x ) const { return a [ x ]; } void insert ( bitset < 1024 > t ) { for ( int i = len - 1 ; i >= 0 ; i -- ) { if ( ! ( t [ i ] == 1 )) continue ; if ( a [ i ]. count ()) t ^= a [ i ]; else { for ( int j = 0 ; j < i ; j ++ ) if ( t [ j ]) t ^= a [ j ]; for ( int j = i + 1 ; j < len ; j ++ ) if ( a [ j ][ i ] == 1 ) a [ j ] ^= t ; a [ i ] = t ; ++ sz ; return ; } } rel = true ; } } solve ; ll qp ( ll a , ll n ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } char s [ 50 ][ 50 ]; int main () { int k ; scanf ( \"%d\" , & k ); int n = 1 << k ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%s\" , s [ i ]); for ( int x = 0 ; x < n ; x ++ ) { for ( int y = 0 ; y < n ; y ++ ) { bitset < 1024 > tmp ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int dx = ( i + x ) % n , dy = ( j + y ) % n ; int id = dx * n + dy ; if ( s [ i ][ j ] == '1' ) tmp [ id ] = 1 ; } } solve . insert ( tmp ); } } printf ( \"%lld \\n \" , qp ( 2 , solve . sz )); return 0 ; }","title":"Day5"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day5/#_1","text":"\u6765\u81ea\u5206\u5757\u7237 nzhtl1477 \u7684\u4e09\u767e\u9875\u5206\u5757 ppt \u628a\u4eba\u90fd\u8bb2\u6655\u4e86","title":"\u4e0a\u5348\u8bb2\u8bfe"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day5/#_2","text":"\u603b\u4e4b\u8d8a\u6253\u8d8a\u83dc\uff0c\u6765\u81ea dls \u7684\u8ff7\u60d1\u9898\u76ee Name Date Solved A B C D E F G H I J 2020 CCPC Wannafly Winter Camp Day5 (Div.1&2) 2020/1/16 4/10 O . . . O . O . . O","title":"\u4e0b\u5348\u6bd4\u8d5b"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day5/#to-do-list","text":"G\\J\\I","title":"To-do list"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day5/#a-alternative-accounts","text":"\u6709\u81f3\u591a\u4e09\u573a\u6bd4\u8d5b\uff0cn \u4e2a\u8d26\u53f7\uff0c\u4e00\u4e2a\u4eba\u53ef\u80fd\u6709\u591a\u4e2a\u8d26\u53f7\uff0c\u4f46\u662f\u4e00\u4e2a\u4eba\u5728\u4e00\u573a\u6bd4\u8d5b\u4e2d\u6700\u591a\u4f7f\u7528\u4e00\u4e2a\u8d26\u53f7\uff0c\u6c42\u6700\u5c11\u7684\u4eba\u6570 \u9996\u5148\u6709 8 \u79cd\u8d26\u53f7\uff0c\u6309\u7167\u4e09\u573a\u6bd4\u8d5b\u6765\u8fdb\u884c\u4e8c\u8fdb\u5236\u538b\u4f4d\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u6309\u4f4d\u4e0e\u4e3a 0 \u7684\u8d26\u53f7\u90fd\u53ef\u80fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\uff0c\u53e6\u5916\u53ef\u4ee5\u5206\u6790\u51fa\u5982\u679c x \u4e2a\u8d26\u53f7\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\uff0c\u90a3\u4e48\u603b\u91cf\u5c06\u51cf\u5c11 x - 1\uff0c\u6240\u4ee5\u5bf9\u4efb\u610f\u8d26\u53f7\u5176\u5b9e\u53ea\u8981\u627e\u51fa\u53ef\u884c\u5bf9\u80fd\u8ba9\u5b83\u51cf\u5c11\uff0c\u672c\u8eab\u5e76\u4e0d\u5e26\u6743\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u5b58\u5728\u4f18\u5148\u6027\u95ee\u9898\u3002\u6240\u4ee5\u8003\u8651\u8d2a\u5fc3\u7684\u51cf\u6389\u6240\u6709\u7684\u8fb9\u5373\u53ef\u3002\u987a\u5e8f\u5148\u662f\u51cf\u53bb\u5185\u90e8\u4e09\u5143\u73af\uff0c\u518d\u51cf\u53bb\u4e00\u5bf9\u4e8c\u7684\u8fb9\uff0c\u6700\u540e\u51cf\u53bb\u5185\u90e8\u8fb9\u5373\u53ef\u5b8c\u5168\u51cf\u6389\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; int a [ maxn ], s [ 10 ]; int main () { int n , k ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < k ; i ++ ) { int t , x ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d\" , & x ); a [ x ] |= ( 1 << i ); } } for ( int i = 1 ; i <= n ; i ++ ) s [ a [ i ]] ++ ; int res = n ; res -= s [ 0 ]; for ( int i = 1 ; i <= 4 ; i *= 2 ) { int x = i , y = 7 ^ i ; int tmp = min ( s [ x ], s [ y ]); res -= tmp ; s [ x ] -= tmp , s [ y ] -= tmp ; } int tmp = min ({ s [ 1 ], s [ 2 ], s [ 4 ]}); res -= 2 * tmp ; s [ 1 ] -= tmp , s [ 2 ] -= tmp , s [ 4 ] -= tmp ; for ( int i = 1 ; i <= 4 ; i *= 2 ) { for ( int j = i * 2 ; j <= 4 ; j *= 2 ) { int tmp = min ( s [ i ], s [ j ]); res -= tmp ; s [ i ] -= tmp , s [ j ] -= tmp ; } } printf ( \"%d \\n \" , res ); return 0 ; }","title":"A. Alternative Accounts"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day5/#e-matching-problem","text":"\u7ed9 a\uff0cb \u4e24\u4e2a\u5e8f\u5217\uff0cb \u5e8f\u5217\u957f\u5ea6\u4e3a 4\uff0c\u6c42 a \u7684\u5b50\u5e8f\u5217\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u548c b \u7684\u6bcf\u4e2a\u7b49\u4e8e\u3001\u4e0d\u7b49\u5173\u7cfb\u4e00\u6837 \u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff0c\u4ee3\u7801\u6709\u70b9\u957f Code #include <bits/stdc++.h> using namespace std ; const int N = 310 ; typedef long long LL ; int n , m ; int a [ N ], b [ N ]; int hx [ N ], hy [ N ]; map < int , int > mp ; int tt ; int findf ( int x ){ int l = 1 , r = hy [ 0 ]; while ( l <= r ){ int mid = l + r >> 1 ; if ( hy [ mid ] > x ) r = mid - 1 ; else if ( hy [ mid ] < x ) l = mid + 1 ; else return mid ; } } LL cnt [ N ], sum [ N ], cnt2 [ N ], cnt3 [ N ]; int judge (){ for ( int i = 1 ; i <= 4 ; i ++ ) cnt [ b [ i ]] ++ ; LL mx = 0 ; for ( int i = 1 ; i <= 4 ; i ++ ) mx = max ( mx , cnt [ i ]); for ( int i = 1 ; i <= 4 ; i ++ ) cnt [ i ] = 0 ; return mx ; } void solve1 (){ for ( int i = 1 ; i <= n ; i ++ ) cnt [ a [ i ]] ++ ; LL ans = 0 ; m = hy [ 0 ]; for ( int i = 1 ; i <= m ; i ++ ) sum [ i ] = cnt [ i ] + sum [ i - 1 ]; for ( int i = 1 ; i <= m ; i ++ ){ for ( int j = i + 1 ; j <= m ; j ++ ){ for ( int k = j + 1 ; k <= m ; k ++ ){ ans += cnt [ i ] * cnt [ j ] * cnt [ k ] * ( sum [ m ] - sum [ k ]); } } } printf ( \"%lld \\n \" , ans ); } void solve2 (){ int idxa =- 1 , idxb =- 1 , mx = 0 , mf ; m = hy [ 0 ]; for ( int i = 1 ; i <= 4 ; i ++ ){ cnt [ b [ i ]] ++ ; if ( cnt [ b [ i ]] > mx ){ mx = cnt [ b [ i ]]; mf = b [ i ]; } } for ( int i = 1 ; i <= 4 ; i ++ ) cnt [ b [ i ]] = 0 ; for ( int i = 1 ; i <= 4 ; i ++ ){ if ( b [ i ] == mf ) continue ; if ( idxa ==- 1 ) idxa = i ; else idxb = i ; } LL ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = i + 1 ; j <= n ; j ++ ){ if ( a [ i ] != a [ j ]) continue ; for ( int k = 1 ; k <= m ; k ++ ) cnt [ k ] = 0 ; for ( int k = 1 ; k <= m ; k ++ ) cnt2 [ k ] = 0 ; if ( idxb == idxa + 1 ){ if ( idxa == 1 ){ for ( int k = 1 ; k < i ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } else if ( idxa == 2 ){ for ( int k = i + 1 ; k < j ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } else { for ( int k = j + 1 ; k <= n ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } if ( b [ idxa ] == b [ idxb ]){ for ( int k = 1 ; k <= m ; k ++ ) if ( k != a [ i ]) ans += ( cnt [ k ] + cnt2 [ k ]) * ( cnt [ k ] + cnt2 [ k ] - 1 ) / 2 ; } else { LL sum1 = 0 , sum2 = 0 ; for ( int k = 1 ; k <= m ; k ++ ) if ( k != a [ i ]) sum1 += cnt [ k ]; for ( int k = 1 ; k <= m ; k ++ ) if ( k != a [ i ]) sum2 += ( sum1 - cnt [ k ]) * cnt [ k ]; ans += sum2 / 2 ; } } else { if ( idxa == 1 ){ for ( int k = 1 ; k < i ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } else if ( idxa == 2 ){ for ( int k = i + 1 ; k < j ; k ++ ) if ( a [ k ] != a [ i ]) cnt [ a [ k ]] ++ ; } if ( idxb == 3 ){ for ( int k = i + 1 ; k < j ; k ++ ) if ( a [ k ] != a [ i ]) cnt2 [ a [ k ]] ++ ; } else if ( idxb == 4 ){ for ( int k = j + 1 ; k <= n ; k ++ ) if ( a [ k ] != a [ i ]) cnt2 [ a [ k ]] ++ ; } if ( b [ idxa ] == b [ idxb ]){ for ( int k = 1 ; k <= m ; k ++ ){ if ( k != a [ i ]) ans += cnt [ k ] * cnt2 [ k ]; } } else { LL sum1 = 0 ; for ( int k = 1 ; k <= m ; k ++ ) if ( k != a [ i ]) sum1 += cnt2 [ k ]; for ( int k = 1 ; k <= m ; k ++ ){ ans += cnt [ k ] * ( sum1 - cnt2 [ k ]); } } } } } printf ( \"%lld \\n \" , ans ); } void solve3 (){ int idx =- 1 , mx = 0 , mf ; m = hy [ 0 ]; for ( int i = 1 ; i <= 4 ; i ++ ){ cnt [ b [ i ]] ++ ; if ( cnt [ b [ i ]] > mx ){ mx = cnt [ b [ i ]]; mf = b [ i ]; } } for ( int i = 1 ; i <= 4 ; i ++ ) cnt [ b [ i ]] = 0 ; for ( int i = 1 ; i <= 4 ; i ++ ){ if ( b [ i ] == mf ) continue ; idx = i ; break ; } LL ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = i + 1 ; j <= n ; j ++ ){ if ( a [ i ] != a [ j ]) continue ; LL sum1 = i - 1 , sum2 = j - i - 1 , sum3 = n - j ; for ( int k = 1 ; k <= m ; k ++ ) cnt [ k ] = cnt2 [ k ] = cnt3 [ k ] = 0 ; for ( int k = 1 ; k < i ; k ++ ) cnt [ a [ k ]] ++ ; for ( int k = i + 1 ; k < j ; k ++ ) cnt2 [ a [ k ]] ++ ; for ( int k = j + 1 ; k <= n ; k ++ ) cnt3 [ a [ k ]] ++ ; //aaab if ( idx == 4 ) ans += cnt [ a [ i ]] * ( sum3 - cnt3 [ a [ i ]]); //aaba if ( idx == 3 ) ans += cnt [ a [ i ]] * ( sum2 - cnt2 [ a [ i ]]); //abaa if ( idx == 2 ) ans += cnt3 [ a [ i ]] * ( sum2 - cnt2 [ a [ i ]]); //baaa if ( idx == 1 ) ans += ( sum1 - cnt [ a [ i ]]) * cnt3 [ a [ i ]]; } } printf ( \"%lld \\n \" , ans ); } void solve4 (){ for ( int i = 1 ; i <= n ; i ++ ) cnt [ a [ i ]] ++ ; LL ans = 0 ; m = hy [ 0 ]; for ( int i = 1 ; i <= m ; i ++ ) if ( cnt [ a [ i ]] >= 4 ) ans += ( cnt [ a [ i ]] * ( cnt [ a [ i ]] - 1 ) * ( cnt [ a [ i ]] - 2 ) * ( cnt [ a [ i ]] - 3 ) ) / 24 ; printf ( \"%lld \\n \" , ans ); } int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); #endif scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]), hx [ ++ hx [ 0 ]] = a [ i ]; for ( int i = 1 ; i <= 4 ; i ++ ){ scanf ( \"%d\" , & b [ i ]); if ( ! mp [ b [ i ]]) mp [ b [ i ]] =++ tt ; b [ i ] = mp [ b [ i ]]; } sort ( hx + 1 , hx + 1 + hx [ 0 ]); hy [ ++ hy [ 0 ]] = hx [ 1 ]; for ( int i = 2 ; i <= hx [ 0 ]; i ++ ) if ( hx [ i ] != hx [ i - 1 ]) hy [ ++ hy [ 0 ]] = hx [ i ]; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = findf ( a [ i ]); int st = judge (); switch ( st ){ case 1 : solve1 (); return 0 ; case 2 : solve2 (); return 0 ; case 3 : solve3 (); return 0 ; case 4 : solve4 (); return 0 ; } return 0 ; }","title":"E. Matching Problem"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day5/#g-cryptographically-secure-pseudorandom-number-generator","text":"Code #include <bits/stdc++.h> using namespace std ; const int N = 2000010 ; typedef long long LL ; int n , m ; LL p ; LL inv [ N ]; LL v [ N ], v2 [ N ]; int main (){ #ifdef WK freopen ( \"in.txt\" , \"r\" , stdin ); freopen ( \"out.txt\" , \"w\" , stdout ); #endif int T ; scanf ( \"%d\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & p ); LL mn = p + 1 ; n = 0 ; m = 0 ; inv [ 1 ] = 1 ; for ( int i = 2 , sz = min ( N ,( int ) p ); i < sz ; i ++ ){ inv [ i ] = ( p - p / i ) * inv [ p % i ] % p ; if ( inv [ i ] < mn ){ n ++ ; v [ n ] = i ; v2 [ n ] = inv [ i ]; mn = inv [ i ]; if ( i >= mn ) break ; } } m = n ; for ( int i = m - 2 ; i >= 1 ; i -- ){ n ++ ; v [ n ] = v2 [ i ]; v2 [ n ] = v [ i ]; } printf ( \"%d \\n \" , n ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%lld %lld \\n \" , v [ i ], v2 [ i ]); } return 0 ; }","title":"G. Cryptographically Secure Pseudorandom Number Generator"},{"location":"Training%20Logs/2020%20Wannafly%20Winter%20Camp/day5/#j-xor-on-figures","text":"Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int mod = 1e9 + 7 ; struct Base { #define TYPE bitset<1024> static const int len = 1024 ; bool rel ; int sz ; TYPE a [ len ]; TYPE & operator []( int x ) { return a [ x ]; } TYPE operator []( int x ) const { return a [ x ]; } void insert ( bitset < 1024 > t ) { for ( int i = len - 1 ; i >= 0 ; i -- ) { if ( ! ( t [ i ] == 1 )) continue ; if ( a [ i ]. count ()) t ^= a [ i ]; else { for ( int j = 0 ; j < i ; j ++ ) if ( t [ j ]) t ^= a [ j ]; for ( int j = i + 1 ; j < len ; j ++ ) if ( a [ j ][ i ] == 1 ) a [ j ] ^= t ; a [ i ] = t ; ++ sz ; return ; } } rel = true ; } } solve ; ll qp ( ll a , ll n ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } char s [ 50 ][ 50 ]; int main () { int k ; scanf ( \"%d\" , & k ); int n = 1 << k ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%s\" , s [ i ]); for ( int x = 0 ; x < n ; x ++ ) { for ( int y = 0 ; y < n ; y ++ ) { bitset < 1024 > tmp ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int dx = ( i + x ) % n , dy = ( j + y ) % n ; int id = dx * n + dy ; if ( s [ i ][ j ] == '1' ) tmp [ id ] = 1 ; } } solve . insert ( tmp ); } } printf ( \"%lld \\n \" , qp ( 2 , solve . sz )); return 0 ; }","title":"J. Xor on Figures"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/","text":"Name Date Solved A B C D E F G H I J 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2020/7/12 6/10 O \u00d8 . . . O . \u00d8 \u00d8 O A. B-Suffix Array Link solved by: Verly 03:25:17(-8) upsolved by: \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5168\u4e3aab\u7684\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u5176\u4e2d\u4efb\u4e00\u540e\u7f00\uff0c\u7b2ci\u4f4d\u7684\u503c\u4e3ai\u5230\u524d\u4e00\u4e2a\u76f8\u540c\u5b57\u7b26\u7684\u8ddd\u79bb\uff08\u5982\u679cs[i]\u7b2c\u4e00\u6b21\u51fa\u73b0\uff0c\u503c\u4e3a0\uff09\uff0c\u5bf9\u540e\u7f00\u8d4b\u7684\u503c\u6392\u5e8f\u3002 \u5bf9\u4e8e\u67d0\u4e00\u4e2a\u540e\u7f00\u4e32s\u2018\uff0c\u53ef\u4ee5\u5c06\u5176\u5206\u4e3a a[*a]b|xxxx \u6216 b[*b]a|xxxx ,\u5bf9\u4e8e\u957f\u5ea6\u4e3alen\u7684\u7b2c\u4e00\u6bb5\uff0c\u5176\u503c\u4e3a 0[(len-2)*1]0 + sa[pos+len] \uff0c\u5bf9\u4e8e\u6bcf\u79cd\u957f\u5ea6\u7684len\uff0c\u5bf9 sa[pos+len] \u6392\u5e8f\uff0c\u6309len\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 3e5 + 10 ; int s [ maxn ]; char b [ maxn ]; int sa [ maxn ], t [ maxn ], t2 [ maxn ], c [ maxn ], n ; //build_sa(n + 1, 130), sa, height\u4e0b\u6807\u4ece1\u5f00\u59cb,rk\u4e0b\u6807\u4ece0\u5f00\u59cb void build_sa ( int n , int m ) { int * x = t , * y = t2 ; for ( int i = 0 ; i < m ; i ++ ) c [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) c [ x [ i ] = s [ i ]] ++ ; for ( int i = 1 ; i < m ; i ++ ) c [ i ] += c [ i - 1 ]; for ( int i = n - 1 ; i >= 0 ; i -- ) sa [ -- c [ x [ i ]]] = i ; for ( int k = 1 ; k <= n ; k <<= 1 ) { int p = 0 ; for ( int i = n - k ; i < n ; i ++ ) y [ p ++ ] = i ; for ( int i = 0 ; i < n ; i ++ ) if ( sa [ i ] >= k ) y [ p ++ ] = sa [ i ] - k ; for ( int i = 0 ; i < m ; i ++ ) c [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) c [ x [ y [ i ]]] ++ ; for ( int i = 0 ; i < m ; i ++ ) c [ i ] += c [ i - 1 ]; for ( int i = n - 1 ; i >= 0 ; i -- ) sa [ -- c [ x [ y [ i ]]]] = y [ i ]; swap ( x , y ); p = 1 ; x [ sa [ 0 ]] = 0 ; for ( int i = 1 ; i < n ; i ++ ) x [ sa [ i ]] = y [ sa [ i - 1 ]] == y [ sa [ i ]] && y [ sa [ i - 1 ] + k ] == y [ sa [ i ] + k ] ? p - 1 : p ++ ; if ( p >= n ) break ; m = p ; } } int rk [ maxn ]; void getHeight () { for ( int i = 1 ; i <= n ; i ++ ) rk [ sa [ i ]] = i ; } int nex [ maxn ]; vector < pair < int , int >> resp [ maxn ]; int resq [ maxn ]; int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { scanf ( \"%s\" , b ); for ( int i = 0 ; i <= n ; i ++ ) resp [ i ]. clear (), resq [ i ] = - 1 , nex [ i ] = 0 ; s [ n ] = s [ n + 1 ] = 0 ; int lasa = - 1 , lasb = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 'a' ) { if ( lasa == - 1 ) s [ i ] = 50 ; else s [ i ] = i - lasa + 50 ; lasa = i ; } else if ( b [ i ] == 'b' ) { if ( lasb == - 1 ) s [ i ] = 50 ; else s [ i ] = i - lasb + 50 ; lasb = i ; } } lasa = - 1 , lasb = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( b [ i ] == 'a' ) { nex [ i ] = lasb ; lasa = i ; } else if ( b [ i ] == 'b' ) { nex [ i ] = lasa ; lasb = i ; } } build_sa ( n + 1 , n + 55 ); for ( int i = 0 ; i <= n + 1 ; ++ i ) rk [ i ] = 0 ; getHeight (); for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( nex [ i ] == - 1 ) resq [ n - i ] = i ; else { int len = nex [ i ] - i + 1 ; resp [ len ]. push_back ({ rk [ nex [ i ] + 1 ], i }); } } for ( int i = 0 ; i <= n ; i ++ ) sort ( resp [ i ]. begin (), resp [ i ]. end ()); printf ( \"%d\" , n ); for ( int i = 0 ; i <= n ; i ++ ) { for ( auto x : resp [ i ]) printf ( \" %d\" , x . second + 1 ); if ( resq [ i ] != - 1 ) printf ( \" %d\" , resq [ i ] + 1 ); } puts ( \"\" ); } return 0 ; } B. Infinite Tree Link upsolved by: badcw \u4e00\u5f20\u65e0\u9650\u56fe\uff08\u6811\uff09\uff0c\u5176\u4e2d\u6bcf\u4e2a\u70b9 x x \u90fd\u4e0e x/mindiv(x) x/mindiv(x) \u76f8\u8fde\uff0c mindiv \u662f x \u6700\u5c0f\u975e\u4e00\u56e0\u5b50\u3002 \u73b0\u5728 1~n \u7684\u9636\u4e58\u8fd9 n \u4e2a\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u7ed9\u51fa\u5173\u952e\u70b9\u7684\u70b9\u6743\uff0c\u8981\u6c42\u627e\u5230\u4e00\u4e2a\u70b9\u5230\u6240\u6709\u70b9\u7684\u70b9\u6743\u8fb9\u957f\u79ef\u7684\u548c\u6700\u5c0f\u3002 \u9996\u5148\uff0c\u6700\u5c0f\u975e\u4e00\u56e0\u5b50\u4e00\u5b9a\u662f\u7d20\u6570\u3002\u6240\u6709\u7d20\u6570\u90fd\u5c06\u548c 1 \u8fde\u8fb9\uff0c\u8003\u8651\u5c06 1 \u770b\u4f5c\u6839\u8282\u70b9\u3002\u90a3\u4e48 x! \u7684\u5c42\u6570\u4e00\u5b9a\u662f (x-1)! \u7684\u5c42\u6570\u52a0\u4e0a x \u7684\u5b8c\u5168\u5206\u89e3\u7684\u4e2a\u6570\u3002 \u8003\u8651\u628a\u865a\u6811\u5efa\u51fa\u6765\uff0c\u7531\u4e8e\u5173\u952e\u70b9\u7684\u5c42\u6570\u4e00\u5b9a\u662f\u9012\u589e\u7684\uff0c\u8003\u8651\u5982\u4f55\u6c42\u51fa x! \u548c (x-1)! \u7684 lca\uff0c\u8bbe x=p1^{x1}*p2^{x2}*\\dots pn^{xn} x=p1^{x1}*p2^{x2}*\\dots pn^{xn} \uff0c\u5219\u4e00\u5b9a\u4f1a\u5728 pn^xx * p.... pn^xx * p.... \u76f8\u9047\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f (x-1)! \u4e2d\u5927\u4e8e\u7b49\u4e8e x \u6700\u5927\u7684\u7d20\u56e0\u5b50\u7684\u90e8\u5206\u3002 \u7528\u67d0\u79cd\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7d20\u56e0\u5b50\u7684\u524d\u7f00\u548c\uff0c\u7528\u6765\u5904\u7406\u5c42\u6570\u5373\u53ef\u76f4\u63a5\u66b4\u529b\u5efa\u51fa\u865a\u6811\u3002 \u6709\u4e86\u865a\u6811\u76f4\u63a5\u6362\u6839dp\u5c31\u53ef\u4ee5\u6c42\u51fa\u6700\u5c0f\u503c\u3002 f_u f_u \u8868\u793a\u4ee5 u u \u4e3a\u6839\u7684\u7b54\u6848\uff0c g_u g_u \u8868\u793a u u \u5b50\u6811\u5185\u7684\u6743\u503c\u548c\u3002 g_u=\\sum g_v g_u=\\sum g_v f_u=\\sum f_v + w * g_v f_u=\\sum f_v + w * g_v \u5373\u53ef\uff0c\u6362\u6839\u5f88\u7b80\u5355\u5c31\u4e0d\u5199\u4e86\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/16 21:44 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } vector < int > p [ maxn ]; vector < pair < int , int > > edge [ maxn ]; ll f [ maxn ], g [ maxn ]; int w [ maxn ], pos [ maxn ]; int pre [ maxn ], mx ; void add ( int pos , int k ) { while ( pos <= mx ) { pre [ pos ] += k ; pos += pos & - pos ; } } int query ( int pos ) { int res = 0 ; while ( pos > 0 ) { res += pre [ pos ]; pos -= pos & - pos ; } return res ; } void dfs ( int u ) { for ( auto v : edge [ u ]) { dfs ( v . first ); g [ u ] += g [ v . first ]; f [ u ] += f [ v . first ] + v . second * g [ v . first ]; } } ll res ; void dfs2 ( int u ) { res = min ( res , f [ u ]); for ( auto v : edge [ u ]) { g [ u ] -= g [ v . first ]; f [ u ] -= f [ v . first ] + v . second * g [ v . first ]; g [ v . first ] += g [ u ]; f [ v . first ] += f [ u ] + v . second * g [ u ]; dfs2 ( v . first ); g [ v . first ] -= g [ u ]; f [ v . first ] -= f [ u ] + v . second * g [ u ]; g [ u ] += g [ v . first ]; f [ u ] += f [ v . first ] + v . second * g [ v . first ]; } } int main ( int argc , char * argv []) { for ( int i = 2 ; i <= 1e5 ; ++ i ) { int x = i ; for ( int j = 2 ; j * j <= i ; ++ j ) { while ( x % j == 0 ) { p [ i ]. push_back ( j ); x /= j ; } } if ( x > 1 ) p [ i ]. push_back ( x ); } int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { int tot = 0 , now = 0 ; mx = n ; for ( int i = 1 ; i <= n ; ++ i ) R ( w [ i ]); stack < pair < int , int > > st ; st . push ({ 1 , 0 }); g [ pos [ 1 ] = ++ now ] = w [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { int lca = tot - query ( p [ i ]. back () - 1 ); g [ pos [ i ] = ++ now ] = w [ i ]; while ( st . size () > 1 ) { auto y = st . top (); if ( y . second == lca ) break ; st . pop (); auto x = st . top (); if ( x . second >= lca ) { // cerr << \"add \" << x.first << \" \" << y.first << endl; edge [ x . first ]. push_back ({ y . first , y . second - x . second }); } else { st . push ({ ++ now , lca }); // cerr << \"add \" << now << \" \" << y.first << endl; edge [ now ]. push_back ({ y . first , y . second - lca }); } } st . push ({ pos [ i ], tot + p [ i ]. size ()}); for ( auto j : p [ i ]) add ( j , 1 ), tot ++ ; } while ( st . size () > 1 ) { auto y = st . top (); st . pop (); auto x = st . top (); // cerr << \"add \" << x.first << \" \" << y.first << endl; edge [ x . first ]. push_back ({ y . first , y . second - x . second }); } dfs ( 1 ); res = f [ 1 ]; dfs2 ( 1 ); W ( res ); for ( int i = 0 ; i <= now ; ++ i ) { edge [ i ]. clear (); f [ i ] = g [ i ] = 0 ; } for ( int i = 0 ; i <= mx ; ++ i ) pre [ i ] = 0 ; } return 0 ; } F. Infinite String Comparision Link solved by: upsolved by: \u9898\u610f\uff1a\u7ed9\u4e24\u4e2a\u4e32\uff0c\u95ee\u65e0\u9650\u5faa\u73af\u7684\u4ed6\u4eec\u5b57\u5178\u5e8f\u5927\u5c0f \u628a\u957f\u7684\u5199\u4e24\u6b21\u90a3\u4e48\u957f\u4e00\u5b9a\u662f\u591f\u7684\uff1f\u4e0d\u4f1a\u8bc1\u660e\uff0c\u51ed\u76f4\u89c9 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/12 12:04 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } char a [ maxn ], b [ maxn ]; int main ( int argc , char * argv []) { while ( scanf ( \"%s%s\" , a , b ) != EOF ) { int len1 = strlen ( a ); int len2 = strlen ( b ); int need = max ( len1 , len2 ) * 2 ; for ( int i = len1 ; i < need ; ++ i ) { a [ i ] = a [ i % len1 ]; } for ( int i = len2 ; i < need ; ++ i ) { b [ i ] = b [ i % len2 ]; } int res = - 1 ; for ( int i = 0 ; i < need ; ++ i ) { if ( a [ i ] != b [ i ]) { res = a [ i ] > b [ i ]; break ; } } if ( res == - 1 ) W ( \"=\" ); else if ( res == 0 ) W ( \"<\" ); else W ( \">\" ); } return 0 ; } H. Minimum-cost Flow Link upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u7f51\u7edc\u6d41\u56fe\uff0cq\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u6bcf\u4e00\u6761\u8fb9 u/v \u7684\u6d41\u91cf\uff0c\u95ee1\u5230n\u6d411\u4e2a\u5355\u4f4d\u6d41\u91cf\u7684\u6700\u5c0f\u8d39\u7528\u3002 \u5bf9\u539f\u56fe\u8dd11\u5230n\u7684\u7f51\u7edc\u6d41\uff0c\u8003\u8651\u8d2a\u5fc3\uff0c\u6bcf\u6b21bellman-ford\u4ee3\u8868\u5f53\u524d\u6b8b\u91cf\u7f51\u7edc\u4ece1\u5230n\u6d411\u4e2a\u5355\u4f4d\u6240\u9700\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u7684\u6240\u9700\u6d41\u91cf\u53d6\u524d\u7f00\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; vector < int > ve ; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); ve . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; //\u6c42\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 //if(1ll * dis[t] * a[t] > 0) return false; \u6c42\u53ef\u884c\u6d41\u6700\u5c0f\u8d39\u7528\uff0c\u56e0\u6b64\u5f53\u8d39\u7528\u589e\u91cf\u5927\u4e8e0\u65f6\u4e0d\u7ee7\u7eed\u589e\u52a0\u6d41\u91cf flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } void mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )) { ve . push_back ( cost ); cost = 0 ; } } } ans ; int main () { int n , m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { int S = 1 , T = n ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); ans . addEdge ( u , v , 1 , w ); } ans . mincostMaxFlow ( S , T ); int q ; scanf ( \"%d\" , & q ); while ( q -- ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); ll resx = 0 , resy = v ; int tot = 0 ; for ( auto x : ans . ve ) { if ( tot == v ) break ; int now = min ( v - tot , u ); resx += 1ll * x * now ; tot += now ; } if ( tot < v ) puts ( \"NaN\" ); else { long long g = __gcd ( resx , resy ); printf ( \"%lld/%lld \\n \" , resx / g , resy / g ); } } } return 0 ; } I. 1 or 2 Link upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u4e00\u5f20n\u4e2a\u70b9m\u6761\u8fb9\u7684\u56fe (1\u2264n\u226450, 1\u2264m\u2264100) (1\u2264n\u226450, 1\u2264m\u2264100) \uff0c\u95ee\u662f\u5426\u5b58\u5728\u751f\u6210\u5b50\u56fe\uff0c\u6ee1\u8db3\u70b9i\u7684\u5ea6\u6570\u4e3a de[i](1\u2264d_i\u22642) de[i](1\u2264d_i\u22642) \u5bf9\u4e8e\u539f\u56fe\u7684\u70b9\u62c6\u70b9\u8868\u793a\u5ea6\u6570\uff0c\u5bf9\u8fde\u63a5 u\uff0cv \u7684\u8fb9\u62c6\u70b9 e,e' \uff0c\u8fde\u8fb9 u->e, v->e', e->e' \u8dd1\u4e00\u822c\u56fe\u5339\u914d\uff0c\u8003\u8651\u4ee5\u4e0b\u60c5\u51b5: - u,v\u90fd\u4e0d\u4e0e\u5176\u5b83\u8fb9\u5339\u914d\uff0c\u6b64\u65f6\u9009\u4e2d u->e, v->e' \uff0cmaxmatch\u4e3a2\uff0c\u4ee3\u8868\u8fb9e\u88ab\u9009\u4e2d\uff0c\u5e76\u4e3a u,v \u5404\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5ea6\u6570 - u,v\u6709\u81f3\u5c11\u4e00\u4e2a\u70b9\u4e0e\u5176\u4ed6\u8fb9\u5339\u914d\uff0cmaxmatch\u4e3a1 \u53ef\u4ee5\u770b\u5230\u5f53\u67d0\u6761\u8fb9\u88ab\u9009\u4e2d\u65f6\uff0c\u5bf9\u6700\u5927\u5339\u914d\u7684\u8d21\u732e+1 sum=\\sum_{i=1}^n de_i sum=\\sum_{i=1}^n de_i \u4e3a\u5947\u6570\u663e\u7136\u65e0\u89e3\uff0c\u5426\u5219\u5f53 maxmatch=sum/2+m maxmatch=sum/2+m \u65f6\u5b58\u5728\u53ef\u884c\u89e3\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; vector < int > ve ; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); ve . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; //\u6c42\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 //if(1ll * dis[t] * a[t] > 0) return false; \u6c42\u53ef\u884c\u6d41\u6700\u5c0f\u8d39\u7528\uff0c\u56e0\u6b64\u5f53\u8d39\u7528\u589e\u91cf\u5927\u4e8e0\u65f6\u4e0d\u7ee7\u7eed\u589e\u52a0\u6d41\u91cf flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } void mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )) { ve . push_back ( cost ); cost = 0 ; } } } ans ; int main () { int n , m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { int S = 1 , T = n ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); ans . addEdge ( u , v , 1 , w ); } ans . mincostMaxFlow ( S , T ); int q ; scanf ( \"%d\" , & q ); while ( q -- ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); ll resx = 0 , resy = v ; int tot = 0 ; for ( auto x : ans . ve ) { if ( tot == v ) break ; int now = min ( v - tot , u ); resx += 1ll * x * now ; tot += now ; } if ( tot < v ) puts ( \"NaN\" ); else { long long g = __gcd ( resx , resy ); printf ( \"%lld/%lld \\n \" , resx / g , resy / g ); } } } return 0 ; } J. Easy Integration Link solved by: badcw \u9898\u610f\uff1a \u7ed9 n n \u6c42 \\int_0^1 (x-x^2)^n\\rm dx \\int_0^1 (x-x^2)^n\\rm dx \u9898\u89e3\uff1a\u8d1d\u5854\u51fd\u6570 B(P,Q)=\\int_0^1 x^{P-1}(1-x)^{Q-1}\\rm dx B(P,Q)=\\int_0^1 x^{P-1}(1-x)^{Q-1}\\rm dx \u90a3\u4e48\u6b64\u9898\u662f \\int_0^1 (x-x^2)^n\\rm dx = \\int_0^1 x^n(1-x)^n\\rm dx=B(n+1,n+1) \\int_0^1 (x-x^2)^n\\rm dx = \\int_0^1 x^n(1-x)^n\\rm dx=B(n+1,n+1) B(P,Q)=\\frac{\\Gamma(P)\\Gamma(Q)}{\\Gamma(P+Q)} B(P,Q)=\\frac{\\Gamma(P)\\Gamma(Q)}{\\Gamma(P+Q)} \u5176\u4e2d \\Gamma(n)=(n-1)! \\Gamma(n)=(n-1)! \u6240\u4ee5\u7b54\u6848\u662f B(n+1,n+1)=\\frac{n!^2}{(2n+1)!} B(n+1,n+1)=\\frac{n!^2}{(2n+1)!} Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/12 12:13 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e6 + 55 ; const int mod = 998244353 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } ll jie [ maxn ] = { 1 }; ll invjie [ maxn ] = { 1 }; //ll inv[maxn] = {1}; ll C ( ll x , ll y ) { return jie [ x ] * invjie [ y ] % mod * invjie [ x - y ] % mod ; } int main ( int argc , char * argv []) { for ( int i = 1 ; i <= 2e6 + 50 ; ++ i ) { jie [ i ] = jie [ i - 1 ] * i % mod ; invjie [ i ] = qp ( jie [ i ], mod - 2 ); // inv[i] = qp(i, mod - 2); } int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { printf ( \"%lld \\n \" , jie [ n ] * jie [ n ] % mod * invjie [ n * 2 + 1 ] % mod ); } return 0 ; }","title":"2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#a-b-suffix-array","text":"solved by: Verly 03:25:17(-8) upsolved by: \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5168\u4e3aab\u7684\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u5176\u4e2d\u4efb\u4e00\u540e\u7f00\uff0c\u7b2ci\u4f4d\u7684\u503c\u4e3ai\u5230\u524d\u4e00\u4e2a\u76f8\u540c\u5b57\u7b26\u7684\u8ddd\u79bb\uff08\u5982\u679cs[i]\u7b2c\u4e00\u6b21\u51fa\u73b0\uff0c\u503c\u4e3a0\uff09\uff0c\u5bf9\u540e\u7f00\u8d4b\u7684\u503c\u6392\u5e8f\u3002 \u5bf9\u4e8e\u67d0\u4e00\u4e2a\u540e\u7f00\u4e32s\u2018\uff0c\u53ef\u4ee5\u5c06\u5176\u5206\u4e3a a[*a]b|xxxx \u6216 b[*b]a|xxxx ,\u5bf9\u4e8e\u957f\u5ea6\u4e3alen\u7684\u7b2c\u4e00\u6bb5\uff0c\u5176\u503c\u4e3a 0[(len-2)*1]0 + sa[pos+len] \uff0c\u5bf9\u4e8e\u6bcf\u79cd\u957f\u5ea6\u7684len\uff0c\u5bf9 sa[pos+len] \u6392\u5e8f\uff0c\u6309len\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 3e5 + 10 ; int s [ maxn ]; char b [ maxn ]; int sa [ maxn ], t [ maxn ], t2 [ maxn ], c [ maxn ], n ; //build_sa(n + 1, 130), sa, height\u4e0b\u6807\u4ece1\u5f00\u59cb,rk\u4e0b\u6807\u4ece0\u5f00\u59cb void build_sa ( int n , int m ) { int * x = t , * y = t2 ; for ( int i = 0 ; i < m ; i ++ ) c [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) c [ x [ i ] = s [ i ]] ++ ; for ( int i = 1 ; i < m ; i ++ ) c [ i ] += c [ i - 1 ]; for ( int i = n - 1 ; i >= 0 ; i -- ) sa [ -- c [ x [ i ]]] = i ; for ( int k = 1 ; k <= n ; k <<= 1 ) { int p = 0 ; for ( int i = n - k ; i < n ; i ++ ) y [ p ++ ] = i ; for ( int i = 0 ; i < n ; i ++ ) if ( sa [ i ] >= k ) y [ p ++ ] = sa [ i ] - k ; for ( int i = 0 ; i < m ; i ++ ) c [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) c [ x [ y [ i ]]] ++ ; for ( int i = 0 ; i < m ; i ++ ) c [ i ] += c [ i - 1 ]; for ( int i = n - 1 ; i >= 0 ; i -- ) sa [ -- c [ x [ y [ i ]]]] = y [ i ]; swap ( x , y ); p = 1 ; x [ sa [ 0 ]] = 0 ; for ( int i = 1 ; i < n ; i ++ ) x [ sa [ i ]] = y [ sa [ i - 1 ]] == y [ sa [ i ]] && y [ sa [ i - 1 ] + k ] == y [ sa [ i ] + k ] ? p - 1 : p ++ ; if ( p >= n ) break ; m = p ; } } int rk [ maxn ]; void getHeight () { for ( int i = 1 ; i <= n ; i ++ ) rk [ sa [ i ]] = i ; } int nex [ maxn ]; vector < pair < int , int >> resp [ maxn ]; int resq [ maxn ]; int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { scanf ( \"%s\" , b ); for ( int i = 0 ; i <= n ; i ++ ) resp [ i ]. clear (), resq [ i ] = - 1 , nex [ i ] = 0 ; s [ n ] = s [ n + 1 ] = 0 ; int lasa = - 1 , lasb = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] == 'a' ) { if ( lasa == - 1 ) s [ i ] = 50 ; else s [ i ] = i - lasa + 50 ; lasa = i ; } else if ( b [ i ] == 'b' ) { if ( lasb == - 1 ) s [ i ] = 50 ; else s [ i ] = i - lasb + 50 ; lasb = i ; } } lasa = - 1 , lasb = - 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( b [ i ] == 'a' ) { nex [ i ] = lasb ; lasa = i ; } else if ( b [ i ] == 'b' ) { nex [ i ] = lasa ; lasb = i ; } } build_sa ( n + 1 , n + 55 ); for ( int i = 0 ; i <= n + 1 ; ++ i ) rk [ i ] = 0 ; getHeight (); for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( nex [ i ] == - 1 ) resq [ n - i ] = i ; else { int len = nex [ i ] - i + 1 ; resp [ len ]. push_back ({ rk [ nex [ i ] + 1 ], i }); } } for ( int i = 0 ; i <= n ; i ++ ) sort ( resp [ i ]. begin (), resp [ i ]. end ()); printf ( \"%d\" , n ); for ( int i = 0 ; i <= n ; i ++ ) { for ( auto x : resp [ i ]) printf ( \" %d\" , x . second + 1 ); if ( resq [ i ] != - 1 ) printf ( \" %d\" , resq [ i ] + 1 ); } puts ( \"\" ); } return 0 ; }","title":"A. B-Suffix Array"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#b-infinite-tree","text":"upsolved by: badcw \u4e00\u5f20\u65e0\u9650\u56fe\uff08\u6811\uff09\uff0c\u5176\u4e2d\u6bcf\u4e2a\u70b9 x x \u90fd\u4e0e x/mindiv(x) x/mindiv(x) \u76f8\u8fde\uff0c mindiv \u662f x \u6700\u5c0f\u975e\u4e00\u56e0\u5b50\u3002 \u73b0\u5728 1~n \u7684\u9636\u4e58\u8fd9 n \u4e2a\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u7ed9\u51fa\u5173\u952e\u70b9\u7684\u70b9\u6743\uff0c\u8981\u6c42\u627e\u5230\u4e00\u4e2a\u70b9\u5230\u6240\u6709\u70b9\u7684\u70b9\u6743\u8fb9\u957f\u79ef\u7684\u548c\u6700\u5c0f\u3002 \u9996\u5148\uff0c\u6700\u5c0f\u975e\u4e00\u56e0\u5b50\u4e00\u5b9a\u662f\u7d20\u6570\u3002\u6240\u6709\u7d20\u6570\u90fd\u5c06\u548c 1 \u8fde\u8fb9\uff0c\u8003\u8651\u5c06 1 \u770b\u4f5c\u6839\u8282\u70b9\u3002\u90a3\u4e48 x! \u7684\u5c42\u6570\u4e00\u5b9a\u662f (x-1)! \u7684\u5c42\u6570\u52a0\u4e0a x \u7684\u5b8c\u5168\u5206\u89e3\u7684\u4e2a\u6570\u3002 \u8003\u8651\u628a\u865a\u6811\u5efa\u51fa\u6765\uff0c\u7531\u4e8e\u5173\u952e\u70b9\u7684\u5c42\u6570\u4e00\u5b9a\u662f\u9012\u589e\u7684\uff0c\u8003\u8651\u5982\u4f55\u6c42\u51fa x! \u548c (x-1)! \u7684 lca\uff0c\u8bbe x=p1^{x1}*p2^{x2}*\\dots pn^{xn} x=p1^{x1}*p2^{x2}*\\dots pn^{xn} \uff0c\u5219\u4e00\u5b9a\u4f1a\u5728 pn^xx * p.... pn^xx * p.... \u76f8\u9047\uff0c\u4e5f\u5c31\u662f\u8bf4\u662f (x-1)! \u4e2d\u5927\u4e8e\u7b49\u4e8e x \u6700\u5927\u7684\u7d20\u56e0\u5b50\u7684\u90e8\u5206\u3002 \u7528\u67d0\u79cd\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7d20\u56e0\u5b50\u7684\u524d\u7f00\u548c\uff0c\u7528\u6765\u5904\u7406\u5c42\u6570\u5373\u53ef\u76f4\u63a5\u66b4\u529b\u5efa\u51fa\u865a\u6811\u3002 \u6709\u4e86\u865a\u6811\u76f4\u63a5\u6362\u6839dp\u5c31\u53ef\u4ee5\u6c42\u51fa\u6700\u5c0f\u503c\u3002 f_u f_u \u8868\u793a\u4ee5 u u \u4e3a\u6839\u7684\u7b54\u6848\uff0c g_u g_u \u8868\u793a u u \u5b50\u6811\u5185\u7684\u6743\u503c\u548c\u3002 g_u=\\sum g_v g_u=\\sum g_v f_u=\\sum f_v + w * g_v f_u=\\sum f_v + w * g_v \u5373\u53ef\uff0c\u6362\u6839\u5f88\u7b80\u5355\u5c31\u4e0d\u5199\u4e86\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/16 21:44 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } vector < int > p [ maxn ]; vector < pair < int , int > > edge [ maxn ]; ll f [ maxn ], g [ maxn ]; int w [ maxn ], pos [ maxn ]; int pre [ maxn ], mx ; void add ( int pos , int k ) { while ( pos <= mx ) { pre [ pos ] += k ; pos += pos & - pos ; } } int query ( int pos ) { int res = 0 ; while ( pos > 0 ) { res += pre [ pos ]; pos -= pos & - pos ; } return res ; } void dfs ( int u ) { for ( auto v : edge [ u ]) { dfs ( v . first ); g [ u ] += g [ v . first ]; f [ u ] += f [ v . first ] + v . second * g [ v . first ]; } } ll res ; void dfs2 ( int u ) { res = min ( res , f [ u ]); for ( auto v : edge [ u ]) { g [ u ] -= g [ v . first ]; f [ u ] -= f [ v . first ] + v . second * g [ v . first ]; g [ v . first ] += g [ u ]; f [ v . first ] += f [ u ] + v . second * g [ u ]; dfs2 ( v . first ); g [ v . first ] -= g [ u ]; f [ v . first ] -= f [ u ] + v . second * g [ u ]; g [ u ] += g [ v . first ]; f [ u ] += f [ v . first ] + v . second * g [ v . first ]; } } int main ( int argc , char * argv []) { for ( int i = 2 ; i <= 1e5 ; ++ i ) { int x = i ; for ( int j = 2 ; j * j <= i ; ++ j ) { while ( x % j == 0 ) { p [ i ]. push_back ( j ); x /= j ; } } if ( x > 1 ) p [ i ]. push_back ( x ); } int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { int tot = 0 , now = 0 ; mx = n ; for ( int i = 1 ; i <= n ; ++ i ) R ( w [ i ]); stack < pair < int , int > > st ; st . push ({ 1 , 0 }); g [ pos [ 1 ] = ++ now ] = w [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { int lca = tot - query ( p [ i ]. back () - 1 ); g [ pos [ i ] = ++ now ] = w [ i ]; while ( st . size () > 1 ) { auto y = st . top (); if ( y . second == lca ) break ; st . pop (); auto x = st . top (); if ( x . second >= lca ) { // cerr << \"add \" << x.first << \" \" << y.first << endl; edge [ x . first ]. push_back ({ y . first , y . second - x . second }); } else { st . push ({ ++ now , lca }); // cerr << \"add \" << now << \" \" << y.first << endl; edge [ now ]. push_back ({ y . first , y . second - lca }); } } st . push ({ pos [ i ], tot + p [ i ]. size ()}); for ( auto j : p [ i ]) add ( j , 1 ), tot ++ ; } while ( st . size () > 1 ) { auto y = st . top (); st . pop (); auto x = st . top (); // cerr << \"add \" << x.first << \" \" << y.first << endl; edge [ x . first ]. push_back ({ y . first , y . second - x . second }); } dfs ( 1 ); res = f [ 1 ]; dfs2 ( 1 ); W ( res ); for ( int i = 0 ; i <= now ; ++ i ) { edge [ i ]. clear (); f [ i ] = g [ i ] = 0 ; } for ( int i = 0 ; i <= mx ; ++ i ) pre [ i ] = 0 ; } return 0 ; }","title":"B. Infinite Tree"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#f-infinite-string-comparision","text":"solved by: upsolved by: \u9898\u610f\uff1a\u7ed9\u4e24\u4e2a\u4e32\uff0c\u95ee\u65e0\u9650\u5faa\u73af\u7684\u4ed6\u4eec\u5b57\u5178\u5e8f\u5927\u5c0f \u628a\u957f\u7684\u5199\u4e24\u6b21\u90a3\u4e48\u957f\u4e00\u5b9a\u662f\u591f\u7684\uff1f\u4e0d\u4f1a\u8bc1\u660e\uff0c\u51ed\u76f4\u89c9 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/12 12:04 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } char a [ maxn ], b [ maxn ]; int main ( int argc , char * argv []) { while ( scanf ( \"%s%s\" , a , b ) != EOF ) { int len1 = strlen ( a ); int len2 = strlen ( b ); int need = max ( len1 , len2 ) * 2 ; for ( int i = len1 ; i < need ; ++ i ) { a [ i ] = a [ i % len1 ]; } for ( int i = len2 ; i < need ; ++ i ) { b [ i ] = b [ i % len2 ]; } int res = - 1 ; for ( int i = 0 ; i < need ; ++ i ) { if ( a [ i ] != b [ i ]) { res = a [ i ] > b [ i ]; break ; } } if ( res == - 1 ) W ( \"=\" ); else if ( res == 0 ) W ( \"<\" ); else W ( \">\" ); } return 0 ; }","title":"F. Infinite String Comparision"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#h-minimum-cost-flow","text":"upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u7f51\u7edc\u6d41\u56fe\uff0cq\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u6bcf\u4e00\u6761\u8fb9 u/v \u7684\u6d41\u91cf\uff0c\u95ee1\u5230n\u6d411\u4e2a\u5355\u4f4d\u6d41\u91cf\u7684\u6700\u5c0f\u8d39\u7528\u3002 \u5bf9\u539f\u56fe\u8dd11\u5230n\u7684\u7f51\u7edc\u6d41\uff0c\u8003\u8651\u8d2a\u5fc3\uff0c\u6bcf\u6b21bellman-ford\u4ee3\u8868\u5f53\u524d\u6b8b\u91cf\u7f51\u7edc\u4ece1\u5230n\u6d411\u4e2a\u5355\u4f4d\u6240\u9700\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u7684\u6240\u9700\u6d41\u91cf\u53d6\u524d\u7f00\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; vector < int > ve ; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); ve . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; //\u6c42\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 //if(1ll * dis[t] * a[t] > 0) return false; \u6c42\u53ef\u884c\u6d41\u6700\u5c0f\u8d39\u7528\uff0c\u56e0\u6b64\u5f53\u8d39\u7528\u589e\u91cf\u5927\u4e8e0\u65f6\u4e0d\u7ee7\u7eed\u589e\u52a0\u6d41\u91cf flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } void mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )) { ve . push_back ( cost ); cost = 0 ; } } } ans ; int main () { int n , m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { int S = 1 , T = n ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); ans . addEdge ( u , v , 1 , w ); } ans . mincostMaxFlow ( S , T ); int q ; scanf ( \"%d\" , & q ); while ( q -- ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); ll resx = 0 , resy = v ; int tot = 0 ; for ( auto x : ans . ve ) { if ( tot == v ) break ; int now = min ( v - tot , u ); resx += 1ll * x * now ; tot += now ; } if ( tot < v ) puts ( \"NaN\" ); else { long long g = __gcd ( resx , resy ); printf ( \"%lld/%lld \\n \" , resx / g , resy / g ); } } } return 0 ; }","title":"H. Minimum-cost Flow"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#i-1-or-2","text":"upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u4e00\u5f20n\u4e2a\u70b9m\u6761\u8fb9\u7684\u56fe (1\u2264n\u226450, 1\u2264m\u2264100) (1\u2264n\u226450, 1\u2264m\u2264100) \uff0c\u95ee\u662f\u5426\u5b58\u5728\u751f\u6210\u5b50\u56fe\uff0c\u6ee1\u8db3\u70b9i\u7684\u5ea6\u6570\u4e3a de[i](1\u2264d_i\u22642) de[i](1\u2264d_i\u22642) \u5bf9\u4e8e\u539f\u56fe\u7684\u70b9\u62c6\u70b9\u8868\u793a\u5ea6\u6570\uff0c\u5bf9\u8fde\u63a5 u\uff0cv \u7684\u8fb9\u62c6\u70b9 e,e' \uff0c\u8fde\u8fb9 u->e, v->e', e->e' \u8dd1\u4e00\u822c\u56fe\u5339\u914d\uff0c\u8003\u8651\u4ee5\u4e0b\u60c5\u51b5: - u,v\u90fd\u4e0d\u4e0e\u5176\u5b83\u8fb9\u5339\u914d\uff0c\u6b64\u65f6\u9009\u4e2d u->e, v->e' \uff0cmaxmatch\u4e3a2\uff0c\u4ee3\u8868\u8fb9e\u88ab\u9009\u4e2d\uff0c\u5e76\u4e3a u,v \u5404\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5ea6\u6570 - u,v\u6709\u81f3\u5c11\u4e00\u4e2a\u70b9\u4e0e\u5176\u4ed6\u8fb9\u5339\u914d\uff0cmaxmatch\u4e3a1 \u53ef\u4ee5\u770b\u5230\u5f53\u67d0\u6761\u8fb9\u88ab\u9009\u4e2d\u65f6\uff0c\u5bf9\u6700\u5927\u5339\u914d\u7684\u8d21\u732e+1 sum=\\sum_{i=1}^n de_i sum=\\sum_{i=1}^n de_i \u4e3a\u5947\u6570\u663e\u7136\u65e0\u89e3\uff0c\u5426\u5219\u5f53 maxmatch=sum/2+m maxmatch=sum/2+m \u65f6\u5b58\u5728\u53ef\u884c\u89e3\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; vector < int > ve ; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); ve . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; //\u6c42\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 //if(1ll * dis[t] * a[t] > 0) return false; \u6c42\u53ef\u884c\u6d41\u6700\u5c0f\u8d39\u7528\uff0c\u56e0\u6b64\u5f53\u8d39\u7528\u589e\u91cf\u5927\u4e8e0\u65f6\u4e0d\u7ee7\u7eed\u589e\u52a0\u6d41\u91cf flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } void mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )) { ve . push_back ( cost ); cost = 0 ; } } } ans ; int main () { int n , m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { int S = 1 , T = n ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); ans . addEdge ( u , v , 1 , w ); } ans . mincostMaxFlow ( S , T ); int q ; scanf ( \"%d\" , & q ); while ( q -- ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); ll resx = 0 , resy = v ; int tot = 0 ; for ( auto x : ans . ve ) { if ( tot == v ) break ; int now = min ( v - tot , u ); resx += 1ll * x * now ; tot += now ; } if ( tot < v ) puts ( \"NaN\" ); else { long long g = __gcd ( resx , resy ); printf ( \"%lld/%lld \\n \" , resx / g , resy / g ); } } } return 0 ; }","title":"I. 1 or 2"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89/#j-easy-integration","text":"solved by: badcw \u9898\u610f\uff1a \u7ed9 n n \u6c42 \\int_0^1 (x-x^2)^n\\rm dx \\int_0^1 (x-x^2)^n\\rm dx \u9898\u89e3\uff1a\u8d1d\u5854\u51fd\u6570 B(P,Q)=\\int_0^1 x^{P-1}(1-x)^{Q-1}\\rm dx B(P,Q)=\\int_0^1 x^{P-1}(1-x)^{Q-1}\\rm dx \u90a3\u4e48\u6b64\u9898\u662f \\int_0^1 (x-x^2)^n\\rm dx = \\int_0^1 x^n(1-x)^n\\rm dx=B(n+1,n+1) \\int_0^1 (x-x^2)^n\\rm dx = \\int_0^1 x^n(1-x)^n\\rm dx=B(n+1,n+1) B(P,Q)=\\frac{\\Gamma(P)\\Gamma(Q)}{\\Gamma(P+Q)} B(P,Q)=\\frac{\\Gamma(P)\\Gamma(Q)}{\\Gamma(P+Q)} \u5176\u4e2d \\Gamma(n)=(n-1)! \\Gamma(n)=(n-1)! \u6240\u4ee5\u7b54\u6848\u662f B(n+1,n+1)=\\frac{n!^2}{(2n+1)!} B(n+1,n+1)=\\frac{n!^2}{(2n+1)!} Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/12 12:13 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e6 + 55 ; const int mod = 998244353 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } ll jie [ maxn ] = { 1 }; ll invjie [ maxn ] = { 1 }; //ll inv[maxn] = {1}; ll C ( ll x , ll y ) { return jie [ x ] * invjie [ y ] % mod * invjie [ x - y ] % mod ; } int main ( int argc , char * argv []) { for ( int i = 1 ; i <= 2e6 + 50 ; ++ i ) { jie [ i ] = jie [ i - 1 ] * i % mod ; invjie [ i ] = qp ( jie [ i ], mod - 2 ); // inv[i] = qp(i, mod - 2); } int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { printf ( \"%lld \\n \" , jie [ n ] * jie [ n ] % mod * invjie [ n * 2 + 1 ] % mod ); } return 0 ; }","title":"J. Easy Integration"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/","text":"Name Date Solved A B C D E F G H I J K L 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2020/7/18 9/12 O O O \u00d8 O O \u00d8 \u00d8 . . . O A. Clam and Fish Link solved by: badcw 00:19:06(-1) Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/18 12:15 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e6 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n ; char s [ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n ); R ( s ); int pre = 0 , res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s [ i ] == '1' ) { pre ++ ; } else if ( s [ i ] == '0' ) { if ( pre ) { pre -- ; res ++ ; } } else { res ++ ; } } W ( res + pre / 2 ); } return 0 ; } B. Classical String Problem Link solved by: badcw 00:11:12 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/18 12:07 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 4e6 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } char s [ maxn ]; int main ( int argc , char * argv []) { R ( s ); int q ; R ( q ); int p = 0 ; int len = strlen ( s ); char ch [ 2 ]; int x ; for ( int i = 0 ; i < q ; ++ i ) { R ( ch , x ); if ( ch [ 0 ] == 'M' ) { p += x ; p %= len ; if ( p < 0 ) p += len ; } else { x -- ; W ( s [( x + p ) % len ]); } } return 0 ; } C. Operation Love Link solved by: ffacs 00:43:53(-1) Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 1e6 + 5 ; struct Poi { double y , x ; } poi [ 30 ]; double dis ( const Poi & a , const Poi & b ){ return sqrt (( a . x - b . x ) * ( a . x - b . x ) + ( a . y - b . y ) * ( a . y - b . y )); } double is ( double a , double b ) { return fabs ( a - b ) < 0.0001 ; } int main () { int T ; cin >> T ; while ( T -- ) { for ( int i = 0 ; i < 20 ; i ++ ) { scanf ( \"%lf%lf\" , & poi [ i ]. y , & poi [ i ]. x ); } for ( int i = 0 ; i < 20 ; i ++ ) { double d1 = dis ( poi [ i ], poi [( i + 19 ) % 20 ]); double d2 = dis ( poi [ i ], poi [( i + 1 ) % 20 ]); Poi p1 , p6 ; if ( is ( d1 , 1 ) && is ( d2 , 6 )) { p1 = { poi [( i + 19 ) % 20 ]. x - poi [ i ]. x , poi [( i + 19 ) % 20 ]. y - poi [ i ]. y } , p6 = { poi [( i + 1 ) % 20 ]. x - poi [ i ]. x , poi [( i + 1 ) % 20 ]. y - poi [ i ]. y }; if (( p1 . x * p6 . y ) - ( p6 . x * p1 . y ) < 0 ) { puts ( \"right\" ); } else { puts ( \"left\" ); } } if ( is ( d1 , 6 ) && is ( d2 , 1 )) { p6 = { poi [( i + 19 ) % 20 ]. x - poi [ i ]. x , poi [( i + 19 ) % 20 ]. y - poi [ i ]. y } , p1 = { poi [( i + 1 ) % 20 ]. x - poi [ i ]. x , poi [( i + 1 ) % 20 ]. y - poi [ i ]. y }; if (( p1 . x * p6 . y ) - ( p6 . x * p1 . y ) < 0 ) { puts ( \"right\" ); } else { puts ( \"left\" ); } } } ed :; } return 0 ; } D. Points Construction Problem Link upsolved by: Verly \u9898\u610f:\u5728\u65e0\u9650\u5927\u7684\u683c\u5b50\u4e2d,\u539f\u672c\u6240\u6709\u683c\u5b50\u90fd\u662f\u767d\u8272\u7684,\u628an\u4e2a\u683c\u5b50\u6d82\u9ed1,\u6ee1\u8db3\u4e0a\u4e0b\u5de6\u53f3\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u5bf9\u4e3a\u5f02\u8272\u7684\u4e2a\u6570\u4e3am\u4e2a \u5bf9\u4e8em,\u5bb9\u6613\u5f97\u5230 m\u22644*n m\u22644*n \u4e14m\u53ea\u80fd\u4e3a\u5076\u6570,\u627e\u5230\u4e00\u7ec4ab,\u4f7f n\u2264a*b n\u2264a*b \u4e14 abs(a-b)\u22641 abs(a-b)\u22641 , 2*(a-b) 2*(a-b) \u5373\u4e3am\u7684\u4e0b\u754c \u9996\u5148\u586b\u5145\u957f\u65b9\u5f62\u7684\u5de6\u8fb9\u7f18\u548c\u4e0b\u8fb9\u7f18,\u6b64\u65f6\u5f02\u8272\u70b9\u5bf9\u6570\u4e3a 2*(a-b) 2*(a-b) ,\u4e4b\u540e\u5728\u5f80\u957f\u65b9\u5f62\u5185\u653e\u70b9,\u5f02\u8272\u70b9\u5bf9\u6570\u4e0d\u53d8 \u5f53\u5f02\u8272\u70b9\u5bf9\u6570\u5c0f\u4e8em\u65f6,\u4e0d\u65ad\u5c06\u975e\u5de6\u8fb9\u7f18\u548c\u4e0b\u8fb9\u7f18\u7684\u70b9\u5355\u72ec\u4e22\u5230\u8fdc\u5904,\u6b64\u65f6\u5f02\u8272\u70b9\u5bf9\u6570+4,\u5982\u679c\u5f02\u8272\u70b9\u5bf9\u6570>m,\u4e00\u5b9a\u53ea\u6bd4m\u59272,\u628a\u8fdc\u5904\u4e00\u4e2a\u5355\u72ec\u7684\u70b9\u653e\u52300,0\u4e0b\u65b9\u8fde\u63a5\u5373\u53ef \u5982\u679c\u975e\u5de6\u8fb9\u7f18\u548c\u4e0b\u8fb9\u7f18\u7684\u70b9\u5168\u90e8\u4e22\u5b8c\u65f6\u5f02\u8272\u70b9\u5bf9\u6570\u4ecd\u7136\u5c0f\u4e8em,\u5c06\u5de6\u8fb9\u7f18\u6700\u4e0a\u9762\u6216\u8005\u4e0b\u8fb9\u7f18\u6700\u53f3\u4fa7\u7684\u70b9\u4e22\u5411\u8fdc\u5904,\u6bcf\u6b21\u5f02\u8272\u70b9\u5bf9+2,\u76f4\u5230\u5f02\u8272\u70b9\u5bf9\u6570= 4*n 4*n Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 50 + 10 ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , m ; scanf ( \"%d%d\" , & n , & m ); if ( m > n * 4 || m % 2 ) { puts ( \"No\" ); continue ; } int a , b ; for ( int i = 1 ; ; i ++ ) { if ( i * i >= n && i + i - 1 <= n ) { a = i , b = i ; break ; } if ( i * ( i + 1 ) >= n && i + i <= n ) { a = i , b = i + 1 ; break ; } } if ( 2 * ( a + b ) > m ) { puts ( \"No\" ); continue ; } vector < pair < int , int > > res , res1 , res2 ; for ( int i = 0 ; i < a ; i ++ ) res . push_back ({ 0 , i }); for ( int j = 1 ; j < b ; j ++ ) res . push_back ({ j , 0 }); for ( int i = 1 ; i < a && res . size () + res1 . size () <= n ; i ++ ) for ( int j = 1 ; j < b ; j ++ ) { if ( res . size () + res1 . size () == n ) break ; res1 . push_back ({ j , i }); } int p = 0 ; int cnt = 2 * ( a + b ); while ( cnt < m && res1 . size () > 0 ) { res1 . pop_back (); res2 . push_back ({ p , 1000 }); p += 2 ; cnt += 4 ; } if ( cnt > m ) { res2 . pop_back (); res1 . push_back ({ 0 , a }); } else if ( cnt < m ) { while ( cnt + 2 <= m && res . size () > 0 ) { res . pop_back (); res2 . push_back ({ p , 1000 }); p += 2 ; cnt += 2 ; } } puts ( \"Yes\" ); for ( auto x : res ) printf ( \"%d %d \\n \" , x . first , x . second ); for ( auto x : res1 ) printf ( \"%d %d \\n \" , x . first , x . second ); for ( auto x : res2 ) printf ( \"%d %d \\n \" , x . first , x . second ); } return 0 ; } E. Two Matchings Link solved by: badcw 03:27:11(-4) \u9898\u610f\uff1a\u7ed92n\u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\uff0c\u8fb9\u7684\u6743\u503c\u4e3a\u70b9\u6743\u5dee\u7684\u7edd\u5bf9\u503c\uff0c\u6c42\u4e24\u4e2a\u5b8c\u5168\u4e0d\u76f8\u4ea4\u7684\u5b8c\u5168\u5339\u914d\uff0c\u4f7f\u5339\u914d\u503c\u4e4b\u548c\u6700\u5c0f\u3002 \u5bf9\u70b9\u6743\u6392\u5e8f\uff0c\u5c06\u70b9\u5206\u6210\u957f\u5ea6>=4\u7684\u82e5\u5e72\u4e2a\u5757\uff0cdp\u6c42\u89e3\u6700\u5c0f\u503c\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/18 15:06 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } ll dp [ maxn ]; ll mn [ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; R ( n ); VI a ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { R ( a [ i ]); } sort ( a . begin () + 1 , a . end ()); dp [ 0 ] = mn [ 0 ] = 1e18 ; for ( int i = 1 ; i <= 3 ; ++ i ) { mn [ i ] = - a [ 1 ] * 2 ; dp [ i ] = 1e18 ; } for ( int i = 4 ; i <= n ; ++ i ) { dp [ i ] = mn [ i - 3 ] + a [ i ] * 2 ; mn [ i ] = min ( mn [ i - 2 ], dp [ i - 1 ] - a [ i ] * 2 ); } W ( dp [ n ]); } return 0 ; } F. Fraction Construction Problem Link solved by: ffacs 04:47:35(-4) \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5206\u6570 \\frac a b \\frac a b \uff0c\u6c42c,d,e,f\u6ee1\u8db3 \\frac c e - \\frac d f = \\frac a b(d, f<b,c,e\u2264 4\u00d710^{12}) \\frac c e - \\frac d f = \\frac a b(d, f<b,c,e\u2264 4\u00d710^{12}) \u5982\u679cab\u4e0d\u4e92\u8d28\uff0c gcd(a,b)+a, b, gcd(a, b), b \u5373\u4e3a\u7b54\u6848 \u5bf9\u4e8e\u4e92\u8d28\u7684\u60c5\u51b5\uff0c\u5982\u679cb\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u4e2a\u6570\u53ea\u67091\u4e2a\uff0c\u5373 b=p^k b=p^k \uff0c\u7531\u4e8e a,b \u4e92\u8d28, \\frac c d - \\frac e f \\frac c d - \\frac e f \u5316\u7b80\u540e\u5fc5\u987b\u662f \\frac a b \\frac a b ,\u4f46 d,f<b ,df\u7684\u8d28\u56e0\u6570\u5206\u89e3\u8d28\u56e0\u6570\u6307\u6570\u90fd\u5c0f\u4e8ek,\u5f97\u5230\u77db\u76fe,\u6240\u4ee5\u65e0\u89e3 \u5982\u679cb\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u4e2a\u6570\u5927\u4e8e1,\u627e\u5230df\u6ee1\u8db3 d*f=b d*f=b \u4e14 __gcd(d,f)=1 __gcd(d,f)=1 ,\u6709 \\frac {c*f-e*d} {d*f}=\\frac a b \\frac {c*f-e*d} {d*f}=\\frac a b ,\u7528exgcd\u6c42 c*f-e*d=a c*f-e*d=a Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 2e6 + 5 ; int prim [ maxn ], pcnt , mn [ maxn ]; bool isnp [ maxn ]; void getp () { for ( int i = 2 ; i < maxn ; i ++ ) { if ( ! isnp [ i ]) { prim [ ++ pcnt ] = i ; mn [ i ] = i ;} for ( int j = 1 ; j <= pcnt && i * prim [ j ] < maxn ; j ++ ) { isnp [ i * prim [ j ]] = 1 ; mn [ i * prim [ j ]] = prim [ j ]; if ( i % prim [ j ] == 0 ) break ; } } } inline void exgcd ( ll a , ll b , ll & g , ll & x , ll & y ) { if ( ! b ) g = a , x = 1 , y = 0 ; else exgcd ( b , a % b , g , y , x ), y -= x * ( a / b ); } int main () { getp (); int T ; cin >> T ; while ( T -- ) { ll a , b ; scanf ( \"%lld%lld\" , & a , & b ); ll c , d , e , f ; if ( b == 1 ) { puts ( \"-1 -1 -1 -1\" ); continue ;} if ( ! isnp [ b ]) { if ( a % b != 0 ) { puts ( \"-1 -1 -1 -1\" ); continue ;} else { c = a / b + 1 , d = 1 , e = 1 , f = 1 ; printf ( \"%lld %lld %lld %lld \\n \" , c , d , e , f ); } } else { if ( __gcd ( a , b ) != 1 ) { c = a + __gcd ( a , b ), d = b , e = __gcd ( a , b ), f = b ; int gcd = __gcd ( c , d ); c /= gcd ; d /= gcd ; gcd = __gcd ( e , f ); e /= gcd ; f /= gcd ; printf ( \"%lld %lld %lld %lld \\n \" , c , d , e , f ); } else { int t1 = mn [ b ], t2 = 0 ; int tem = b ; while ( tem != 1 ) { if ( mn [ tem ] == t1 ) tem /= t1 ; else { t2 = mn [ tem ]; break ;} } if ( t2 == 0 ) { puts ( \"-1 -1 -1 -1\" ); continue ;} ll y , x , gcd ; exgcd ( t2 , t1 , gcd , y , x ); // cout<<t2<<' '<<y<<' '<<t1<<' '<<x<<endl; // cout<<t1*(t2-(x%t2+t2)%t2)*a<<' '<<t1*(t2-(x%t2+t2)%t2)*a+a<<endl; c = t1 * ( t2 - ( x % t2 + t2 ) % t2 ) * a + a ; d = b ; e = t1 * ( t2 - ( x % t2 + t2 ) % t2 ) * a ; f = b ; gcd = __gcd ( c , d ); c /= gcd ; d /= gcd ; gcd = __gcd ( e , f ); e /= gcd ; f /= gcd ; printf ( \"%lld %lld %lld %lld \\n \" , c , d , e , f ); } } } return 0 ; } G. Operating on a Graph Link upsolved by: Verly \u9898\u610f:\u7ed9\u4e00\u5f20n\u4e2a\u70b9m\u6761\u8fb9\u7684\u56fe,\u521d\u59cb\u65f6\u70b9i\u7684\u989c\u8272\u4e3ai\uff0c\u8fdb\u884cq\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u989c\u8272\u4e3ai\u7684\u70b9\u5468\u56f4\u7684\u70b9\u67d3\u6210i\uff0c\u6c42q\u6b21\u64cd\u4f5c\u540en\u4e2a\u70b9\u7684\u989c\u8272\u3002 \u8003\u8651\u6bcf\u4e2a\u70b9\u6240\u8fde\u51fa\u7684\u8fb9\u6700\u591a\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u7ef4\u62a4\u67d0\u4e2a\u989c\u8272\u5f53\u524d\u8fd8\u6ca1\u6709\u7ed9\u76f8\u90bb\u70b9\u67d3\u8272\u7684\u70b9\uff0c\u7528\u94fe\u8868\u7ef4\u62a4\u8fb9\u96c6\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u70b9\u7684\u989c\u8272\uff0c\u6bcf\u6b21\u67d3\u8272\u65f6\u5408\u5e76\u94fe\u8868\u5373\u53ef\uff0c\u590d\u6742\u5ea6 O(n) O(n) Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 8e5 + 10 ; list < int > edge [ maxn ]; int pre [ maxn ]; int Find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = Find ( pre [ x ]); } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { pre [ i ] = i ; edge [ i ]. clear (); } while ( m -- ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } int q ; scanf ( \"%d\" , & q ); for ( int i = 0 ; i < q ; i ++ ) { int x ; scanf ( \"%d\" , & x ); if ( x != Find ( x )) continue ; list < int > tmp ; for ( auto v : edge [ x ]) { int fv = Find ( v ); if ( fv == x ) continue ; pre [ fv ] = x ; tmp . splice ( tmp . end (), edge [ fv ]); } swap ( edge [ x ], tmp ); } for ( int i = 0 ; i < n ; i ++ ) printf ( \"%d%c\" , Find ( i ), \" \\n \" [ i == n - 1 ]); } return 0 ; } H. Sort the Strings Revision Link upsolved by: Verly \u9898\u610f\uff1a\u957f\u5ea6\u4e3an\u7684\u4e32 s_0 s_0 \u4e3a 01234567890123456789... \uff0c\u7ed9\u5b9a\u4e00\u4e2a0\uff5en-1\u7684\u6392\u5217p\u548c\u5e8f\u5217d\uff0c\u7b2ci\u6b21\u64cd\u4f5c\u8868\u793a\u628a s_{i-1} s_{i-1} \u7684\u7b2c p_i p_i \u4f4d\u4fee\u6539\u6210 d_i d_i \u5e76\u751f\u6210 s_i s_i \uff0c\u5bf9 s_0 s_0 \u5230 s_n s_n \u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c r_i r_i \u8868\u793a s_i s_i \u5728\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\uff08\u4ece0\u5f00\u59cb\uff09\uff0c\u6c42 \\sum_{i=0}^n (r_i*10000019^i)\\ mod \\ 1000000007 \\sum_{i=0}^n (r_i*10000019^i)\\ mod \\ 1000000007 \u8003\u8651\u4ee5 p_i p_i \u5728\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\u8fdb\u884c\u5206\u6cbb\uff0c\u5bf9\u4e8e p_i p_i \u6700\u5c0f\u503c\u4e3apos\u7684\u533a\u95f4 l,r \uff0c\u5982\u679c p[pos]%10!=d[pos] \uff0c\u6709 p[pos]%10<d[pos] \uff0c rk[l~pos-1]+=r-pos p[pos]%10>d[pos] , rk[pos~r]+=pos-l+1 \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u533a\u95f4\u9012\u5f52\u505a\u4e0b\u53bb\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e6 + 10 ; const int mod = 1e9 + 7 ; int n ; int p [ maxn ], d [ maxn ], ls [ maxn ], rs [ maxn ], st [ maxn ], rk [ maxn ]; ll pw [ maxn ] = { 1 }; void rand_p () { int seed , a , b , mod ; scanf ( \"%d%d%d%d\" , & seed , & a , & b , & mod ); for ( int i = 0 ; i < n ; i ++ ) p [ i ] = i ; for ( int i = 1 ; i < n ; i ++ ) { swap ( p [ seed % ( i + 1 )], p [ i ]); seed = ( 1ll * seed * a + b ) % mod ; } } void rand_d () { int seed , a , b , mod ; scanf ( \"%d%d%d%d\" , & seed , & a , & b , & mod ); for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = seed % 10 ; seed = ( 1ll * seed * a + b ) % mod ; } } void dfs ( int l , int r , int root , int val ) { if ( p [ root ] == n || l >= r ) { for ( int i = l ; i <= r ; i ++ ) rk [ i ] = val + i - l ; return ; } dfs ( l , root , ls [ root ], ( p [ root ] % 10 > d [ root ]) ? ( val + r - root ) : val ), dfs ( root + 1 , r , rs [ root ], ( p [ root ] % 10 < d [ root ]) ? ( val + root - l + 1 ) : val ); } int main () { int t ; scanf ( \"%d\" , & t ); for ( int i = 1 ; i < maxn ; i ++ ) pw [ i ] = ( pw [ i - 1 ] * 10000019 ) % mod ; while ( t -- ) { scanf ( \"%d\" , & n ); rand_p (); rand_d (); for ( int i = 0 ; i < n ; i ++ ) if ( p [ i ] % 10 == d [ i ]) p [ i ] = n ; int top = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = top ; while ( k > 0 && p [ st [ k ]] > p [ i ]) k -- ; if ( k ) rs [ st [ k ]] = i ; if ( k < top ) ls [ i ] = st [ k + 1 ]; st [ ++ k ] = i ; top = k ; } dfs ( 0 , n , st [ 1 ], 0 ); ll ans = 0 ; for ( int i = 0 ; i <= n ; i ++ ) ans = ( ans + rk [ i ] * pw [ i ]) % mod ; printf ( \"%lld \\n \" , ans ); } return 0 ; } L. Problem L is the Only Lovely Problem Link solved by: badcw 00:03:25 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/18 12:01 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 10 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } string t = \"lovely\" ; int main ( int argc , char * argv []) { string s ; cin >> s ; int flag = 0 ; for ( int i = 0 ; i < s . length (); ++ i ) { if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { s [ i ] += 'a' - 'A' ; } if ( s [ i ] == t [ i ]) { flag ++ ; } if ( flag == t . length ()) break ; } W ( flag == t . length () ? \"lovely\" : \"ugly\" ); return 0 ; }","title":"2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#a-clam-and-fish","text":"solved by: badcw 00:19:06(-1) Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/18 12:15 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e6 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n ; char s [ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n ); R ( s ); int pre = 0 , res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s [ i ] == '1' ) { pre ++ ; } else if ( s [ i ] == '0' ) { if ( pre ) { pre -- ; res ++ ; } } else { res ++ ; } } W ( res + pre / 2 ); } return 0 ; }","title":"A. Clam and Fish"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#b-classical-string-problem","text":"solved by: badcw 00:11:12 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/18 12:07 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 4e6 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } char s [ maxn ]; int main ( int argc , char * argv []) { R ( s ); int q ; R ( q ); int p = 0 ; int len = strlen ( s ); char ch [ 2 ]; int x ; for ( int i = 0 ; i < q ; ++ i ) { R ( ch , x ); if ( ch [ 0 ] == 'M' ) { p += x ; p %= len ; if ( p < 0 ) p += len ; } else { x -- ; W ( s [( x + p ) % len ]); } } return 0 ; }","title":"B. Classical String Problem"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#c-operation-love","text":"solved by: ffacs 00:43:53(-1) Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 1e6 + 5 ; struct Poi { double y , x ; } poi [ 30 ]; double dis ( const Poi & a , const Poi & b ){ return sqrt (( a . x - b . x ) * ( a . x - b . x ) + ( a . y - b . y ) * ( a . y - b . y )); } double is ( double a , double b ) { return fabs ( a - b ) < 0.0001 ; } int main () { int T ; cin >> T ; while ( T -- ) { for ( int i = 0 ; i < 20 ; i ++ ) { scanf ( \"%lf%lf\" , & poi [ i ]. y , & poi [ i ]. x ); } for ( int i = 0 ; i < 20 ; i ++ ) { double d1 = dis ( poi [ i ], poi [( i + 19 ) % 20 ]); double d2 = dis ( poi [ i ], poi [( i + 1 ) % 20 ]); Poi p1 , p6 ; if ( is ( d1 , 1 ) && is ( d2 , 6 )) { p1 = { poi [( i + 19 ) % 20 ]. x - poi [ i ]. x , poi [( i + 19 ) % 20 ]. y - poi [ i ]. y } , p6 = { poi [( i + 1 ) % 20 ]. x - poi [ i ]. x , poi [( i + 1 ) % 20 ]. y - poi [ i ]. y }; if (( p1 . x * p6 . y ) - ( p6 . x * p1 . y ) < 0 ) { puts ( \"right\" ); } else { puts ( \"left\" ); } } if ( is ( d1 , 6 ) && is ( d2 , 1 )) { p6 = { poi [( i + 19 ) % 20 ]. x - poi [ i ]. x , poi [( i + 19 ) % 20 ]. y - poi [ i ]. y } , p1 = { poi [( i + 1 ) % 20 ]. x - poi [ i ]. x , poi [( i + 1 ) % 20 ]. y - poi [ i ]. y }; if (( p1 . x * p6 . y ) - ( p6 . x * p1 . y ) < 0 ) { puts ( \"right\" ); } else { puts ( \"left\" ); } } } ed :; } return 0 ; }","title":"C. Operation Love"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#d-points-construction-problem","text":"upsolved by: Verly \u9898\u610f:\u5728\u65e0\u9650\u5927\u7684\u683c\u5b50\u4e2d,\u539f\u672c\u6240\u6709\u683c\u5b50\u90fd\u662f\u767d\u8272\u7684,\u628an\u4e2a\u683c\u5b50\u6d82\u9ed1,\u6ee1\u8db3\u4e0a\u4e0b\u5de6\u53f3\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u5bf9\u4e3a\u5f02\u8272\u7684\u4e2a\u6570\u4e3am\u4e2a \u5bf9\u4e8em,\u5bb9\u6613\u5f97\u5230 m\u22644*n m\u22644*n \u4e14m\u53ea\u80fd\u4e3a\u5076\u6570,\u627e\u5230\u4e00\u7ec4ab,\u4f7f n\u2264a*b n\u2264a*b \u4e14 abs(a-b)\u22641 abs(a-b)\u22641 , 2*(a-b) 2*(a-b) \u5373\u4e3am\u7684\u4e0b\u754c \u9996\u5148\u586b\u5145\u957f\u65b9\u5f62\u7684\u5de6\u8fb9\u7f18\u548c\u4e0b\u8fb9\u7f18,\u6b64\u65f6\u5f02\u8272\u70b9\u5bf9\u6570\u4e3a 2*(a-b) 2*(a-b) ,\u4e4b\u540e\u5728\u5f80\u957f\u65b9\u5f62\u5185\u653e\u70b9,\u5f02\u8272\u70b9\u5bf9\u6570\u4e0d\u53d8 \u5f53\u5f02\u8272\u70b9\u5bf9\u6570\u5c0f\u4e8em\u65f6,\u4e0d\u65ad\u5c06\u975e\u5de6\u8fb9\u7f18\u548c\u4e0b\u8fb9\u7f18\u7684\u70b9\u5355\u72ec\u4e22\u5230\u8fdc\u5904,\u6b64\u65f6\u5f02\u8272\u70b9\u5bf9\u6570+4,\u5982\u679c\u5f02\u8272\u70b9\u5bf9\u6570>m,\u4e00\u5b9a\u53ea\u6bd4m\u59272,\u628a\u8fdc\u5904\u4e00\u4e2a\u5355\u72ec\u7684\u70b9\u653e\u52300,0\u4e0b\u65b9\u8fde\u63a5\u5373\u53ef \u5982\u679c\u975e\u5de6\u8fb9\u7f18\u548c\u4e0b\u8fb9\u7f18\u7684\u70b9\u5168\u90e8\u4e22\u5b8c\u65f6\u5f02\u8272\u70b9\u5bf9\u6570\u4ecd\u7136\u5c0f\u4e8em,\u5c06\u5de6\u8fb9\u7f18\u6700\u4e0a\u9762\u6216\u8005\u4e0b\u8fb9\u7f18\u6700\u53f3\u4fa7\u7684\u70b9\u4e22\u5411\u8fdc\u5904,\u6bcf\u6b21\u5f02\u8272\u70b9\u5bf9+2,\u76f4\u5230\u5f02\u8272\u70b9\u5bf9\u6570= 4*n 4*n Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 50 + 10 ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , m ; scanf ( \"%d%d\" , & n , & m ); if ( m > n * 4 || m % 2 ) { puts ( \"No\" ); continue ; } int a , b ; for ( int i = 1 ; ; i ++ ) { if ( i * i >= n && i + i - 1 <= n ) { a = i , b = i ; break ; } if ( i * ( i + 1 ) >= n && i + i <= n ) { a = i , b = i + 1 ; break ; } } if ( 2 * ( a + b ) > m ) { puts ( \"No\" ); continue ; } vector < pair < int , int > > res , res1 , res2 ; for ( int i = 0 ; i < a ; i ++ ) res . push_back ({ 0 , i }); for ( int j = 1 ; j < b ; j ++ ) res . push_back ({ j , 0 }); for ( int i = 1 ; i < a && res . size () + res1 . size () <= n ; i ++ ) for ( int j = 1 ; j < b ; j ++ ) { if ( res . size () + res1 . size () == n ) break ; res1 . push_back ({ j , i }); } int p = 0 ; int cnt = 2 * ( a + b ); while ( cnt < m && res1 . size () > 0 ) { res1 . pop_back (); res2 . push_back ({ p , 1000 }); p += 2 ; cnt += 4 ; } if ( cnt > m ) { res2 . pop_back (); res1 . push_back ({ 0 , a }); } else if ( cnt < m ) { while ( cnt + 2 <= m && res . size () > 0 ) { res . pop_back (); res2 . push_back ({ p , 1000 }); p += 2 ; cnt += 2 ; } } puts ( \"Yes\" ); for ( auto x : res ) printf ( \"%d %d \\n \" , x . first , x . second ); for ( auto x : res1 ) printf ( \"%d %d \\n \" , x . first , x . second ); for ( auto x : res2 ) printf ( \"%d %d \\n \" , x . first , x . second ); } return 0 ; }","title":"D. Points Construction Problem"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#e-two-matchings","text":"solved by: badcw 03:27:11(-4) \u9898\u610f\uff1a\u7ed92n\u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\uff0c\u8fb9\u7684\u6743\u503c\u4e3a\u70b9\u6743\u5dee\u7684\u7edd\u5bf9\u503c\uff0c\u6c42\u4e24\u4e2a\u5b8c\u5168\u4e0d\u76f8\u4ea4\u7684\u5b8c\u5168\u5339\u914d\uff0c\u4f7f\u5339\u914d\u503c\u4e4b\u548c\u6700\u5c0f\u3002 \u5bf9\u70b9\u6743\u6392\u5e8f\uff0c\u5c06\u70b9\u5206\u6210\u957f\u5ea6>=4\u7684\u82e5\u5e72\u4e2a\u5757\uff0cdp\u6c42\u89e3\u6700\u5c0f\u503c\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/18 15:06 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } ll dp [ maxn ]; ll mn [ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; R ( n ); VI a ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { R ( a [ i ]); } sort ( a . begin () + 1 , a . end ()); dp [ 0 ] = mn [ 0 ] = 1e18 ; for ( int i = 1 ; i <= 3 ; ++ i ) { mn [ i ] = - a [ 1 ] * 2 ; dp [ i ] = 1e18 ; } for ( int i = 4 ; i <= n ; ++ i ) { dp [ i ] = mn [ i - 3 ] + a [ i ] * 2 ; mn [ i ] = min ( mn [ i - 2 ], dp [ i - 1 ] - a [ i ] * 2 ); } W ( dp [ n ]); } return 0 ; }","title":"E. Two Matchings"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#f-fraction-construction-problem","text":"solved by: ffacs 04:47:35(-4) \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5206\u6570 \\frac a b \\frac a b \uff0c\u6c42c,d,e,f\u6ee1\u8db3 \\frac c e - \\frac d f = \\frac a b(d, f<b,c,e\u2264 4\u00d710^{12}) \\frac c e - \\frac d f = \\frac a b(d, f<b,c,e\u2264 4\u00d710^{12}) \u5982\u679cab\u4e0d\u4e92\u8d28\uff0c gcd(a,b)+a, b, gcd(a, b), b \u5373\u4e3a\u7b54\u6848 \u5bf9\u4e8e\u4e92\u8d28\u7684\u60c5\u51b5\uff0c\u5982\u679cb\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u4e2a\u6570\u53ea\u67091\u4e2a\uff0c\u5373 b=p^k b=p^k \uff0c\u7531\u4e8e a,b \u4e92\u8d28, \\frac c d - \\frac e f \\frac c d - \\frac e f \u5316\u7b80\u540e\u5fc5\u987b\u662f \\frac a b \\frac a b ,\u4f46 d,f<b ,df\u7684\u8d28\u56e0\u6570\u5206\u89e3\u8d28\u56e0\u6570\u6307\u6570\u90fd\u5c0f\u4e8ek,\u5f97\u5230\u77db\u76fe,\u6240\u4ee5\u65e0\u89e3 \u5982\u679cb\u7684\u4e0d\u540c\u8d28\u56e0\u6570\u4e2a\u6570\u5927\u4e8e1,\u627e\u5230df\u6ee1\u8db3 d*f=b d*f=b \u4e14 __gcd(d,f)=1 __gcd(d,f)=1 ,\u6709 \\frac {c*f-e*d} {d*f}=\\frac a b \\frac {c*f-e*d} {d*f}=\\frac a b ,\u7528exgcd\u6c42 c*f-e*d=a c*f-e*d=a Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 2e6 + 5 ; int prim [ maxn ], pcnt , mn [ maxn ]; bool isnp [ maxn ]; void getp () { for ( int i = 2 ; i < maxn ; i ++ ) { if ( ! isnp [ i ]) { prim [ ++ pcnt ] = i ; mn [ i ] = i ;} for ( int j = 1 ; j <= pcnt && i * prim [ j ] < maxn ; j ++ ) { isnp [ i * prim [ j ]] = 1 ; mn [ i * prim [ j ]] = prim [ j ]; if ( i % prim [ j ] == 0 ) break ; } } } inline void exgcd ( ll a , ll b , ll & g , ll & x , ll & y ) { if ( ! b ) g = a , x = 1 , y = 0 ; else exgcd ( b , a % b , g , y , x ), y -= x * ( a / b ); } int main () { getp (); int T ; cin >> T ; while ( T -- ) { ll a , b ; scanf ( \"%lld%lld\" , & a , & b ); ll c , d , e , f ; if ( b == 1 ) { puts ( \"-1 -1 -1 -1\" ); continue ;} if ( ! isnp [ b ]) { if ( a % b != 0 ) { puts ( \"-1 -1 -1 -1\" ); continue ;} else { c = a / b + 1 , d = 1 , e = 1 , f = 1 ; printf ( \"%lld %lld %lld %lld \\n \" , c , d , e , f ); } } else { if ( __gcd ( a , b ) != 1 ) { c = a + __gcd ( a , b ), d = b , e = __gcd ( a , b ), f = b ; int gcd = __gcd ( c , d ); c /= gcd ; d /= gcd ; gcd = __gcd ( e , f ); e /= gcd ; f /= gcd ; printf ( \"%lld %lld %lld %lld \\n \" , c , d , e , f ); } else { int t1 = mn [ b ], t2 = 0 ; int tem = b ; while ( tem != 1 ) { if ( mn [ tem ] == t1 ) tem /= t1 ; else { t2 = mn [ tem ]; break ;} } if ( t2 == 0 ) { puts ( \"-1 -1 -1 -1\" ); continue ;} ll y , x , gcd ; exgcd ( t2 , t1 , gcd , y , x ); // cout<<t2<<' '<<y<<' '<<t1<<' '<<x<<endl; // cout<<t1*(t2-(x%t2+t2)%t2)*a<<' '<<t1*(t2-(x%t2+t2)%t2)*a+a<<endl; c = t1 * ( t2 - ( x % t2 + t2 ) % t2 ) * a + a ; d = b ; e = t1 * ( t2 - ( x % t2 + t2 ) % t2 ) * a ; f = b ; gcd = __gcd ( c , d ); c /= gcd ; d /= gcd ; gcd = __gcd ( e , f ); e /= gcd ; f /= gcd ; printf ( \"%lld %lld %lld %lld \\n \" , c , d , e , f ); } } } return 0 ; }","title":"F. Fraction Construction Problem"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#g-operating-on-a-graph","text":"upsolved by: Verly \u9898\u610f:\u7ed9\u4e00\u5f20n\u4e2a\u70b9m\u6761\u8fb9\u7684\u56fe,\u521d\u59cb\u65f6\u70b9i\u7684\u989c\u8272\u4e3ai\uff0c\u8fdb\u884cq\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u989c\u8272\u4e3ai\u7684\u70b9\u5468\u56f4\u7684\u70b9\u67d3\u6210i\uff0c\u6c42q\u6b21\u64cd\u4f5c\u540en\u4e2a\u70b9\u7684\u989c\u8272\u3002 \u8003\u8651\u6bcf\u4e2a\u70b9\u6240\u8fde\u51fa\u7684\u8fb9\u6700\u591a\u53ea\u4f1a\u88ab\u8bbf\u95ee\u4e00\u6b21\uff0c\u6240\u4ee5\u53ea\u8981\u7ef4\u62a4\u67d0\u4e2a\u989c\u8272\u5f53\u524d\u8fd8\u6ca1\u6709\u7ed9\u76f8\u90bb\u70b9\u67d3\u8272\u7684\u70b9\uff0c\u7528\u94fe\u8868\u7ef4\u62a4\u8fb9\u96c6\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u70b9\u7684\u989c\u8272\uff0c\u6bcf\u6b21\u67d3\u8272\u65f6\u5408\u5e76\u94fe\u8868\u5373\u53ef\uff0c\u590d\u6742\u5ea6 O(n) O(n) Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 8e5 + 10 ; list < int > edge [ maxn ]; int pre [ maxn ]; int Find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = Find ( pre [ x ]); } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n ; i ++ ) { pre [ i ] = i ; edge [ i ]. clear (); } while ( m -- ) { int u , v ; scanf ( \"%d%d\" , & u , & v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } int q ; scanf ( \"%d\" , & q ); for ( int i = 0 ; i < q ; i ++ ) { int x ; scanf ( \"%d\" , & x ); if ( x != Find ( x )) continue ; list < int > tmp ; for ( auto v : edge [ x ]) { int fv = Find ( v ); if ( fv == x ) continue ; pre [ fv ] = x ; tmp . splice ( tmp . end (), edge [ fv ]); } swap ( edge [ x ], tmp ); } for ( int i = 0 ; i < n ; i ++ ) printf ( \"%d%c\" , Find ( i ), \" \\n \" [ i == n - 1 ]); } return 0 ; }","title":"G. Operating on a Graph"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#h-sort-the-strings-revision","text":"upsolved by: Verly \u9898\u610f\uff1a\u957f\u5ea6\u4e3an\u7684\u4e32 s_0 s_0 \u4e3a 01234567890123456789... \uff0c\u7ed9\u5b9a\u4e00\u4e2a0\uff5en-1\u7684\u6392\u5217p\u548c\u5e8f\u5217d\uff0c\u7b2ci\u6b21\u64cd\u4f5c\u8868\u793a\u628a s_{i-1} s_{i-1} \u7684\u7b2c p_i p_i \u4f4d\u4fee\u6539\u6210 d_i d_i \u5e76\u751f\u6210 s_i s_i \uff0c\u5bf9 s_0 s_0 \u5230 s_n s_n \u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c r_i r_i \u8868\u793a s_i s_i \u5728\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\uff08\u4ece0\u5f00\u59cb\uff09\uff0c\u6c42 \\sum_{i=0}^n (r_i*10000019^i)\\ mod \\ 1000000007 \\sum_{i=0}^n (r_i*10000019^i)\\ mod \\ 1000000007 \u8003\u8651\u4ee5 p_i p_i \u5728\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\u8fdb\u884c\u5206\u6cbb\uff0c\u5bf9\u4e8e p_i p_i \u6700\u5c0f\u503c\u4e3apos\u7684\u533a\u95f4 l,r \uff0c\u5982\u679c p[pos]%10!=d[pos] \uff0c\u6709 p[pos]%10<d[pos] \uff0c rk[l~pos-1]+=r-pos p[pos]%10>d[pos] , rk[pos~r]+=pos-l+1 \u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u533a\u95f4\u9012\u5f52\u505a\u4e0b\u53bb\u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e6 + 10 ; const int mod = 1e9 + 7 ; int n ; int p [ maxn ], d [ maxn ], ls [ maxn ], rs [ maxn ], st [ maxn ], rk [ maxn ]; ll pw [ maxn ] = { 1 }; void rand_p () { int seed , a , b , mod ; scanf ( \"%d%d%d%d\" , & seed , & a , & b , & mod ); for ( int i = 0 ; i < n ; i ++ ) p [ i ] = i ; for ( int i = 1 ; i < n ; i ++ ) { swap ( p [ seed % ( i + 1 )], p [ i ]); seed = ( 1ll * seed * a + b ) % mod ; } } void rand_d () { int seed , a , b , mod ; scanf ( \"%d%d%d%d\" , & seed , & a , & b , & mod ); for ( int i = 0 ; i < n ; i ++ ) { d [ i ] = seed % 10 ; seed = ( 1ll * seed * a + b ) % mod ; } } void dfs ( int l , int r , int root , int val ) { if ( p [ root ] == n || l >= r ) { for ( int i = l ; i <= r ; i ++ ) rk [ i ] = val + i - l ; return ; } dfs ( l , root , ls [ root ], ( p [ root ] % 10 > d [ root ]) ? ( val + r - root ) : val ), dfs ( root + 1 , r , rs [ root ], ( p [ root ] % 10 < d [ root ]) ? ( val + root - l + 1 ) : val ); } int main () { int t ; scanf ( \"%d\" , & t ); for ( int i = 1 ; i < maxn ; i ++ ) pw [ i ] = ( pw [ i - 1 ] * 10000019 ) % mod ; while ( t -- ) { scanf ( \"%d\" , & n ); rand_p (); rand_d (); for ( int i = 0 ; i < n ; i ++ ) if ( p [ i ] % 10 == d [ i ]) p [ i ] = n ; int top = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int k = top ; while ( k > 0 && p [ st [ k ]] > p [ i ]) k -- ; if ( k ) rs [ st [ k ]] = i ; if ( k < top ) ls [ i ] = st [ k + 1 ]; st [ ++ k ] = i ; top = k ; } dfs ( 0 , n , st [ 1 ], 0 ); ll ans = 0 ; for ( int i = 0 ; i <= n ; i ++ ) ans = ( ans + rk [ i ] * pw [ i ]) % mod ; printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"H. Sort the Strings Revision"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%B8%89%E5%9C%BA%EF%BC%89/#l-problem-l-is-the-only-lovely-problem","text":"solved by: badcw 00:03:25 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/18 12:01 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 10 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } string t = \"lovely\" ; int main ( int argc , char * argv []) { string s ; cin >> s ; int flag = 0 ; for ( int i = 0 ; i < s . length (); ++ i ) { if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { s [ i ] += 'a' - 'A' ; } if ( s [ i ] == t [ i ]) { flag ++ ; } if ( flag == t . length ()) break ; } W ( flag == t . length () ? \"lovely\" : \"ugly\" ); return 0 ; }","title":"L. Problem L is the Only Lovely Problem"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/","text":"Name Date Solved A B C D E F G H I J K 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2020/7/13 11/11 \u00d8 \u00d8 O O \u00d8 O \u00d8 \u00d8 \u00d8 O \u00d8 A. All with Pairs Link upsolved by: Verly \u9898\u610f\uff1a\u7ed9n\u4e2a\u4e32\uff0c f(s, t) f(s, t) \u8868\u793as\u7684\u524d\u7f00\u4e0et\u7684\u540e\u7f00\u6700\u957f\u5339\u914d\u7684\u957f\u5ea6\uff0c\u6c42 \\sum_{i=1}^n \\sum_{i=1}^n f(s_i, s_j)^2 (mod\\ 998244353) \\sum_{i=1}^n \\sum_{i=1}^n f(s_i, s_j)^2 (mod\\ 998244353) hash\u9884\u5904\u7406\u51fa\u6240\u6709\u540e\u7f00\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5bf9\u6bcf\u4e2a\u4e32\u7684\u524d\u7f00\u7b97\u51fahash\u503c\uff0c\u8bb0\u5f55\u8be5\u957f\u5ea6\u7684\u76f8\u540c\u4e32\u51fa\u73b0\u6b21\u6570\u3002 \u56e0\u4e3a\u5904\u7406\u51fa\u6765\u7684\u540e\u7f00\u4e0d\u4e00\u5b9a\u6700\u957f\uff0c\u53ef\u80fd\u6709 a,aba \u88ab\u91cd\u590d\u8ba1\u7b97\u7684\u60c5\u51b5\uff0c\u5bf9 s[i] \u6c42nex\u6570\u7ec4\uff0c\u4ece\u524d\u5f80\u540e\u626b\u4e00\u904d cnt[nex[i]]-=cnt[i] \u5373\u53ef\u6c42\u51fa\u8be5\u4e32\u5bf9\u5e94\u7684\u6bcf\u4e2a\u4e32\u7684\u6700\u957f\u540e\u7f00\u3002 Code by: Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e6 + 10 ; const int key = 131 ; const int mod = 998244353 ; string s [ maxn ]; int cnt [ maxn ], nex [ maxn ]; map < ll , int > mp ; void Hash ( string s ) { ll cur = 0 , p = 1 ; for ( int i = s . size () - 1 ; i >= 0 ; i -- ) { cur = ( s [ i ] - 'a' + 1 ) * p + cur ; p *= key ; mp [ cur ] ++ ; } } void getNex ( string s ) { int i = 0 , j = - 1 ; nex [ i ] = j ; while ( i < s . size ()) { if ( j == - 1 || s [ i ] == s [ j ]) nex [ ++ i ] = ++ j ; else j = nex [ j ]; } } int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ]; Hash ( s [ i ]); } ll res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ll cur = 0 ; for ( int j = 0 ; j < s [ i ]. size (); j ++ ) { cur = cur * key + ( s [ i ][ j ] - 'a' + 1 ); cnt [ j + 1 ] = mp [ cur ]; } getNex ( s [ i ]); for ( int j = 1 ; j <= s [ i ]. size (); j ++ ) cnt [ nex [ j ]] -= cnt [ j ]; for ( int j = 1 ; j <= s [ i ]. size (); j ++ ) ( res += 1ll * cnt [ j ] * j * j % mod ) %= mod ; } printf ( \"%lld \\n \" , res ); return 0 ; } B. Boundary Link upsolved by: badcw \u9898\u610f\uff1a\u7ed9n\u4e2a\u70b9\uff0c\u6c42\u8fc7\u539f\u70b9\u7684\u5706\u6700\u591a\u80fd\u6709\u591a\u5c11\u4e2a\u70b9\u6070\u597d\u5728\u5706\u4e0a\u3002 (O,A,B)\u4e09\u70b9\u5b9a\u5706\uff0c\u9009\u62e9A\u5e76\u679a\u4e3e\u70b9B\u5e76\u7b97\u51fa\u5706\u5fc3\uff0c\u5bf9\u76f8\u540c\u5706\u5fc3\u8ba1\u7b97\u4e2a\u6570\u53d6max\u3002 Code by: badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/13 21:13 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } typedef double db ; const db eps = 1e-6 ; const db pi = acos ( - 1 ); int sign ( db k ){ if ( k > eps ) return 1 ; else if ( k <- eps ) return - 1 ; return 0 ; } int cmp ( db k1 , db k2 ){ return sign ( k1 - k2 );} int inmid ( db k1 , db k2 , db k3 ){ return sign ( k1 - k3 ) * sign ( k2 - k3 ) <= 0 ;} // k3 \u5728 [k1,k2] \u5185 struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} int operator == ( const point & k1 ) const { return cmp ( x , k1 . x ) == 0 && cmp ( y , k1 . y ) == 0 ;} // \u9006\u65f6\u9488\u65cb\u8f6c point turn ( db k1 ){ return ( point ){ x * cos ( k1 ) - y * sin ( k1 ), x * sin ( k1 ) + y * cos ( k1 )};} point turn90 (){ return ( point ){ - y , x };} bool operator < ( const point k1 ) const { int a = cmp ( x , k1 . x ); if ( a ==- 1 ) return 1 ; else if ( a == 1 ) return 0 ; else return cmp ( y , k1 . y ) ==- 1 ; } db abs (){ return sqrt ( x * x + y * y );} db abs2 (){ return x * x + y * y ;} db dis ( point k1 ){ return (( * this ) - k1 ). abs ();} point unit (){ db w = abs (); return ( point ){ x / w , y / w };} void scan (){ double k1 , k2 ; scanf ( \"%lf%lf\" , & k1 , & k2 ); x = k1 ; y = k2 ;} void print (){ printf ( \"%.11lf %.11lf \\n \" , x , y );} db getw (){ return atan2 ( y , x );} point getdel (){ if ( sign ( x ) ==- 1 || ( sign ( x ) == 0 && sign ( y ) ==- 1 )) return ( * this ) * ( - 1 ); else return ( * this );} int getP () const { return sign ( y ) == 1 || ( sign ( y ) == 0 && sign ( x ) ==- 1 );} }; int inmid ( point k1 , point k2 , point k3 ){ return inmid ( k1 . x , k2 . x , k3 . x ) && inmid ( k1 . y , k2 . y , k3 . y );} db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} db dot ( point k1 , point k2 ){ return k1 . x * k2 . x + k1 . y * k2 . y ;} db rad ( point k1 , point k2 ){ return atan2 ( cross ( k1 , k2 ), dot ( k1 , k2 ));} // -pi -> pi int compareangle ( point k1 , point k2 ){ return k1 . getP () < k2 . getP () || ( k1 . getP () == k2 . getP () && sign ( cross ( k1 , k2 )) > 0 ); } struct circle { point o ; db r ; void scan (){ o . scan (); scanf ( \"%lf\" , & r );} int inside ( point k ){ return cmp ( r , o . dis ( k ));} }; point getcircle ( point k1 , point k2 , point k3 ){ db a1 = k2 . x - k1 . x , b1 = k2 . y - k1 . y , c1 = ( a1 * a1 + b1 * b1 ) / 2 ; db a2 = k3 . x - k1 . x , b2 = k3 . y - k1 . y , c2 = ( a2 * a2 + b2 * b2 ) / 2 ; db d = a1 * b2 - a2 * b1 ; if ( d == 0 ) { return { 100000 , 100000 }; } point o = ( point ){ k1 . x + ( c1 * b2 - c2 * b1 ) / d , k1 . y + ( a1 * c2 - a2 * c1 ) / d }; return o ; } int n ; point p [ maxn ]; int main ( int argc , char * argv []) { R ( n ); point zero = { 0 , 0 }; point lim = { 100000 , 100000 }; for ( int i = 1 ; i <= n ; ++ i ) { p [ i ]. scan (); } if ( n == 1 ) { W ( 1 ); return 0 ; } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { vector < point > mpx ; for ( int j = 1 ; j <= n ; ++ j ) { if ( i == j ) continue ; mpx . push_back ( getcircle ( zero , p [ i ], p [ j ])); } sort ( mpx . begin (), mpx . end ()); point pre = mpx [ 0 ]; if ( mpx [ 0 ] == lim ) { continue ; } int tmp = 1 ; for ( int j = 1 ; j < mpx . size (); ++ j ) { if ( mpx [ j ] == lim ) break ; if ( pre == mpx [ j ]) { tmp ++ ; } else { res = max ( res , tmp ); tmp = 1 ; pre = mpx [ j ]; } } res = max ( res , tmp ); } W ( res + 1 ); return 0 ; } C. Cover the Tree Link solved by: badcw 02:22:47(-1) \u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u6811\u9009\u62e9\u6700\u5c11\u7684\u94fe\u8986\u76d6\u6240\u6709\u8fb9\uff0c\u540c\u4e00\u6761\u8fb9\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\uff0c\u8f93\u51fa\u65b9\u6848\u3002 \u9898\u89e3\uff1a \u9996\u5148\u8003\u8651\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u6700\u5c11\u9700\u8981\u7ecf\u8fc7\u4e00\u6b21\uff0c\u7ecf\u8fc7\u591a\u6b21\u663e\u7136\u662f\u4e0d\u4f18\u7684\u3002 \u5bf9\u4e8e\u4efb\u610f\u9009\u5b9a\u7684\u94fe\uff0c\u4e24\u7aef\u53d6\u53f6\u5b50\u8282\u70b9\u663e\u7136\u662f\u4e0d\u52a3\u7684\uff0c\u5c31\u7b97\u4e0d\u53d6\u53f6\u5b50\u62d3\u5c55\u5230\u53f6\u5b50\u4e5f\u662f\u4e0d\u52a3\u7684\u3002 \u8003\u8651\u5bf9\u53f6\u5b50\u8282\u70b9\u914d\u5bf9\uff0c\u663e\u7136\u53ef\u4ee5\u5f97\u5230\u6700\u5c11\u8986\u76d6\u4e3a (k+1)/2 (k+1)/2 \uff0c\u5176\u4e2d k k \u8868\u793a\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u3002 \u8003\u8651\u5b9a\u6839\u4e4b\u540e\u6784\u9020\u65b9\u6848\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5b50\u6811\u5185\u6709\u5947\u6570\u4e2a\u53f6\u5b50\u5f80\u8be5\u8282\u70b9\u8fde\uff0c\u53d6\u5176\u4e2d\u4efb\u4e00\u4e2a\u5f80\u4e0a\u8fde\uff0c\u5176\u4ed6\u4e24\u4e24\u76f8\u8fde\uff08\u6ce8\u610f\u5982\u679c\u662f\u4e00\u4e2a\u5b50\u6811\u8fc7\u6765\u4e24\u4e2a\u7684\u4e0d\u80fd\u76f8\u8fde\uff09\u5373\u53ef\uff0c\u5bf9\u4e8e\u5076\u6570\u4e2a\u8282\u70b9\uff0c\u53d6\u4e24\u4e2a\u5f80\u4e0a\u8fde\u3002 \u5176\u5b9e\u8fd9\u79cd\u89e3\u6cd5\u4f1a\u5199\u8d77\u6765\u6bd4\u8f83\u96be\u53d7\uff0c\u6807\u7a0b\u5199\u7684\u6309\u53f6\u5b50 dfs \u5e8f\uff0c i <-> k/2+i i <-> k/2+i \u4e5f\u5f88\u6709\u9053\u7406\u3002 Code by: badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/13 13:48 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n ; vector < int > edge [ maxn ]; pair < int , int > has [ maxn ]; int sz [ maxn ]; struct node { int a ; bool operator < ( const node & oth ) const { return sz [ a ] < sz [ oth . a ]; } }; void dfs ( int u , int pre ) { if ( edge [ u ]. size () == 1 ) { sz [ u ] = 1 ; has [ u ] = { u , - 1 }; return ; } priority_queue < node > s ; int tot = 0 ; for ( auto v : edge [ u ]) { if ( v == pre ) continue ; dfs ( v , u ); s . push ({ v }); tot += sz [ v ]; } if ( tot % 2 == 1 ) { while ( tot > 1 ) { int aa = s . top (). a ; s . pop (); int bb = s . top (). a ; s . pop (); int x = has [ aa ]. first ; if ( sz [ aa ] == 2 ) { x = has [ aa ]. second ; } sz [ aa ] -- ; int y = has [ bb ]. first ; if ( sz [ bb ] == 2 ) { y = has [ bb ]. second ; } sz [ bb ] -- ; W ( x , y ); if ( sz [ aa ]) { s . push ({ aa }); } if ( sz [ bb ]) { s . push ({ bb }); } tot -= 2 ; } sz [ u ] = 1 ; has [ u ] = { has [ s . top (). a ]. first , - 1 }; return ; } else { while ( tot > 2 ) { int aa = s . top (). a ; s . pop (); int bb = s . top (). a ; s . pop (); int x = has [ aa ]. first ; if ( sz [ aa ] == 2 ) { x = has [ aa ]. second ; } sz [ aa ] -- ; int y = has [ bb ]. first ; if ( sz [ bb ] == 2 ) { y = has [ bb ]. second ; } sz [ bb ] -- ; W ( x , y ); if ( sz [ aa ]) { s . push ({ aa }); } if ( sz [ bb ]) { s . push ({ bb }); } tot -= 2 ; } sz [ u ] = 2 ; int aa = has [ s . top (). a ]. first ; int bb = 0 ; if ( sz [ s . top (). a ] == 2 ) { bb = has [ s . top (). a ]. second ; has [ u ] = { aa , bb }; return ; } s . pop (); bb = has [ s . top (). a ]. first ; has [ u ] = { aa , bb }; } } int main ( int argc , char * argv []) { R ( n ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; R ( u , v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } if ( n == 1 ) { W ( 0 ); return 0 ; } int flag = - 1 ; int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( edge [ i ]. size () > 1 ) { flag = i ; } else { res ++ ; } } W (( res + 1 ) / 2 ); // cerr << flag << endl; dfs ( flag , 0 ); // for (int i = 1; i <= n; ++i) { // cerr << i << \" **: \" << has[i].first << \" \" << has[i].second << endl; // } if ( sz [ flag ] == 1 ) { W ( has [ flag ]. first , flag ); } else { W ( has [ flag ]. first , has [ flag ]. second ); } return 0 ; } D. Duration Link solved by: badcw 00:05:43 \u7b7e\u5230\uff0c\u65f6\u95f4\u505a\u5dee\u53d6\u7edd\u5bf9\u503c\u5373\u53ef Code by: badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/13 12:02 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 100 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int h1 , m1 , s1 ; int h2 , m2 , s2 ; int main ( int argc , char * argv []) { scanf ( \"%2d:%2d:%2d\" , & h1 , & m1 , & s1 ); scanf ( \"%2d:%2d:%2d\" , & h2 , & m2 , & s2 ); int res = ( h2 - h1 ) * 60 * 60 + ( m2 - m1 ) * 60 + s2 - s1 ; // int lim = 24 * 60 * 60; // res = (res + lim) % lim; W ( abs ( res )); return 0 ; } E. Exclusive OR Link \u7ed9 n \u4e2a\u6570\u5b57\uff0c\u73b0\u5728 ans[k] \u8868\u793a\u6311\u9009\u4efb\u610f k \u4e2a\u6570\u5b57\uff08\u53ef\u91cd\u590d\u6311\u9009\u4e00\u4e2a\u6570\uff09\u5f02\u6216\u8d77\u6765\u7684\u6700\u5927\u503c\uff0c\u6c42 ans[1]~ans[n]\uff0c\u503c\u57df 2^{18} 2^{18} \u3002 \u7531\u7ebf\u6027\u57fa\u539f\u7406\u53ef\u4ee5\u77e5\u9053\u6700\u591a 19 \u4e2a\u6570\u5b57\u5c31\u53ef\u4ee5\u83b7\u5f97\u8fd9 n \u4e2a\u6570\u5b57\u7684\u6700\u5927\u503c\u3002\u4e3a\u4ec0\u4e48\u4e0d\u662f18\uff0c\u56e0\u4e3a\u5b58\u57280\u3002 \u90a3\u4e48\u663e\u7136\u540e\u9762\u53d6\u4efb\u610f\u4e24\u4e2a\u76f8\u7b49\u7684\u6570\u5b57\uff0c\u7b54\u6848\u663e\u7136\u5c31\u662f ans[k-2] ans[k-2] \u90a3\u4e48\u6211\u4eec\u77e5\u9053\u7b2c\u4e00\u6b21 f_i f_i \u8868\u793a\u5b58\u4e0d\u5b58\u5728 i \u8fd9\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48 g_i=\\sum_{j\\bigotimes k=i}f_i*f_j g_i=\\sum_{j\\bigotimes k=i}f_i*f_j \u5219\u8868\u793a\u80fd\u4e0d\u80fd\u53d6\u4e24\u4e2a\u6570\u8868\u793a i i \u3002\u7136\u540e\u6574\u4e2a\u5177\u6709\u4f20\u9012\u6027\uff0c\u53ea\u7528\u505a 19 \u6b21 fwt \u5c31\u80fd\u83b7\u5f97\u7b54\u6848\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/22 13:56 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll int using namespace std ; const int maxn = 1 << 18 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } template < typename T > void fwt ( ll a [], int n , T f ) { for ( int d = 1 ; d < n ; d *= 2 ) for ( int i = 0 , t = d * 2 ; i < n ; i += t ) for ( int j = 0 ; j < d ; j ++ ) f ( a [ i + j ], a [ i + j + d ]); } void AND ( ll & a , ll & b ) { a += b ; } void OR ( ll & a , ll & b ) { b += a ; } void XOR ( ll & a , ll & b ) { ll x = a , y = b ; a = x + y ; b = x - y ; } void rAND ( ll & a , ll & b ) { a -= b ; } void rOR ( ll & a , ll & b ) { b -= a ; } void rXOR ( ll & a , ll & b ) { // static ll INV2 = (mod + 1) / 2; ll x = a , y = b ; a = ( x + y ) / 2 ; b = ( x - y ) / 2 ; } int a [ maxn ], b [ maxn ]; int res [ maxn ]; int main ( int argc , char * argv []) { int n ; R ( n ); for ( int i = 0 ; i < n ; ++ i ) { int x ; R ( x ); a [ x ] = b [ x ] = 1 ; res [ 0 ] = max ( res [ 0 ], x ); } fwt ( b , maxn , XOR ); for ( int i = 1 ; i <= 18 ; ++ i ) { fwt ( a , maxn , XOR ); for ( int j = 0 ; j < maxn ; ++ j ) a [ j ] *= b [ j ]; fwt ( a , maxn , rXOR ); for ( int j = 0 ; j < maxn ; ++ j ) { if ( a [ j ]) { a [ j ] = 1 ; res [ i ] = j ; } } } for ( int i = 19 ; i < n ; ++ i ) res [ i ] = res [ i - 2 ]; W ( VI ( res , res + n )); return 0 ; } F. Fake Maxpooling Link \u7ed9\u4e00\u4e2a n*m \u7684\u77e9\u9635\uff0c (i,j) \u4f4d\u7f6e\u7684\u6570\u4e3a lcm(i,j) lcm(i,j) \uff0c\u6c42\u6240\u6709 k*k \u7684\u5b50\u77e9\u9635\u7684\u6700\u5927\u503c\u4e4b\u548c\u3002 \u9996\u5148\u8981\u505a\u7684\u662f\u628a\u6bcf\u4e2a\u70b9\u7684\u503c\u6c42\u51fa\u6765\uff0c\u5982\u679c gcd(i,j)=1 gcd(i,j)=1 \u90a3\u4e48 gcd(i*x, j*x)=x gcd(i*x, j*x)=x \uff0c\u7c7b\u4f3c\u7ebf\u7b5b O(n*m) O(n*m) \u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u503c\u3002 \u7136\u540e\u5355\u8c03\u961f\u5217\u5904\u7406\u6bcf\u5217\u4e0a\u7b2c (i-k~i) (i-k~i) \u70b9\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u5355\u8c03\u961f\u5217\u5904\u7406\u884c\u7684\u6700\u5927\u503c\u5373\u53ef\u3002 Code by badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/17 15:25 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 5005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , m , k ; int mx [ maxn ][ maxn ]; int tmp [ maxn ]; int dq [ maxn ]; int main ( int argc , char * argv []) { R ( n , m , k ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { if ( mx [ i ][ j ] == 0 ) { for ( int k = 1 ; k * i <= n && k * j <= m ; ++ k ) { mx [ i * k ][ j * k ] = i * j * k ; } } } } // for (int i = 1; i <= n; ++i) { // for (int j = 1; j <= m; ++j) { // cerr << mx[i][j] << \" \"; // } // cerr << endl; // } // cerr << \"*\" << endl; for ( int j = 1 ; j <= m ; ++ j ) { int pre = 1 , lst = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( pre <= lst && i - dq [ pre ] >= k ) pre ++ ; while ( pre <= lst && mx [ dq [ lst ]][ j ] <= mx [ i ][ j ]) lst -- ; dq [ ++ lst ] = i ; tmp [ i ] = mx [ dq [ pre ]][ j ]; } for ( int i = 1 ; i <= n ; ++ i ) mx [ i ][ j ] = tmp [ i ]; } // for (int i = 1; i <= n; ++i) { // for (int j = 1; j <= m; ++j) { // cerr << mx[i][j] << \" \"; // } // cerr << endl; // } ll res = 0 ; for ( int i = k ; i <= n ; ++ i ) { int pre = 1 , lst = 0 ; for ( int j = 1 ; j <= m ; ++ j ) { while ( pre <= lst && j - dq [ pre ] >= k ) pre ++ ; while ( pre <= lst && mx [ i ][ dq [ lst ]] <= mx [ i ][ j ]) lst -- ; dq [ ++ lst ] = j ; tmp [ j ] = mx [ i ][ dq [ pre ]]; } for ( int j = k ; j <= m ; ++ j ) res += tmp [ j ]; } W ( res ); return 0 ; } G. Greater and Greater Link upsolved by: badcw, Verly \u9898\u610f\uff1a\u7ed9\u4e24\u4e2a\u957f\u5ea6\u4e3an\u548cm\u7684\u5e8f\u5217 A,B(m\u2264n) A,B(m\u2264n) ,\u95eeA\u6709\u591a\u5c11\u957f\u5ea6\u4e3a len(B) len(B) \u7684\u5b50\u4e32S\uff0c\u6ee1\u8db3 \u2200_i\u2208{1,2,\u22ef,m},S_i\\ge B_i \u2200_i\u2208{1,2,\u22ef,m},S_i\\ge B_i \u73b0\u5728\u7528 bitset s[i] \u8868\u793a A \u7684\u6bcf\u4e00\u4f4d\u53ef\u4ee5\u4f5c\u4e3a B_i B_i \u7684\u5f00\u5934\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u6240\u6709\u4f4d\u4e0e\u8d77\u6765\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u5177\u4f53\u6765\u8bf4\u5982\u679c bitset s[i] \u8868\u793a A \u7684\u6bcf\u4e00\u4f4d\u662f\u5426\u6bd4 B_i B_i \u5927\uff0c s_1&(s_2>>1)&(s_3>>2)... s_1&(s_2>>1)&(s_3>>2)... \u5c31\u662f\u7b54\u6848\u3002 \u6240\u4ee5\u9898\u76ee\u8f6c\u6362\u4e3a\u4e86\u600e\u4e48\u6c42\u6240\u6709 B_i B_i \u5728 A \u4e2d 1 \u7684\u4f4d\u7f6e\u3002\u5229\u7528\u5355\u8c03\u6027\u6392\u5e8f\u505a\u5373\u53ef\u3002 \u590d\u6742\u5ea6 O(n*m/W+mlogm) O(n*m/W+mlogm) Code by Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e5 + 10 ; int a [ maxn ], b [ maxn ]; bitset < maxn > tmp , res ; struct node { int val , pos , tp ; bool operator < ( const node x ) const { if ( val != x . val ) return val < x . val ; return tp < x . tp ; } }; int main () { int n , m ; scanf ( \"%d%d\" , & n , & m ); vector < node > ve ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ]); tmp [ i ] = res [ i ] = 1 ; ve . push_back ({ a [ i ], i , 1 }); } for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d\" , & b [ i ]); ve . push_back ({ b [ i ], i , 0 }); } sort ( ve . begin (), ve . end ()); for ( auto x : ve ) { if ( x . tp ) tmp [ x . pos ] = 0 ; else res &= tmp >> x . pos ; } printf ( \"%d \\n \" , ( int ) res . count ()); return 0 ; } H. Happy Triangle Link upsolved by: badcw \u7ef4\u62a4\u4e00\u4e2a mulitset\uff0c\u4e09\u79cd\u64cd\u4f5c\uff1a \u52a0\u5165\u4e00\u4e2a\u6570 x \u5220\u9664\u4e00\u4e2a\u6570 x \u6c42\u4e00\u4e2a\u6570 x \u662f\u5426\u53ef\u4ee5\u4e0e mulitset \u4e2d\u4e24\u4e2a\u7684\u6570\u6784\u6210\u4e09\u89d2\u5f62 \u9996\u5148\u5bf9\u4e8e\u4e00\u4e2a\u6570 x \u5047\u8bbe\u53ef\u4ee5\u5728 mulitset \u4e2d\u627e\u5230 y,z \u4e0e\u4e4b\u6784\u6210\u4e09\u89d2\u5f62\uff0c\u73b0\u5728\u5047\u8bbe y\\le z y\\le z \u800c\u4e14 y \u548c z \u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u6570\u5b57 k x \\le y x \\le y \uff0c\u53ef\u4ee5\u63a8\u51fa z \\lt x + y z \\lt x + y \u6240\u4ee5 k \\lt x + y k \\lt x + y \uff0c\u6240\u4ee5 x,y,k x,y,k \u53ef\u4ee5\u6784\u6210\u4e09\u89d2\u5f62 y \\le x \\le z y \\le x \\le z \uff0c\u53ef\u4ee5\u63a8\u51fa z \\lt x + y z \\lt x + y \u5982\u679c k \\le x k \\le x \u5219 z \\lt x + k z \\lt x + k \uff0c\u6240\u4ee5 x,k,z x,k,z \u53ef\u4ee5\u6784\u6210\u4e09\u89d2\u5f62\uff0c x \\le k x \\le k \u5219 x,y,k x,y,k \u53ef\u4ee5\u6784\u6210\u4e09\u89d2\u5f62 z \\le x z \\le x \uff0c\u53ef\u4ee5\u63a8\u51fa x \\lt z + y x \\lt z + y \uff0c\u6240\u4ee5 x \\lt k + z x \\lt k + z \uff0c\u6240\u4ee5 x,z,k x,z,k \u53ef\u4ee5\u6784\u6210\u4e09\u89d2\u5f62 \u6240\u4ee5\u5982\u679c\u5b58\u5728\u89e3\u4e00\u5b9a\u5b58\u5728\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u662f\u5b83\u7684\u89e3\u3002 \u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u6362\u6210\u4e86\uff1a\u5f80\u96c6\u5408\u4e2d\u52a0\u5165\u6216\u5220\u9664\u6570\uff0c\u7ef4\u62a4\u76f8\u90bb\u4e24\u9879\u8986\u76d6\u7684\u70b9\u96c6\u533a\u95f4 \u8003\u8651\u76f8\u90bb\u4e24\u9879\u4e3a x,y x,y \uff0c\u5219\u4ed6\u4eec\u80fd\u5bf9\u4e00\u4e2a\u6570\u4ea7\u751f\u8d21\u732e\u7684\u4e3a [y-x+1,x+y-1] [y-x+1,x+y-1] \u8fd9\u4e2a\u533a\u95f4\uff0c\u8bbe\u4e3a f(x,y) f(x,y) \u3002 \u8003\u8651\u63d2\u5165\u4e00\u4e2a\u6570 x x \uff0c\u539f\u96c6\u5408 x x \u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u5b57\u4e3a y,z y,z \uff0c\u5219\u4f1a\u6dfb\u52a0 f(y,x) f(y,x) \uff0c f(x,z) f(x,z) \uff0c\u5220\u9664 f(y,z) f(y,z) \u5220\u9664\u4e00\u4e2a\u6570 x x \uff0c\u5219\u4e3a\u6dfb\u52a0 f(y,z) f(y,z) \uff0c\u5220\u9664 f(y,x) f(y,x) \uff0c f(x,z) f(x,z) \uff0c\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u52a0\u5355\u70b9\u548c\u5373\u53ef\uff0c\u6bd4\u8f83\u96be\u5199\u7684\u662f\u5de6\u53f3\u6570\u5b57\u8fb9\u754c\u7684\u5904\u7406\u3002 Code by: badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/13 14:58 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int q ; int op [ maxn ]; int x [ maxn ]; vector < int > xpos ; int val [ maxn << 2 ]; int le , re , k ; void update ( int rt , int l , int r ) { if ( le <= l && r <= re ) { val [ rt ] += k ; return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); } int query ( int rt , int l , int r ) { if ( l == r ) return val [ rt ]; int mid = l + r >> 1 ; if ( le <= mid ) return val [ rt ] + query ( rt << 1 , l , mid ); else return val [ rt ] + query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { R ( q ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= q ; ++ i ) { R ( op [ i ], x [ i ]); xpos . push_back ( x [ i ]); } xpos . push_back ( 2e9 ); sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); multiset < int > st ; int sz = xpos . size (); for ( int i = 1 ; i <= q ; ++ i ) { int pos = lower_bound ( xpos . begin (), xpos . end (), x [ i ]) - xpos . begin (); if ( op [ i ] == 1 || op [ i ] == 2 ) { if ( op [ i ] == 2 ) st . erase ( st . lower_bound ( x [ i ])); int yy = x [ i ]; auto zz = st . lower_bound ( yy ); auto xx = st . upper_bound ( yy ); if ( xx != st . begin ()) { xx = prev ( xx ); } else xx = st . end (); if ( xx != st . end ()) { int tx = * xx ; int ty = yy ; int reall = ty - tx + 1 ; int realr = ty + tx - 1 ; le = max ( 1 , ( int )( lower_bound ( xpos . begin (), xpos . end (), reall ) - xpos . begin ())); re = upper_bound ( xpos . begin (), xpos . end (), realr ) - xpos . begin () - 1 ; k = ( op [ i ] == 1 ? 1 : - 1 ); if ( le <= re ) update ( 1 , 1 , sz ); } if ( zz != st . end ()) { int tx = yy ; int ty = * zz ; int reall = ty - tx + 1 ; int realr = ty + tx - 1 ; le = max ( 1 , ( int )( lower_bound ( xpos . begin (), xpos . end (), reall ) - xpos . begin ())); re = upper_bound ( xpos . begin (), xpos . end (), realr ) - xpos . begin () - 1 ; k = ( op [ i ] == 1 ? 1 : - 1 ); if ( le <= re ) update ( 1 , 1 , sz ); } if ( st . count ( yy ) == 0 && xx != st . end () && zz != st . end ()) { int tx = * xx ; int ty = * zz ; int reall = ty - tx + 1 ; int realr = ty + tx - 1 ; le = max ( 1 , ( int )( lower_bound ( xpos . begin (), xpos . end (), reall ) - xpos . begin ())); re = upper_bound ( xpos . begin (), xpos . end (), realr ) - xpos . begin () - 1 ; k = ( op [ i ] == 2 ? 1 : - 1 ); if ( le <= re ) update ( 1 , 1 , sz ); } if ( op [ i ] == 1 ) st . insert ( x [ i ]); } else if ( op [ i ] == 3 ) { le = re = pos ; int ss = query ( 1 , 1 , sz ); W ( ss > 0 ? \"Yes\" : \"No\" ); } } return 0 ; } I. Interval Link upsolved by: Verly \u7ed9\u4e00\u4e2a [1,n] [1,n] \u7684\u521d\u59cb\u533a\u95f4\uff0c\u5728\u6ee1\u8db3\u4fee\u6539\u540e 1\u2264l<r\u2264n 1\u2264l<r\u2264n \u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u533a\u95f4 [l,r](l<r) [l,r](l<r) \u6bcf\u6b21\u53ef\u4f7fl,r\u52a01\u6216-1\u3002 \u7ed9\u5b9a\u82e5\u5e72\u4e2a\u9650\u5236\u6761\u4ef6(l, r, \u2018L\u2019, c)\u6216(l, r, \u2018R\u2019, c)\uff0c\u8868\u793a\u82b1\u8d39c\u6765\u7981\u6b62l<->l+1\u6216r<->r-1\uff0c\u95ee\u6700\u5c11\u82b1\u8d39\u591a\u5c11\uff0c\u624d\u80fd\u4f7f\u533a\u95f4 [1,n] [1,n] \u65e0\u6cd5\u88ab\u4fee\u6539\u4e3a l=r l=r \u7684\u60c5\u51b5\u3002 \u628a\u533a\u95f4\u89c6\u4e3a\u7f51\u683c\u4e0a\u7684\u70b9\u5efa\u7f51\u7edc\u6d41\u6a21\u578b\uff0c \u5bf9\u4e8e\u6bcf\u4e2a\u9650\u5236\u6761\u4ef6\u8fde (pt(l,r),pt(l', r'),c) \u7684\u53cc\u5411\u8fb9\uff0c\u8d77\u70b9\u4e3a (1, n) , \u5e76\u5bf9 (i,i) \u5411T\u8fde\u6d41\u91cf\u4e3ainf\u7684\u8fb9\u3002\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u7f51\u683c\u56fe\u6700\u5c0f\u5272\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u5076\u56fe\u6700\u77ed\u8def\u6c42\u89e3\uff0c\u5bf9\u539f\u56fe\u4e2d\u7684ST\u8fde\u4e00\u6761\u6d41\u91cf\u4e3ainf\u7684\u8fb9\u628a\u7f51\u683c\u5916\u7684\u7a7a\u95f4\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5c06\u539f\u56fe\u4e2d\u7684\u683c\u89c6\u4e3a\u70b9\uff0c\u8fb9\u6743\u4e3a\u539f\u56fe\u4e2d\u8fb9\u7684\u6d41\u91cf\u5927\u5c0f\uff0c\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002 Code by: Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; #define int ll const int maxn = 600 * 600 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 20 * maxn ]; void addEdge ( int u , int v , int w ) { edge [ ++ cnt ] = { head [ u ], v , w }; head [ u ] = cnt ; } inline void add ( int u , int v , int w ) { addEdge ( u , v , w ); addEdge ( v , u , w ); } void dij ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int id [ 510 ][ 510 ]; signed main () { int n , m , tot = 0 ; memset ( head , 0xff , sizeof head ); scanf ( \"%lld%lld\" , & n , & m ); for ( int i = 0 ; i <= n + 1 ; i ++ ) for ( int j = 0 ; j <= n + 1 ; j ++ ) id [ i ][ j ] = tot ++ ; for ( int i = 1 ; i <= m ; i ++ ) { int l , r , c ; char s [ 5 ]; scanf ( \"%lld%lld%s%lld\" , & l , & r , s , & c ); if ( s [ 0 ] == 'L' ) add ( id [ l ][ r ], id [ l ][ r + 1 ], c ); else add ( id [ l - 1 ][ r ], id [ l ][ r ], c ); } int s = id [ 0 ][ 1 ], t = id [ n + 1 ][ n + 1 ]; for ( int i = 1 ; i <= n ; i ++ ) add ( s , id [ 0 ][ i ], 0 ), add ( id [ i ][ n + 1 ], t , 0 ); dij ( s ); printf ( \"%lld \\n \" , dis [ t ] == inf ? - 1 : dis [ t ]); return 0 ; } J. Just Shuffle Link solved by: Verly 04:32:38(-2) \u7ed9\u4e00\u4e2a 1~n \u7684\u6392\u5217\u6c42 P\uff0c\u628a 1~n \u539f\u5e8f\u8fd0\u884c k \u6b21 P \u6392\u5217\u53ef\u4ee5\u53d8\u6210\u8be5\u6392\u5217\uff0ck \u4e3a\u5927\u7d20\u6570\u3002 \u539f\u9898\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6bcf\u884c\u6bcf\u5217\u53ea\u6709 1 \u4e2a 1 \u7684\u65b9\u9635 S S \uff0c\u6c42 S^{-k} S^{-k} \u3002 \u5b9e\u9645\u4e0a\u5bf9 i \u548c S_i S_i \u8fde\u5355\u5411\u8fb9\uff0c\u6700\u540e\u4f1a\u5f97\u5230\u82e5\u5e72\u4e2a\u73af\uff0c\u7531\u4e8e k \u662f\u7d20\u6570\uff0c\u5b83\u5bf9\u73af\u90fd\u5b58\u5728\u4e00\u4e2a\u504f\u79fb\u91cf\uff0c\u5728\u6bcf\u4e2a\u73af\u4e0a\u6309\u504f\u79fb\u91cf\u8d70\u5373\u53ef\u5f97\u5230\u539f\u5e8f\u5217\u3002 Code by: Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; int a [ maxn ]; bool vis [ maxn ]; int res [ maxn ], tmp [ maxn ]; int getPos ( int x , int len , int k ) { x -- ; x += k ; x += len ; x %= len ; x ++ ; return x ; } int tt [ maxn ]; int b [ maxn ]; int mp [ maxn ]; int getNex ( int x ) { x = tt [ x ]; int nex = b [ x ]; return mp [ nex ]; } bool GetC ( int len , int k ) { tmp [ 1 ] = 1 ; int x = 1 , pos = 1 ; for ( int i = 2 ; i <= len ; i ++ ) { pos = getPos ( pos , len , k ); x = getNex ( x ); if ( tmp [ pos ] != 0 && tmp [ pos ] != x ) return false ; tmp [ pos ] = x ; } return true ; } void Place ( int len ) { tmp [ len + 1 ] = 1 ; for ( int i = 1 ; i <= len ; i ++ ) { int x = tmp [ i ]; int val = tt [ x ]; int y = tmp [ i + 1 ]; int nexval = tt [ y ]; res [ nexval ] = val ; } } int main () { int n , k ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ) b [ a [ i ]] = i ; for ( int i = 1 ; i <= n ; i ++ ) { if ( vis [ i ]) continue ; vector < int > ve ; vis [ i ] = true ; ve . push_back ( i ); for ( int j = a [ i ]; ! vis [ j ]; j = a [ j ]) { ve . push_back ( j ); vis [ j ] = true ; } if ( ve . size () == 1 ) { res [ i ] = i ; continue ; } int len = k % ve . size (); sort ( ve . begin (), ve . end ()); for ( int i = 0 ; i < ve . size (); i ++ ) mp [ ve [ i ]] = i + 1 , tt [ i + 1 ] = ve [ i ]; for ( int i = 0 ; i <= ve . size (); i ++ ) tmp [ i ] = 0 ; if ( GetC ( ve . size (), len ) == false ) return 0 * puts ( \"-1\" ); Place ( ve . size ()); } for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d%c\" , res [ i ], \" \\n \" [ i == n ]); return 0 ; } K. Keyboard Free Link upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u4e09\u4e2a\u534a\u5f84\u4e3a r1,r2,r3 \u7684\u540c\u5fc3\u5706\uff0c\u6c42\u5706\u4e0a\u4e09\u70b9\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u9762\u79ef\u671f\u671b\u3002 \u786e\u5b9a\u70b9A(r1,0)\u679a\u4e3eBC\uff0c\u9884\u5904\u7406\u5b8c\u66b4\u529b\u641e\u4e00\u4e0b\u8fc7\u4e86\u2026\u2026 Code by: Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 500 + 10 ; const double PI = acos ( - 1 ); typedef double db ; struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} } p [ 3 ]; db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} double Sin [ maxn ], Cos [ maxn ]; int main () { int t ; scanf ( \"%d\" , & t ); for ( int i = 0 ; i < 500 ; i ++ ) Sin [ i ] = sin ( 2 * PI * i / 500 ), Cos [ i ] = cos ( 2 * PI * i / 500 ); while ( t -- ) { double r1 , r2 , r3 , res = 0 ; scanf ( \"%lf%lf%lf\" , & r1 , & r2 , & r3 ); p [ 0 ] = { r1 , 0 }; for ( int i = 0 ; i < 500 ; i ++ ) { p [ 1 ] = { r2 * Sin [ i ], r2 * Cos [ i ]}; for ( int j = 0 ; j < 500 ; j ++ ) { p [ 2 ] = { r3 * Sin [ j ], r3 * Cos [ j ]}; res += abs ( cross ( p [ 1 ] - p [ 0 ], p [ 2 ] - p [ 0 ])); } } printf ( \"%.1f \\n \" , res / 2 / 500 / 500 ); } return 0 ; }","title":"2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#a-all-with-pairs","text":"upsolved by: Verly \u9898\u610f\uff1a\u7ed9n\u4e2a\u4e32\uff0c f(s, t) f(s, t) \u8868\u793as\u7684\u524d\u7f00\u4e0et\u7684\u540e\u7f00\u6700\u957f\u5339\u914d\u7684\u957f\u5ea6\uff0c\u6c42 \\sum_{i=1}^n \\sum_{i=1}^n f(s_i, s_j)^2 (mod\\ 998244353) \\sum_{i=1}^n \\sum_{i=1}^n f(s_i, s_j)^2 (mod\\ 998244353) hash\u9884\u5904\u7406\u51fa\u6240\u6709\u540e\u7f00\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5bf9\u6bcf\u4e2a\u4e32\u7684\u524d\u7f00\u7b97\u51fahash\u503c\uff0c\u8bb0\u5f55\u8be5\u957f\u5ea6\u7684\u76f8\u540c\u4e32\u51fa\u73b0\u6b21\u6570\u3002 \u56e0\u4e3a\u5904\u7406\u51fa\u6765\u7684\u540e\u7f00\u4e0d\u4e00\u5b9a\u6700\u957f\uff0c\u53ef\u80fd\u6709 a,aba \u88ab\u91cd\u590d\u8ba1\u7b97\u7684\u60c5\u51b5\uff0c\u5bf9 s[i] \u6c42nex\u6570\u7ec4\uff0c\u4ece\u524d\u5f80\u540e\u626b\u4e00\u904d cnt[nex[i]]-=cnt[i] \u5373\u53ef\u6c42\u51fa\u8be5\u4e32\u5bf9\u5e94\u7684\u6bcf\u4e2a\u4e32\u7684\u6700\u957f\u540e\u7f00\u3002 Code by: Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e6 + 10 ; const int key = 131 ; const int mod = 998244353 ; string s [ maxn ]; int cnt [ maxn ], nex [ maxn ]; map < ll , int > mp ; void Hash ( string s ) { ll cur = 0 , p = 1 ; for ( int i = s . size () - 1 ; i >= 0 ; i -- ) { cur = ( s [ i ] - 'a' + 1 ) * p + cur ; p *= key ; mp [ cur ] ++ ; } } void getNex ( string s ) { int i = 0 , j = - 1 ; nex [ i ] = j ; while ( i < s . size ()) { if ( j == - 1 || s [ i ] == s [ j ]) nex [ ++ i ] = ++ j ; else j = nex [ j ]; } } int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { cin >> s [ i ]; Hash ( s [ i ]); } ll res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { ll cur = 0 ; for ( int j = 0 ; j < s [ i ]. size (); j ++ ) { cur = cur * key + ( s [ i ][ j ] - 'a' + 1 ); cnt [ j + 1 ] = mp [ cur ]; } getNex ( s [ i ]); for ( int j = 1 ; j <= s [ i ]. size (); j ++ ) cnt [ nex [ j ]] -= cnt [ j ]; for ( int j = 1 ; j <= s [ i ]. size (); j ++ ) ( res += 1ll * cnt [ j ] * j * j % mod ) %= mod ; } printf ( \"%lld \\n \" , res ); return 0 ; }","title":"A. All with Pairs"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#b-boundary","text":"upsolved by: badcw \u9898\u610f\uff1a\u7ed9n\u4e2a\u70b9\uff0c\u6c42\u8fc7\u539f\u70b9\u7684\u5706\u6700\u591a\u80fd\u6709\u591a\u5c11\u4e2a\u70b9\u6070\u597d\u5728\u5706\u4e0a\u3002 (O,A,B)\u4e09\u70b9\u5b9a\u5706\uff0c\u9009\u62e9A\u5e76\u679a\u4e3e\u70b9B\u5e76\u7b97\u51fa\u5706\u5fc3\uff0c\u5bf9\u76f8\u540c\u5706\u5fc3\u8ba1\u7b97\u4e2a\u6570\u53d6max\u3002 Code by: badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/13 21:13 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } typedef double db ; const db eps = 1e-6 ; const db pi = acos ( - 1 ); int sign ( db k ){ if ( k > eps ) return 1 ; else if ( k <- eps ) return - 1 ; return 0 ; } int cmp ( db k1 , db k2 ){ return sign ( k1 - k2 );} int inmid ( db k1 , db k2 , db k3 ){ return sign ( k1 - k3 ) * sign ( k2 - k3 ) <= 0 ;} // k3 \u5728 [k1,k2] \u5185 struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} int operator == ( const point & k1 ) const { return cmp ( x , k1 . x ) == 0 && cmp ( y , k1 . y ) == 0 ;} // \u9006\u65f6\u9488\u65cb\u8f6c point turn ( db k1 ){ return ( point ){ x * cos ( k1 ) - y * sin ( k1 ), x * sin ( k1 ) + y * cos ( k1 )};} point turn90 (){ return ( point ){ - y , x };} bool operator < ( const point k1 ) const { int a = cmp ( x , k1 . x ); if ( a ==- 1 ) return 1 ; else if ( a == 1 ) return 0 ; else return cmp ( y , k1 . y ) ==- 1 ; } db abs (){ return sqrt ( x * x + y * y );} db abs2 (){ return x * x + y * y ;} db dis ( point k1 ){ return (( * this ) - k1 ). abs ();} point unit (){ db w = abs (); return ( point ){ x / w , y / w };} void scan (){ double k1 , k2 ; scanf ( \"%lf%lf\" , & k1 , & k2 ); x = k1 ; y = k2 ;} void print (){ printf ( \"%.11lf %.11lf \\n \" , x , y );} db getw (){ return atan2 ( y , x );} point getdel (){ if ( sign ( x ) ==- 1 || ( sign ( x ) == 0 && sign ( y ) ==- 1 )) return ( * this ) * ( - 1 ); else return ( * this );} int getP () const { return sign ( y ) == 1 || ( sign ( y ) == 0 && sign ( x ) ==- 1 );} }; int inmid ( point k1 , point k2 , point k3 ){ return inmid ( k1 . x , k2 . x , k3 . x ) && inmid ( k1 . y , k2 . y , k3 . y );} db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} db dot ( point k1 , point k2 ){ return k1 . x * k2 . x + k1 . y * k2 . y ;} db rad ( point k1 , point k2 ){ return atan2 ( cross ( k1 , k2 ), dot ( k1 , k2 ));} // -pi -> pi int compareangle ( point k1 , point k2 ){ return k1 . getP () < k2 . getP () || ( k1 . getP () == k2 . getP () && sign ( cross ( k1 , k2 )) > 0 ); } struct circle { point o ; db r ; void scan (){ o . scan (); scanf ( \"%lf\" , & r );} int inside ( point k ){ return cmp ( r , o . dis ( k ));} }; point getcircle ( point k1 , point k2 , point k3 ){ db a1 = k2 . x - k1 . x , b1 = k2 . y - k1 . y , c1 = ( a1 * a1 + b1 * b1 ) / 2 ; db a2 = k3 . x - k1 . x , b2 = k3 . y - k1 . y , c2 = ( a2 * a2 + b2 * b2 ) / 2 ; db d = a1 * b2 - a2 * b1 ; if ( d == 0 ) { return { 100000 , 100000 }; } point o = ( point ){ k1 . x + ( c1 * b2 - c2 * b1 ) / d , k1 . y + ( a1 * c2 - a2 * c1 ) / d }; return o ; } int n ; point p [ maxn ]; int main ( int argc , char * argv []) { R ( n ); point zero = { 0 , 0 }; point lim = { 100000 , 100000 }; for ( int i = 1 ; i <= n ; ++ i ) { p [ i ]. scan (); } if ( n == 1 ) { W ( 1 ); return 0 ; } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { vector < point > mpx ; for ( int j = 1 ; j <= n ; ++ j ) { if ( i == j ) continue ; mpx . push_back ( getcircle ( zero , p [ i ], p [ j ])); } sort ( mpx . begin (), mpx . end ()); point pre = mpx [ 0 ]; if ( mpx [ 0 ] == lim ) { continue ; } int tmp = 1 ; for ( int j = 1 ; j < mpx . size (); ++ j ) { if ( mpx [ j ] == lim ) break ; if ( pre == mpx [ j ]) { tmp ++ ; } else { res = max ( res , tmp ); tmp = 1 ; pre = mpx [ j ]; } } res = max ( res , tmp ); } W ( res + 1 ); return 0 ; }","title":"B. Boundary"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#c-cover-the-tree","text":"solved by: badcw 02:22:47(-1) \u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u6811\u9009\u62e9\u6700\u5c11\u7684\u94fe\u8986\u76d6\u6240\u6709\u8fb9\uff0c\u540c\u4e00\u6761\u8fb9\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\uff0c\u8f93\u51fa\u65b9\u6848\u3002 \u9898\u89e3\uff1a \u9996\u5148\u8003\u8651\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u6700\u5c11\u9700\u8981\u7ecf\u8fc7\u4e00\u6b21\uff0c\u7ecf\u8fc7\u591a\u6b21\u663e\u7136\u662f\u4e0d\u4f18\u7684\u3002 \u5bf9\u4e8e\u4efb\u610f\u9009\u5b9a\u7684\u94fe\uff0c\u4e24\u7aef\u53d6\u53f6\u5b50\u8282\u70b9\u663e\u7136\u662f\u4e0d\u52a3\u7684\uff0c\u5c31\u7b97\u4e0d\u53d6\u53f6\u5b50\u62d3\u5c55\u5230\u53f6\u5b50\u4e5f\u662f\u4e0d\u52a3\u7684\u3002 \u8003\u8651\u5bf9\u53f6\u5b50\u8282\u70b9\u914d\u5bf9\uff0c\u663e\u7136\u53ef\u4ee5\u5f97\u5230\u6700\u5c11\u8986\u76d6\u4e3a (k+1)/2 (k+1)/2 \uff0c\u5176\u4e2d k k \u8868\u793a\u53f6\u5b50\u8282\u70b9\u4e2a\u6570\u3002 \u8003\u8651\u5b9a\u6839\u4e4b\u540e\u6784\u9020\u65b9\u6848\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5b50\u6811\u5185\u6709\u5947\u6570\u4e2a\u53f6\u5b50\u5f80\u8be5\u8282\u70b9\u8fde\uff0c\u53d6\u5176\u4e2d\u4efb\u4e00\u4e2a\u5f80\u4e0a\u8fde\uff0c\u5176\u4ed6\u4e24\u4e24\u76f8\u8fde\uff08\u6ce8\u610f\u5982\u679c\u662f\u4e00\u4e2a\u5b50\u6811\u8fc7\u6765\u4e24\u4e2a\u7684\u4e0d\u80fd\u76f8\u8fde\uff09\u5373\u53ef\uff0c\u5bf9\u4e8e\u5076\u6570\u4e2a\u8282\u70b9\uff0c\u53d6\u4e24\u4e2a\u5f80\u4e0a\u8fde\u3002 \u5176\u5b9e\u8fd9\u79cd\u89e3\u6cd5\u4f1a\u5199\u8d77\u6765\u6bd4\u8f83\u96be\u53d7\uff0c\u6807\u7a0b\u5199\u7684\u6309\u53f6\u5b50 dfs \u5e8f\uff0c i <-> k/2+i i <-> k/2+i \u4e5f\u5f88\u6709\u9053\u7406\u3002 Code by: badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/13 13:48 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n ; vector < int > edge [ maxn ]; pair < int , int > has [ maxn ]; int sz [ maxn ]; struct node { int a ; bool operator < ( const node & oth ) const { return sz [ a ] < sz [ oth . a ]; } }; void dfs ( int u , int pre ) { if ( edge [ u ]. size () == 1 ) { sz [ u ] = 1 ; has [ u ] = { u , - 1 }; return ; } priority_queue < node > s ; int tot = 0 ; for ( auto v : edge [ u ]) { if ( v == pre ) continue ; dfs ( v , u ); s . push ({ v }); tot += sz [ v ]; } if ( tot % 2 == 1 ) { while ( tot > 1 ) { int aa = s . top (). a ; s . pop (); int bb = s . top (). a ; s . pop (); int x = has [ aa ]. first ; if ( sz [ aa ] == 2 ) { x = has [ aa ]. second ; } sz [ aa ] -- ; int y = has [ bb ]. first ; if ( sz [ bb ] == 2 ) { y = has [ bb ]. second ; } sz [ bb ] -- ; W ( x , y ); if ( sz [ aa ]) { s . push ({ aa }); } if ( sz [ bb ]) { s . push ({ bb }); } tot -= 2 ; } sz [ u ] = 1 ; has [ u ] = { has [ s . top (). a ]. first , - 1 }; return ; } else { while ( tot > 2 ) { int aa = s . top (). a ; s . pop (); int bb = s . top (). a ; s . pop (); int x = has [ aa ]. first ; if ( sz [ aa ] == 2 ) { x = has [ aa ]. second ; } sz [ aa ] -- ; int y = has [ bb ]. first ; if ( sz [ bb ] == 2 ) { y = has [ bb ]. second ; } sz [ bb ] -- ; W ( x , y ); if ( sz [ aa ]) { s . push ({ aa }); } if ( sz [ bb ]) { s . push ({ bb }); } tot -= 2 ; } sz [ u ] = 2 ; int aa = has [ s . top (). a ]. first ; int bb = 0 ; if ( sz [ s . top (). a ] == 2 ) { bb = has [ s . top (). a ]. second ; has [ u ] = { aa , bb }; return ; } s . pop (); bb = has [ s . top (). a ]. first ; has [ u ] = { aa , bb }; } } int main ( int argc , char * argv []) { R ( n ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; R ( u , v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } if ( n == 1 ) { W ( 0 ); return 0 ; } int flag = - 1 ; int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( edge [ i ]. size () > 1 ) { flag = i ; } else { res ++ ; } } W (( res + 1 ) / 2 ); // cerr << flag << endl; dfs ( flag , 0 ); // for (int i = 1; i <= n; ++i) { // cerr << i << \" **: \" << has[i].first << \" \" << has[i].second << endl; // } if ( sz [ flag ] == 1 ) { W ( has [ flag ]. first , flag ); } else { W ( has [ flag ]. first , has [ flag ]. second ); } return 0 ; }","title":"C. Cover the Tree"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#d-duration","text":"solved by: badcw 00:05:43 \u7b7e\u5230\uff0c\u65f6\u95f4\u505a\u5dee\u53d6\u7edd\u5bf9\u503c\u5373\u53ef Code by: badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/13 12:02 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 100 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int h1 , m1 , s1 ; int h2 , m2 , s2 ; int main ( int argc , char * argv []) { scanf ( \"%2d:%2d:%2d\" , & h1 , & m1 , & s1 ); scanf ( \"%2d:%2d:%2d\" , & h2 , & m2 , & s2 ); int res = ( h2 - h1 ) * 60 * 60 + ( m2 - m1 ) * 60 + s2 - s1 ; // int lim = 24 * 60 * 60; // res = (res + lim) % lim; W ( abs ( res )); return 0 ; }","title":"D. Duration"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#e-exclusive-or","text":"\u7ed9 n \u4e2a\u6570\u5b57\uff0c\u73b0\u5728 ans[k] \u8868\u793a\u6311\u9009\u4efb\u610f k \u4e2a\u6570\u5b57\uff08\u53ef\u91cd\u590d\u6311\u9009\u4e00\u4e2a\u6570\uff09\u5f02\u6216\u8d77\u6765\u7684\u6700\u5927\u503c\uff0c\u6c42 ans[1]~ans[n]\uff0c\u503c\u57df 2^{18} 2^{18} \u3002 \u7531\u7ebf\u6027\u57fa\u539f\u7406\u53ef\u4ee5\u77e5\u9053\u6700\u591a 19 \u4e2a\u6570\u5b57\u5c31\u53ef\u4ee5\u83b7\u5f97\u8fd9 n \u4e2a\u6570\u5b57\u7684\u6700\u5927\u503c\u3002\u4e3a\u4ec0\u4e48\u4e0d\u662f18\uff0c\u56e0\u4e3a\u5b58\u57280\u3002 \u90a3\u4e48\u663e\u7136\u540e\u9762\u53d6\u4efb\u610f\u4e24\u4e2a\u76f8\u7b49\u7684\u6570\u5b57\uff0c\u7b54\u6848\u663e\u7136\u5c31\u662f ans[k-2] ans[k-2] \u90a3\u4e48\u6211\u4eec\u77e5\u9053\u7b2c\u4e00\u6b21 f_i f_i \u8868\u793a\u5b58\u4e0d\u5b58\u5728 i \u8fd9\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48 g_i=\\sum_{j\\bigotimes k=i}f_i*f_j g_i=\\sum_{j\\bigotimes k=i}f_i*f_j \u5219\u8868\u793a\u80fd\u4e0d\u80fd\u53d6\u4e24\u4e2a\u6570\u8868\u793a i i \u3002\u7136\u540e\u6574\u4e2a\u5177\u6709\u4f20\u9012\u6027\uff0c\u53ea\u7528\u505a 19 \u6b21 fwt \u5c31\u80fd\u83b7\u5f97\u7b54\u6848\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/22 13:56 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll int using namespace std ; const int maxn = 1 << 18 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } template < typename T > void fwt ( ll a [], int n , T f ) { for ( int d = 1 ; d < n ; d *= 2 ) for ( int i = 0 , t = d * 2 ; i < n ; i += t ) for ( int j = 0 ; j < d ; j ++ ) f ( a [ i + j ], a [ i + j + d ]); } void AND ( ll & a , ll & b ) { a += b ; } void OR ( ll & a , ll & b ) { b += a ; } void XOR ( ll & a , ll & b ) { ll x = a , y = b ; a = x + y ; b = x - y ; } void rAND ( ll & a , ll & b ) { a -= b ; } void rOR ( ll & a , ll & b ) { b -= a ; } void rXOR ( ll & a , ll & b ) { // static ll INV2 = (mod + 1) / 2; ll x = a , y = b ; a = ( x + y ) / 2 ; b = ( x - y ) / 2 ; } int a [ maxn ], b [ maxn ]; int res [ maxn ]; int main ( int argc , char * argv []) { int n ; R ( n ); for ( int i = 0 ; i < n ; ++ i ) { int x ; R ( x ); a [ x ] = b [ x ] = 1 ; res [ 0 ] = max ( res [ 0 ], x ); } fwt ( b , maxn , XOR ); for ( int i = 1 ; i <= 18 ; ++ i ) { fwt ( a , maxn , XOR ); for ( int j = 0 ; j < maxn ; ++ j ) a [ j ] *= b [ j ]; fwt ( a , maxn , rXOR ); for ( int j = 0 ; j < maxn ; ++ j ) { if ( a [ j ]) { a [ j ] = 1 ; res [ i ] = j ; } } } for ( int i = 19 ; i < n ; ++ i ) res [ i ] = res [ i - 2 ]; W ( VI ( res , res + n )); return 0 ; }","title":"E. Exclusive OR"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#f-fake-maxpooling","text":"\u7ed9\u4e00\u4e2a n*m \u7684\u77e9\u9635\uff0c (i,j) \u4f4d\u7f6e\u7684\u6570\u4e3a lcm(i,j) lcm(i,j) \uff0c\u6c42\u6240\u6709 k*k \u7684\u5b50\u77e9\u9635\u7684\u6700\u5927\u503c\u4e4b\u548c\u3002 \u9996\u5148\u8981\u505a\u7684\u662f\u628a\u6bcf\u4e2a\u70b9\u7684\u503c\u6c42\u51fa\u6765\uff0c\u5982\u679c gcd(i,j)=1 gcd(i,j)=1 \u90a3\u4e48 gcd(i*x, j*x)=x gcd(i*x, j*x)=x \uff0c\u7c7b\u4f3c\u7ebf\u7b5b O(n*m) O(n*m) \u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u503c\u3002 \u7136\u540e\u5355\u8c03\u961f\u5217\u5904\u7406\u6bcf\u5217\u4e0a\u7b2c (i-k~i) (i-k~i) \u70b9\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u5355\u8c03\u961f\u5217\u5904\u7406\u884c\u7684\u6700\u5927\u503c\u5373\u53ef\u3002 Code by badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/17 15:25 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 5005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , m , k ; int mx [ maxn ][ maxn ]; int tmp [ maxn ]; int dq [ maxn ]; int main ( int argc , char * argv []) { R ( n , m , k ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { if ( mx [ i ][ j ] == 0 ) { for ( int k = 1 ; k * i <= n && k * j <= m ; ++ k ) { mx [ i * k ][ j * k ] = i * j * k ; } } } } // for (int i = 1; i <= n; ++i) { // for (int j = 1; j <= m; ++j) { // cerr << mx[i][j] << \" \"; // } // cerr << endl; // } // cerr << \"*\" << endl; for ( int j = 1 ; j <= m ; ++ j ) { int pre = 1 , lst = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( pre <= lst && i - dq [ pre ] >= k ) pre ++ ; while ( pre <= lst && mx [ dq [ lst ]][ j ] <= mx [ i ][ j ]) lst -- ; dq [ ++ lst ] = i ; tmp [ i ] = mx [ dq [ pre ]][ j ]; } for ( int i = 1 ; i <= n ; ++ i ) mx [ i ][ j ] = tmp [ i ]; } // for (int i = 1; i <= n; ++i) { // for (int j = 1; j <= m; ++j) { // cerr << mx[i][j] << \" \"; // } // cerr << endl; // } ll res = 0 ; for ( int i = k ; i <= n ; ++ i ) { int pre = 1 , lst = 0 ; for ( int j = 1 ; j <= m ; ++ j ) { while ( pre <= lst && j - dq [ pre ] >= k ) pre ++ ; while ( pre <= lst && mx [ i ][ dq [ lst ]] <= mx [ i ][ j ]) lst -- ; dq [ ++ lst ] = j ; tmp [ j ] = mx [ i ][ dq [ pre ]]; } for ( int j = k ; j <= m ; ++ j ) res += tmp [ j ]; } W ( res ); return 0 ; }","title":"F. Fake Maxpooling"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#g-greater-and-greater","text":"upsolved by: badcw, Verly \u9898\u610f\uff1a\u7ed9\u4e24\u4e2a\u957f\u5ea6\u4e3an\u548cm\u7684\u5e8f\u5217 A,B(m\u2264n) A,B(m\u2264n) ,\u95eeA\u6709\u591a\u5c11\u957f\u5ea6\u4e3a len(B) len(B) \u7684\u5b50\u4e32S\uff0c\u6ee1\u8db3 \u2200_i\u2208{1,2,\u22ef,m},S_i\\ge B_i \u2200_i\u2208{1,2,\u22ef,m},S_i\\ge B_i \u73b0\u5728\u7528 bitset s[i] \u8868\u793a A \u7684\u6bcf\u4e00\u4f4d\u53ef\u4ee5\u4f5c\u4e3a B_i B_i \u7684\u5f00\u5934\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u6240\u6709\u4f4d\u4e0e\u8d77\u6765\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u5177\u4f53\u6765\u8bf4\u5982\u679c bitset s[i] \u8868\u793a A \u7684\u6bcf\u4e00\u4f4d\u662f\u5426\u6bd4 B_i B_i \u5927\uff0c s_1&(s_2>>1)&(s_3>>2)... s_1&(s_2>>1)&(s_3>>2)... \u5c31\u662f\u7b54\u6848\u3002 \u6240\u4ee5\u9898\u76ee\u8f6c\u6362\u4e3a\u4e86\u600e\u4e48\u6c42\u6240\u6709 B_i B_i \u5728 A \u4e2d 1 \u7684\u4f4d\u7f6e\u3002\u5229\u7528\u5355\u8c03\u6027\u6392\u5e8f\u505a\u5373\u53ef\u3002 \u590d\u6742\u5ea6 O(n*m/W+mlogm) O(n*m/W+mlogm) Code by Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e5 + 10 ; int a [ maxn ], b [ maxn ]; bitset < maxn > tmp , res ; struct node { int val , pos , tp ; bool operator < ( const node x ) const { if ( val != x . val ) return val < x . val ; return tp < x . tp ; } }; int main () { int n , m ; scanf ( \"%d%d\" , & n , & m ); vector < node > ve ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%d\" , & a [ i ]); tmp [ i ] = res [ i ] = 1 ; ve . push_back ({ a [ i ], i , 1 }); } for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d\" , & b [ i ]); ve . push_back ({ b [ i ], i , 0 }); } sort ( ve . begin (), ve . end ()); for ( auto x : ve ) { if ( x . tp ) tmp [ x . pos ] = 0 ; else res &= tmp >> x . pos ; } printf ( \"%d \\n \" , ( int ) res . count ()); return 0 ; }","title":"G. Greater and Greater"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#h-happy-triangle","text":"upsolved by: badcw \u7ef4\u62a4\u4e00\u4e2a mulitset\uff0c\u4e09\u79cd\u64cd\u4f5c\uff1a \u52a0\u5165\u4e00\u4e2a\u6570 x \u5220\u9664\u4e00\u4e2a\u6570 x \u6c42\u4e00\u4e2a\u6570 x \u662f\u5426\u53ef\u4ee5\u4e0e mulitset \u4e2d\u4e24\u4e2a\u7684\u6570\u6784\u6210\u4e09\u89d2\u5f62 \u9996\u5148\u5bf9\u4e8e\u4e00\u4e2a\u6570 x \u5047\u8bbe\u53ef\u4ee5\u5728 mulitset \u4e2d\u627e\u5230 y,z \u4e0e\u4e4b\u6784\u6210\u4e09\u89d2\u5f62\uff0c\u73b0\u5728\u5047\u8bbe y\\le z y\\le z \u800c\u4e14 y \u548c z \u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u6570\u5b57 k x \\le y x \\le y \uff0c\u53ef\u4ee5\u63a8\u51fa z \\lt x + y z \\lt x + y \u6240\u4ee5 k \\lt x + y k \\lt x + y \uff0c\u6240\u4ee5 x,y,k x,y,k \u53ef\u4ee5\u6784\u6210\u4e09\u89d2\u5f62 y \\le x \\le z y \\le x \\le z \uff0c\u53ef\u4ee5\u63a8\u51fa z \\lt x + y z \\lt x + y \u5982\u679c k \\le x k \\le x \u5219 z \\lt x + k z \\lt x + k \uff0c\u6240\u4ee5 x,k,z x,k,z \u53ef\u4ee5\u6784\u6210\u4e09\u89d2\u5f62\uff0c x \\le k x \\le k \u5219 x,y,k x,y,k \u53ef\u4ee5\u6784\u6210\u4e09\u89d2\u5f62 z \\le x z \\le x \uff0c\u53ef\u4ee5\u63a8\u51fa x \\lt z + y x \\lt z + y \uff0c\u6240\u4ee5 x \\lt k + z x \\lt k + z \uff0c\u6240\u4ee5 x,z,k x,z,k \u53ef\u4ee5\u6784\u6210\u4e09\u89d2\u5f62 \u6240\u4ee5\u5982\u679c\u5b58\u5728\u89e3\u4e00\u5b9a\u5b58\u5728\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u662f\u5b83\u7684\u89e3\u3002 \u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u6362\u6210\u4e86\uff1a\u5f80\u96c6\u5408\u4e2d\u52a0\u5165\u6216\u5220\u9664\u6570\uff0c\u7ef4\u62a4\u76f8\u90bb\u4e24\u9879\u8986\u76d6\u7684\u70b9\u96c6\u533a\u95f4 \u8003\u8651\u76f8\u90bb\u4e24\u9879\u4e3a x,y x,y \uff0c\u5219\u4ed6\u4eec\u80fd\u5bf9\u4e00\u4e2a\u6570\u4ea7\u751f\u8d21\u732e\u7684\u4e3a [y-x+1,x+y-1] [y-x+1,x+y-1] \u8fd9\u4e2a\u533a\u95f4\uff0c\u8bbe\u4e3a f(x,y) f(x,y) \u3002 \u8003\u8651\u63d2\u5165\u4e00\u4e2a\u6570 x x \uff0c\u539f\u96c6\u5408 x x \u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u5b57\u4e3a y,z y,z \uff0c\u5219\u4f1a\u6dfb\u52a0 f(y,x) f(y,x) \uff0c f(x,z) f(x,z) \uff0c\u5220\u9664 f(y,z) f(y,z) \u5220\u9664\u4e00\u4e2a\u6570 x x \uff0c\u5219\u4e3a\u6dfb\u52a0 f(y,z) f(y,z) \uff0c\u5220\u9664 f(y,x) f(y,x) \uff0c f(x,z) f(x,z) \uff0c\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u52a0\u5355\u70b9\u548c\u5373\u53ef\uff0c\u6bd4\u8f83\u96be\u5199\u7684\u662f\u5de6\u53f3\u6570\u5b57\u8fb9\u754c\u7684\u5904\u7406\u3002 Code by: badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/13 14:58 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int q ; int op [ maxn ]; int x [ maxn ]; vector < int > xpos ; int val [ maxn << 2 ]; int le , re , k ; void update ( int rt , int l , int r ) { if ( le <= l && r <= re ) { val [ rt ] += k ; return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); } int query ( int rt , int l , int r ) { if ( l == r ) return val [ rt ]; int mid = l + r >> 1 ; if ( le <= mid ) return val [ rt ] + query ( rt << 1 , l , mid ); else return val [ rt ] + query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { R ( q ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= q ; ++ i ) { R ( op [ i ], x [ i ]); xpos . push_back ( x [ i ]); } xpos . push_back ( 2e9 ); sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); multiset < int > st ; int sz = xpos . size (); for ( int i = 1 ; i <= q ; ++ i ) { int pos = lower_bound ( xpos . begin (), xpos . end (), x [ i ]) - xpos . begin (); if ( op [ i ] == 1 || op [ i ] == 2 ) { if ( op [ i ] == 2 ) st . erase ( st . lower_bound ( x [ i ])); int yy = x [ i ]; auto zz = st . lower_bound ( yy ); auto xx = st . upper_bound ( yy ); if ( xx != st . begin ()) { xx = prev ( xx ); } else xx = st . end (); if ( xx != st . end ()) { int tx = * xx ; int ty = yy ; int reall = ty - tx + 1 ; int realr = ty + tx - 1 ; le = max ( 1 , ( int )( lower_bound ( xpos . begin (), xpos . end (), reall ) - xpos . begin ())); re = upper_bound ( xpos . begin (), xpos . end (), realr ) - xpos . begin () - 1 ; k = ( op [ i ] == 1 ? 1 : - 1 ); if ( le <= re ) update ( 1 , 1 , sz ); } if ( zz != st . end ()) { int tx = yy ; int ty = * zz ; int reall = ty - tx + 1 ; int realr = ty + tx - 1 ; le = max ( 1 , ( int )( lower_bound ( xpos . begin (), xpos . end (), reall ) - xpos . begin ())); re = upper_bound ( xpos . begin (), xpos . end (), realr ) - xpos . begin () - 1 ; k = ( op [ i ] == 1 ? 1 : - 1 ); if ( le <= re ) update ( 1 , 1 , sz ); } if ( st . count ( yy ) == 0 && xx != st . end () && zz != st . end ()) { int tx = * xx ; int ty = * zz ; int reall = ty - tx + 1 ; int realr = ty + tx - 1 ; le = max ( 1 , ( int )( lower_bound ( xpos . begin (), xpos . end (), reall ) - xpos . begin ())); re = upper_bound ( xpos . begin (), xpos . end (), realr ) - xpos . begin () - 1 ; k = ( op [ i ] == 2 ? 1 : - 1 ); if ( le <= re ) update ( 1 , 1 , sz ); } if ( op [ i ] == 1 ) st . insert ( x [ i ]); } else if ( op [ i ] == 3 ) { le = re = pos ; int ss = query ( 1 , 1 , sz ); W ( ss > 0 ? \"Yes\" : \"No\" ); } } return 0 ; }","title":"H. Happy Triangle"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#i-interval","text":"upsolved by: Verly \u7ed9\u4e00\u4e2a [1,n] [1,n] \u7684\u521d\u59cb\u533a\u95f4\uff0c\u5728\u6ee1\u8db3\u4fee\u6539\u540e 1\u2264l<r\u2264n 1\u2264l<r\u2264n \u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u533a\u95f4 [l,r](l<r) [l,r](l<r) \u6bcf\u6b21\u53ef\u4f7fl,r\u52a01\u6216-1\u3002 \u7ed9\u5b9a\u82e5\u5e72\u4e2a\u9650\u5236\u6761\u4ef6(l, r, \u2018L\u2019, c)\u6216(l, r, \u2018R\u2019, c)\uff0c\u8868\u793a\u82b1\u8d39c\u6765\u7981\u6b62l<->l+1\u6216r<->r-1\uff0c\u95ee\u6700\u5c11\u82b1\u8d39\u591a\u5c11\uff0c\u624d\u80fd\u4f7f\u533a\u95f4 [1,n] [1,n] \u65e0\u6cd5\u88ab\u4fee\u6539\u4e3a l=r l=r \u7684\u60c5\u51b5\u3002 \u628a\u533a\u95f4\u89c6\u4e3a\u7f51\u683c\u4e0a\u7684\u70b9\u5efa\u7f51\u7edc\u6d41\u6a21\u578b\uff0c \u5bf9\u4e8e\u6bcf\u4e2a\u9650\u5236\u6761\u4ef6\u8fde (pt(l,r),pt(l', r'),c) \u7684\u53cc\u5411\u8fb9\uff0c\u8d77\u70b9\u4e3a (1, n) , \u5e76\u5bf9 (i,i) \u5411T\u8fde\u6d41\u91cf\u4e3ainf\u7684\u8fb9\u3002\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u7f51\u683c\u56fe\u6700\u5c0f\u5272\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u5076\u56fe\u6700\u77ed\u8def\u6c42\u89e3\uff0c\u5bf9\u539f\u56fe\u4e2d\u7684ST\u8fde\u4e00\u6761\u6d41\u91cf\u4e3ainf\u7684\u8fb9\u628a\u7f51\u683c\u5916\u7684\u7a7a\u95f4\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5c06\u539f\u56fe\u4e2d\u7684\u683c\u89c6\u4e3a\u70b9\uff0c\u8fb9\u6743\u4e3a\u539f\u56fe\u4e2d\u8fb9\u7684\u6d41\u91cf\u5927\u5c0f\uff0c\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002 Code by: Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; #define int ll const int maxn = 600 * 600 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 20 * maxn ]; void addEdge ( int u , int v , int w ) { edge [ ++ cnt ] = { head [ u ], v , w }; head [ u ] = cnt ; } inline void add ( int u , int v , int w ) { addEdge ( u , v , w ); addEdge ( v , u , w ); } void dij ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int id [ 510 ][ 510 ]; signed main () { int n , m , tot = 0 ; memset ( head , 0xff , sizeof head ); scanf ( \"%lld%lld\" , & n , & m ); for ( int i = 0 ; i <= n + 1 ; i ++ ) for ( int j = 0 ; j <= n + 1 ; j ++ ) id [ i ][ j ] = tot ++ ; for ( int i = 1 ; i <= m ; i ++ ) { int l , r , c ; char s [ 5 ]; scanf ( \"%lld%lld%s%lld\" , & l , & r , s , & c ); if ( s [ 0 ] == 'L' ) add ( id [ l ][ r ], id [ l ][ r + 1 ], c ); else add ( id [ l - 1 ][ r ], id [ l ][ r ], c ); } int s = id [ 0 ][ 1 ], t = id [ n + 1 ][ n + 1 ]; for ( int i = 1 ; i <= n ; i ++ ) add ( s , id [ 0 ][ i ], 0 ), add ( id [ i ][ n + 1 ], t , 0 ); dij ( s ); printf ( \"%lld \\n \" , dis [ t ] == inf ? - 1 : dis [ t ]); return 0 ; }","title":"I. Interval"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#j-just-shuffle","text":"solved by: Verly 04:32:38(-2) \u7ed9\u4e00\u4e2a 1~n \u7684\u6392\u5217\u6c42 P\uff0c\u628a 1~n \u539f\u5e8f\u8fd0\u884c k \u6b21 P \u6392\u5217\u53ef\u4ee5\u53d8\u6210\u8be5\u6392\u5217\uff0ck \u4e3a\u5927\u7d20\u6570\u3002 \u539f\u9898\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6bcf\u884c\u6bcf\u5217\u53ea\u6709 1 \u4e2a 1 \u7684\u65b9\u9635 S S \uff0c\u6c42 S^{-k} S^{-k} \u3002 \u5b9e\u9645\u4e0a\u5bf9 i \u548c S_i S_i \u8fde\u5355\u5411\u8fb9\uff0c\u6700\u540e\u4f1a\u5f97\u5230\u82e5\u5e72\u4e2a\u73af\uff0c\u7531\u4e8e k \u662f\u7d20\u6570\uff0c\u5b83\u5bf9\u73af\u90fd\u5b58\u5728\u4e00\u4e2a\u504f\u79fb\u91cf\uff0c\u5728\u6bcf\u4e2a\u73af\u4e0a\u6309\u504f\u79fb\u91cf\u8d70\u5373\u53ef\u5f97\u5230\u539f\u5e8f\u5217\u3002 Code by: Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; int a [ maxn ]; bool vis [ maxn ]; int res [ maxn ], tmp [ maxn ]; int getPos ( int x , int len , int k ) { x -- ; x += k ; x += len ; x %= len ; x ++ ; return x ; } int tt [ maxn ]; int b [ maxn ]; int mp [ maxn ]; int getNex ( int x ) { x = tt [ x ]; int nex = b [ x ]; return mp [ nex ]; } bool GetC ( int len , int k ) { tmp [ 1 ] = 1 ; int x = 1 , pos = 1 ; for ( int i = 2 ; i <= len ; i ++ ) { pos = getPos ( pos , len , k ); x = getNex ( x ); if ( tmp [ pos ] != 0 && tmp [ pos ] != x ) return false ; tmp [ pos ] = x ; } return true ; } void Place ( int len ) { tmp [ len + 1 ] = 1 ; for ( int i = 1 ; i <= len ; i ++ ) { int x = tmp [ i ]; int val = tt [ x ]; int y = tmp [ i + 1 ]; int nexval = tt [ y ]; res [ nexval ] = val ; } } int main () { int n , k ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ) b [ a [ i ]] = i ; for ( int i = 1 ; i <= n ; i ++ ) { if ( vis [ i ]) continue ; vector < int > ve ; vis [ i ] = true ; ve . push_back ( i ); for ( int j = a [ i ]; ! vis [ j ]; j = a [ j ]) { ve . push_back ( j ); vis [ j ] = true ; } if ( ve . size () == 1 ) { res [ i ] = i ; continue ; } int len = k % ve . size (); sort ( ve . begin (), ve . end ()); for ( int i = 0 ; i < ve . size (); i ++ ) mp [ ve [ i ]] = i + 1 , tt [ i + 1 ] = ve [ i ]; for ( int i = 0 ; i <= ve . size (); i ++ ) tmp [ i ] = 0 ; if ( GetC ( ve . size (), len ) == false ) return 0 * puts ( \"-1\" ); Place ( ve . size ()); } for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d%c\" , res [ i ], \" \\n \" [ i == n ]); return 0 ; }","title":"J. Just Shuffle"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%9C%BA%EF%BC%89/#k-keyboard-free","text":"upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u4e09\u4e2a\u534a\u5f84\u4e3a r1,r2,r3 \u7684\u540c\u5fc3\u5706\uff0c\u6c42\u5706\u4e0a\u4e09\u70b9\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u9762\u79ef\u671f\u671b\u3002 \u786e\u5b9a\u70b9A(r1,0)\u679a\u4e3eBC\uff0c\u9884\u5904\u7406\u5b8c\u66b4\u529b\u641e\u4e00\u4e0b\u8fc7\u4e86\u2026\u2026 Code by: Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 500 + 10 ; const double PI = acos ( - 1 ); typedef double db ; struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} } p [ 3 ]; db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} double Sin [ maxn ], Cos [ maxn ]; int main () { int t ; scanf ( \"%d\" , & t ); for ( int i = 0 ; i < 500 ; i ++ ) Sin [ i ] = sin ( 2 * PI * i / 500 ), Cos [ i ] = cos ( 2 * PI * i / 500 ); while ( t -- ) { double r1 , r2 , r3 , res = 0 ; scanf ( \"%lf%lf%lf\" , & r1 , & r2 , & r3 ); p [ 0 ] = { r1 , 0 }; for ( int i = 0 ; i < 500 ; i ++ ) { p [ 1 ] = { r2 * Sin [ i ], r2 * Cos [ i ]}; for ( int j = 0 ; j < 500 ; j ++ ) { p [ 2 ] = { r3 * Sin [ j ], r3 * Cos [ j ]}; res += abs ( cross ( p [ 1 ] - p [ 0 ], p [ 2 ] - p [ 0 ])); } } printf ( \"%.1f \\n \" , res / 2 / 500 / 500 ); } return 0 ; }","title":"K. Keyboard Free"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/","text":"Name Date Solved A B C D E F G H I J K 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09 2020/7/25 8/11 \u00d8 \u00d8 \u00d8 \u00d8 O O . \u00d8 O . . A. Portal Link upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u5f20n\u4e2a\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6b21\u4f60\u53ef\u4ee5\u5728\u5f53\u524d\u70b9\u5efa\u7acb\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u6216\u8005\u53d6\u6d88\u5728\u4efb\u610f\u4f4d\u7f6e\u7684\u4f20\u9001\u95e8\uff0c\u540c\u65f6\u6700\u591a\u53ef\u4ee5\u5efa\u7acb\u4e24\u4e2a\u4f20\u9001\u95e8\uff0c\u5efa\u7acb/\u64a4\u9500\u4f20\u9001\u95e8\u4e0d\u6d88\u8017\u65f6\u95f4\uff0c\u4eba\u5458\u53ef\u4ee5\u5728\u4f20\u9001\u9635\u4e4b\u95f4\u4efb\u610f\u4f20\u9001\u3002\u7ed9\u5b9ak\u4e2a\u4efb\u52a1\uff0c\u7b2ci\u4e2a\u4efb\u52a1\u662f\u5148\u53bba[i]\u518d\u5230b[i]\uff0c\u521d\u59cb\u5728\u70b91\uff0c\u6c42\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6d88\u8017\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u628a\u4efb\u52a1\u62c6\u62102\u00d7k\u4e2a\uff0c\u5219\u6bcf\u6b21\u4efb\u52a1\u5c31\u662f\u4ecep[i - 1]\u8d70\u5230p[i]\uff0cp[0]=1\u3002 \u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4efb\u52a1\u7ed3\u675f\u65f6\u4e00\u5b9a\u5728p[i]\u5904\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u8bb0\u5f55\u4e24\u4e2a\u4f20\u9001\u95e8\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff08\u4f20\u9001\u95e8\u9700\u8981\u5230\u8282\u70b9\u4f7f\u7528\uff0c\u4e00\u5b9a\u53ef\u4ee5\u53d6\u6d88\u5176\u4e2d\u4e00\u4e2a\u4f20\u9001\u95e8\u7136\u540e\u5728\u5f53\u524d\u6240\u5728\u8282\u70b9\u5efa\u4e00\u4e2a\u65b0\u7684\uff09\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u4f20\u9001\u95e8\u7684\u4f4d\u7f6e\u3002 dp[i][j] \u8868\u793a\u505a\u7b2ci\u4e2a\u4efb\u52a1\u65f6\uff0c\u6709\u4e00\u4e2a\u5728j\u70b9\u7684\u4f20\u9001\u95e8\u3002 \u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff1a \u4ecep[i]\u8d70\u5230p[i+1]/\u4f20\u9001\u5230j\u8d70\u5230p[i+1]\uff0c\u4f20\u9001\u95e8j\u4f4d\u7f6e\u4e0d\u53d8 \u4ecep[i]\u8d70\u5230k\u518d\u8d70\u5230p[i+1]\uff0c\u4ecej\u6216k\u8d70\u5230p[i+1]\uff0c\u53d6\u6d88j\u7684\u4f20\u9001\u95e8 \u4ecep[i]\u4f20\u9001\u5230j\u8d70\u5230k\uff0c\u4ecej\u6216k\u8d70\u5230p[i+1]\uff0c\u53d6\u6d88j\u7684\u4f20\u9001\u95e8 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 600 + 10 ; int mp [ maxn ][ maxn ], p [ maxn ]; ll dp [ maxn ][ maxn ]; int main () { memset ( mp , 0x3f , sizeof mp ); int n , m , k ; scanf ( \"%d%d%d\" , & n , & m , & k ); for ( int i = 0 ; i <= n ; i ++ ) mp [ i ][ i ] = 0 ; while ( m -- ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); mp [ u ][ v ] = mp [ v ][ u ] = min ( mp [ u ][ v ], w ); } for ( int k = 1 ; k <= n ; k ++ ) for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) mp [ i ][ j ] = min ( mp [ i ][ j ], mp [ i ][ k ] + mp [ k ][ j ]); memset ( dp , 0x3f , sizeof dp ); k *= 2 , p [ 0 ] = 1 , dp [ 0 ][ 1 ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { scanf ( \"%d\" , & p [ i ]); for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i - 1 ][ j ] + min ( mp [ p [ i - 1 ]][ p [ i ]], mp [ j ][ p [ i ]])); for ( int k = 1 ; k <= n ; k ++ ) { dp [ i ][ k ] = min ( dp [ i ][ k ], dp [ i - 1 ][ j ] + mp [ p [ i - 1 ]][ k ] + min ( mp [ j ][ p [ i ]], mp [ k ][ p [ i ]])); dp [ i ][ k ] = min ( dp [ i ][ k ], dp [ i - 1 ][ j ] + mp [ j ][ k ] + min ( mp [ j ][ p [ i ]], mp [ k ][ p [ i ]])); } } } ll res = 0x3f3f3f3f3f3f3f3f ; for ( int i = 1 ; i <= n ; i ++ ) res = min ( res , dp [ k ][ i ]); printf ( \"%lld \\n \" , res ); return 0 ; } B. Graph Link upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u6811\uff0c\u53ef\u4ee5\u4efb\u610f\u52a0\u8fb9\u6216\u8005\u5220\u8fb9\uff0c\u4f46\u8981\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u6574\u68f5\u6811\u8054\u901a\uff0c\u5e76\u4e14\u6811\u4e0a\u4efb\u4f55\u4e00\u4e2a\u73af\u7684\u4ea6\u6216\u548c\u4e3a0\u3002\u6c42\u64cd\u4f5c\u540e\u6700\u5c0f\u7684\u8fb9\u6743\u548c\u3002 \u53ef\u4ee5\u53d1\u73b0\u4efb\u610f\u4e24\u4e2a\u70b9\u8fde\u8fb9\u7684\u6743\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u8003\u8651\u5bf9\u8fb9\u6743\u505a\u5904\u7406\uff0c\u5c06\u6839\u5230\u70b9\u7684\u8fb9\u6743\u5f02\u6216\u548c\u4e0b\u65b9\u5230\u70b9\u6743\uff0c\u8fd9\u6837\u70b9\u6743\u5f02\u6216\u540e\u5c31\u662f\u8fb9\u7684\u6743\u503c\u3002\u5bf9\u4e0b\u653e\u540e\u7684\u70b9\u6743\u505a\u5f02\u6216\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\uff0c\u505a\u6cd5\u662f\u628a\u70b9\u6743\u52a0\u516501\u5b57\u5178\u6811\u505a\u5b50\u6811\u5408\u5e76\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; ll res = 0 ; int trie [ maxn * 30 ][ 2 ], val [ maxn ], tot ; vector < int > ve [ maxn * 30 ]; vector < pair < int , int > > edge [ maxn ]; void init ( int u , int pre ) { for ( auto x : edge [ u ]) if ( x . first != pre ) { int v = x . first , w = x . second ; val [ v ] = val [ u ] ^ w ; init ( v , u ); } } void ins ( int x , int pos ) { int root = 0 ; for ( int i = 29 ; i >= 0 ; i -- ) { int id = ( x >> i ) & 1 ; if ( ! trie [ root ][ id ]) trie [ root ][ id ] = ++ tot ; root = trie [ root ][ id ]; ve [ root ]. push_back ( pos ); } } int find ( int root , int x , int pos ) { if ( pos == - 1 ) return 0 ; int idx = ( x >> pos ) & 1 ; if ( trie [ root ][ idx ]) return find ( trie [ root ][ idx ], x , pos - 1 ); else return ( 1 << pos ) + find ( trie [ root ][ ! idx ], x , pos - 1 ); } void dfs ( int root , int pos ) { if ( pos == - 1 ) return ; int l = trie [ root ][ 0 ], r = trie [ root ][ 1 ]; if ( l ) dfs ( l , pos - 1 ); if ( r ) dfs ( r , pos - 1 ); if ( l && r ) { res += ( 1 << pos ); int mn = ( 1 << pos ) - 1 ; for ( int i : ve [ l ]) mn = min ( mn , find ( r , val [ i ], pos - 1 )); res += mn ; } } int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i < n ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); edge [ u ]. push_back ({ v , w }); edge [ v ]. push_back ({ u , w }); } init ( 0 , - 1 ); for ( int i = 0 ; i < n ; i ++ ) ins ( val [ i ], i ); dfs ( 0 , 29 ); printf ( \"%lld \\n \" , res ); return 0 ; } C. Easy Link upsolved by: ffacs \u9898\u610f\uff1a\u5bf9\u6240\u6709\u6ee1\u8db3 \\sum\\limits_{i=1}^ka_i=N,\\sum\\limits_{i=1}^kb_i=N \\sum\\limits_{i=1}^ka_i=N,\\sum\\limits_{i=1}^kb_i=N \u7684 \u6b63\u6574\u6570 \u6570\u5217 a,b a,b \u6c42 \\sum\\prod\\limits_{i=1}^{K}min(a_i,b_i) \\sum\\prod\\limits_{i=1}^{K}min(a_i,b_i) \uff0c\u5176\u4e2d 1 \\le N,M \\le 1e6,1\\le K\\le\\min(N,M) 1 \\le N,M \\le 1e6,1\\le K\\le\\min(N,M) \u4f7f\u7528\u53cc\u53d8\u91cf\u751f\u6210\u51fd\u6570 G(x) G(x) , x x \u7684\u7cfb\u6570\u8868\u793a x x \u7684\u53d6\u503c\uff0c y y \u7684\u7cfb\u6570\u8868\u793a y y \u7684\u53d6\u503c\u3002 x^ay^b x^ay^b \u9879\u7684\u7cfb\u6570\u4e3a \\min(a,b) \\min(a,b) \uff0c \u90a3\u4e48\u663e\u7136\u6709 \\begin{align} G(x,y)^n=(&xy\\quad +xy^2\\quad +xy^3\\quad +xy^4+...+ \\\\ &x^2y\\quad +2x^2y^2\\quad +2x^2y^3\\quad+2x^2y^4+...+ \\\\ &x^3y\\quad+ 2x^3y^2\\quad +3x^3y^3\\quad+3x^3y^4+...+\\\\ &x^4y\\quad+....\\\\ )^K \\end{align} \u4e2d x^Ny^M x^Ny^M \u7684\u7cfb\u6570\u5373\u4e3a\u7b54\u6848\u3002 \u6211\u4eec\u7ed9 G(x) G(x) \u627e\u4e2a\u5c01\u95ed\u5f62\u5f0f\u3002\u53ef\u4ee5\u53d1\u73b0\u5b83\u5c31\u662f F(x,y)=(xy+x^2y^2+...) F(x,y)=(xy+x^2y^2+...) \u4e58\u4e0a\u4e00\u4e9b\u6563\u7684 x x \u548c y y \u3002\u5bb9\u6613\u53d1\u73b0 F(x,y)*\\frac{1}{1-x}=\\sum_n\\sum_ix^{n+i}y^n \\\\ F(x,y)*\\frac{1}{1-x}*\\frac{1}{1-y}=\\sum_n\\sum_i\\sum_j\\min(i,j)x^iy^j \u4e0b\u9762\u5f0f\u5b50\u7684\u7ec4\u5408\u610f\u4e49\u5c31\u662f\u5f97\u5230 x^iy^j x^iy^j \u603b\u5171\u6709 \\min(i,j) \\min(i,j) \u79cd\u65b9\u5f0f\uff1a\uff08 x^1y^1 x^1y^1 \u4e58\u4e0a i-1 i-1 \u4e2a x x , j-1 j-1 \u4e2a y y \uff09 ,\uff08 x^2y^2 x^2y^2 \u4e58\u4e0a i-2 i-2 \u4e2a x x , j-2 j-2 \u4e2a y y \uff09\uff0c\uff08 x^3y^3 x^3y^3 \u4e58\u4e0a i-3 i-3 \u4e2a x x , j-3 j-3 \u4e2a y y \uff09.... \u90a3\u4e48\u6709 G(x)^K=\\left(\\frac{1}{1-x}\\frac{1}{1-y}\\frac{xy}{1-xy} \\right)^K \\\\ =(\\frac{1}{1-x})^K*(\\frac{1}{1-y})^K*(\\frac{xy}{1-xy})^K (\\frac{1}{1-x})^a (\\frac{1}{1-x})^a \u7684\u7cfb\u6570\u6211\u4eec\u77e5\u9053\u662f\u4e00\u4e2a\u4e0d\u5b9a\u65b9\u7a0b\u7684\u7cfb\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u679a\u4e3e (\\frac{xy}{1-xy})^K (\\frac{xy}{1-xy})^K \u5c55\u5f00\u5f0f\u4e2d xy xy \u7684\u6307\u6570\uff0c\u7528\u524d\u9762\u4e24\u4e2a\u5f0f\u5b50\u7684 x x \u548c y y \u8865\u9f50\u5230 N N \u548c M M \u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 2e6 + 5 ; const int mod = 998244353 ; ll fac [ maxn ] = { 1 }, ifac [ maxn ]; ll fastpow ( ll a , ll b ) { ll ans = 1 ; for (; b ; b >>= 1 , a = a * a % mod ) if ( b & 1 ) ans = ans * a % mod ; return ans ; } inline ll C ( ll n , ll m ) { return fac [ n ] * ifac [ m ] % mod * ifac [ n - m ] % mod ; } int main () { for ( int i = 1 ; i < maxn ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % mod ; ifac [ maxn - 1 ] = fastpow ( fac [ maxn - 1 ], mod - 2 ); for ( int i = maxn - 2 ; i >= 0 ; i -- ) ifac [ i ] = ifac [ i + 1 ] * ( i + 1 ) % mod ; int T ; cin >> T ; while ( T -- ) { ll n , m , k , ans = 0 ; cin >> n >> m >> k ; if ( n > m ) swap ( n , m ); for ( int i = k ; i <= n ; i ++ ) { ( ans += C ( i - 1 , k - 1 ) * C ( n - i + k - 1 , k - 1 ) % mod * C ( m - i + k - 1 , k - 1 ) % mod ) %= mod ; } cout << ans << endl ; } return 0 ; } D. Drop Voicing Link upsolved by: Verly \u9898\u610f\uff1a\u64cd\u4f5c1\u8868\u793a\u5bf9\u6574\u4e2a\u5e8f\u5217\u505a\u4efb\u610f\u6b21\u65cb\u8f6c\u64cd\u4f5c\uff0c\u64cd\u4f5c2\u8868\u793a\u5bf9\u524dn-1\u4e2a\u6570\u505a\u4efb\u610f\u6b21\u65cb\u8f6c\u64cd\u4f5c\uff0c\u95ee\u8981\u5728\u4e0d\u540c\u64cd\u4f5c1\u540e\u6700\u5c11\u64cd\u4f5c\u591a\u5c11\u6b21\u64cd\u4f5c2\u4f7f\u6392\u5217\u6709\u5e8f\u3002 \u64cd\u4f5c2\u76f8\u5f53\u4e8e\u628a\u5728\u6700\u540e\u4e00\u4f4d\u7684\u4e32\u653e\u5230\u524dn-1\u4e2a\u4e32\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5bf9\u73af\u6c42LIS\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/26 21:54 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 550 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int dp [ maxn ]; const int INF = 1e9 ; int LIS ( int a [], int n ) { memset ( dp , 0x3f , sizeof ( dp )); for ( int i = 0 ; i < n ; i ++ ) * lower_bound ( dp , dp + n , a [ i ]) = a [ i ]; return lower_bound ( dp , dp + n , INF ) - dp ; } int a [ maxn ]; int n ; int main ( int argc , char * argv []) { R ( n ); for ( int i = 0 ; i < n ; ++ i ) { R ( a [ i ]); } int res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { res = max ( res , LIS ( a , n )); for ( int j = n ; j > 0 ; -- j ) a [ j ] = a [ j - 1 ]; a [ 0 ] = a [ n ]; } W ( n - res ); return 0 ; } E. Bogo Sort Link solved by: badcw 01:07:29 \u7ed9\u4e00\u4e2a\u7f6e\u6362\uff0c\u6c42\u67d0\u79cd\u7f6e\u6362\u901a\u8fc7\u8fd9\u4e2a\u7f6e\u6362\u6700\u591a x \u6b21\u53d8\u6210 1~n \u7684\u6709\u5e8f\u7f6e\u6362\u3002\u6700\u5927\u7684 x \u662f\u591a\u5c11\u3002 \u7a0d\u6709\u7fa4\u8bba\u5e38\u8bc6\u5c31\u77e5\u9053\u5bf9\u7f6e\u6362\u4e2d\u7684\u73af\u6c42 lcm\uff0c\u50bb\u903c\u51fa\u9898\u4eba\u53d6\u6a21\u8fd9\u4e48\u5927\u5c31\u662f\u8ba9\u4eba\u7ec3\u4e60 python \u6216\u8005 java\u3002 Code import java.math.BigInteger ; import java.util.Scanner ; import java.util.Vector ; public class Main { public static void main ( String [] args ) { Scanner scan = new Scanner ( System . in ); int n = scan . nextInt (); int [] a = new int [ n + 5 ] ; int [] vis = new int [ n + 5 ] ; for ( int i = 1 ; i <= n ; ++ i ) { int x = scan . nextInt (); a [ x ] = i ; } Vector < Integer > sl = new Vector <> (); for ( int i = 1 ; i <= n ; ++ i ) { if ( vis [ i ] == 0 ) { int tmp = 0 ; int pos = i ; while ( vis [ pos ] == 0 ) { vis [ pos ] = 1 ; pos = a [ pos ] ; tmp ++ ; } sl . add ( tmp ); } } BigInteger res = BigInteger . valueOf ( 1 ); BigInteger md = BigInteger . valueOf ( 10 ); md = md . pow ( n ); for ( int i : sl ) { BigInteger tmp = BigInteger . valueOf ( i ); res = res . divide ( res . gcd ( tmp )). multiply ( tmp ); res = res . mod ( md ); } System . out . println ( res ); } } F. DPS Link solved by: badcw 00:12:05(-1) \u8f93\u51fa\u7ec3\u4e60\u9898\uff0c\u7206int\uff1f\u51fa\u9898\u4eba\u6709\u591f\u8111\u762b\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/25 12:06 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 105 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int main ( int argc , char * argv []) { int n ; R ( n ); vector < ll > d ( n ); ll mx = 0 ; for ( int i = 0 ; i < n ; ++ i ) { R ( d [ i ]); mx = max ( mx , d [ i ]); } vector < ll > s ( n ); for ( int i = 0 ; i < n ; ++ i ) { s [ i ] = ( 50ll * d [ i ] / mx + ( 50ll * d [ i ] % mx == 0 ? 0 : 1 )); putchar ( '+' ); for ( int j = 0 ; j < s [ i ]; ++ j ) putchar ( '-' ); putchar ( '+' ); putchar ( '\\n' ); putchar ( '|' ); int fi = 0 ; if ( mx == d [ i ]) fi = 1 ; for ( int j = fi ; j < s [ i ]; ++ j ) putchar ( ' ' ); if ( mx == d [ i ]) putchar ( '*' ); putchar ( '|' ); printf ( \"%d \\n \" , d [ i ]); putchar ( '+' ); for ( int j = 0 ; j < s [ i ]; ++ j ) putchar ( '-' ); putchar ( '+' ); putchar ( '\\n' ); } return 0 ; } H. Interval Link upsolved by: badcw \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u5b9a\u4e49 f(l,r) f(l,r) \u8868\u793a l \u5230 r \u7684\u4e0e\u3002 S(l,r) S(l,r) \u4e3a l \u5230 r \u7684\u6240\u6709\u5b50\u533a\u95f4\u7684 f(l,r) f(l,r) \u7684\u5e76\u96c6\uff0c\u5f3a\u5236\u5728\u7ebf\u8be2\u95ee q \u6b21 S(l,r) S(l,r) \u7684\u5927\u5c0f\u3002 n,q \\le 1e5 ~ a\\le 2^{30} n,q \\le 1e5 ~ a\\le 2^{30} \u8003\u8651\u4ee5\u4efb\u610f\u4e00\u4e2a x \u4e3a\u5de6\u7aef\u70b9\uff0c\u6240\u6709\u53f3\u7aef\u70b9\u6700\u591a\u6709 log(a) log(a) \u7684\u4e0d\u540c\u53d6\u503c\u3002\u7528\u500d\u589e\u5904\u7406\u533a\u95f4\u4e0e\uff0c\u679a\u4e3e\u5de6\u8d77\u70b9\u4e8c\u5206\u6bcf\u6bb5\u5c31\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u53ef\u4ee5\u6784\u6210\u4e0d\u540c\u6570\u5b57\u7684 [l,r] [l,r] \u3002 \u90a3\u4e48\u5982\u679c\u4e0d\u8003\u8651\u91cd\u590d\uff0c\u6211\u4eec\u5f53\u524d\u7684\u6240\u6709 l,r \u5bf9\uff0c\u5728\u8be2\u95ee\u7684 LR \u4e2d\u5982\u679c\u88ab\u5b8c\u5168\u5305\u542b\u5219\u4f1a\u4ea7\u751f 1 \u7684\u8d21\u732e\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u5728\u7ebf\u4e8c\u7ef4\u6570\u70b9\u3002 \u7531\u4e8e\u5b58\u5728\u91cd\u590d\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u53bb\u91cd\u3002\u53ef\u4ee5\u77e5\u9053\u5bf9\u4e8e\u4e0e\u7ed3\u679c\u76f8\u540c\u7684 l,r \u5bf9\u6392\u5e8f\uff0c\u5f97\u5230 [l1,r1],[l2,r2]....[ln,rn] [l1,r1],[l2,r2]....[ln,rn] \u5219\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u5305\u542b [l1,r2],[l2,r3]... [l1,r2],[l2,r3]... \u90fd\u4f1a\u4ea7\u751f -1 \u7684\u8d21\u732e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u52a0\u4e00\u4e9b\u8d1f\u6743\u70b9\u505a\u6570\u70b9\u3002 \u5177\u4f53\u6765\u8bf4\u9759\u6001\u5728\u7ebf\u4e8c\u7ef4\u6570\u70b9\u7528\u4e3b\u5e2d\u6811\u5373\u53ef\uff0c\u51fa\u9898\u4eba\u8111\u762b\u975e\u8981\u5728\u7ebf\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/26 20:31 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n ; int a [ maxn ], f [ maxn ][ 20 ], lg [ maxn ]; struct point { int l , r , val ; bool operator < ( const point & oth ) const { if ( l == oth . l ) return r < oth . r ; return l < oth . l ; } }; void init () { lg [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; ++ i ) lg [ i ] = lg [ i >> 1 ] + 1 ; for ( int i = 1 ; i <= n ; ++ i ) f [ i ][ 0 ] = a [ i ]; for ( int j = 1 ; j <= lg [ n ]; ++ j ) { for ( int i = 1 ; i + ( 1 << j ) - 1 <= n ; ++ i ) { f [ i ][ j ] = ( f [ i ][ j - 1 ] & f [ i + ( 1 << j - 1 )][ j - 1 ]); } } } inline int rmq ( int L , int R ) { int k = lg [ R - L + 1 ]; return f [ L ][ k ] & f [ R - ( 1 << k ) + 1 ][ k ]; } int cnt = 0 ; struct node { int l , r , val ; } p [ maxn * 400 ]; void update ( int l , int r , int pre , int & now , int pos , int kk ) { if ( now == pre ) p [ now =++ cnt ] = p [ pre ]; p [ now ]. val += kk ; if ( l == r ) return ; int mid = l + r >> 1 ; if ( pos <= mid ) update ( l , mid , p [ pre ]. l , p [ now ]. l , pos , kk ); else update ( mid + 1 , r , p [ pre ]. r , p [ now ]. r , pos , kk ); } int query ( int l , int r , int x , int y , int le , int re ) { if ( le <= l && r <= re ) return p [ y ]. val - p [ x ]. val ; int mid = l + r >> 1 ; int res = 0 ; if ( le <= mid ) res = query ( l , mid , p [ x ]. l , p [ y ]. l , le , re ); if ( re > mid ) res += query ( mid + 1 , r , p [ x ]. r , p [ y ]. r , le , re ); return res ; } int rt [ maxn ]; vector < int > xpos ; vector < pair < int , int > > edge [ maxn * 20 ]; vector < pair < int , int > > deal [ maxn ]; void build ( int pre , int & now , int pos ) { now = pre ; for ( auto i : deal [ pos ]) { update ( 1 , n , pre , now , i . first , i . second ); // cerr << pos << \" \" << i.first << \" \" << i.second << endl; } } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); R ( n ); for ( int i = 1 ; i <= n ; ++ i ) R ( a [ i ]); init (); vector < point > x ; for ( int i = 1 ; i <= n ; ++ i ) { int now = 1e9 ; for ( int j = i ; j <= n ; ++ j ) { int l = j , r = n ; int res = - 1 ; while ( l <= r ) { int mid = l + r >> 1 ; if ( rmq ( i , mid ) != now ) res = mid , r = mid - 1 ; else l = mid + 1 ; } if ( res == - 1 ) break ; int tp = rmq ( i , res ); if ( tp == now ) break ; x . push_back ({ i , res , tp }); xpos . push_back ( tp ); now = tp ; j = res ; } } sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); for ( auto i : x ) { int val = lower_bound ( xpos . begin (), xpos . end (), i . val ) - xpos . begin () + 1 ; edge [ val ]. emplace_back ( i . l , i . r ); deal [ i . l ]. emplace_back ( i . r , 1 ); } for ( int i = 1 ; i <= xpos . size (); ++ i ) { sort ( edge [ i ]. begin (), edge [ i ]. end ()); for ( int j = 0 ; j + 1 < edge [ i ]. size (); ++ j ) { deal [ edge [ i ][ j ]. first ]. emplace_back ( edge [ i ][ j + 1 ]. second , - 1 ); } } for ( int i = 1 ; i <= n ; ++ i ) build ( rt [ i - 1 ], rt [ i ], i ); int q ; int lastans = 0 ; R ( q ); while ( q -- ) { int l , r ; R ( l , r ); l = ( l ^ lastans ) % n + 1 ; r = ( r ^ lastans ) % n + 1 ; if ( l > r ) swap ( l , r ); W ( lastans = query ( 1 , n , rt [ l - 1 ], rt [ r ], l , r )); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; // for (auto i : x) W(i.l, i.r, i.val); return 0 ; } I. Hard Math Problem Link \u4e00\u5f20\u65e0\u9650\u7f51\u683c\u586b\u5165 012\uff0c\u8981\u6c42\u6bcf\u4e2a 0 \u7684\u65c1\u8fb9\u90fd\u6709\u81f3\u5c11\u4e00\u4e2a 1 \u548c\u4e00\u4e2a 2\uff0c\u95ee s_0 / (m * n) s_0 / (m * n) \u6700\u5927\u662f\u591a\u5c11\u3002 1002 2001 1002 \u8fd9\u6837\u6784\u9020\u5373\u53ef\uff0c\u6700\u5927\u4e3a \u2154\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/25 12:19 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e2 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int main ( int argc , char * argv []) { W ( \"0.666667\" ); return 0 ; }","title":"2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#a-portal","text":"upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u5f20n\u4e2a\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u6b21\u4f60\u53ef\u4ee5\u5728\u5f53\u524d\u70b9\u5efa\u7acb\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u6216\u8005\u53d6\u6d88\u5728\u4efb\u610f\u4f4d\u7f6e\u7684\u4f20\u9001\u95e8\uff0c\u540c\u65f6\u6700\u591a\u53ef\u4ee5\u5efa\u7acb\u4e24\u4e2a\u4f20\u9001\u95e8\uff0c\u5efa\u7acb/\u64a4\u9500\u4f20\u9001\u95e8\u4e0d\u6d88\u8017\u65f6\u95f4\uff0c\u4eba\u5458\u53ef\u4ee5\u5728\u4f20\u9001\u9635\u4e4b\u95f4\u4efb\u610f\u4f20\u9001\u3002\u7ed9\u5b9ak\u4e2a\u4efb\u52a1\uff0c\u7b2ci\u4e2a\u4efb\u52a1\u662f\u5148\u53bba[i]\u518d\u5230b[i]\uff0c\u521d\u59cb\u5728\u70b91\uff0c\u6c42\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6d88\u8017\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u628a\u4efb\u52a1\u62c6\u62102\u00d7k\u4e2a\uff0c\u5219\u6bcf\u6b21\u4efb\u52a1\u5c31\u662f\u4ecep[i - 1]\u8d70\u5230p[i]\uff0cp[0]=1\u3002 \u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4efb\u52a1\u7ed3\u675f\u65f6\u4e00\u5b9a\u5728p[i]\u5904\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u8bb0\u5f55\u4e24\u4e2a\u4f20\u9001\u95e8\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff08\u4f20\u9001\u95e8\u9700\u8981\u5230\u8282\u70b9\u4f7f\u7528\uff0c\u4e00\u5b9a\u53ef\u4ee5\u53d6\u6d88\u5176\u4e2d\u4e00\u4e2a\u4f20\u9001\u95e8\u7136\u540e\u5728\u5f53\u524d\u6240\u5728\u8282\u70b9\u5efa\u4e00\u4e2a\u65b0\u7684\uff09\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u4f20\u9001\u95e8\u7684\u4f4d\u7f6e\u3002 dp[i][j] \u8868\u793a\u505a\u7b2ci\u4e2a\u4efb\u52a1\u65f6\uff0c\u6709\u4e00\u4e2a\u5728j\u70b9\u7684\u4f20\u9001\u95e8\u3002 \u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff1a \u4ecep[i]\u8d70\u5230p[i+1]/\u4f20\u9001\u5230j\u8d70\u5230p[i+1]\uff0c\u4f20\u9001\u95e8j\u4f4d\u7f6e\u4e0d\u53d8 \u4ecep[i]\u8d70\u5230k\u518d\u8d70\u5230p[i+1]\uff0c\u4ecej\u6216k\u8d70\u5230p[i+1]\uff0c\u53d6\u6d88j\u7684\u4f20\u9001\u95e8 \u4ecep[i]\u4f20\u9001\u5230j\u8d70\u5230k\uff0c\u4ecej\u6216k\u8d70\u5230p[i+1]\uff0c\u53d6\u6d88j\u7684\u4f20\u9001\u95e8 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 600 + 10 ; int mp [ maxn ][ maxn ], p [ maxn ]; ll dp [ maxn ][ maxn ]; int main () { memset ( mp , 0x3f , sizeof mp ); int n , m , k ; scanf ( \"%d%d%d\" , & n , & m , & k ); for ( int i = 0 ; i <= n ; i ++ ) mp [ i ][ i ] = 0 ; while ( m -- ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); mp [ u ][ v ] = mp [ v ][ u ] = min ( mp [ u ][ v ], w ); } for ( int k = 1 ; k <= n ; k ++ ) for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) mp [ i ][ j ] = min ( mp [ i ][ j ], mp [ i ][ k ] + mp [ k ][ j ]); memset ( dp , 0x3f , sizeof dp ); k *= 2 , p [ 0 ] = 1 , dp [ 0 ][ 1 ] = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { scanf ( \"%d\" , & p [ i ]); for ( int j = 1 ; j <= n ; j ++ ) { dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i - 1 ][ j ] + min ( mp [ p [ i - 1 ]][ p [ i ]], mp [ j ][ p [ i ]])); for ( int k = 1 ; k <= n ; k ++ ) { dp [ i ][ k ] = min ( dp [ i ][ k ], dp [ i - 1 ][ j ] + mp [ p [ i - 1 ]][ k ] + min ( mp [ j ][ p [ i ]], mp [ k ][ p [ i ]])); dp [ i ][ k ] = min ( dp [ i ][ k ], dp [ i - 1 ][ j ] + mp [ j ][ k ] + min ( mp [ j ][ p [ i ]], mp [ k ][ p [ i ]])); } } } ll res = 0x3f3f3f3f3f3f3f3f ; for ( int i = 1 ; i <= n ; i ++ ) res = min ( res , dp [ k ][ i ]); printf ( \"%lld \\n \" , res ); return 0 ; }","title":"A. Portal"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#b-graph","text":"upsolved by: Verly \u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u6811\uff0c\u53ef\u4ee5\u4efb\u610f\u52a0\u8fb9\u6216\u8005\u5220\u8fb9\uff0c\u4f46\u8981\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u6574\u68f5\u6811\u8054\u901a\uff0c\u5e76\u4e14\u6811\u4e0a\u4efb\u4f55\u4e00\u4e2a\u73af\u7684\u4ea6\u6216\u548c\u4e3a0\u3002\u6c42\u64cd\u4f5c\u540e\u6700\u5c0f\u7684\u8fb9\u6743\u548c\u3002 \u53ef\u4ee5\u53d1\u73b0\u4efb\u610f\u4e24\u4e2a\u70b9\u8fde\u8fb9\u7684\u6743\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u8003\u8651\u5bf9\u8fb9\u6743\u505a\u5904\u7406\uff0c\u5c06\u6839\u5230\u70b9\u7684\u8fb9\u6743\u5f02\u6216\u548c\u4e0b\u65b9\u5230\u70b9\u6743\uff0c\u8fd9\u6837\u70b9\u6743\u5f02\u6216\u540e\u5c31\u662f\u8fb9\u7684\u6743\u503c\u3002\u5bf9\u4e0b\u653e\u540e\u7684\u70b9\u6743\u505a\u5f02\u6216\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\uff0c\u505a\u6cd5\u662f\u628a\u70b9\u6743\u52a0\u516501\u5b57\u5178\u6811\u505a\u5b50\u6811\u5408\u5e76\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; ll res = 0 ; int trie [ maxn * 30 ][ 2 ], val [ maxn ], tot ; vector < int > ve [ maxn * 30 ]; vector < pair < int , int > > edge [ maxn ]; void init ( int u , int pre ) { for ( auto x : edge [ u ]) if ( x . first != pre ) { int v = x . first , w = x . second ; val [ v ] = val [ u ] ^ w ; init ( v , u ); } } void ins ( int x , int pos ) { int root = 0 ; for ( int i = 29 ; i >= 0 ; i -- ) { int id = ( x >> i ) & 1 ; if ( ! trie [ root ][ id ]) trie [ root ][ id ] = ++ tot ; root = trie [ root ][ id ]; ve [ root ]. push_back ( pos ); } } int find ( int root , int x , int pos ) { if ( pos == - 1 ) return 0 ; int idx = ( x >> pos ) & 1 ; if ( trie [ root ][ idx ]) return find ( trie [ root ][ idx ], x , pos - 1 ); else return ( 1 << pos ) + find ( trie [ root ][ ! idx ], x , pos - 1 ); } void dfs ( int root , int pos ) { if ( pos == - 1 ) return ; int l = trie [ root ][ 0 ], r = trie [ root ][ 1 ]; if ( l ) dfs ( l , pos - 1 ); if ( r ) dfs ( r , pos - 1 ); if ( l && r ) { res += ( 1 << pos ); int mn = ( 1 << pos ) - 1 ; for ( int i : ve [ l ]) mn = min ( mn , find ( r , val [ i ], pos - 1 )); res += mn ; } } int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i < n ; i ++ ) { int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); edge [ u ]. push_back ({ v , w }); edge [ v ]. push_back ({ u , w }); } init ( 0 , - 1 ); for ( int i = 0 ; i < n ; i ++ ) ins ( val [ i ], i ); dfs ( 0 , 29 ); printf ( \"%lld \\n \" , res ); return 0 ; }","title":"B. Graph"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#c-easy","text":"upsolved by: ffacs \u9898\u610f\uff1a\u5bf9\u6240\u6709\u6ee1\u8db3 \\sum\\limits_{i=1}^ka_i=N,\\sum\\limits_{i=1}^kb_i=N \\sum\\limits_{i=1}^ka_i=N,\\sum\\limits_{i=1}^kb_i=N \u7684 \u6b63\u6574\u6570 \u6570\u5217 a,b a,b \u6c42 \\sum\\prod\\limits_{i=1}^{K}min(a_i,b_i) \\sum\\prod\\limits_{i=1}^{K}min(a_i,b_i) \uff0c\u5176\u4e2d 1 \\le N,M \\le 1e6,1\\le K\\le\\min(N,M) 1 \\le N,M \\le 1e6,1\\le K\\le\\min(N,M) \u4f7f\u7528\u53cc\u53d8\u91cf\u751f\u6210\u51fd\u6570 G(x) G(x) , x x \u7684\u7cfb\u6570\u8868\u793a x x \u7684\u53d6\u503c\uff0c y y \u7684\u7cfb\u6570\u8868\u793a y y \u7684\u53d6\u503c\u3002 x^ay^b x^ay^b \u9879\u7684\u7cfb\u6570\u4e3a \\min(a,b) \\min(a,b) \uff0c \u90a3\u4e48\u663e\u7136\u6709 \\begin{align} G(x,y)^n=(&xy\\quad +xy^2\\quad +xy^3\\quad +xy^4+...+ \\\\ &x^2y\\quad +2x^2y^2\\quad +2x^2y^3\\quad+2x^2y^4+...+ \\\\ &x^3y\\quad+ 2x^3y^2\\quad +3x^3y^3\\quad+3x^3y^4+...+\\\\ &x^4y\\quad+....\\\\ )^K \\end{align} \u4e2d x^Ny^M x^Ny^M \u7684\u7cfb\u6570\u5373\u4e3a\u7b54\u6848\u3002 \u6211\u4eec\u7ed9 G(x) G(x) \u627e\u4e2a\u5c01\u95ed\u5f62\u5f0f\u3002\u53ef\u4ee5\u53d1\u73b0\u5b83\u5c31\u662f F(x,y)=(xy+x^2y^2+...) F(x,y)=(xy+x^2y^2+...) \u4e58\u4e0a\u4e00\u4e9b\u6563\u7684 x x \u548c y y \u3002\u5bb9\u6613\u53d1\u73b0 F(x,y)*\\frac{1}{1-x}=\\sum_n\\sum_ix^{n+i}y^n \\\\ F(x,y)*\\frac{1}{1-x}*\\frac{1}{1-y}=\\sum_n\\sum_i\\sum_j\\min(i,j)x^iy^j \u4e0b\u9762\u5f0f\u5b50\u7684\u7ec4\u5408\u610f\u4e49\u5c31\u662f\u5f97\u5230 x^iy^j x^iy^j \u603b\u5171\u6709 \\min(i,j) \\min(i,j) \u79cd\u65b9\u5f0f\uff1a\uff08 x^1y^1 x^1y^1 \u4e58\u4e0a i-1 i-1 \u4e2a x x , j-1 j-1 \u4e2a y y \uff09 ,\uff08 x^2y^2 x^2y^2 \u4e58\u4e0a i-2 i-2 \u4e2a x x , j-2 j-2 \u4e2a y y \uff09\uff0c\uff08 x^3y^3 x^3y^3 \u4e58\u4e0a i-3 i-3 \u4e2a x x , j-3 j-3 \u4e2a y y \uff09.... \u90a3\u4e48\u6709 G(x)^K=\\left(\\frac{1}{1-x}\\frac{1}{1-y}\\frac{xy}{1-xy} \\right)^K \\\\ =(\\frac{1}{1-x})^K*(\\frac{1}{1-y})^K*(\\frac{xy}{1-xy})^K (\\frac{1}{1-x})^a (\\frac{1}{1-x})^a \u7684\u7cfb\u6570\u6211\u4eec\u77e5\u9053\u662f\u4e00\u4e2a\u4e0d\u5b9a\u65b9\u7a0b\u7684\u7cfb\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u679a\u4e3e (\\frac{xy}{1-xy})^K (\\frac{xy}{1-xy})^K \u5c55\u5f00\u5f0f\u4e2d xy xy \u7684\u6307\u6570\uff0c\u7528\u524d\u9762\u4e24\u4e2a\u5f0f\u5b50\u7684 x x \u548c y y \u8865\u9f50\u5230 N N \u548c M M \u5373\u53ef\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 2e6 + 5 ; const int mod = 998244353 ; ll fac [ maxn ] = { 1 }, ifac [ maxn ]; ll fastpow ( ll a , ll b ) { ll ans = 1 ; for (; b ; b >>= 1 , a = a * a % mod ) if ( b & 1 ) ans = ans * a % mod ; return ans ; } inline ll C ( ll n , ll m ) { return fac [ n ] * ifac [ m ] % mod * ifac [ n - m ] % mod ; } int main () { for ( int i = 1 ; i < maxn ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % mod ; ifac [ maxn - 1 ] = fastpow ( fac [ maxn - 1 ], mod - 2 ); for ( int i = maxn - 2 ; i >= 0 ; i -- ) ifac [ i ] = ifac [ i + 1 ] * ( i + 1 ) % mod ; int T ; cin >> T ; while ( T -- ) { ll n , m , k , ans = 0 ; cin >> n >> m >> k ; if ( n > m ) swap ( n , m ); for ( int i = k ; i <= n ; i ++ ) { ( ans += C ( i - 1 , k - 1 ) * C ( n - i + k - 1 , k - 1 ) % mod * C ( m - i + k - 1 , k - 1 ) % mod ) %= mod ; } cout << ans << endl ; } return 0 ; }","title":"C. Easy"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#d-drop-voicing","text":"upsolved by: Verly \u9898\u610f\uff1a\u64cd\u4f5c1\u8868\u793a\u5bf9\u6574\u4e2a\u5e8f\u5217\u505a\u4efb\u610f\u6b21\u65cb\u8f6c\u64cd\u4f5c\uff0c\u64cd\u4f5c2\u8868\u793a\u5bf9\u524dn-1\u4e2a\u6570\u505a\u4efb\u610f\u6b21\u65cb\u8f6c\u64cd\u4f5c\uff0c\u95ee\u8981\u5728\u4e0d\u540c\u64cd\u4f5c1\u540e\u6700\u5c11\u64cd\u4f5c\u591a\u5c11\u6b21\u64cd\u4f5c2\u4f7f\u6392\u5217\u6709\u5e8f\u3002 \u64cd\u4f5c2\u76f8\u5f53\u4e8e\u628a\u5728\u6700\u540e\u4e00\u4f4d\u7684\u4e32\u653e\u5230\u524dn-1\u4e2a\u4e32\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5bf9\u73af\u6c42LIS\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/26 21:54 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 550 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int dp [ maxn ]; const int INF = 1e9 ; int LIS ( int a [], int n ) { memset ( dp , 0x3f , sizeof ( dp )); for ( int i = 0 ; i < n ; i ++ ) * lower_bound ( dp , dp + n , a [ i ]) = a [ i ]; return lower_bound ( dp , dp + n , INF ) - dp ; } int a [ maxn ]; int n ; int main ( int argc , char * argv []) { R ( n ); for ( int i = 0 ; i < n ; ++ i ) { R ( a [ i ]); } int res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { res = max ( res , LIS ( a , n )); for ( int j = n ; j > 0 ; -- j ) a [ j ] = a [ j - 1 ]; a [ 0 ] = a [ n ]; } W ( n - res ); return 0 ; }","title":"D. Drop Voicing"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#e-bogo-sort","text":"solved by: badcw 01:07:29 \u7ed9\u4e00\u4e2a\u7f6e\u6362\uff0c\u6c42\u67d0\u79cd\u7f6e\u6362\u901a\u8fc7\u8fd9\u4e2a\u7f6e\u6362\u6700\u591a x \u6b21\u53d8\u6210 1~n \u7684\u6709\u5e8f\u7f6e\u6362\u3002\u6700\u5927\u7684 x \u662f\u591a\u5c11\u3002 \u7a0d\u6709\u7fa4\u8bba\u5e38\u8bc6\u5c31\u77e5\u9053\u5bf9\u7f6e\u6362\u4e2d\u7684\u73af\u6c42 lcm\uff0c\u50bb\u903c\u51fa\u9898\u4eba\u53d6\u6a21\u8fd9\u4e48\u5927\u5c31\u662f\u8ba9\u4eba\u7ec3\u4e60 python \u6216\u8005 java\u3002 Code import java.math.BigInteger ; import java.util.Scanner ; import java.util.Vector ; public class Main { public static void main ( String [] args ) { Scanner scan = new Scanner ( System . in ); int n = scan . nextInt (); int [] a = new int [ n + 5 ] ; int [] vis = new int [ n + 5 ] ; for ( int i = 1 ; i <= n ; ++ i ) { int x = scan . nextInt (); a [ x ] = i ; } Vector < Integer > sl = new Vector <> (); for ( int i = 1 ; i <= n ; ++ i ) { if ( vis [ i ] == 0 ) { int tmp = 0 ; int pos = i ; while ( vis [ pos ] == 0 ) { vis [ pos ] = 1 ; pos = a [ pos ] ; tmp ++ ; } sl . add ( tmp ); } } BigInteger res = BigInteger . valueOf ( 1 ); BigInteger md = BigInteger . valueOf ( 10 ); md = md . pow ( n ); for ( int i : sl ) { BigInteger tmp = BigInteger . valueOf ( i ); res = res . divide ( res . gcd ( tmp )). multiply ( tmp ); res = res . mod ( md ); } System . out . println ( res ); } }","title":"E. Bogo Sort"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#f-dps","text":"solved by: badcw 00:12:05(-1) \u8f93\u51fa\u7ec3\u4e60\u9898\uff0c\u7206int\uff1f\u51fa\u9898\u4eba\u6709\u591f\u8111\u762b\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/25 12:06 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 105 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int main ( int argc , char * argv []) { int n ; R ( n ); vector < ll > d ( n ); ll mx = 0 ; for ( int i = 0 ; i < n ; ++ i ) { R ( d [ i ]); mx = max ( mx , d [ i ]); } vector < ll > s ( n ); for ( int i = 0 ; i < n ; ++ i ) { s [ i ] = ( 50ll * d [ i ] / mx + ( 50ll * d [ i ] % mx == 0 ? 0 : 1 )); putchar ( '+' ); for ( int j = 0 ; j < s [ i ]; ++ j ) putchar ( '-' ); putchar ( '+' ); putchar ( '\\n' ); putchar ( '|' ); int fi = 0 ; if ( mx == d [ i ]) fi = 1 ; for ( int j = fi ; j < s [ i ]; ++ j ) putchar ( ' ' ); if ( mx == d [ i ]) putchar ( '*' ); putchar ( '|' ); printf ( \"%d \\n \" , d [ i ]); putchar ( '+' ); for ( int j = 0 ; j < s [ i ]; ++ j ) putchar ( '-' ); putchar ( '+' ); putchar ( '\\n' ); } return 0 ; }","title":"F. DPS"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#h-interval","text":"upsolved by: badcw \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u5b9a\u4e49 f(l,r) f(l,r) \u8868\u793a l \u5230 r \u7684\u4e0e\u3002 S(l,r) S(l,r) \u4e3a l \u5230 r \u7684\u6240\u6709\u5b50\u533a\u95f4\u7684 f(l,r) f(l,r) \u7684\u5e76\u96c6\uff0c\u5f3a\u5236\u5728\u7ebf\u8be2\u95ee q \u6b21 S(l,r) S(l,r) \u7684\u5927\u5c0f\u3002 n,q \\le 1e5 ~ a\\le 2^{30} n,q \\le 1e5 ~ a\\le 2^{30} \u8003\u8651\u4ee5\u4efb\u610f\u4e00\u4e2a x \u4e3a\u5de6\u7aef\u70b9\uff0c\u6240\u6709\u53f3\u7aef\u70b9\u6700\u591a\u6709 log(a) log(a) \u7684\u4e0d\u540c\u53d6\u503c\u3002\u7528\u500d\u589e\u5904\u7406\u533a\u95f4\u4e0e\uff0c\u679a\u4e3e\u5de6\u8d77\u70b9\u4e8c\u5206\u6bcf\u6bb5\u5c31\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u53ef\u4ee5\u6784\u6210\u4e0d\u540c\u6570\u5b57\u7684 [l,r] [l,r] \u3002 \u90a3\u4e48\u5982\u679c\u4e0d\u8003\u8651\u91cd\u590d\uff0c\u6211\u4eec\u5f53\u524d\u7684\u6240\u6709 l,r \u5bf9\uff0c\u5728\u8be2\u95ee\u7684 LR \u4e2d\u5982\u679c\u88ab\u5b8c\u5168\u5305\u542b\u5219\u4f1a\u4ea7\u751f 1 \u7684\u8d21\u732e\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u5728\u7ebf\u4e8c\u7ef4\u6570\u70b9\u3002 \u7531\u4e8e\u5b58\u5728\u91cd\u590d\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u53bb\u91cd\u3002\u53ef\u4ee5\u77e5\u9053\u5bf9\u4e8e\u4e0e\u7ed3\u679c\u76f8\u540c\u7684 l,r \u5bf9\u6392\u5e8f\uff0c\u5f97\u5230 [l1,r1],[l2,r2]....[ln,rn] [l1,r1],[l2,r2]....[ln,rn] \u5219\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u5305\u542b [l1,r2],[l2,r3]... [l1,r2],[l2,r3]... \u90fd\u4f1a\u4ea7\u751f -1 \u7684\u8d21\u732e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u52a0\u4e00\u4e9b\u8d1f\u6743\u70b9\u505a\u6570\u70b9\u3002 \u5177\u4f53\u6765\u8bf4\u9759\u6001\u5728\u7ebf\u4e8c\u7ef4\u6570\u70b9\u7528\u4e3b\u5e2d\u6811\u5373\u53ef\uff0c\u51fa\u9898\u4eba\u8111\u762b\u975e\u8981\u5728\u7ebf\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/26 20:31 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n ; int a [ maxn ], f [ maxn ][ 20 ], lg [ maxn ]; struct point { int l , r , val ; bool operator < ( const point & oth ) const { if ( l == oth . l ) return r < oth . r ; return l < oth . l ; } }; void init () { lg [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; ++ i ) lg [ i ] = lg [ i >> 1 ] + 1 ; for ( int i = 1 ; i <= n ; ++ i ) f [ i ][ 0 ] = a [ i ]; for ( int j = 1 ; j <= lg [ n ]; ++ j ) { for ( int i = 1 ; i + ( 1 << j ) - 1 <= n ; ++ i ) { f [ i ][ j ] = ( f [ i ][ j - 1 ] & f [ i + ( 1 << j - 1 )][ j - 1 ]); } } } inline int rmq ( int L , int R ) { int k = lg [ R - L + 1 ]; return f [ L ][ k ] & f [ R - ( 1 << k ) + 1 ][ k ]; } int cnt = 0 ; struct node { int l , r , val ; } p [ maxn * 400 ]; void update ( int l , int r , int pre , int & now , int pos , int kk ) { if ( now == pre ) p [ now =++ cnt ] = p [ pre ]; p [ now ]. val += kk ; if ( l == r ) return ; int mid = l + r >> 1 ; if ( pos <= mid ) update ( l , mid , p [ pre ]. l , p [ now ]. l , pos , kk ); else update ( mid + 1 , r , p [ pre ]. r , p [ now ]. r , pos , kk ); } int query ( int l , int r , int x , int y , int le , int re ) { if ( le <= l && r <= re ) return p [ y ]. val - p [ x ]. val ; int mid = l + r >> 1 ; int res = 0 ; if ( le <= mid ) res = query ( l , mid , p [ x ]. l , p [ y ]. l , le , re ); if ( re > mid ) res += query ( mid + 1 , r , p [ x ]. r , p [ y ]. r , le , re ); return res ; } int rt [ maxn ]; vector < int > xpos ; vector < pair < int , int > > edge [ maxn * 20 ]; vector < pair < int , int > > deal [ maxn ]; void build ( int pre , int & now , int pos ) { now = pre ; for ( auto i : deal [ pos ]) { update ( 1 , n , pre , now , i . first , i . second ); // cerr << pos << \" \" << i.first << \" \" << i.second << endl; } } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); R ( n ); for ( int i = 1 ; i <= n ; ++ i ) R ( a [ i ]); init (); vector < point > x ; for ( int i = 1 ; i <= n ; ++ i ) { int now = 1e9 ; for ( int j = i ; j <= n ; ++ j ) { int l = j , r = n ; int res = - 1 ; while ( l <= r ) { int mid = l + r >> 1 ; if ( rmq ( i , mid ) != now ) res = mid , r = mid - 1 ; else l = mid + 1 ; } if ( res == - 1 ) break ; int tp = rmq ( i , res ); if ( tp == now ) break ; x . push_back ({ i , res , tp }); xpos . push_back ( tp ); now = tp ; j = res ; } } sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); for ( auto i : x ) { int val = lower_bound ( xpos . begin (), xpos . end (), i . val ) - xpos . begin () + 1 ; edge [ val ]. emplace_back ( i . l , i . r ); deal [ i . l ]. emplace_back ( i . r , 1 ); } for ( int i = 1 ; i <= xpos . size (); ++ i ) { sort ( edge [ i ]. begin (), edge [ i ]. end ()); for ( int j = 0 ; j + 1 < edge [ i ]. size (); ++ j ) { deal [ edge [ i ][ j ]. first ]. emplace_back ( edge [ i ][ j + 1 ]. second , - 1 ); } } for ( int i = 1 ; i <= n ; ++ i ) build ( rt [ i - 1 ], rt [ i ], i ); int q ; int lastans = 0 ; R ( q ); while ( q -- ) { int l , r ; R ( l , r ); l = ( l ^ lastans ) % n + 1 ; r = ( r ^ lastans ) % n + 1 ; if ( l > r ) swap ( l , r ); W ( lastans = query ( 1 , n , rt [ l - 1 ], rt [ r ], l , r )); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; // for (auto i : x) W(i.l, i.r, i.val); return 0 ; }","title":"H. Interval"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%89/#i-hard-math-problem","text":"\u4e00\u5f20\u65e0\u9650\u7f51\u683c\u586b\u5165 012\uff0c\u8981\u6c42\u6bcf\u4e2a 0 \u7684\u65c1\u8fb9\u90fd\u6709\u81f3\u5c11\u4e00\u4e2a 1 \u548c\u4e00\u4e2a 2\uff0c\u95ee s_0 / (m * n) s_0 / (m * n) \u6700\u5927\u662f\u591a\u5c11\u3002 1002 2001 1002 \u8fd9\u6837\u6784\u9020\u5373\u53ef\uff0c\u6700\u5927\u4e3a \u2154\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/25 12:19 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e2 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int main ( int argc , char * argv []) { W ( \"0.666667\" ); return 0 ; }","title":"I. Hard Math Problem"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/","text":"Name Date Solved A B C D E F G H I J K 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u516d\u573a\uff09 2020/7/27 5/11 . O O . O . \u00d8 O . \u00d8 O B. Binary Vector Link solved by: badcw 02:25:43 \u7ebf\u6027\u4ee3\u6570\uff0c\u6c42\u4e00\u4e2a n \u7ef4\u7ebf\u6027\u7a7a\u95f4\u5185\uff0c\u53ea\u6709 01 \u7684 n \u4e2a\u5411\u91cf\u4e0d\u7ebf\u6027\u76f8\u5173\u7684\u6982\u7387\u3002 \u5c31\u786c\u627e\u89c4\u5f8b\u6216\u8005oeis\uff0c\u56e0\u4e3a\u5206\u6bcd\u5176\u5b9e\u662f\u53ef\u4ee5\u5f88\u8f7b\u6613\u7b97\u51fa\u6765\u7684\uff0c 2^{n*n} 2^{n*n} a_1=1,a_n=a_{n-1}*(2^{2n-1}-2^{n-1}),f_n=\\frac{a_n}{2^{n*n}} a_1=1,a_n=a_{n-1}*(2^{2n-1}-2^{n-1}),f_n=\\frac{a_n}{2^{n*n}} \u7136\u540e\u5904\u7406\u4e00\u4e0b\u9012\u63a8\u6027\u8d28\u4f18\u5316\u8f6c\u79fb\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 13:55 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e7 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , int mod = :: mod ) { a %= mod ; ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } ll a [ maxn ], f [ maxn ]; int main ( int argc , char * argv []) { a [ 1 ] = 1 ; f [ 1 ] = 500000004 ; ll q1 = 2 , q2 = 8 , ls = qp ( 16 , mod - 2 ), q2inv = qp ( q2 , mod - 2 ), inv4 = qp ( 4 , mod - 2 ); for ( int i = 2 ; i <= 20000000 ; ++ i ) { a [ i ] = a [ i - 1 ] * ( q2 - q1 ) % mod ; if ( a [ i ] < 0 ) a [ i ] += mod ; f [ i ] = a [ i ] * ls % mod ; q1 = q1 * 2 % mod ; q2 = q2 * 4 % mod ; q2inv = q2inv * inv4 % mod ; ls = ls * q2inv % mod ; // if (f[i] < 0 || f[i] >= mod) cerr << \"NO\" << endl; f [ i ] ^= f [ i - 1 ]; // cerr << a[i] << ','; } int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; R ( n ); W ( f [ n ]); } return 0 ; } C. Combination of Physics and Maths Link solved by: badcw 00:36:04(-1) \u627e\u4e00\u4e2a\u53ef\u5206\u5272\u53d6\u7684\u5b50\u77e9\u9635\uff0c\u6c42\u5b50\u77e9\u9635\u548c\u4e0e\u5b50\u77e9\u9635\u6700\u4e0b\u9762\u4e00\u884c\u7684\u548c\u7684\u6bd4\u503c\u6700\u5927\u503c\u3002 \u975e\u5e38\u8f7b\u6613\u7684\u5c31\u77e5\u9053 \\frac{a}{b}+\\frac{c}{d} \\le max(\\frac{a}{b},\\frac{c}{d}) \\frac{a}{b}+\\frac{c}{d} \\le max(\\frac{a}{b},\\frac{c}{d}) \u7136\u540e\u5c31\u53ea\u53d6\u4e00\u5217\uff0c\u7136\u540e\u6bcf\u5217\u53ea\u8981\u53d6\u5b8c\u4e0a\u9762\u6240\u6709\u6570\u5373\u53ef\uff0c\u524d\u7f00\u548c\u4e00\u4e0b\u5c31\u505a\u5b8c\u4e86\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 12:32 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 205 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , m ; int mp [ maxn ][ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , m ); double res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { int tmp ; R ( tmp ); mp [ i ][ j ] = tmp + mp [ i - 1 ][ j ]; res = max ( res , ( double ) mp [ i ][ j ] / tmp ); } } W ( res ); } return 0 ; } E. Easy Construction Link solved by: badcw 00:26:22 \u6784\u9020\u4e00\u4e2a n \u7684 permutation\uff0c\u4f7f\u5f97\u5bf9\u4e8e 1~n \u7684\u6240\u6709 i \u90fd\u6ee1\u8db3\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a i \u7684\u5b50\u4e32\u7684\u548c\u6a21 n \u4e3a x\uff0cx \u662f\u8bfb\u5165\u7684\u3002 \u90a3\u4e48\u663e\u7136\u9996\u5148 x \u662f\u4e00\u4e2a\u5b9a\u503c\uff1a (1+n)*n/2 %n (1+n)*n/2 %n \uff0c\u56e0\u4e3a\u957f\u5ea6\u4e3a n \u7684\u6a21 n \u5c31\u662f\u5b83\uff0c\u90a3\u4e48\u5982\u679c x \u548c\u5b83\u4e0d\u7b49\u5c31\u65e0\u89e3\u3002 \u5f88\u8f7b\u6613\u7684\u53d1\u73b0\u53ef\u4ee5\u5206\u5947\u5076\u6784\u9020\uff0c\u56e0\u4e3a\u5947\u6570\u663e\u7136\u662f (1+n)/2 (1+n)/2 \uff0c\u5076\u6570\u5219\u4e3a 0 \u90a3\u4e48\u8003\u8651\u628a n \u653e\u5728\u6700\u540e\u4e00\u4f4d\u5373\u53ef\uff0c\u518d\u628a\u6210\u5bf9\u548c\u4e3a n \u7684\u5f80\u524d\u4e22\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 12:15 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 10 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , k ; int main ( int argc , char * argv []) { R ( n , k ); if ( n % 2 ) { if ( k != 0 ) W ( - 1 ); else { VI res ( n + 1 ); for ( int i = 1 ; i <= n ; i += 2 ) res [ i ] = i ; for ( int i = 2 ; i <= n ; i += 2 ) res [ i ] = n - i + 1 ; for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d%c\" , res [ i ], i == n ? '\\n' : ' ' ); } } else { if ( k != n / 2 ) W ( - 1 ); else { VI res ( n + 1 ); int pos = 1 ; for ( int i = 1 ; i < n ; i += 2 ) res [ i ] = pos ++ ; for ( int i = n - 2 ; i >= 2 ; i -= 2 ) res [ i ] = pos ++ ; res [ n ] = pos ++ ; for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d%c\" , res [ i ], i == n ? '\\n' : ' ' ); } } return 0 ; } G. Grid Coloring Link upsolved by: Verly \u9898\u610f\uff1a\u7ed9n\u00d7n\u7684\u7f51\u683c\u8fb9\u67d3k\u79cd\u989c\u8272\uff0c\u8981\u6c42\u6bcf\u884c/\u6bcf\u5217\u989c\u8272\u4e0d\u80fd\u5b8c\u5168\u76f8\u540c\uff0c\u6bcf\u4e2a\u5c0f\u65b9\u683c\u7684\u56db\u6761\u8fb9\u989c\u8272\u4e0d\u80fd\u5b8c\u5168\u76f8\u540c\uff0c\u6c42\u4e00\u79cd\u5408\u6cd5\u65b9\u6848\u3002 n=1 \u6216 k=1 \u6216 n*(n-1)*2%k!=0 \u65e0\u89e3\uff0c\u5426\u5219\u5982\u679c n%k!=0 \u5c31\u6309\u987a\u5e8f123456\u2026\u2026123456\u2026\u2026\u653e\uff0c\u5982\u679c n%k==0 \u5728\u6bcf\u6b21\u6362\u884c\u7684\u65f6\u5019+1\u5c31\u884c\u3002 Code #include <bits/stdc++.h> using namespace std ; int x ; void print ( int n , int k ) { for ( int i = 1 ; i <= n + 1 ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ , x = ( x + 1 ) % k ) printf ( \"%d%c\" , x + 1 , \" \\n \" [ j == n ]); if ( n % k == 0 ) x = ( x + 1 ) % k ; } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , k ; scanf ( \"%d%d\" , & n , & k ); if (( n * ( n + 1 ) * 2 % k ) || n == 1 || k == 1 ) { puts ( \"-1\" ); continue ; } x = 0 ; print ( n , k ); print ( n , k ); } return 0 ; } H. Harmony Pairs Link solved by: badcw 03:33:55(-1) \u6c42 1~n \u4e2d\u6ee1\u8db3 1 \\le x \\le y \\le n 1 \\le x \\le y \\le n \u4e14 sum(y) \\lt sum(x) sum(y) \\lt sum(x) \u7684\u6570\u91cf\u3002 \u5176\u4e2d sum \u8868\u793a\u6570\u4f4d\u548c\u3002 \u5c31\u88f8\u7684\u6570\u4f4d dp \u505a\u5dee\u5373\u53ef\u3002 dp_{i,j,[0/1],[0/1],[0/1]} dp_{i,j,[0/1],[0/1],[0/1]} \u8868\u793a\u524d i \u4f4d\uff0cx \u4e0e y \u7684\u6570\u4f4d\u5dee\u4e3a j\uff08\u5f80\u53f3\u504f\u79fb\u4e00\u4e2a 100*9 \u5373\u53ef\uff09\uff0cx \u662f\u5426\u8fbe\u5230 n \u4e0a\u754c\uff0cy \u662f\u5426\u8fbe\u5230 n \u4e0a\u754c\uff0cx \u662f\u5426\u5df2\u7ecf\u5c0f\u4e8e y \u4e86\uff08\u56e0\u4e3a\u5927\u7684\u4f4d\u5982\u679c\u5c0f\u4e8e y \u5c31\u8bf4\u660e\u540e\u9762\u53ef\u4ee5\u968f\u4fbf\u6392\u4e86\uff09\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 12:41 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } char n [ 101 ]; int dp [ 101 ][ 2000 ][ 2 ][ 2 ][ 2 ]; int dfs ( int pos , int lim1 , int lim2 , int cal , int flag ) { if ( pos < 0 ) return cal > 1000 ; if ( dp [ pos ][ cal ][ lim1 ][ lim2 ][ flag ] != - 1 ) return dp [ pos ][ cal ][ lim1 ][ lim2 ][ flag ]; int up1 = lim1 ? n [ pos ] - '0' : 9 ; int up2 = lim2 ? n [ pos ] - '0' : 9 ; int res = 0 ; for ( int i = 0 ; i <= up1 ; ++ i ) { for ( int j = 0 ; j <= up2 ; ++ j ) { if ( ! flag && i > j ) continue ; res += dfs ( pos - 1 , lim1 && i == n [ pos ] - '0' , lim2 && j == n [ pos ] - '0' , cal + i - j , flag || ( i < j )); if ( res >= mod ) res -= mod ; } } dp [ pos ][ cal ][ lim1 ][ lim2 ][ flag ] = res ; return res ; } int main ( int argc , char * argv []) { R ( n ); int len = strlen ( n ); reverse ( n , n + len ); memset ( dp , - 1 , sizeof dp ); W ( dfs ( len - 1 , 1 , 1 , 1000 , 0 )); return 0 ; } J. Josephus Transform Link upsolved by: ffacs \u9898\u610f\uff1a\u5b9a\u4e49\u4e00\u4e2a\u6392\u5217\u7ecf\u8fc7 k k \u7ea6\u745f\u592b\u53d8\u6362\u540e\u5f97\u5230\u7684\u5e8f\u5217\u4e3a \u4ece\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u5411\u540e\u6bcf k k \u4e2a\u5143\u7d20\u51fa\u961f\u4e00\u4e2a\uff0c\u5f62\u6210\u7684\u65b0\u5e8f\u5217\u3002 A*(k,x) A*(k,x) \u53d8\u6362\u4e3a \u6392\u5217 A A \u7ecf\u8fc7 x x \u6b21 k k \u7ea6\u745f\u592b\u53d8\u6362\u5f97\u5230\u7684\u5e8f\u5217\u3002\u6c42 A*(k_1,x_1)*(k_2,x_2)*...(k_m,x_m) A*(k_1,x_1)*(k_2,x_2)*...(k_m,x_m) \u3002\u5176\u4e2d 1\\le n,m\\le 1e5,1\\le n \\times m \\le 1e6,1\\le k\\le n,1\\le x\\le 1e9 1\\le n,m\\le 1e5,1\\le n \\times m \\le 1e6,1\\le k\\le n,1\\le x\\le 1e9 \u7ea6\u745f\u592b\u53d8\u6362\u672c\u8d28\u4e0a\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u7f6e\u6362\uff0c\u5373\u5c06\u67d0\u4e00\u4f4d\u5143\u7d20\u79fb\u5230\u7b2c\u4e00\u4f4d\uff0c\u67d0\u4e00\u4f4d\u5143\u7d20\u79fb\u5230\u7b2c\u4e8c\u4f4d....\u90a3\u4e48\u6211\u4eec\u6c42\u51fa 1...n 1...n \u7684 k k \u7ea6\u745f\u592b\u5e8f\u5217\u5c31\u80fd\u77e5\u9053\u8fd9\u4e2a\u7f6e\u6362\u7684\u79fb\u52a8\u65b9\u5f0f\u3002\u77e5\u9053\u8fd9\u4e2a\u7f6e\u6362\u79fb\u52a8\u65b9\u5f0f\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u6216\u8005\u500d\u589e O(n\\log x) O(n\\log x) \u6c42\u51fa\u8fd9\u4e2a\u7f6e\u6362\u7684 x x \u6b21\u65b9\u7684\u79fb\u52a8\u65b9\u5f0f\u3002\u4f5c\u7528\u5230\u4e4b\u524d\u7684\u5e8f\u5217\u4e0a\u5373\u53ef\u5b8c\u6210 (k,x) (k,x) \u3002\u6c42\u7ea6\u745f\u592b\u5e8f\u5217\u53ef\u4ee5 O(n\\log n) O(n\\log n) \uff0c\u500d\u589e\u662f O(n\\log x) O(n\\log x) \uff0c\u603b\u5171 m m \u6b21\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f nm\\log x nm\\log x \u3002 Code #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 5 ; typedef long long ll ; int p [ maxn ]; int nex [ maxn ][ 31 ]; int ans [ maxn ], temp [ maxn ]; int siz [ maxn ]; int tree [ maxn << 2 ]; inline void push_up ( int p ) { tree [ p ] = tree [ p << 1 ] + tree [ p << 1 | 1 ];} void build ( int l , int r , int p ) { if ( l == r ) { tree [ p ] = 1 ; return ;} int mid = l + r >> 1 ; build ( l , mid , p << 1 ); build ( mid + 1 , r , p << 1 | 1 ); push_up ( p ); } int update ( int k , int nl , int nr , int p ) { if ( nl == nr ) { tree [ p ] = 0 ; return nl ;} int mid = nl + nr >> 1 , ans ; if ( tree [ p << 1 ] >= k ) ans = update ( k , nl , mid , p << 1 ); else ans = update ( k - tree [ p << 1 ], mid + 1 , nr , p << 1 | 1 ); push_up ( p ); return ans ; } inline void seq ( int n , int k ) { build ( 1 , n , 1 ); int now = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { now = ( now + k - 2 ) % ( n - i + 1 ) + 1 ; p [ i ] = update ( now , 1 , n , 1 ); } } int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( false ); int n , T ; cin >> n >> T ; for ( int i = 1 ; i <= n ; i ++ ) ans [ i ] = i ; while ( T -- ) { int k , x ; cin >> k >> x ; seq ( n , k ); for ( int i = 1 ; i <= n ; i ++ ) nex [ i ][ 0 ] = siz [ i ] = 0 , temp [ i ] = ans [ i ]; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! nex [ i ][ 0 ]) { int sz = 0 ; for ( int j = i ; ! nex [ p [ j ]][ 0 ]; j = p [ j ]) nex [ p [ j ]][ 0 ] = j , sz ++ ; for ( int j = i ; ! siz [ j ]; j = nex [ j ][ 0 ]) siz [ j ] = sz ; } } for ( int i = 1 ; i <= 17 ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) nex [ j ][ i ] = nex [ nex [ j ][ i - 1 ]][ i - 1 ]; for ( int j = 1 ; j <= n ; j ++ ) { int now = j , tem = x , xx = 0 ; tem %= siz [ j ]; while ( tem ) { if ( tem & 1 ) now = nex [ now ][ xx ]; tem >>= 1 ; xx ++ ; } ans [ now ] = temp [ j ]; } } for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d \" , ans [ i ]); return 0 ; } K. K-Bag Link solved by: badcw 02:59:42(-1) k-bag \u5e8f\u5217\u8868\u793a\u4e00\u4e2a\u957f\u5ea6\u4e3a k \u7684\u500d\u6570\u4e14 (1~k),(k+1~2*k)...(n-k+1,k) \u8fd9\u4e9b\u6bb5\u90fd\u662f 1~k \u7684\u67d0\u79cd\u6392\u5217\u7684\u5e8f\u5217\u3002 \u73b0\u5728\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217\u95ee\u662f\u5426\u662f k-bag \u7684\u5b50\u4e32\u3002 n \\le 5e5, k \\le 1e9 n \\le 5e5, k \\le 1e9 \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e 1~i 1~i \u662f\u5426\u662f\u4e00\u4e2a\u4e0d\u5b8c\u6574\u7684\u6392\u5217\uff0c\u7136\u540e\u540e\u9762\u5c31\u53ef\u4ee5\u6309 k \u7684\u500d\u6570\u8ba1\u7b97\u662f\u5426\u662f\u4e00\u4e2a\u6392\u5217\u5373\u53ef\uff0c\u6700\u540e\u4e00\u6bb5\u4e5f\u8981\u5224\u65ad\u662f\u5426\u4e3a k \u7684\u4e0d\u5b8c\u6574\u6392\u5217\u3002 \u590d\u6742\u5ea6 O(min(n,k)*n/k) O(min(n,k)*n/k) \u3002 \u90a3\u4e48\u5982\u4f55 O1 \u5224\u65ad\u4e00\u6bb5\u662f\u5426\u4e3a k \u7684\u6392\u5217\u6216\u8005 k \u7684\u4e0d\u5b8c\u6574\u6392\u5217\u5462\uff0c\u50cf\u83ab\u961f\u4e00\u6837\u76f4\u63a5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u662f\u5426\u90fd\u53ea\u6709\u4e00\u4e2a\u6570\u5373\u53ef\u3002 \u9884\u5904\u7406\u590d\u6742\u5ea6 O(n) O(n) \u3002 \u518d\u52a0\u4e0a\u4f18\u7f8e\u7684\u79bb\u6563\u5316\u65b9\u5f0f\u5373\u53ef\u901a\u8fc7\uff0c\u56e0\u4e3a k \u6709\u53ef\u80fd\u5f88\u5927\u65e0\u6cd5\u7528\u6570\u7ec4\u4fdd\u5b58\uff0c\u4f46\u662f k \\le n k \\le n \u65f6\u4e0d\u9700\u8981\u79bb\u6563\u5316\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 14:32 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 5e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , k ; int a [ maxn ], f [ maxn ], flag [ maxn ], flag2 [ maxn ]; int mp [ maxn ]; int cnt = 0 , flagnow = 0 ; inline void add ( int x ) { if ( ++ mp [ x ] == 1 ) cnt ++ ; else if ( mp [ x ] == 2 ) { flagnow ++ ; } } inline void del ( int x ) { if ( -- mp [ x ] == 0 ) cnt -- ; else if ( mp [ x ] == 1 ) { flagnow -- ; } } inline int read () { int x = 0 ; char ch = getchar (); while ( ch > '9' || ch < '0' ) ch = getchar (); while ( ch >= '0' && ch <= '9' ) { x = x * 10 + ch - '0' ; ch = getchar (); } return x ; } int main ( int argc , char * argv []) { int T = read (); for ( int kase = 1 ; kase <= T ; ++ kase ) { n = read (), k = read (); int fls = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = read (); if ( a [ i ] > k ) { fls = 0 ; } } if ( fls == 0 ) { W ( \"NO\" ); continue ; } if ( k >= 500000 ) { vector < int > xpos ( a + 1 , a + 1 + n ); sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = lower_bound ( xpos . begin (), xpos . end (), a [ i ]) - xpos . begin () + 1 ; k = xpos . size () + 1 ; } for ( int i = k ; i >= 1 ; -- i ) mp [ i ] = 0 ; cnt = flagnow = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { add ( a [ i ]); if ( i > k ) del ( a [ i - k ]); f [ i ] = cnt ; flag [ i ] = flagnow ; } for ( int i = k ; i >= 1 ; -- i ) mp [ i ] = 0 ; cnt = flagnow = 0 ; for ( int i = n ; i >= 1 ; -- i ) { add ( a [ i ]); if ( i + k <= n ) del ( a [ i + k ]); flag2 [ i ] = flagnow ; } int res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( flag [ i ] > 0 ) break ; int j = i + k ; int tmp = 1 ; for (; j <= n ; j += k ) { if ( f [ j ] != k ) { tmp = 0 ; break ; } } if ( j - k + 1 <= n && flag2 [ j - k + 1 ] > 0 ) tmp = 0 ; if ( tmp == 1 ) { res = 1 ; break ; } } puts ( res ? \"YES\" : \"NO\" ); } return 0 ; }","title":"2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u516d\u573a\uff09"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/#b-binary-vector","text":"solved by: badcw 02:25:43 \u7ebf\u6027\u4ee3\u6570\uff0c\u6c42\u4e00\u4e2a n \u7ef4\u7ebf\u6027\u7a7a\u95f4\u5185\uff0c\u53ea\u6709 01 \u7684 n \u4e2a\u5411\u91cf\u4e0d\u7ebf\u6027\u76f8\u5173\u7684\u6982\u7387\u3002 \u5c31\u786c\u627e\u89c4\u5f8b\u6216\u8005oeis\uff0c\u56e0\u4e3a\u5206\u6bcd\u5176\u5b9e\u662f\u53ef\u4ee5\u5f88\u8f7b\u6613\u7b97\u51fa\u6765\u7684\uff0c 2^{n*n} 2^{n*n} a_1=1,a_n=a_{n-1}*(2^{2n-1}-2^{n-1}),f_n=\\frac{a_n}{2^{n*n}} a_1=1,a_n=a_{n-1}*(2^{2n-1}-2^{n-1}),f_n=\\frac{a_n}{2^{n*n}} \u7136\u540e\u5904\u7406\u4e00\u4e0b\u9012\u63a8\u6027\u8d28\u4f18\u5316\u8f6c\u79fb\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 13:55 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e7 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , int mod = :: mod ) { a %= mod ; ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } ll a [ maxn ], f [ maxn ]; int main ( int argc , char * argv []) { a [ 1 ] = 1 ; f [ 1 ] = 500000004 ; ll q1 = 2 , q2 = 8 , ls = qp ( 16 , mod - 2 ), q2inv = qp ( q2 , mod - 2 ), inv4 = qp ( 4 , mod - 2 ); for ( int i = 2 ; i <= 20000000 ; ++ i ) { a [ i ] = a [ i - 1 ] * ( q2 - q1 ) % mod ; if ( a [ i ] < 0 ) a [ i ] += mod ; f [ i ] = a [ i ] * ls % mod ; q1 = q1 * 2 % mod ; q2 = q2 * 4 % mod ; q2inv = q2inv * inv4 % mod ; ls = ls * q2inv % mod ; // if (f[i] < 0 || f[i] >= mod) cerr << \"NO\" << endl; f [ i ] ^= f [ i - 1 ]; // cerr << a[i] << ','; } int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; R ( n ); W ( f [ n ]); } return 0 ; }","title":"B. Binary Vector"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/#c-combination-of-physics-and-maths","text":"solved by: badcw 00:36:04(-1) \u627e\u4e00\u4e2a\u53ef\u5206\u5272\u53d6\u7684\u5b50\u77e9\u9635\uff0c\u6c42\u5b50\u77e9\u9635\u548c\u4e0e\u5b50\u77e9\u9635\u6700\u4e0b\u9762\u4e00\u884c\u7684\u548c\u7684\u6bd4\u503c\u6700\u5927\u503c\u3002 \u975e\u5e38\u8f7b\u6613\u7684\u5c31\u77e5\u9053 \\frac{a}{b}+\\frac{c}{d} \\le max(\\frac{a}{b},\\frac{c}{d}) \\frac{a}{b}+\\frac{c}{d} \\le max(\\frac{a}{b},\\frac{c}{d}) \u7136\u540e\u5c31\u53ea\u53d6\u4e00\u5217\uff0c\u7136\u540e\u6bcf\u5217\u53ea\u8981\u53d6\u5b8c\u4e0a\u9762\u6240\u6709\u6570\u5373\u53ef\uff0c\u524d\u7f00\u548c\u4e00\u4e0b\u5c31\u505a\u5b8c\u4e86\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 12:32 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 205 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , m ; int mp [ maxn ][ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , m ); double res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { int tmp ; R ( tmp ); mp [ i ][ j ] = tmp + mp [ i - 1 ][ j ]; res = max ( res , ( double ) mp [ i ][ j ] / tmp ); } } W ( res ); } return 0 ; }","title":"C. Combination of Physics and Maths"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/#e-easy-construction","text":"solved by: badcw 00:26:22 \u6784\u9020\u4e00\u4e2a n \u7684 permutation\uff0c\u4f7f\u5f97\u5bf9\u4e8e 1~n \u7684\u6240\u6709 i \u90fd\u6ee1\u8db3\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a i \u7684\u5b50\u4e32\u7684\u548c\u6a21 n \u4e3a x\uff0cx \u662f\u8bfb\u5165\u7684\u3002 \u90a3\u4e48\u663e\u7136\u9996\u5148 x \u662f\u4e00\u4e2a\u5b9a\u503c\uff1a (1+n)*n/2 %n (1+n)*n/2 %n \uff0c\u56e0\u4e3a\u957f\u5ea6\u4e3a n \u7684\u6a21 n \u5c31\u662f\u5b83\uff0c\u90a3\u4e48\u5982\u679c x \u548c\u5b83\u4e0d\u7b49\u5c31\u65e0\u89e3\u3002 \u5f88\u8f7b\u6613\u7684\u53d1\u73b0\u53ef\u4ee5\u5206\u5947\u5076\u6784\u9020\uff0c\u56e0\u4e3a\u5947\u6570\u663e\u7136\u662f (1+n)/2 (1+n)/2 \uff0c\u5076\u6570\u5219\u4e3a 0 \u90a3\u4e48\u8003\u8651\u628a n \u653e\u5728\u6700\u540e\u4e00\u4f4d\u5373\u53ef\uff0c\u518d\u628a\u6210\u5bf9\u548c\u4e3a n \u7684\u5f80\u524d\u4e22\u5373\u53ef\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 12:15 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 10 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , k ; int main ( int argc , char * argv []) { R ( n , k ); if ( n % 2 ) { if ( k != 0 ) W ( - 1 ); else { VI res ( n + 1 ); for ( int i = 1 ; i <= n ; i += 2 ) res [ i ] = i ; for ( int i = 2 ; i <= n ; i += 2 ) res [ i ] = n - i + 1 ; for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d%c\" , res [ i ], i == n ? '\\n' : ' ' ); } } else { if ( k != n / 2 ) W ( - 1 ); else { VI res ( n + 1 ); int pos = 1 ; for ( int i = 1 ; i < n ; i += 2 ) res [ i ] = pos ++ ; for ( int i = n - 2 ; i >= 2 ; i -= 2 ) res [ i ] = pos ++ ; res [ n ] = pos ++ ; for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d%c\" , res [ i ], i == n ? '\\n' : ' ' ); } } return 0 ; }","title":"E. Easy Construction"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/#g-grid-coloring","text":"upsolved by: Verly \u9898\u610f\uff1a\u7ed9n\u00d7n\u7684\u7f51\u683c\u8fb9\u67d3k\u79cd\u989c\u8272\uff0c\u8981\u6c42\u6bcf\u884c/\u6bcf\u5217\u989c\u8272\u4e0d\u80fd\u5b8c\u5168\u76f8\u540c\uff0c\u6bcf\u4e2a\u5c0f\u65b9\u683c\u7684\u56db\u6761\u8fb9\u989c\u8272\u4e0d\u80fd\u5b8c\u5168\u76f8\u540c\uff0c\u6c42\u4e00\u79cd\u5408\u6cd5\u65b9\u6848\u3002 n=1 \u6216 k=1 \u6216 n*(n-1)*2%k!=0 \u65e0\u89e3\uff0c\u5426\u5219\u5982\u679c n%k!=0 \u5c31\u6309\u987a\u5e8f123456\u2026\u2026123456\u2026\u2026\u653e\uff0c\u5982\u679c n%k==0 \u5728\u6bcf\u6b21\u6362\u884c\u7684\u65f6\u5019+1\u5c31\u884c\u3002 Code #include <bits/stdc++.h> using namespace std ; int x ; void print ( int n , int k ) { for ( int i = 1 ; i <= n + 1 ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ , x = ( x + 1 ) % k ) printf ( \"%d%c\" , x + 1 , \" \\n \" [ j == n ]); if ( n % k == 0 ) x = ( x + 1 ) % k ; } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { int n , k ; scanf ( \"%d%d\" , & n , & k ); if (( n * ( n + 1 ) * 2 % k ) || n == 1 || k == 1 ) { puts ( \"-1\" ); continue ; } x = 0 ; print ( n , k ); print ( n , k ); } return 0 ; }","title":"G. Grid Coloring"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/#h-harmony-pairs","text":"solved by: badcw 03:33:55(-1) \u6c42 1~n \u4e2d\u6ee1\u8db3 1 \\le x \\le y \\le n 1 \\le x \\le y \\le n \u4e14 sum(y) \\lt sum(x) sum(y) \\lt sum(x) \u7684\u6570\u91cf\u3002 \u5176\u4e2d sum \u8868\u793a\u6570\u4f4d\u548c\u3002 \u5c31\u88f8\u7684\u6570\u4f4d dp \u505a\u5dee\u5373\u53ef\u3002 dp_{i,j,[0/1],[0/1],[0/1]} dp_{i,j,[0/1],[0/1],[0/1]} \u8868\u793a\u524d i \u4f4d\uff0cx \u4e0e y \u7684\u6570\u4f4d\u5dee\u4e3a j\uff08\u5f80\u53f3\u504f\u79fb\u4e00\u4e2a 100*9 \u5373\u53ef\uff09\uff0cx \u662f\u5426\u8fbe\u5230 n \u4e0a\u754c\uff0cy \u662f\u5426\u8fbe\u5230 n \u4e0a\u754c\uff0cx \u662f\u5426\u5df2\u7ecf\u5c0f\u4e8e y \u4e86\uff08\u56e0\u4e3a\u5927\u7684\u4f4d\u5982\u679c\u5c0f\u4e8e y \u5c31\u8bf4\u660e\u540e\u9762\u53ef\u4ee5\u968f\u4fbf\u6392\u4e86\uff09\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 12:41 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } char n [ 101 ]; int dp [ 101 ][ 2000 ][ 2 ][ 2 ][ 2 ]; int dfs ( int pos , int lim1 , int lim2 , int cal , int flag ) { if ( pos < 0 ) return cal > 1000 ; if ( dp [ pos ][ cal ][ lim1 ][ lim2 ][ flag ] != - 1 ) return dp [ pos ][ cal ][ lim1 ][ lim2 ][ flag ]; int up1 = lim1 ? n [ pos ] - '0' : 9 ; int up2 = lim2 ? n [ pos ] - '0' : 9 ; int res = 0 ; for ( int i = 0 ; i <= up1 ; ++ i ) { for ( int j = 0 ; j <= up2 ; ++ j ) { if ( ! flag && i > j ) continue ; res += dfs ( pos - 1 , lim1 && i == n [ pos ] - '0' , lim2 && j == n [ pos ] - '0' , cal + i - j , flag || ( i < j )); if ( res >= mod ) res -= mod ; } } dp [ pos ][ cal ][ lim1 ][ lim2 ][ flag ] = res ; return res ; } int main ( int argc , char * argv []) { R ( n ); int len = strlen ( n ); reverse ( n , n + len ); memset ( dp , - 1 , sizeof dp ); W ( dfs ( len - 1 , 1 , 1 , 1000 , 0 )); return 0 ; }","title":"H. Harmony Pairs"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/#j-josephus-transform","text":"upsolved by: ffacs \u9898\u610f\uff1a\u5b9a\u4e49\u4e00\u4e2a\u6392\u5217\u7ecf\u8fc7 k k \u7ea6\u745f\u592b\u53d8\u6362\u540e\u5f97\u5230\u7684\u5e8f\u5217\u4e3a \u4ece\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u5411\u540e\u6bcf k k \u4e2a\u5143\u7d20\u51fa\u961f\u4e00\u4e2a\uff0c\u5f62\u6210\u7684\u65b0\u5e8f\u5217\u3002 A*(k,x) A*(k,x) \u53d8\u6362\u4e3a \u6392\u5217 A A \u7ecf\u8fc7 x x \u6b21 k k \u7ea6\u745f\u592b\u53d8\u6362\u5f97\u5230\u7684\u5e8f\u5217\u3002\u6c42 A*(k_1,x_1)*(k_2,x_2)*...(k_m,x_m) A*(k_1,x_1)*(k_2,x_2)*...(k_m,x_m) \u3002\u5176\u4e2d 1\\le n,m\\le 1e5,1\\le n \\times m \\le 1e6,1\\le k\\le n,1\\le x\\le 1e9 1\\le n,m\\le 1e5,1\\le n \\times m \\le 1e6,1\\le k\\le n,1\\le x\\le 1e9 \u7ea6\u745f\u592b\u53d8\u6362\u672c\u8d28\u4e0a\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u7f6e\u6362\uff0c\u5373\u5c06\u67d0\u4e00\u4f4d\u5143\u7d20\u79fb\u5230\u7b2c\u4e00\u4f4d\uff0c\u67d0\u4e00\u4f4d\u5143\u7d20\u79fb\u5230\u7b2c\u4e8c\u4f4d....\u90a3\u4e48\u6211\u4eec\u6c42\u51fa 1...n 1...n \u7684 k k \u7ea6\u745f\u592b\u5e8f\u5217\u5c31\u80fd\u77e5\u9053\u8fd9\u4e2a\u7f6e\u6362\u7684\u79fb\u52a8\u65b9\u5f0f\u3002\u77e5\u9053\u8fd9\u4e2a\u7f6e\u6362\u79fb\u52a8\u65b9\u5f0f\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u6216\u8005\u500d\u589e O(n\\log x) O(n\\log x) \u6c42\u51fa\u8fd9\u4e2a\u7f6e\u6362\u7684 x x \u6b21\u65b9\u7684\u79fb\u52a8\u65b9\u5f0f\u3002\u4f5c\u7528\u5230\u4e4b\u524d\u7684\u5e8f\u5217\u4e0a\u5373\u53ef\u5b8c\u6210 (k,x) (k,x) \u3002\u6c42\u7ea6\u745f\u592b\u5e8f\u5217\u53ef\u4ee5 O(n\\log n) O(n\\log n) \uff0c\u500d\u589e\u662f O(n\\log x) O(n\\log x) \uff0c\u603b\u5171 m m \u6b21\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f nm\\log x nm\\log x \u3002 Code #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 5 ; typedef long long ll ; int p [ maxn ]; int nex [ maxn ][ 31 ]; int ans [ maxn ], temp [ maxn ]; int siz [ maxn ]; int tree [ maxn << 2 ]; inline void push_up ( int p ) { tree [ p ] = tree [ p << 1 ] + tree [ p << 1 | 1 ];} void build ( int l , int r , int p ) { if ( l == r ) { tree [ p ] = 1 ; return ;} int mid = l + r >> 1 ; build ( l , mid , p << 1 ); build ( mid + 1 , r , p << 1 | 1 ); push_up ( p ); } int update ( int k , int nl , int nr , int p ) { if ( nl == nr ) { tree [ p ] = 0 ; return nl ;} int mid = nl + nr >> 1 , ans ; if ( tree [ p << 1 ] >= k ) ans = update ( k , nl , mid , p << 1 ); else ans = update ( k - tree [ p << 1 ], mid + 1 , nr , p << 1 | 1 ); push_up ( p ); return ans ; } inline void seq ( int n , int k ) { build ( 1 , n , 1 ); int now = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { now = ( now + k - 2 ) % ( n - i + 1 ) + 1 ; p [ i ] = update ( now , 1 , n , 1 ); } } int main () { cin . tie ( 0 ); cout . tie ( 0 ); ios :: sync_with_stdio ( false ); int n , T ; cin >> n >> T ; for ( int i = 1 ; i <= n ; i ++ ) ans [ i ] = i ; while ( T -- ) { int k , x ; cin >> k >> x ; seq ( n , k ); for ( int i = 1 ; i <= n ; i ++ ) nex [ i ][ 0 ] = siz [ i ] = 0 , temp [ i ] = ans [ i ]; for ( int i = 1 ; i <= n ; i ++ ) { if ( ! nex [ i ][ 0 ]) { int sz = 0 ; for ( int j = i ; ! nex [ p [ j ]][ 0 ]; j = p [ j ]) nex [ p [ j ]][ 0 ] = j , sz ++ ; for ( int j = i ; ! siz [ j ]; j = nex [ j ][ 0 ]) siz [ j ] = sz ; } } for ( int i = 1 ; i <= 17 ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) nex [ j ][ i ] = nex [ nex [ j ][ i - 1 ]][ i - 1 ]; for ( int j = 1 ; j <= n ; j ++ ) { int now = j , tem = x , xx = 0 ; tem %= siz [ j ]; while ( tem ) { if ( tem & 1 ) now = nex [ now ][ xx ]; tem >>= 1 ; xx ++ ; } ans [ now ] = temp [ j ]; } } for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%d \" , ans [ i ]); return 0 ; }","title":"J. Josephus Transform"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%85%AD%E5%9C%BA%EF%BC%89/#k-k-bag","text":"solved by: badcw 02:59:42(-1) k-bag \u5e8f\u5217\u8868\u793a\u4e00\u4e2a\u957f\u5ea6\u4e3a k \u7684\u500d\u6570\u4e14 (1~k),(k+1~2*k)...(n-k+1,k) \u8fd9\u4e9b\u6bb5\u90fd\u662f 1~k \u7684\u67d0\u79cd\u6392\u5217\u7684\u5e8f\u5217\u3002 \u73b0\u5728\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217\u95ee\u662f\u5426\u662f k-bag \u7684\u5b50\u4e32\u3002 n \\le 5e5, k \\le 1e9 n \\le 5e5, k \\le 1e9 \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e 1~i 1~i \u662f\u5426\u662f\u4e00\u4e2a\u4e0d\u5b8c\u6574\u7684\u6392\u5217\uff0c\u7136\u540e\u540e\u9762\u5c31\u53ef\u4ee5\u6309 k \u7684\u500d\u6570\u8ba1\u7b97\u662f\u5426\u662f\u4e00\u4e2a\u6392\u5217\u5373\u53ef\uff0c\u6700\u540e\u4e00\u6bb5\u4e5f\u8981\u5224\u65ad\u662f\u5426\u4e3a k \u7684\u4e0d\u5b8c\u6574\u6392\u5217\u3002 \u590d\u6742\u5ea6 O(min(n,k)*n/k) O(min(n,k)*n/k) \u3002 \u90a3\u4e48\u5982\u4f55 O1 \u5224\u65ad\u4e00\u6bb5\u662f\u5426\u4e3a k \u7684\u6392\u5217\u6216\u8005 k \u7684\u4e0d\u5b8c\u6574\u6392\u5217\u5462\uff0c\u50cf\u83ab\u961f\u4e00\u6837\u76f4\u63a5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u662f\u5426\u90fd\u53ea\u6709\u4e00\u4e2a\u6570\u5373\u53ef\u3002 \u9884\u5904\u7406\u590d\u6742\u5ea6 O(n) O(n) \u3002 \u518d\u52a0\u4e0a\u4f18\u7f8e\u7684\u79bb\u6563\u5316\u65b9\u5f0f\u5373\u53ef\u901a\u8fc7\uff0c\u56e0\u4e3a k \u6709\u53ef\u80fd\u5f88\u5927\u65e0\u6cd5\u7528\u6570\u7ec4\u4fdd\u5b58\uff0c\u4f46\u662f k \\le n k \\le n \u65f6\u4e0d\u9700\u8981\u79bb\u6563\u5316\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/27 14:32 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 5e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( ll & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const ll & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n , k ; int a [ maxn ], f [ maxn ], flag [ maxn ], flag2 [ maxn ]; int mp [ maxn ]; int cnt = 0 , flagnow = 0 ; inline void add ( int x ) { if ( ++ mp [ x ] == 1 ) cnt ++ ; else if ( mp [ x ] == 2 ) { flagnow ++ ; } } inline void del ( int x ) { if ( -- mp [ x ] == 0 ) cnt -- ; else if ( mp [ x ] == 1 ) { flagnow -- ; } } inline int read () { int x = 0 ; char ch = getchar (); while ( ch > '9' || ch < '0' ) ch = getchar (); while ( ch >= '0' && ch <= '9' ) { x = x * 10 + ch - '0' ; ch = getchar (); } return x ; } int main ( int argc , char * argv []) { int T = read (); for ( int kase = 1 ; kase <= T ; ++ kase ) { n = read (), k = read (); int fls = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = read (); if ( a [ i ] > k ) { fls = 0 ; } } if ( fls == 0 ) { W ( \"NO\" ); continue ; } if ( k >= 500000 ) { vector < int > xpos ( a + 1 , a + 1 + n ); sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = lower_bound ( xpos . begin (), xpos . end (), a [ i ]) - xpos . begin () + 1 ; k = xpos . size () + 1 ; } for ( int i = k ; i >= 1 ; -- i ) mp [ i ] = 0 ; cnt = flagnow = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { add ( a [ i ]); if ( i > k ) del ( a [ i - k ]); f [ i ] = cnt ; flag [ i ] = flagnow ; } for ( int i = k ; i >= 1 ; -- i ) mp [ i ] = 0 ; cnt = flagnow = 0 ; for ( int i = n ; i >= 1 ; -- i ) { add ( a [ i ]); if ( i + k <= n ) del ( a [ i + k ]); flag2 [ i ] = flagnow ; } int res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( flag [ i ] > 0 ) break ; int j = i + k ; int tmp = 1 ; for (; j <= n ; j += k ) { if ( f [ j ] != k ) { tmp = 0 ; break ; } } if ( j - k + 1 <= n && flag2 [ j - k + 1 ] > 0 ) tmp = 0 ; if ( tmp == 1 ) { res = 1 ; break ; } } puts ( res ? \"YES\" : \"NO\" ); } return 0 ; }","title":"K. K-Bag"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/","text":"Name Date Solved A B C D E F G H I J 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2020/7/20 7/10 \u00d8 O \u00d8 \u00d8 . O . O \u00d8 . A. Ancient Distance Link upsolved by: badcw \u4e00\u68f5\u4ee5 1 \u4e3a\u6839\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u9700\u8981\u786e\u5b9a k \u4e2a\u5173\u952e\u70b9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u5230\u67d0\u4e2a\u5173\u952e\u7956\u5148\u8282\u70b9\u6700\u8fd1\u8ddd\u79bb\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u6c42 k \u4e3a 1~n \u7684\u6240\u6709\u7b54\u6848\u3002 \u6811\u7684\u8282\u70b9\u6570\u91cf 1e5 \u7531\u4e8e\u5df2\u77e5 k \u6c42\u7b54\u6848\u6bd4\u8f83\u590d\u6742\uff0c\u5148\u8003\u8651\u5df2\u77e5\u7b54\u6848\u6c42\u6700\u5c11 k \u5982\u4f55\u5904\u7406\u3002\u5df2\u77e5\u6700\u5927\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u662f\u4ece\u6700\u6df1\u5904\u5f00\u59cb\u679a\u4e3e\uff0c\u6bcf\u6b21\u628a\u6700\u6df1\u5904\u7684\u8282\u70b9\u7684 ans \u5c42\u7236\u4eb2\u4f5c\u4e3a\u5173\u952e\u70b9\u8d2a\u5fc3\u5373\u53ef\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u7ef4\u62a4\u5168\u5c40\u6700\u6df1\u70b9\uff0c\u53bb\u6389\u4e00\u68f5\u5b50\u6811\u3002 \u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 dfs \u5e8f\uff0c\u5c06\u4e00\u68f5\u5b50\u6811\u7f6e\u7a7a tag \u4e0d\u9700\u8981\u4e0b\u4f20\uff0c\u56e0\u4e3a\u8be2\u95ee\u53ea\u6709\u5168\u5c40\u6700\u6df1\u70b9\u3002 \u90a3\u4e48\u8003\u8651\u7b54\u6848\u6700\u591a\u4e3a n-1\uff0c\u6700\u5c11\u4e3a 0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7b54\u6848 i\uff0c\u4ed6\u9700\u8981\u7684\u5173\u952e\u70b9\u91cf\u7ea7\u5927\u6982\u5728 O(\\frac{n}{i}) O(\\frac{n}{i}) \uff0c\u679a\u4e3e\u6240\u6709\u7b54\u6848\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7b54\u6848\u9700\u8981\u4fee\u6539\u8fd9\u4e2a\u91cf\u7ea7\u6b21\u6570\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u8003\u8651\u91cd\u65b0\u5efa\u6811\u7684\u590d\u6742\u5ea6\u5c31\u662f\u8c03\u548c\u7ea7\u6570 O(nlog^2(n)) O(nlog^2(n)) \u5982\u679c\u6bcf\u6b21\u91cd\u65b0\u5efa\u6811\u590d\u6742\u5ea6\u5c31\u4f1a\u9000\u5316\u5230 O(n^2) O(n^2) \uff0c\u6240\u4ee5\u8003\u8651\u56de\u9000\u64cd\u4f5c\uff0c\u5982\u679c\u5bf9\u7ebf\u6bb5\u6811\u6709\u6df1\u523b\u7684\u4e86\u89e3\u5c31\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u9700\u6c42\uff0c\u8bb0\u5f55\u6700\u5927\u503c\u548c\u6bcf\u4e2a\u70b9\u7684\u539f\u503c\uff0c\u6bcf\u6b21\u5bf9 rt \u70b9\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u4e0d\u4e0b\u4f20\u6807\u8bb0\uff0c\u4f46\u662f\u505a\u4e0a\u4f20\u64cd\u4f5c\u5373\u53ef\uff0c\u6700\u540e\u679a\u4e3e\u5b8c\u4e00\u4e2a\u7b54\u6848\u5c31\u5c06\u64cd\u4f5c\u5168\u90e8\u56de\u9000\u4e00\u6b21\uff0c\u5c06\u6700\u5927\u503c\u56de\u9000\u6210\u539f\u503c\u3002 \u7531\u4e8e\u9700\u8981\u627e\u51fa\u67d0\u4e2a\u70b9\u7684\u67d0\u4e00\u5c42\u7956\u5148\u8282\u70b9\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9884\u5904\u7406\u500d\u589e\u6216\u8005\u901a\u8fc7\u4f7f\u7528\u4e0a\u4e00\u6b21\u7684\u7236\u8282\u70b9\u8fdb\u884c\u9012\u63a8\uff08\u4e24\u4e2a\u7b54\u6848\u4e4b\u95f4\u7684\u7b2c k \u5c42\u7956\u5148\u8282\u70b9\u5176\u5b9e\u662f\u7236\u5b50\u5173\u7cfb\uff09\u3002 \u603b\u590d\u6742\u5ea6 O(nlog^2n) O(nlog^2n) Code by badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/23 22:05 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int fa [ maxn ][ 20 ], dep [ maxn ]; VI edge [ maxn ]; int n ; int st [ maxn ], ed [ maxn ], tot , dfn [ maxn ]; void dfs ( int u ) { dfn [ st [ u ] = ++ tot ] = u ; dep [ u ] = dep [ fa [ u ][ 0 ]] + 1 ; for ( int i = 1 ; i <= 19 ; ++ i ) fa [ u ][ i ] = fa [ fa [ u ][ i - 1 ]][ i - 1 ]; for ( auto v : edge [ u ]) dfs ( v ); ed [ u ] = tot ; } int getfa ( int x , int k ) { int now = 0 ; while ( k > 0 ) { if ( k & 1 ) x = fa [ x ][ now ]; now ++ ; k >>= 1 ; } return x ; } int p [ maxn << 2 ], tag [ maxn << 2 ], node [ maxn << 2 ]; void pushup ( int rt ) { p [ rt ] = 0 ; if ( ! tag [ rt << 1 ] && p [ rt << 1 ] > p [ rt ]) p [ rt ] = p [ rt << 1 ], node [ rt ] = node [ rt << 1 ]; if ( ! tag [ rt << 1 | 1 ] && p [ rt << 1 | 1 ] > p [ rt ]) p [ rt ] = p [ rt << 1 | 1 ], node [ rt ] = node [ rt << 1 | 1 ]; } void build ( int rt , int l , int r ) { tag [ rt ] = 0 ; if ( l == r ) { node [ rt ] = dfn [ l ]; p [ rt ] = dep [ dfn [ l ]]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); pushup ( rt ); } void update ( int rt , int l , int r , int le , int re , int k ) { if ( le <= l && r <= re ) { if ( k == 0 ) p [ rt ] = dep [ node [ rt ]]; else p [ rt ] = 0 ; tag [ rt ] = k ; return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid , le , re , k ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r , le , re , k ); pushup ( rt ); } int res [ maxn ]; int stk [ maxn ], sz ; int deal ( int x ) { sz = 0 ; int ans = 0 ; while ( p [ 1 ]) { ans ++ ; // if (p[1] <= x + 1) break; stk [ ++ sz ] = getfa ( node [ 1 ], x ); if ( stk [ sz ] == 0 ) { sz -- ; break ; } update ( 1 , 1 , n , st [ stk [ sz ]], ed [ stk [ sz ]], 1 ); } for ( int i = sz ; i >= 1 ; -- i ) update ( 1 , 1 , n , st [ stk [ i ]], ed [ stk [ i ]], 0 ); // cerr << x << \" \" << ans << endl; return ans ; } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { tot = sz = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { edge [ i ]. clear (); res [ i ] = n + 1 ; } for ( int i = 2 ; i <= n ; ++ i ) { R ( fa [ i ][ 0 ]); edge [ fa [ i ][ 0 ]]. push_back ( i ); } dfs ( 1 ); build ( 1 , 1 , n ); for ( int i = n ; i >= 0 ; -- i ) res [ deal ( i )] = i ; ll ans = res [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { res [ i ] = min ( res [ i ], res [ i - 1 ]); ans += res [ i ]; } W ( ans ); } return 0 ; } B. Basic Gcd Problem Link solved by: badcw 00:30:00(-2) \u7b54\u6848\u662f c^{x\u7684\u8d28\u56e0\u6570\u4e2a\u6570} c^{x\u7684\u8d28\u56e0\u6570\u4e2a\u6570} Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/20 12:08 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e6 + 50 ; const int mod = 1e9 + 7 ; int qp ( int a , int n , int mod = :: mod ) { int res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = 1ll * res * a % mod ; a = 1ll * a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } const int maxprime = 8e4 + 600 ; int prim [ maxprime ]; int dp [ maxn ]; int tot = 0 ; void init () { dp [ 1 ] = 0 ; for ( int i = 2 ; i < maxn ; ++ i ) { if ( ! dp [ i ]) prim [ ++ tot ] = i , dp [ i ] = 1 ; for ( int j = 1 ; j <= tot && i * prim [ j ] < maxn ; ++ j ) { // mn[i * prim[j]] = prim[j]; dp [ i * prim [ j ]] = dp [ i ] + 1 ; if ( ! ( i % prim [ j ])) break ; } } } int n , c ; inline int read () { int x = 0 ; char ch = getchar (); while ( ch > '9' || ch < '0' ) ch = getchar (); while ( ch >= '0' && ch <= '9' ) { x = x * 10 + ch - '0' ; ch = getchar (); } return x ; } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); init (); // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; int T = read (); for ( int kase = 1 ; kase <= T ; ++ kase ) { n = read (); c = read (); // R(n, c); W ( qp ( c , dp [ n ])); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; } C. Count New String Link upsolved by: Verly \u9898\u610f\uff1a\u51fd\u6570 f(S,x,y) f(S,x,y) \u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a |y-x+1| |y-x+1| \u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u7b2ci\u4f4d\u7684\u503c\u4e3a S_x~S_{x+k-1} S_x~S_{x+k-1} \u7684\u6700\u5927\u503c\u3002\u6c42 1\u2264x\u2264y\u2264n 1\u2264x\u2264y\u2264n \u7684\u6240\u6709 f(S,x,y) f(S,x,y) \u7ec4\u6210\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\u3002 \u5bf9\u4e32\u4ece\u540e\u5f80\u524d\u626b\uff0c\u5efa\u7acb\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u5355\u8c03\u6808\u7ef4\u62a4\u4e00\u4e2a\u9012\u51cf\u7684\u5b57\u7b26\u96c6\uff0c\u6bcf\u6b21\u628a\u5f53\u524d\u5b57\u7b26\u4e32\u63d2\u5165\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u5b57\u7b26\u540e\u9762\uff0c\u6784\u5efa\u51fa\u7684\u4e32\u7684\u603b\u957f\u4e0d\u8d85\u8fc710N\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e6 + 10 ; char s [ maxn ]; int last = 1 , cnt = 1 ; int ch [ maxn << 1 ][ 10 ], fa [ maxn << 1 ], len [ maxn << 1 ], pos [ maxn << 1 ]; int sz [ maxn << 1 ], a [ maxn << 1 ], c [ maxn << 1 ]; int mp [ maxn << 1 ]; int ins ( int c ) { int p = last , np = ++ cnt ; last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = ++ cnt ; len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } sz [ np ] = 1 ; return np ; } int main () { scanf ( \"%s\" , s ); int n = strlen ( s ); stack < int > st ; st . push ( n ); mp [ n ] = 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( st . size () > 1 && s [ st . top ()] < s [ i ]) st . pop (); int k = st . top (); last = mp [ k ]; for ( int j = k - 1 ; j >= i ; j -- ) mp [ j ] = ins ( s [ i ] - 'a' ); st . push ( i ); } ll ans = 0 ; for ( int i = 1 ; i <= cnt ; i ++ ) ans += len [ i ] - len [ fa [ i ]]; printf ( \"%lld \\n \" , ans ); return 0 ; } D. Dividing Strings Link upsolved by: Verly \u9898\u610f\uff1a\u628a\u6570\u5b57\u5b57\u7b26\u4e32\u5207\u6210\u4efb\u610f\u5757\uff08\u4e0d\u80fd\u6709\u524d\u5bfc\u96f6\uff09\uff0c\u6c42\u5207\u5b8c\u4e4b\u540e\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u9996\u5148\u53ef\u4ee5\u77e5\u9053\u7b54\u6848\u4e0d\u80fd\u8d85\u8fc79\u3002 \u8003\u8651\u5bf9\u4e32\u5207\u5206\uff0c\u6700\u4f18\u89e3\u4e00\u5b9a\u662f\u957f\u5ea6\u5b8c\u5168\u76f8\u540c\u6216\u8005\u53ea\u76f8\u5dee\u4e00\u4f4d\u3002 O(n\\sqrt n) O(n\\sqrt n) \u679a\u4e3e\u957f\u5ea6\u5b8c\u5168\u76f8\u540c\u7684\u60c5\u51b5\u3002 \u5bf9\u4e8e\u76f8\u5dee\u4e00\u4f4d\u7684\u60c5\u51b5\uff0c\u53ea\u53ef\u80fd\u6709\u5168\u4e3a9999x\u548c10000y\u7684\u60c5\u51b5\u5b58\u5728\u6700\u4f18\u89e3\uff0c\u679a\u4e3e\u957f\u5ea6\u5e76check\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002 Code by Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e5 + 10 ; int n , a [ maxn ], sum [ maxn ]; char s [ maxn ]; int cal ( int len ) { int pos = 1 ; int max_1 = 0 , min_9 = 9 ; while ( pos <= n ) { if ( a [ pos ] == 1 ) { if ( pos + len > n || sum [ pos + len - 1 ] - sum [ pos ] != 0 ) return 9 ; max_1 = max ( max_1 , a [ pos + len ]); pos += len + 1 ; } else { if ( pos + len - 1 > n || sum [ pos + len - 2 ] - sum [ pos - 1 ] != 9 * ( len - 1 )) return 9 ; min_9 = min ( min_9 , a [ pos + len - 1 ]); pos += len ; } } return 10 + max_1 - min_9 ; } bool cmp ( int * x , int * y , int len ) { for ( int i = 0 ; i < len ; i ++ ) if ( x [ i ] != y [ i ]) return x [ i ] < y [ i ]; return 0 ; } int subres [ maxn ]; void sub ( int * a , int * b , int len ) { for ( int i = 0 ; i < len ; i ++ ) a [ i ] -= b [ i ]; for ( int i = len - 1 ; i >= 0 ; i -- ) if ( a [ i ] < 0 ) a [ i ] += 10 , a [ i - 1 ] -- ; } int cal2 ( int len ) { int * mx = a + 1 , * mn = a + 1 ; int pos = 1 ; for ( int i = 1 ; i <= n ; i += len ) { if ( len > 1 && a [ i ] == 0 ) return 9 ; if ( cmp ( mx , a + i , len )) mx = a + i ; if ( cmp ( a + i , mn , len )) mn = a + i ; } memcpy ( subres , mx , sizeof ( int ) * ( len + 1 )); sub ( subres , mn , len ); for ( int i = 0 ; i < len - 1 ; i ++ ) if ( subres [ i ]) return 9 ; return subres [ len - 1 ]; } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%s\" , & n , s + 1 ); for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = s [ i ] - '0' , sum [ i ] = sum [ i - 1 ] + s [ i ] - '0' ; int res = 9 ; for ( int i = 1 ; i <= n / 2 ; i ++ ) if ( n % i == 0 ) res = min ( res , cal2 ( i )); for ( int i = 1 ; i <= n / 2 ; i ++ ) res = min ( res , cal ( i )); printf ( \"%d \\n \" , res ); } return 0 ; } Code by badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/24 17:02 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n ; char s [ maxn ]; int t [ maxn ]; int mxs [ maxn ], mns [ maxn ], now [ maxn ]; bool gt ( int * a , int * b , int len ) { for ( int i = 0 ; i < len ; ++ i ) { if ( a [ i ] != b [ i ]) return a [ i ] > b [ i ]; } return 0 ; } int deal ( int x ) { for ( int i = 0 ; i < x ; ++ i ) mxs [ i ] = mns [ i ] = t [ i ]; for ( int i = x ; i < n ; i += x ) { for ( int j = 0 ; j < x ; ++ j ) now [ j ] = t [ i + j ]; if ( gt ( now , mxs , x )) for ( int j = 0 ; j < x ; ++ j ) mxs [ j ] = now [ j ]; if ( gt ( mns , now , x )) for ( int j = 0 ; j < x ; ++ j ) mns [ j ] = now [ j ]; } if ( mns [ 0 ] == 0 ) return 9 ; int res = 0 ; for ( int i = x - 1 ; i >= 0 ; -- i ) { int t = mxs [ i ] - mns [ i ]; if ( t < 0 ) t += 10 , mxs [ i - 1 ] -- ; if ( i == x - 1 ) res = t ; else if ( t > 0 ) return 9 ; } return res ; } int deal2 ( int x ) { int i = 0 ; int mxx = 0 , mnn = 9 ; while ( i < n ) { int st = i ; if ( t [ i ] == 1 ) { i ++ ; while ( i < n && t [ i ] == 0 && i + 1 - st <= x + 1 ) i ++ ; if ( i < n && i + 1 - st <= x + 1 ) i ++ ; if ( i - st != x + 1 ) return 9 ; mxx = max ( mxx , t [ i - 1 ]); } else if ( t [ i ] == 9 ) { i ++ ; while ( i < n && t [ i ] == 9 && i + 1 - st <= x ) i ++ ; if ( i < n && i + 1 - st <= x ) i ++ ; if ( i - st != x ) return 9 ; mnn = min ( mnn , t [ i - 1 ]); } else if ( x == 1 ) { i ++ ; mnn = min ( mnn , t [ i - 1 ]); } else return 9 ; } return mxx - mnn + 10 ; } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , s ); int mx = 0 , mn = 9 ; for ( int i = 0 ; i < n ; ++ i ) { t [ i ] = s [ i ] - '0' ; mx = max ( mx , t [ i ]); mn = min ( mn , t [ i ]); } int res = mx - mn ; for ( int i = 2 ; i * i <= n ; ++ i ) { if ( n % i == 0 ) { res = min ( res , deal ( i )); if ( i * i != n ) res = min ( res , deal ( n / i )); } } int fi = - 1 , lst = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( t [ i ] == 1 ) { fi = i ; lst = i + 1 ; while ( lst < n && t [ lst ] == 0 ) { lst ++ ; } lst -- ; break ; } } if ( fi == - 1 ) W ( res ); else { res = min ( res , deal2 ( lst - fi + 1 )); res = min ( res , deal2 ( lst - fi )); W ( res ); } } return 0 ; } F. Finding the Order Link solved 00:48:51 \u9898\u610f\uff1a\u6709\u4e24\u4e2a\u5e73\u884c\u7ebfAB\u4e0eCD\uff0c\u5df2\u77e5AC,AD,BC,BD\u7684\u957f\u5ea6\uff0c\u6c42\u65b9\u5411\u662fAB//CD\u8fd8\u662fAB//DC \u6700\u957f\u7684\u503c\u4e00\u5b9a\u662f\u5bf9\u89d2\u7ebf\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/20 12:46 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 10 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int a [ maxn ]; int F ( int x ) { if ( x == 0 ) W ( \"AB//DC\" ); else if ( x == 1 ) W ( \"AB//CD\" ); else if ( x == 2 ) W ( \"AB//CD\" ); else W ( \"AB//DC\" ); } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { for ( int i = 0 ; i < 4 ; ++ i ) R ( a [ i ]); for ( int i = 0 ; i < 4 ; ++ i ) { int flag = 1 ; for ( int j = 0 ; j < 4 ; ++ j ) { if ( a [ i ] < a [ j ]) { flag = 0 ; break ; } } if ( flag ) { F ( i ); break ; } } } return 0 ; } H. Harder Gcd Problem Link solved by: badcw 01:33:58 \u9898\u610f\uff1a\u628a1-n\u7684\u6570\u7ec4\u6210\u82e5\u5e72\u5bf9\u5339\u914d\uff0c\u4f7f\u6bcf\u7ec4\u7684gcd\u5927\u4e8e1\uff0c\u6c42\u6700\u5927\u5339\u914d\u6570\u5e76\u8f93\u51fa\u65b9\u6848 \u679a\u4e3e\u8d28\u56e0\u6570p\u672a\u88ab\u5339\u914d\u7684\u500d\u6570\uff0c\u5982\u679c\u5947\u6570\u4e2a\u5c31\u7559\u4e0bp\u00d72\uff0c\u5c06\u5269\u4e0b\u7684\u5076\u6570\u4e24\u4e24\u5339\u914d Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/20 13:04 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int mn [ maxn ], prim [ maxn ]; int sz [ maxn ]; int tot = 0 ; void init () { for ( int i = 2 ; i < maxn ; ++ i ) { if ( ! mn [ i ]) prim [ ++ tot ] = i , mn [ i ] = i ; sz [ i ] = tot ; for ( int j = 1 ; j <= tot && i * prim [ j ] < maxn ; ++ j ) { mn [ i * prim [ j ]] = prim [ j ]; if ( ! ( i % prim [ j ])) break ; } } } int vis [ maxn ]; int main ( int argc , char * argv []) { init (); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; R ( n ); for ( int i = 0 ; i <= n ; ++ i ) vis [ i ] = 0 ; vector < pair < int , int > > res ; for ( int it = sz [ n ]; it >= 1 ; -- it ) { int i = prim [ it ]; vector < int > tmp ; for ( int j = 1 ; i * j <= n ; ++ j ) { if ( vis [ i * j ]) continue ; tmp . push_back ( i * j ); } if ( tmp . size () == 1 ) continue ; if ( tmp . size () % 2 == 0 ) { for ( int j = 1 ; j < tmp . size (); j += 2 ) { vis [ tmp [ j - 1 ]] = vis [ tmp [ j ]] = 1 ; res . push_back ({ tmp [ j - 1 ], tmp [ j ]}); } } else { vis [ tmp [ 0 ]] = vis [ tmp [ 2 ]] = 1 ; res . push_back ({ tmp [ 0 ], tmp [ 2 ]}); for ( int j = 4 ; j < tmp . size (); j += 2 ) { vis [ tmp [ j - 1 ]] = vis [ tmp [ j ]] = 1 ; res . push_back ({ tmp [ j - 1 ], tmp [ j ]}); } } } W (( int ) res . size ()); for ( auto i : res ) { W ( i . first , i . second ); } } return 0 ; } I. Investigating Legions Link upsolved by: ffacs \u70bc\u4e39\u9898\uff1f\u4e0d\u662f\u5f88\u61c2 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 1e6 + 5 ; vector < ll > V [ 305 ]; int pre [ maxn ]; char temp [ maxn ]; bool ans [ 305 ][ 305 ], has [ 305 ][ 305 ]; int fa [ 305 ], belong [ 305 ]; int getfa ( int n ) { return fa [ n ] == n ? n : fa [ n ] = getfa ( fa [ n ]); } int main () { int T ; cin >> T ; while ( T -- ) { int n , S ; cin >> n >> S ; scanf ( \"%s\" , temp + 1 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans [ i ][ j ] = 0 , has [ i ][ j ] = 0 , belong [ i ] =- 1 ; for ( int i = 1 ; i <= n * ( n - 1 ) / 2 ; i ++ ) temp [ i ] -= '0' ; for ( int i = 1 ; i <= n ; i ++ ) V [ i ]. clear (); int now = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { now ++ ; has [ i ][ j ] = has [ j ][ i ] = temp [ now ]; if ( temp [ now ]) V [ i ]. push_back ( j ), V [ j ]. push_back ( i ); } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { ll cnt = 0 ; for ( auto x : V [ i ]) if ( has [ x ][ j ]) cnt ++ ; for ( auto y : V [ j ]) if ( has [ y ][ i ]) cnt ++ ; if (( 0.33 ) < 1.0 * cnt / ( V [ i ]. size () + V [ j ]. size ())) { ans [ i ][ j ] = 1 ; } } } for ( int i = 1 ; i <= n ; i ++ ) fa [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { if ( ans [ i ][ j ] && getfa ( i ) != getfa ( j )) { fa [ getfa ( i )] = getfa ( j ); } } } int xt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( belong [ getfa ( i )] ==- 1 ) { belong [ getfa ( i )] = xt ++ ; } belong [ i ] = belong [ fa [ i ]]; } for ( int i = 1 ; i <= n ; i ++ ) cout << belong [ i ] << ' ' ; cout << endl ; } return 0 ; }","title":"2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#a-ancient-distance","text":"upsolved by: badcw \u4e00\u68f5\u4ee5 1 \u4e3a\u6839\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u9700\u8981\u786e\u5b9a k \u4e2a\u5173\u952e\u70b9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u5230\u67d0\u4e2a\u5173\u952e\u7956\u5148\u8282\u70b9\u6700\u8fd1\u8ddd\u79bb\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u6c42 k \u4e3a 1~n \u7684\u6240\u6709\u7b54\u6848\u3002 \u6811\u7684\u8282\u70b9\u6570\u91cf 1e5 \u7531\u4e8e\u5df2\u77e5 k \u6c42\u7b54\u6848\u6bd4\u8f83\u590d\u6742\uff0c\u5148\u8003\u8651\u5df2\u77e5\u7b54\u6848\u6c42\u6700\u5c11 k \u5982\u4f55\u5904\u7406\u3002\u5df2\u77e5\u6700\u5927\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u662f\u4ece\u6700\u6df1\u5904\u5f00\u59cb\u679a\u4e3e\uff0c\u6bcf\u6b21\u628a\u6700\u6df1\u5904\u7684\u8282\u70b9\u7684 ans \u5c42\u7236\u4eb2\u4f5c\u4e3a\u5173\u952e\u70b9\u8d2a\u5fc3\u5373\u53ef\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u7ef4\u62a4\u5168\u5c40\u6700\u6df1\u70b9\uff0c\u53bb\u6389\u4e00\u68f5\u5b50\u6811\u3002 \u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 dfs \u5e8f\uff0c\u5c06\u4e00\u68f5\u5b50\u6811\u7f6e\u7a7a tag \u4e0d\u9700\u8981\u4e0b\u4f20\uff0c\u56e0\u4e3a\u8be2\u95ee\u53ea\u6709\u5168\u5c40\u6700\u6df1\u70b9\u3002 \u90a3\u4e48\u8003\u8651\u7b54\u6848\u6700\u591a\u4e3a n-1\uff0c\u6700\u5c11\u4e3a 0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7b54\u6848 i\uff0c\u4ed6\u9700\u8981\u7684\u5173\u952e\u70b9\u91cf\u7ea7\u5927\u6982\u5728 O(\\frac{n}{i}) O(\\frac{n}{i}) \uff0c\u679a\u4e3e\u6240\u6709\u7b54\u6848\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7b54\u6848\u9700\u8981\u4fee\u6539\u8fd9\u4e2a\u91cf\u7ea7\u6b21\u6570\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u8003\u8651\u91cd\u65b0\u5efa\u6811\u7684\u590d\u6742\u5ea6\u5c31\u662f\u8c03\u548c\u7ea7\u6570 O(nlog^2(n)) O(nlog^2(n)) \u5982\u679c\u6bcf\u6b21\u91cd\u65b0\u5efa\u6811\u590d\u6742\u5ea6\u5c31\u4f1a\u9000\u5316\u5230 O(n^2) O(n^2) \uff0c\u6240\u4ee5\u8003\u8651\u56de\u9000\u64cd\u4f5c\uff0c\u5982\u679c\u5bf9\u7ebf\u6bb5\u6811\u6709\u6df1\u523b\u7684\u4e86\u89e3\u5c31\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u9700\u6c42\uff0c\u8bb0\u5f55\u6700\u5927\u503c\u548c\u6bcf\u4e2a\u70b9\u7684\u539f\u503c\uff0c\u6bcf\u6b21\u5bf9 rt \u70b9\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u4e0d\u4e0b\u4f20\u6807\u8bb0\uff0c\u4f46\u662f\u505a\u4e0a\u4f20\u64cd\u4f5c\u5373\u53ef\uff0c\u6700\u540e\u679a\u4e3e\u5b8c\u4e00\u4e2a\u7b54\u6848\u5c31\u5c06\u64cd\u4f5c\u5168\u90e8\u56de\u9000\u4e00\u6b21\uff0c\u5c06\u6700\u5927\u503c\u56de\u9000\u6210\u539f\u503c\u3002 \u7531\u4e8e\u9700\u8981\u627e\u51fa\u67d0\u4e2a\u70b9\u7684\u67d0\u4e00\u5c42\u7956\u5148\u8282\u70b9\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9884\u5904\u7406\u500d\u589e\u6216\u8005\u901a\u8fc7\u4f7f\u7528\u4e0a\u4e00\u6b21\u7684\u7236\u8282\u70b9\u8fdb\u884c\u9012\u63a8\uff08\u4e24\u4e2a\u7b54\u6848\u4e4b\u95f4\u7684\u7b2c k \u5c42\u7956\u5148\u8282\u70b9\u5176\u5b9e\u662f\u7236\u5b50\u5173\u7cfb\uff09\u3002 \u603b\u590d\u6742\u5ea6 O(nlog^2n) O(nlog^2n) Code by badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/23 22:05 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int fa [ maxn ][ 20 ], dep [ maxn ]; VI edge [ maxn ]; int n ; int st [ maxn ], ed [ maxn ], tot , dfn [ maxn ]; void dfs ( int u ) { dfn [ st [ u ] = ++ tot ] = u ; dep [ u ] = dep [ fa [ u ][ 0 ]] + 1 ; for ( int i = 1 ; i <= 19 ; ++ i ) fa [ u ][ i ] = fa [ fa [ u ][ i - 1 ]][ i - 1 ]; for ( auto v : edge [ u ]) dfs ( v ); ed [ u ] = tot ; } int getfa ( int x , int k ) { int now = 0 ; while ( k > 0 ) { if ( k & 1 ) x = fa [ x ][ now ]; now ++ ; k >>= 1 ; } return x ; } int p [ maxn << 2 ], tag [ maxn << 2 ], node [ maxn << 2 ]; void pushup ( int rt ) { p [ rt ] = 0 ; if ( ! tag [ rt << 1 ] && p [ rt << 1 ] > p [ rt ]) p [ rt ] = p [ rt << 1 ], node [ rt ] = node [ rt << 1 ]; if ( ! tag [ rt << 1 | 1 ] && p [ rt << 1 | 1 ] > p [ rt ]) p [ rt ] = p [ rt << 1 | 1 ], node [ rt ] = node [ rt << 1 | 1 ]; } void build ( int rt , int l , int r ) { tag [ rt ] = 0 ; if ( l == r ) { node [ rt ] = dfn [ l ]; p [ rt ] = dep [ dfn [ l ]]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); pushup ( rt ); } void update ( int rt , int l , int r , int le , int re , int k ) { if ( le <= l && r <= re ) { if ( k == 0 ) p [ rt ] = dep [ node [ rt ]]; else p [ rt ] = 0 ; tag [ rt ] = k ; return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid , le , re , k ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r , le , re , k ); pushup ( rt ); } int res [ maxn ]; int stk [ maxn ], sz ; int deal ( int x ) { sz = 0 ; int ans = 0 ; while ( p [ 1 ]) { ans ++ ; // if (p[1] <= x + 1) break; stk [ ++ sz ] = getfa ( node [ 1 ], x ); if ( stk [ sz ] == 0 ) { sz -- ; break ; } update ( 1 , 1 , n , st [ stk [ sz ]], ed [ stk [ sz ]], 1 ); } for ( int i = sz ; i >= 1 ; -- i ) update ( 1 , 1 , n , st [ stk [ i ]], ed [ stk [ i ]], 0 ); // cerr << x << \" \" << ans << endl; return ans ; } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { tot = sz = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { edge [ i ]. clear (); res [ i ] = n + 1 ; } for ( int i = 2 ; i <= n ; ++ i ) { R ( fa [ i ][ 0 ]); edge [ fa [ i ][ 0 ]]. push_back ( i ); } dfs ( 1 ); build ( 1 , 1 , n ); for ( int i = n ; i >= 0 ; -- i ) res [ deal ( i )] = i ; ll ans = res [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { res [ i ] = min ( res [ i ], res [ i - 1 ]); ans += res [ i ]; } W ( ans ); } return 0 ; }","title":"A. Ancient Distance"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#b-basic-gcd-problem","text":"solved by: badcw 00:30:00(-2) \u7b54\u6848\u662f c^{x\u7684\u8d28\u56e0\u6570\u4e2a\u6570} c^{x\u7684\u8d28\u56e0\u6570\u4e2a\u6570} Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/20 12:08 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e6 + 50 ; const int mod = 1e9 + 7 ; int qp ( int a , int n , int mod = :: mod ) { int res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = 1ll * res * a % mod ; a = 1ll * a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } const int maxprime = 8e4 + 600 ; int prim [ maxprime ]; int dp [ maxn ]; int tot = 0 ; void init () { dp [ 1 ] = 0 ; for ( int i = 2 ; i < maxn ; ++ i ) { if ( ! dp [ i ]) prim [ ++ tot ] = i , dp [ i ] = 1 ; for ( int j = 1 ; j <= tot && i * prim [ j ] < maxn ; ++ j ) { // mn[i * prim[j]] = prim[j]; dp [ i * prim [ j ]] = dp [ i ] + 1 ; if ( ! ( i % prim [ j ])) break ; } } } int n , c ; inline int read () { int x = 0 ; char ch = getchar (); while ( ch > '9' || ch < '0' ) ch = getchar (); while ( ch >= '0' && ch <= '9' ) { x = x * 10 + ch - '0' ; ch = getchar (); } return x ; } int main ( int argc , char * argv []) { // freopen(\"data.in\",\"r\",stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); init (); // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; int T = read (); for ( int kase = 1 ; kase <= T ; ++ kase ) { n = read (); c = read (); // R(n, c); W ( qp ( c , dp [ n ])); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"B. Basic Gcd Problem"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#c-count-new-string","text":"upsolved by: Verly \u9898\u610f\uff1a\u51fd\u6570 f(S,x,y) f(S,x,y) \u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a |y-x+1| |y-x+1| \u7684\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u7b2ci\u4f4d\u7684\u503c\u4e3a S_x~S_{x+k-1} S_x~S_{x+k-1} \u7684\u6700\u5927\u503c\u3002\u6c42 1\u2264x\u2264y\u2264n 1\u2264x\u2264y\u2264n \u7684\u6240\u6709 f(S,x,y) f(S,x,y) \u7ec4\u6210\u7684\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570\u3002 \u5bf9\u4e32\u4ece\u540e\u5f80\u524d\u626b\uff0c\u5efa\u7acb\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u5355\u8c03\u6808\u7ef4\u62a4\u4e00\u4e2a\u9012\u51cf\u7684\u5b57\u7b26\u96c6\uff0c\u6bcf\u6b21\u628a\u5f53\u524d\u5b57\u7b26\u4e32\u63d2\u5165\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u5b57\u7b26\u540e\u9762\uff0c\u6784\u5efa\u51fa\u7684\u4e32\u7684\u603b\u957f\u4e0d\u8d85\u8fc710N\u3002 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e6 + 10 ; char s [ maxn ]; int last = 1 , cnt = 1 ; int ch [ maxn << 1 ][ 10 ], fa [ maxn << 1 ], len [ maxn << 1 ], pos [ maxn << 1 ]; int sz [ maxn << 1 ], a [ maxn << 1 ], c [ maxn << 1 ]; int mp [ maxn << 1 ]; int ins ( int c ) { int p = last , np = ++ cnt ; last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = ++ cnt ; len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } sz [ np ] = 1 ; return np ; } int main () { scanf ( \"%s\" , s ); int n = strlen ( s ); stack < int > st ; st . push ( n ); mp [ n ] = 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { while ( st . size () > 1 && s [ st . top ()] < s [ i ]) st . pop (); int k = st . top (); last = mp [ k ]; for ( int j = k - 1 ; j >= i ; j -- ) mp [ j ] = ins ( s [ i ] - 'a' ); st . push ( i ); } ll ans = 0 ; for ( int i = 1 ; i <= cnt ; i ++ ) ans += len [ i ] - len [ fa [ i ]]; printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"C. Count New String"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#d-dividing-strings","text":"upsolved by: Verly \u9898\u610f\uff1a\u628a\u6570\u5b57\u5b57\u7b26\u4e32\u5207\u6210\u4efb\u610f\u5757\uff08\u4e0d\u80fd\u6709\u524d\u5bfc\u96f6\uff09\uff0c\u6c42\u5207\u5b8c\u4e4b\u540e\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u7684\u5dee\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u9996\u5148\u53ef\u4ee5\u77e5\u9053\u7b54\u6848\u4e0d\u80fd\u8d85\u8fc79\u3002 \u8003\u8651\u5bf9\u4e32\u5207\u5206\uff0c\u6700\u4f18\u89e3\u4e00\u5b9a\u662f\u957f\u5ea6\u5b8c\u5168\u76f8\u540c\u6216\u8005\u53ea\u76f8\u5dee\u4e00\u4f4d\u3002 O(n\\sqrt n) O(n\\sqrt n) \u679a\u4e3e\u957f\u5ea6\u5b8c\u5168\u76f8\u540c\u7684\u60c5\u51b5\u3002 \u5bf9\u4e8e\u76f8\u5dee\u4e00\u4f4d\u7684\u60c5\u51b5\uff0c\u53ea\u53ef\u80fd\u6709\u5168\u4e3a9999x\u548c10000y\u7684\u60c5\u51b5\u5b58\u5728\u6700\u4f18\u89e3\uff0c\u679a\u4e3e\u957f\u5ea6\u5e76check\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002 Code by Verly #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e5 + 10 ; int n , a [ maxn ], sum [ maxn ]; char s [ maxn ]; int cal ( int len ) { int pos = 1 ; int max_1 = 0 , min_9 = 9 ; while ( pos <= n ) { if ( a [ pos ] == 1 ) { if ( pos + len > n || sum [ pos + len - 1 ] - sum [ pos ] != 0 ) return 9 ; max_1 = max ( max_1 , a [ pos + len ]); pos += len + 1 ; } else { if ( pos + len - 1 > n || sum [ pos + len - 2 ] - sum [ pos - 1 ] != 9 * ( len - 1 )) return 9 ; min_9 = min ( min_9 , a [ pos + len - 1 ]); pos += len ; } } return 10 + max_1 - min_9 ; } bool cmp ( int * x , int * y , int len ) { for ( int i = 0 ; i < len ; i ++ ) if ( x [ i ] != y [ i ]) return x [ i ] < y [ i ]; return 0 ; } int subres [ maxn ]; void sub ( int * a , int * b , int len ) { for ( int i = 0 ; i < len ; i ++ ) a [ i ] -= b [ i ]; for ( int i = len - 1 ; i >= 0 ; i -- ) if ( a [ i ] < 0 ) a [ i ] += 10 , a [ i - 1 ] -- ; } int cal2 ( int len ) { int * mx = a + 1 , * mn = a + 1 ; int pos = 1 ; for ( int i = 1 ; i <= n ; i += len ) { if ( len > 1 && a [ i ] == 0 ) return 9 ; if ( cmp ( mx , a + i , len )) mx = a + i ; if ( cmp ( a + i , mn , len )) mn = a + i ; } memcpy ( subres , mx , sizeof ( int ) * ( len + 1 )); sub ( subres , mn , len ); for ( int i = 0 ; i < len - 1 ; i ++ ) if ( subres [ i ]) return 9 ; return subres [ len - 1 ]; } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%s\" , & n , s + 1 ); for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = s [ i ] - '0' , sum [ i ] = sum [ i - 1 ] + s [ i ] - '0' ; int res = 9 ; for ( int i = 1 ; i <= n / 2 ; i ++ ) if ( n % i == 0 ) res = min ( res , cal2 ( i )); for ( int i = 1 ; i <= n / 2 ; i ++ ) res = min ( res , cal ( i )); printf ( \"%d \\n \" , res ); } return 0 ; } Code by badcw /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/24 17:02 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 1e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int n ; char s [ maxn ]; int t [ maxn ]; int mxs [ maxn ], mns [ maxn ], now [ maxn ]; bool gt ( int * a , int * b , int len ) { for ( int i = 0 ; i < len ; ++ i ) { if ( a [ i ] != b [ i ]) return a [ i ] > b [ i ]; } return 0 ; } int deal ( int x ) { for ( int i = 0 ; i < x ; ++ i ) mxs [ i ] = mns [ i ] = t [ i ]; for ( int i = x ; i < n ; i += x ) { for ( int j = 0 ; j < x ; ++ j ) now [ j ] = t [ i + j ]; if ( gt ( now , mxs , x )) for ( int j = 0 ; j < x ; ++ j ) mxs [ j ] = now [ j ]; if ( gt ( mns , now , x )) for ( int j = 0 ; j < x ; ++ j ) mns [ j ] = now [ j ]; } if ( mns [ 0 ] == 0 ) return 9 ; int res = 0 ; for ( int i = x - 1 ; i >= 0 ; -- i ) { int t = mxs [ i ] - mns [ i ]; if ( t < 0 ) t += 10 , mxs [ i - 1 ] -- ; if ( i == x - 1 ) res = t ; else if ( t > 0 ) return 9 ; } return res ; } int deal2 ( int x ) { int i = 0 ; int mxx = 0 , mnn = 9 ; while ( i < n ) { int st = i ; if ( t [ i ] == 1 ) { i ++ ; while ( i < n && t [ i ] == 0 && i + 1 - st <= x + 1 ) i ++ ; if ( i < n && i + 1 - st <= x + 1 ) i ++ ; if ( i - st != x + 1 ) return 9 ; mxx = max ( mxx , t [ i - 1 ]); } else if ( t [ i ] == 9 ) { i ++ ; while ( i < n && t [ i ] == 9 && i + 1 - st <= x ) i ++ ; if ( i < n && i + 1 - st <= x ) i ++ ; if ( i - st != x ) return 9 ; mnn = min ( mnn , t [ i - 1 ]); } else if ( x == 1 ) { i ++ ; mnn = min ( mnn , t [ i - 1 ]); } else return 9 ; } return mxx - mnn + 10 ; } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { R ( n , s ); int mx = 0 , mn = 9 ; for ( int i = 0 ; i < n ; ++ i ) { t [ i ] = s [ i ] - '0' ; mx = max ( mx , t [ i ]); mn = min ( mn , t [ i ]); } int res = mx - mn ; for ( int i = 2 ; i * i <= n ; ++ i ) { if ( n % i == 0 ) { res = min ( res , deal ( i )); if ( i * i != n ) res = min ( res , deal ( n / i )); } } int fi = - 1 , lst = - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( t [ i ] == 1 ) { fi = i ; lst = i + 1 ; while ( lst < n && t [ lst ] == 0 ) { lst ++ ; } lst -- ; break ; } } if ( fi == - 1 ) W ( res ); else { res = min ( res , deal2 ( lst - fi + 1 )); res = min ( res , deal2 ( lst - fi )); W ( res ); } } return 0 ; }","title":"D. Dividing Strings"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#f-finding-the-order","text":"solved 00:48:51 \u9898\u610f\uff1a\u6709\u4e24\u4e2a\u5e73\u884c\u7ebfAB\u4e0eCD\uff0c\u5df2\u77e5AC,AD,BC,BD\u7684\u957f\u5ea6\uff0c\u6c42\u65b9\u5411\u662fAB//CD\u8fd8\u662fAB//DC \u6700\u957f\u7684\u503c\u4e00\u5b9a\u662f\u5bf9\u89d2\u7ebf\u3002 Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/20 12:46 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 10 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int a [ maxn ]; int F ( int x ) { if ( x == 0 ) W ( \"AB//DC\" ); else if ( x == 1 ) W ( \"AB//CD\" ); else if ( x == 2 ) W ( \"AB//CD\" ); else W ( \"AB//DC\" ); } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { for ( int i = 0 ; i < 4 ; ++ i ) R ( a [ i ]); for ( int i = 0 ; i < 4 ; ++ i ) { int flag = 1 ; for ( int j = 0 ; j < 4 ; ++ j ) { if ( a [ i ] < a [ j ]) { flag = 0 ; break ; } } if ( flag ) { F ( i ); break ; } } } return 0 ; }","title":"F. Finding the Order"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#h-harder-gcd-problem","text":"solved by: badcw 01:33:58 \u9898\u610f\uff1a\u628a1-n\u7684\u6570\u7ec4\u6210\u82e5\u5e72\u5bf9\u5339\u914d\uff0c\u4f7f\u6bcf\u7ec4\u7684gcd\u5927\u4e8e1\uff0c\u6c42\u6700\u5927\u5339\u914d\u6570\u5e76\u8f93\u51fa\u65b9\u6848 \u679a\u4e3e\u8d28\u56e0\u6570p\u672a\u88ab\u5339\u914d\u7684\u500d\u6570\uff0c\u5982\u679c\u5947\u6570\u4e2a\u5c31\u7559\u4e0bp\u00d72\uff0c\u5c06\u5269\u4e0b\u7684\u5076\u6570\u4e24\u4e24\u5339\u914d Code /*================================================================ * * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2020/7/20 13:04 * ================================================================*/ #include <bits/stdc++.h> #define VI vector<int> #define ll long long using namespace std ; const int maxn = 2e5 + 50 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n , ll mod = :: mod ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > void _R ( T & x ) { cin >> x ; } void _R ( int & x ) { scanf ( \"%d\" , & x ); } void _R ( int64_t & x ) { scanf ( \"%lld\" , & x ); } void _R ( double & x ) { scanf ( \"%lf\" , & x ); } void _R ( char & x ) { x = getchar (); } void _R ( char * x ) { scanf ( \"%s\" , x ); } void R () {} template < class T , class ... U > void R ( T & head , U & ... tail ) { _R ( head ); R ( tail ...); } template < class T > void _W ( const T & x ) { cout << x ; } void _W ( const int & x ) { printf ( \"%d\" , x ); } void _W ( const int64_t & x ) { printf ( \"%lld\" , x ); } void _W ( const double & x ) { printf ( \"%.16f\" , x ); } void _W ( const char & x ) { putchar ( x ); } void _W ( const char * x ) { printf ( \"%s\" , x ); } template < class T , class U > void _W ( const pair < T , U > & x ) { _W ( x . F ); putchar ( ' ' ); _W ( x . S );} template < class T > void _W ( const vector < T > & x ) { for ( auto i = x . begin (); i != x . end (); _W ( * i ++ )) if ( i != x . cbegin ()) putchar ( ' ' ); } void W () {} template < class T , class ... U > void W ( const T & head , const U & ... tail ) { _W ( head ); putchar ( sizeof ...( tail ) ? ' ' : '\\n' ); W ( tail ...); } int mn [ maxn ], prim [ maxn ]; int sz [ maxn ]; int tot = 0 ; void init () { for ( int i = 2 ; i < maxn ; ++ i ) { if ( ! mn [ i ]) prim [ ++ tot ] = i , mn [ i ] = i ; sz [ i ] = tot ; for ( int j = 1 ; j <= tot && i * prim [ j ] < maxn ; ++ j ) { mn [ i * prim [ j ]] = prim [ j ]; if ( ! ( i % prim [ j ])) break ; } } } int vis [ maxn ]; int main ( int argc , char * argv []) { init (); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n ; R ( n ); for ( int i = 0 ; i <= n ; ++ i ) vis [ i ] = 0 ; vector < pair < int , int > > res ; for ( int it = sz [ n ]; it >= 1 ; -- it ) { int i = prim [ it ]; vector < int > tmp ; for ( int j = 1 ; i * j <= n ; ++ j ) { if ( vis [ i * j ]) continue ; tmp . push_back ( i * j ); } if ( tmp . size () == 1 ) continue ; if ( tmp . size () % 2 == 0 ) { for ( int j = 1 ; j < tmp . size (); j += 2 ) { vis [ tmp [ j - 1 ]] = vis [ tmp [ j ]] = 1 ; res . push_back ({ tmp [ j - 1 ], tmp [ j ]}); } } else { vis [ tmp [ 0 ]] = vis [ tmp [ 2 ]] = 1 ; res . push_back ({ tmp [ 0 ], tmp [ 2 ]}); for ( int j = 4 ; j < tmp . size (); j += 2 ) { vis [ tmp [ j - 1 ]] = vis [ tmp [ j ]] = 1 ; res . push_back ({ tmp [ j - 1 ], tmp [ j ]}); } } } W (( int ) res . size ()); for ( auto i : res ) { W ( i . first , i . second ); } } return 0 ; }","title":"H. Harder Gcd Problem"},{"location":"Training%20Logs/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/2020%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%9C%BA%EF%BC%89/#i-investigating-legions","text":"upsolved by: ffacs \u70bc\u4e39\u9898\uff1f\u4e0d\u662f\u5f88\u61c2 Code #include <bits/stdc++.h> using namespace std ; typedef long long ll ; typedef pair < int , int > pii ; typedef pair < ll , ll > pll ; const int maxn = 1e6 + 5 ; vector < ll > V [ 305 ]; int pre [ maxn ]; char temp [ maxn ]; bool ans [ 305 ][ 305 ], has [ 305 ][ 305 ]; int fa [ 305 ], belong [ 305 ]; int getfa ( int n ) { return fa [ n ] == n ? n : fa [ n ] = getfa ( fa [ n ]); } int main () { int T ; cin >> T ; while ( T -- ) { int n , S ; cin >> n >> S ; scanf ( \"%s\" , temp + 1 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans [ i ][ j ] = 0 , has [ i ][ j ] = 0 , belong [ i ] =- 1 ; for ( int i = 1 ; i <= n * ( n - 1 ) / 2 ; i ++ ) temp [ i ] -= '0' ; for ( int i = 1 ; i <= n ; i ++ ) V [ i ]. clear (); int now = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { now ++ ; has [ i ][ j ] = has [ j ][ i ] = temp [ now ]; if ( temp [ now ]) V [ i ]. push_back ( j ), V [ j ]. push_back ( i ); } } for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { ll cnt = 0 ; for ( auto x : V [ i ]) if ( has [ x ][ j ]) cnt ++ ; for ( auto y : V [ j ]) if ( has [ y ][ i ]) cnt ++ ; if (( 0.33 ) < 1.0 * cnt / ( V [ i ]. size () + V [ j ]. size ())) { ans [ i ][ j ] = 1 ; } } } for ( int i = 1 ; i <= n ; i ++ ) fa [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { if ( ans [ i ][ j ] && getfa ( i ) != getfa ( j )) { fa [ getfa ( i )] = getfa ( j ); } } } int xt = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( belong [ getfa ( i )] ==- 1 ) { belong [ getfa ( i )] = xt ++ ; } belong [ i ] = belong [ fa [ i ]]; } for ( int i = 1 ; i <= n ; i ++ ) cout << belong [ i ] << ' ' ; cout << endl ; } return 0 ; }","title":"I. Investigating Legions"}]}