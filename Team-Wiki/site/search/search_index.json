{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Team Wiki Link General Link Name \uff1a\u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members : DashBoard : Team DashBoard Onsite Link Name Date Rank Solved 2019 ICPC EC-Final 2019/12/15 Brozen(Rank:148) 3 2019 ICPC Asia Shanghai Regional Contest 2019/11/24 Silver(Rank:41) 5 \u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b 2019/11/17 Iron(Rank:76) 3 2019 ICPC Asia Nanjing Regional Contest 2019/10/27 Brozen(Rank:131) 4 The 2019 CCPC, Xiamen Site 2019/10/20 Silver(Rank:48) 5 Training Logs Link Name Date Solved 2019 ICPC Asia Nanchang Regional 2019/12/11 5/13 2019 ICPC Asia Xuzhou Regional 2019/12/7 6/12 2019-2020 ICPC, NERC, Northern Eurasia Finals 2019/12/1 7/12 2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b 2019/11/20 6/12 2018 China Collegiate Programming Contest Final (CCPC-Final 2018) 2019/11/11 6/12 The 2019 China Collegiate Programming Contest Harbin Site 2019/11/2 7/12 2019-2020 ICPC, Asia Jakarta Regional Contest 2019/10/31 9/12 2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest 2019/10/28 9/14 2018-2019 ACM-ICPC, Asia East Continent Finals 2019/10/12 6/12 The 2018 ACM-ICPC Asia Beijing Regional Contest 2019/10/11 5/12 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest 2019/10/8 10/12 2019 China Collegiate Programming Contest Qinhuangdao Onsite 2019/9/28 7/12 The 13 th Chinese Northeast Collegiate Programming Contest 2019/9/25 7/10 The Preliminary Contest for ICPC Asia Shanghai 2019 2019/9/15 7/12 The Preliminary Contest for ICPC Asia Shenyang 2019 2019/9/14 6/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09 2019/8/8 9/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2019/7/27 7/11 2019 Multi-University Training Contest 3 2019/7/29 5/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2019/7/25 6/10 2019 Multi-University Training Contest 2 2019/7/24 6/12 2019 Multi-University Training Contest 1 2019/7/22 7/13 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 7/10 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"Team Wiki"},{"location":"#team-wiki","text":"","title":"Team Wiki"},{"location":"#general","text":"Name \uff1a\u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members : DashBoard : Team DashBoard","title":"General"},{"location":"#onsite","text":"Name Date Rank Solved 2019 ICPC EC-Final 2019/12/15 Brozen(Rank:148) 3 2019 ICPC Asia Shanghai Regional Contest 2019/11/24 Silver(Rank:41) 5 \u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b 2019/11/17 Iron(Rank:76) 3 2019 ICPC Asia Nanjing Regional Contest 2019/10/27 Brozen(Rank:131) 4 The 2019 CCPC, Xiamen Site 2019/10/20 Silver(Rank:48) 5","title":"Onsite"},{"location":"#training-logs","text":"Name Date Solved 2019 ICPC Asia Nanchang Regional 2019/12/11 5/13 2019 ICPC Asia Xuzhou Regional 2019/12/7 6/12 2019-2020 ICPC, NERC, Northern Eurasia Finals 2019/12/1 7/12 2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b 2019/11/20 6/12 2018 China Collegiate Programming Contest Final (CCPC-Final 2018) 2019/11/11 6/12 The 2019 China Collegiate Programming Contest Harbin Site 2019/11/2 7/12 2019-2020 ICPC, Asia Jakarta Regional Contest 2019/10/31 9/12 2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest 2019/10/28 9/14 2018-2019 ACM-ICPC, Asia East Continent Finals 2019/10/12 6/12 The 2018 ACM-ICPC Asia Beijing Regional Contest 2019/10/11 5/12 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest 2019/10/8 10/12 2019 China Collegiate Programming Contest Qinhuangdao Onsite 2019/9/28 7/12 The 13 th Chinese Northeast Collegiate Programming Contest 2019/9/25 7/10 The Preliminary Contest for ICPC Asia Shanghai 2019 2019/9/15 7/12 The Preliminary Contest for ICPC Asia Shenyang 2019 2019/9/14 6/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09 2019/8/8 9/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 2019/7/27 7/11 2019 Multi-University Training Contest 3 2019/7/29 5/11 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2019/7/25 6/10 2019 Multi-University Training Contest 2 2019/7/24 6/12 2019 Multi-University Training Contest 1 2019/7/22 7/13 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 7/10 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"Training Logs"},{"location":"About/About/","text":"If you have any question about this wiki, please contact qq: 952223482","title":"About"},{"location":"Personal Page/Verly/","text":"Overview Link \u535a\u5ba2: https://v-verly.github.io/ CF: Verly \u6709\u60f3\u8be6\u7ec6\u5199\u7684\u9898\u89e3\u4e22\u5728\u535a\u5ba2\uff0cwiki\u653e\u4e2a(mo)\u4eba(yu)\u8bb0\u5f55 \u8fd9\u8fb9\u5199\u7684\u4e1c\u897f\u5e94\u8be5\u4e0d\u4f1a\u5f88\u8be6\u7ec6\uff0c\u5eb7\u4e0d\u61c2\u7684\u8bdd\u79c1\u804a\u6211\u4e00\u54c8\u5b50 To-Do List Link \u8865\u4e00\u4e0b\u5b57\u7b26\u4e32(undo:exKMP, manachar, SA, SAM) \u5207\u56fe\u8bba\u6742\u9898\uff0c\u6709\u7a7a\u7684\u65f6\u5019\u5b66\u4e00\u4e9b\u9ad8\u7ea7\u4e00\u70b9\u7684\u4e1c\u897f \u4ee5\u4e0a\u4e24\u9879\u90fd\u4e0d\u60f3\u770b\u7684\u65f6\u5019\uff0c\u53bb\u6478\u4e00\u4e0b\u7ec4\u5408\u6570\u5b66\u6216\u8005\u591a\u9879\u5f0f \u6709\u7a7a\u5f00\u4e00\u4e2aCF\u8865\u9898\u8bb0\u5f55\u7684page Logs Link Topic Link Contest Link 2019/7/27 KMP(done) 2019/7/17 \u7f51\u7edc\u6d4124\u9898 (done) Daily Link 2019/8/9 Link BZOJ-1005:\u7ed9\u51fa\u6807\u53f7\u4e3a1\u5230N\u7684\u70b9\uff0c\u4ee5\u53ca\u67d0\u4e9b\u70b9\u6700\u7ec8\u7684\u5ea6\u6570\uff0c\u5141\u8bb8\u5728\u4efb\u610f\u4e24\u70b9\u95f4\u8fde\u7ebf\uff0c\u53ef\u4ea7\u751f\u591a\u5c11\u68f5\u5ea6\u6570\u6ee1\u8db3\u8981\u6c42\u7684\u6811\u3002 \u6811\u7684Purfer\u5e8f\u5217\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u7684\u51fa\u73b0\u6b21\u6570=\u70b9\u7684\u5ea6\u6570-1\u3002\u8bbe\u5ea6\u6570\u786e\u5b9a\u7684\u70b9\u5171\u6709 cnt cnt \u4e2a\uff0c\u4ee4\u5176\u96c6\u5408\u4e3a V V \uff0c sum=\\sum_{i\u2208V}d[i]-1 sum=\\sum_{i\u2208V}d[i]-1 \u5bf9\u4e8e\u8fd9\u6837\u7684\u5ea6\u6570\u5e8f\u5217\uff0c\u5b83\u7684Purfer\u5e8f\u5217\u4e2d\uff0c\u5ea6\u6570\u786e\u5b9a\u7684\u70b9\u6709 C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)} C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)} \u79cd\u586b\u6cd5\uff0c\u5269\u4e0b\u7684 n-2-sum n-2-sum \u4e2a\u70b9\u53ef\u4ee5\u586b\u4efb\u610f\u4e00\u4e2a\u5ea6\u6570\u672a\u77e5\u7684\u70b9\uff08\u5728 n-cnt n-cnt \u4e2a\u70b9\u4e2d\u9009\uff09\uff0c\u6709 (n-cnt)^{n-2-sum} (n-cnt)^{n-2-sum} \u79cd\u65b9\u6848\u3002 \u603b\u65b9\u6848\u6570\u4e3a C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)}\u00d7(n-cnt)^{n-2-sum} C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)}\u00d7(n-cnt)^{n-2-sum} \u79cd BZOJ-1004:\u7ed9\u5b9am\u79cd\u7f6e\u6362\u548c3\u79cd\u989c\u8272\uff0c\u6bcf\u79cd\u989c\u8272\u7684\u6570\u91cf\u56fa\u5b9a\uff0c\u6c42\u672c\u8d28\u4e0d\u540c\u7684\u67d3\u8272\u65b9\u6848\u6570\u3002 \u7531Burnside\u5f15\u7406\uff0c\u672c\u8d28\u4e0d\u540c\u7684\u67d3\u8272\u65b9\u6848\u6570=\u6bcf\u79cd\u7f6e\u6362\u4e0b\u4e0d\u53d8\u7684\u67d3\u8272\u65b9\u6848\u6570/\u7f6e\u6362\u603b\u6570\u3002 \u8fd9\u91cc\u7684\u6d17\u724c\u7f6e\u6362\u53ea\u8981\u52a0\u4e0a\u4e00\u4e2a\u5355\u4f4d\u5143\uff0c\u5c31\u80fd\u6784\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u7f6e\u6362\u7fa4\u3002\u5bf9\u4e8e\u6bcf\u79cd\u7f6e\u6362\uff0c\u56e0\u4e3a\u6bcf\u79cd\u989c\u8272\u7684\u79cd\u7c7b\u56fa\u5b9a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7c7b\u7f6e\u6362\uff0c\u6c42\u51fa\u5faa\u73af\u8282\u540e\u5bf9\u4e09\u79cd\u989c\u8272\u505a01\u80cc\u5305\uff0c dp[sr][sg][sb] \u5c31\u662f\u5f53\u524d\u7f6e\u6362\u4e0b\u4e0d\u53d8\u7684\u67d3\u8272\u65b9\u6848\u6570\u3002 2019/8/2 Link BZOJ-4568:\u5728\u6811\u4e0a\u8def\u5f84(u,v)\u4e4b\u95f4\u9009\u62e9\u4e00\u4e9b\u70b9\u7684\u6743\u503c\uff0c\u4f7f\u5f02\u6216\u548c\u6700\u5927\uff1a\u5bf9\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\u4e00\u4e2a\u500d\u589e\u7684\u7ebf\u6027\u57fa\uff0c\u627eLCA\u7684\u65f6\u5019\u500d\u589e\u4e0a\u8df3\u7ef4\u62a4\u6574\u4e2a\u8def\u5f84\u7684\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6c42\u6700\u5927\u503c\u4e86\uff0c \u5e76\u4e0d\u8be6\u7ec6\u7684\u9898\u89e3 BZOJ-3122\uff1a X_{i+1}=(aX_i+b) mod p X_{i+1}=(aX_i+b) mod p \uff0c\u6c42\u6700\u5c0f\u7684i\u4f7f X_i=t X_i=t \uff1a\u63a8\u4e2a\u5f0f\u5b50\u5904\u7406\u6389\u7279\u6b8a\u60c5\u51b5\u7136\u540eBSGS\uff0c\u591a\u6821\u90a3\u9898\u662f\u8fd9\u9898\u7684\u52a0\u5f3a\u7248\u6240\u4ee5\u5199\u4e86\u4e00\u4e0b\u8fd9\u9898\uff0c \u8be6\u7ec6\u9898\u89e3 2019/8/1 Link BZOJ-2565:\u7ed9\u5b9a\u4e00\u4e2a\u4e32\uff0c\u627e\u5230\u6700\u957f\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u4f7f\u5b83\u7684\u5de6\u90e8X\u548c\u53f3\u90e8Y(|X|>0,|Y|>0)\u90fd\u4e3a\u56de\u6587\u4e32\uff1a\u6bd4\u8f83\u5e38\u89c4\u7684Manacher\uff0c\u6807\u8bb0\u6bcf\u4e2a#\u8282\u70b9\u5411\u5de6\u5411\u53f3\u80fd\u591f\u7ec4\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u6c42\u548c\u5373\u53ef\uff0cmanacher\u7684\u4ee5pos\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u771f\u5b9e\u957f\u5ea6\u4e3aLen[pos]-1\u3002 2019/7/31 Link CF-1199F:n\u00d7n\u7684\u7f51\u683c\u56fe\u4e2d\u6709\u82e5\u5e72\u4e2a\u9ed1\u70b9\uff0c\u8986\u76d6\u6389\u4e00\u6bb5\u957f\u5ea6\u4e3a(x,y)\u7684\u5757\u7684\u82b1\u8d39\u662fmax(x,y)\uff0c\u6c42\u8986\u76d6\u6389\u6240\u6709\u9ed1\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\uff1a\u5f31\u667a\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e0d\u77e5\u9053\u8fd9\u79cd\u9898\u4e3a\u4ec0\u4e48\u653e\u5728F\uff1b CF-1199E: \u7ed9\u5b9a3n\u4e2a\u70b9\u548cm\u6761\u8fb9\u7684\u56fe\uff0c\u8981\u6c42\u627e\u52302n\u4e2a\u70b9\uff0c\u5176\u4e2d\u4e24\u4e2a\u70b9\u4ec5\u7531\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u4e0d\u5b58\u5728\u4e00\u4e2a\u70b9\u4e0e\u591a\u4e2a\u70b9\u76f8\u8fde\uff1b\u6216\u627e\u5230n\u4e2a\u70b9\uff0c\u4f7fn\u4e2a\u70b9\u4e3a\u72ec\u7acb\u96c6(\u4e24\u4e24\u4e92\u4e0d\u76f8\u8fde)\uff1a\u76f4\u63a5\u66b4\u529bvis\u627e\u8fb9\u96c6\uff0c\u5982\u679c\u80fd\u627e\u5230n\u5bf9\u5c31\u8f93\u51fa\u8fb9\u96c6\uff1b\u4e0d\u80fd\u627e\u5230\u5c31\u8bf4\u660e\u5269\u4e0b\u7684\u76f8\u4e92\u72ec\u7acb\u7684\u70b9\u96c6\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8en\uff0c\u8f93\u51fa\u70b9\u96c6\u3002 2019/7/30 Link BZOJ-1283: \u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6b63\u6574\u6570\u5e8f\u5217Ci\uff0c\u6c42\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u539f\u5e8f\u5217\u4e2d\u4efb\u610f\u957f\u5ea6\u4e3am\u7684\u5b50\u4e32\u4e2d\u88ab\u9009\u51fa\u7684\u5143\u7d20\u4e0d\u8d85\u8fc7K(K,M<=100) \u4e2a\uff0c\u5e76\u4e14\u9009\u51fa\u7684\u5143\u7d20\u4e4b\u548c\u6700\u5927\u3002 \u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u9009k\u6b21\uff0c\u6bcf\u6b21\u9009\u7684\u6570\u8ddd\u79bb>=m\uff0c\u8dd1\u8d39\u7528\u6d41\u3002S\u54111\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ak\uff1bi\u5411i+1\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0c\u8d39\u7528\u4e3a0\uff1bi\u5411min(i+m,T)\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a-c[i]\uff0c\u4ee3\u8868\u9009\u8fd9\u4e2a\u70b9\uff0c\u6700\u5927\u8d39\u7528\u6d41\u5c31\u662f\u7b54\u6848\u3002 2019/7/29 Link BZOJ-3931: \u6700\u77ed\u8def+\u6700\u5927\u6d41\uff0c\u6309\u9898\u610f\u6a21\u62df\uff0c\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u6700\u77ed\u8def\u7684\u8fb9\uff0c\u62c6\u70b9\u8dd1\u7f51\u7edc\u6d41\u5373\u53ef BZOJ-3624: \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u56fe\u4e0a\u670901\u4e24\u7c7b\u8fb9\uff0c\u8981\u6c42\u627e\u5230\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f0\u8fb9\u7684\u6570\u91cf\u6070\u597d\u4e3ak \u5148\u53d6\u6240\u67091\u8fb9\u5efa\u751f\u6210\u6811\uff0c\u7136\u540e\u6dfb\u52a00\u8fb9\uff0c\u8fd9\u65f6\u5019\u6dfb\u52a0\u8fdb\u76840\u8fb9\u662f\u5fc5\u987b\u6dfb\u52a0\u7684\uff1b\u91cd\u65b0\u5efa\u751f\u6210\u6811\uff0c\u5148\u52a0\u5165\u5fc5\u987b\u6dfb\u52a0\u76840\u8fb9\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u51650\u8fb9\u76f4\u5230\u5171\u6709k\u6761\uff0c\u518d\u52a01\u8fb9\uff0c\u8fd9\u6837\u5f62\u6210\u7684\u751f\u6210\u6811\u5c31\u662f\u7b54\u6848","title":"Index"},{"location":"Personal Page/Verly/#overview","text":"\u535a\u5ba2: https://v-verly.github.io/ CF: Verly \u6709\u60f3\u8be6\u7ec6\u5199\u7684\u9898\u89e3\u4e22\u5728\u535a\u5ba2\uff0cwiki\u653e\u4e2a(mo)\u4eba(yu)\u8bb0\u5f55 \u8fd9\u8fb9\u5199\u7684\u4e1c\u897f\u5e94\u8be5\u4e0d\u4f1a\u5f88\u8be6\u7ec6\uff0c\u5eb7\u4e0d\u61c2\u7684\u8bdd\u79c1\u804a\u6211\u4e00\u54c8\u5b50","title":"Overview"},{"location":"Personal Page/Verly/#to-do-list","text":"\u8865\u4e00\u4e0b\u5b57\u7b26\u4e32(undo:exKMP, manachar, SA, SAM) \u5207\u56fe\u8bba\u6742\u9898\uff0c\u6709\u7a7a\u7684\u65f6\u5019\u5b66\u4e00\u4e9b\u9ad8\u7ea7\u4e00\u70b9\u7684\u4e1c\u897f \u4ee5\u4e0a\u4e24\u9879\u90fd\u4e0d\u60f3\u770b\u7684\u65f6\u5019\uff0c\u53bb\u6478\u4e00\u4e0b\u7ec4\u5408\u6570\u5b66\u6216\u8005\u591a\u9879\u5f0f \u6709\u7a7a\u5f00\u4e00\u4e2aCF\u8865\u9898\u8bb0\u5f55\u7684page","title":"To-Do List"},{"location":"Personal Page/Verly/#logs","text":"","title":"Logs"},{"location":"Personal Page/Verly/#topic","text":"","title":"Topic"},{"location":"Personal Page/Verly/#contest","text":"2019/7/27 KMP(done) 2019/7/17 \u7f51\u7edc\u6d4124\u9898 (done)","title":"Contest"},{"location":"Personal Page/Verly/#daily","text":"","title":"Daily"},{"location":"Personal Page/Verly/#201989","text":"BZOJ-1005:\u7ed9\u51fa\u6807\u53f7\u4e3a1\u5230N\u7684\u70b9\uff0c\u4ee5\u53ca\u67d0\u4e9b\u70b9\u6700\u7ec8\u7684\u5ea6\u6570\uff0c\u5141\u8bb8\u5728\u4efb\u610f\u4e24\u70b9\u95f4\u8fde\u7ebf\uff0c\u53ef\u4ea7\u751f\u591a\u5c11\u68f5\u5ea6\u6570\u6ee1\u8db3\u8981\u6c42\u7684\u6811\u3002 \u6811\u7684Purfer\u5e8f\u5217\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u7684\u51fa\u73b0\u6b21\u6570=\u70b9\u7684\u5ea6\u6570-1\u3002\u8bbe\u5ea6\u6570\u786e\u5b9a\u7684\u70b9\u5171\u6709 cnt cnt \u4e2a\uff0c\u4ee4\u5176\u96c6\u5408\u4e3a V V \uff0c sum=\\sum_{i\u2208V}d[i]-1 sum=\\sum_{i\u2208V}d[i]-1 \u5bf9\u4e8e\u8fd9\u6837\u7684\u5ea6\u6570\u5e8f\u5217\uff0c\u5b83\u7684Purfer\u5e8f\u5217\u4e2d\uff0c\u5ea6\u6570\u786e\u5b9a\u7684\u70b9\u6709 C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)} C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)} \u79cd\u586b\u6cd5\uff0c\u5269\u4e0b\u7684 n-2-sum n-2-sum \u4e2a\u70b9\u53ef\u4ee5\u586b\u4efb\u610f\u4e00\u4e2a\u5ea6\u6570\u672a\u77e5\u7684\u70b9\uff08\u5728 n-cnt n-cnt \u4e2a\u70b9\u4e2d\u9009\uff09\uff0c\u6709 (n-cnt)^{n-2-sum} (n-cnt)^{n-2-sum} \u79cd\u65b9\u6848\u3002 \u603b\u65b9\u6848\u6570\u4e3a C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)}\u00d7(n-cnt)^{n-2-sum} C_{n-2}^{sum}\u00d7\\frac {sum!} {\\prod_{i\u2208V} (d[i]-1)}\u00d7(n-cnt)^{n-2-sum} \u79cd BZOJ-1004:\u7ed9\u5b9am\u79cd\u7f6e\u6362\u548c3\u79cd\u989c\u8272\uff0c\u6bcf\u79cd\u989c\u8272\u7684\u6570\u91cf\u56fa\u5b9a\uff0c\u6c42\u672c\u8d28\u4e0d\u540c\u7684\u67d3\u8272\u65b9\u6848\u6570\u3002 \u7531Burnside\u5f15\u7406\uff0c\u672c\u8d28\u4e0d\u540c\u7684\u67d3\u8272\u65b9\u6848\u6570=\u6bcf\u79cd\u7f6e\u6362\u4e0b\u4e0d\u53d8\u7684\u67d3\u8272\u65b9\u6848\u6570/\u7f6e\u6362\u603b\u6570\u3002 \u8fd9\u91cc\u7684\u6d17\u724c\u7f6e\u6362\u53ea\u8981\u52a0\u4e0a\u4e00\u4e2a\u5355\u4f4d\u5143\uff0c\u5c31\u80fd\u6784\u6210\u4e00\u4e2a\u771f\u6b63\u7684\u7f6e\u6362\u7fa4\u3002\u5bf9\u4e8e\u6bcf\u79cd\u7f6e\u6362\uff0c\u56e0\u4e3a\u6bcf\u79cd\u989c\u8272\u7684\u79cd\u7c7b\u56fa\u5b9a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7c7b\u7f6e\u6362\uff0c\u6c42\u51fa\u5faa\u73af\u8282\u540e\u5bf9\u4e09\u79cd\u989c\u8272\u505a01\u80cc\u5305\uff0c dp[sr][sg][sb] \u5c31\u662f\u5f53\u524d\u7f6e\u6362\u4e0b\u4e0d\u53d8\u7684\u67d3\u8272\u65b9\u6848\u6570\u3002","title":"2019/8/9"},{"location":"Personal Page/Verly/#201982","text":"BZOJ-4568:\u5728\u6811\u4e0a\u8def\u5f84(u,v)\u4e4b\u95f4\u9009\u62e9\u4e00\u4e9b\u70b9\u7684\u6743\u503c\uff0c\u4f7f\u5f02\u6216\u548c\u6700\u5927\uff1a\u5bf9\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\u4e00\u4e2a\u500d\u589e\u7684\u7ebf\u6027\u57fa\uff0c\u627eLCA\u7684\u65f6\u5019\u500d\u589e\u4e0a\u8df3\u7ef4\u62a4\u6574\u4e2a\u8def\u5f84\u7684\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6c42\u6700\u5927\u503c\u4e86\uff0c \u5e76\u4e0d\u8be6\u7ec6\u7684\u9898\u89e3 BZOJ-3122\uff1a X_{i+1}=(aX_i+b) mod p X_{i+1}=(aX_i+b) mod p \uff0c\u6c42\u6700\u5c0f\u7684i\u4f7f X_i=t X_i=t \uff1a\u63a8\u4e2a\u5f0f\u5b50\u5904\u7406\u6389\u7279\u6b8a\u60c5\u51b5\u7136\u540eBSGS\uff0c\u591a\u6821\u90a3\u9898\u662f\u8fd9\u9898\u7684\u52a0\u5f3a\u7248\u6240\u4ee5\u5199\u4e86\u4e00\u4e0b\u8fd9\u9898\uff0c \u8be6\u7ec6\u9898\u89e3","title":"2019/8/2"},{"location":"Personal Page/Verly/#201981","text":"BZOJ-2565:\u7ed9\u5b9a\u4e00\u4e2a\u4e32\uff0c\u627e\u5230\u6700\u957f\u7684\u4e00\u4e2a\u5b50\u4e32\uff0c\u4f7f\u5b83\u7684\u5de6\u90e8X\u548c\u53f3\u90e8Y(|X|>0,|Y|>0)\u90fd\u4e3a\u56de\u6587\u4e32\uff1a\u6bd4\u8f83\u5e38\u89c4\u7684Manacher\uff0c\u6807\u8bb0\u6bcf\u4e2a#\u8282\u70b9\u5411\u5de6\u5411\u53f3\u80fd\u591f\u7ec4\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u6c42\u548c\u5373\u53ef\uff0cmanacher\u7684\u4ee5pos\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u771f\u5b9e\u957f\u5ea6\u4e3aLen[pos]-1\u3002","title":"2019/8/1"},{"location":"Personal Page/Verly/#2019731","text":"CF-1199F:n\u00d7n\u7684\u7f51\u683c\u56fe\u4e2d\u6709\u82e5\u5e72\u4e2a\u9ed1\u70b9\uff0c\u8986\u76d6\u6389\u4e00\u6bb5\u957f\u5ea6\u4e3a(x,y)\u7684\u5757\u7684\u82b1\u8d39\u662fmax(x,y)\uff0c\u6c42\u8986\u76d6\u6389\u6240\u6709\u9ed1\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\uff1a\u5f31\u667a\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u4e0d\u77e5\u9053\u8fd9\u79cd\u9898\u4e3a\u4ec0\u4e48\u653e\u5728F\uff1b CF-1199E: \u7ed9\u5b9a3n\u4e2a\u70b9\u548cm\u6761\u8fb9\u7684\u56fe\uff0c\u8981\u6c42\u627e\u52302n\u4e2a\u70b9\uff0c\u5176\u4e2d\u4e24\u4e2a\u70b9\u4ec5\u7531\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u4e0d\u5b58\u5728\u4e00\u4e2a\u70b9\u4e0e\u591a\u4e2a\u70b9\u76f8\u8fde\uff1b\u6216\u627e\u5230n\u4e2a\u70b9\uff0c\u4f7fn\u4e2a\u70b9\u4e3a\u72ec\u7acb\u96c6(\u4e24\u4e24\u4e92\u4e0d\u76f8\u8fde)\uff1a\u76f4\u63a5\u66b4\u529bvis\u627e\u8fb9\u96c6\uff0c\u5982\u679c\u80fd\u627e\u5230n\u5bf9\u5c31\u8f93\u51fa\u8fb9\u96c6\uff1b\u4e0d\u80fd\u627e\u5230\u5c31\u8bf4\u660e\u5269\u4e0b\u7684\u76f8\u4e92\u72ec\u7acb\u7684\u70b9\u96c6\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8en\uff0c\u8f93\u51fa\u70b9\u96c6\u3002","title":"2019/7/31"},{"location":"Personal Page/Verly/#2019730","text":"BZOJ-1283: \u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6b63\u6574\u6570\u5e8f\u5217Ci\uff0c\u6c42\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u539f\u5e8f\u5217\u4e2d\u4efb\u610f\u957f\u5ea6\u4e3am\u7684\u5b50\u4e32\u4e2d\u88ab\u9009\u51fa\u7684\u5143\u7d20\u4e0d\u8d85\u8fc7K(K,M<=100) \u4e2a\uff0c\u5e76\u4e14\u9009\u51fa\u7684\u5143\u7d20\u4e4b\u548c\u6700\u5927\u3002 \u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u9009k\u6b21\uff0c\u6bcf\u6b21\u9009\u7684\u6570\u8ddd\u79bb>=m\uff0c\u8dd1\u8d39\u7528\u6d41\u3002S\u54111\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ak\uff1bi\u5411i+1\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0c\u8d39\u7528\u4e3a0\uff1bi\u5411min(i+m,T)\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a-c[i]\uff0c\u4ee3\u8868\u9009\u8fd9\u4e2a\u70b9\uff0c\u6700\u5927\u8d39\u7528\u6d41\u5c31\u662f\u7b54\u6848\u3002","title":"2019/7/30"},{"location":"Personal Page/Verly/#2019729","text":"BZOJ-3931: \u6700\u77ed\u8def+\u6700\u5927\u6d41\uff0c\u6309\u9898\u610f\u6a21\u62df\uff0c\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u6700\u77ed\u8def\u7684\u8fb9\uff0c\u62c6\u70b9\u8dd1\u7f51\u7edc\u6d41\u5373\u53ef BZOJ-3624: \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u56fe\u4e0a\u670901\u4e24\u7c7b\u8fb9\uff0c\u8981\u6c42\u627e\u5230\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f0\u8fb9\u7684\u6570\u91cf\u6070\u597d\u4e3ak \u5148\u53d6\u6240\u67091\u8fb9\u5efa\u751f\u6210\u6811\uff0c\u7136\u540e\u6dfb\u52a00\u8fb9\uff0c\u8fd9\u65f6\u5019\u6dfb\u52a0\u8fdb\u76840\u8fb9\u662f\u5fc5\u987b\u6dfb\u52a0\u7684\uff1b\u91cd\u65b0\u5efa\u751f\u6210\u6811\uff0c\u5148\u52a0\u5165\u5fc5\u987b\u6dfb\u52a0\u76840\u8fb9\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u51650\u8fb9\u76f4\u5230\u5171\u6709k\u6761\uff0c\u518d\u52a01\u8fb9\uff0c\u8fd9\u6837\u5f62\u6210\u7684\u751f\u6210\u6811\u5c31\u662f\u7b54\u6848","title":"2019/7/29"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/cf\u7f51\u7edc\u6d41\u7248\u5207/","text":"links \u8bc4\u52062500+\u7248\u5207\uff0c\u4ee3\u7801\u89c1\u63d0\u4ea4 269C *2500 Link \u7ed9\u4e86\u4e00\u5f20\u7f51\u7edc\u6d41\u56fe\uff0c\u4f46\u56fe\u53ea\u6709\u6d41\u91cf\u6ca1\u6709\u65b9\u5411\uff0c\u8fd8\u539f\u51fa\u56fe\u4e0a\u6bcf\u6761\u8fb9\u7684\u65b9\u5411\u3002 \u6784\u9020\u9898\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684in,out\uff0c\u4eceS\u70b9\u5f00\u59cbBFS\uff0c\u628a\u5f53\u524d\u70b9\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u8fb9\u5168\u90e8\u7528\u4e8e\u51fa\u65b9\u5411\uff0c\u66f4\u65b0in[v]+=cap,out[v]-=cap\uff0c\u5f53in[v]==out[v]\u65f6\u628av\u52a0\u5165\u961f\u5217\uff08\u4f46\u662f\u4e0d\u8981\u628aT\u70b9\u52a0\u5165\u961f\u5217\uff09 808F *2500 Link \u7ed9\u4e86n\u5f20\u5361\u724c\uff0c\u9700\u8981\u7684\u529b\u91cf\u4e4b\u548c\u4e3ak\u3002\u5361\u724c\u7684\u529b\u91cf\u4e3ap[i]\uff0c\u6570\u5b57\u4e3ac[i]\uff0c\u7b49\u7ea7\u4e3al[i]\u3002\u5f53\u7b49\u7ea7\u5c0f\u4e8el[i]\u65f6\u65e0\u6cd5\u4f7f\u7528\u8fd9\u5f20\u5361\u724c\uff1b\u5982\u679c\u6709\u4e24\u5f20\u5361\u724c\u7684\u6570\u5b57\u4e4b\u548c\u4e3a\u7d20\u6570\uff0c\u5219\u4e0d\u80fd\u540c\u65f6\u9009\u53d6\u8fd9\u4e24\u5f20\u5361\u724c\u3002\u95ee\u6700\u5c11\u8981\u8fbe\u5230\u51e0\u7ea7\u624d\u80fd\u9009\u51fa\u529b\u91cf\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8ek\u7684\u5408\u6cd5\u724c\u7ec4\u3002 \u9664\u4e861+1\u4e4b\u5916\u5269\u4e0b\u7684\u4e24\u6570\u4e4b\u548c\u4e3a\u7d20\u6570\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u5947\u6570+\u5076\u6570\uff0c1\u53ea\u53d6\u5408\u6cd5\u7684\u6700\u5927\u4e00\u4e2a\u503c\uff0c\u6784\u5efa\u4e00\u4e2a\u4e8c\u5206\u56fe\u6c42\u6700\u5c0f\u5272\uff0c\u603b\u503c-\u6700\u5c0f\u5272\u5373\u4e3a\u5f53\u524d\u53ef\u4ee5\u6784\u5efa\u7684\u6700\u5927\u503c\uff0c\u4e8c\u5206\u7b49\u7ea7\u5373\u53ef\u6c42\u89e3\u3002 884F *2500 Link \u7ed9\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3an(\u5076\u6570)\u7684\u4e32s\uff0c\u6c42\u539f\u4e32\u7684\u4e00\u4e2a\u6392\u5217p\u4f7f a[i]!=a[n-i+1] \uff0c\u5982\u679cs[i]=p[i]\u5219\u83b7\u5f97\u7b2ci\u4f4d\u7684\u4ef7\u503cb[i]\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8d39\u7528\u6d41\u8dd1\u4e00\u4e0b\uff0cn/2\u4e2a\u70b9\uff0c\u7b2ci\u4e2a\u8868\u793ap[i]\u548cp[n-i+1]\uff0c\u6bcf\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5efa\u4e00\u4e2a\u70b9\u5411\u5b83\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u5982\u679c\u5b57\u6bcd\u4e3as[i]\u6216s[n-i+1]\u5c31\u52a0\u4e0a\u8fb9\u6743\uff08\u76f8\u7b49\u5219\u52a0\u4e0a\u8f83\u5927\u7684\uff09\uff0c\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002 1009G *2500 Link \u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u91cd\u6392\u5b57\u7b26\u4e32\u4f7f\u5176\u6ee1\u8db3\u9650\u5236\uff08\u7b2ci\u4f4d\u53ea\u80fd\u662f\u67d0\u4e2a\u6307\u5b9a\u7684\u5b57\u7b26\u96c6\uff09\uff0c\u4f7f\u5b57\u5178\u5e8f\u6700\u5c0f\u3002 \u8d2a\u5fc3\u7684\u9009\u62e9\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5e76\u4f7f\u5176\u540e\u9762\u7684\u5b57\u7b26\u6ee1\u8db3\u4e8c\u5206\u56fe\u5b8c\u7f8e\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u9075\u5faahall\u5b9a\u7406\uff0c\u72b6\u538bcheck\u4e00\u4e0b\u6bcf\u4e00\u4f4d\u7684\u9009\u62e9\u3002 \u2026\u2026\u4e0d\u662f\u7279\u522b\u61c2\uff0c\u6211\u518d\u60f3\u60f3 628F *2500 Link \u96c6\u5408\u4e2d\u6709n\u4e2a\u6570(n\u662f5\u7684\u500d\u6570)\uff0c\u6700\u5927\u7684\u6570\u5b57\u4e0d\u8d85\u8fc7b\uff0c\u6709q\u4e2a\u9650\u5236(x,y)\uff0c\u8868\u793a1-x\u4e2d\u4e00\u5171\u6709y\u4e2a\u6570\uff0c\u96c6\u5408\u4e2d\u6a215\u4e3a0,1,2,3,4\u7684\u6570\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u95ee\u8fd9\u6837\u7684\u96c6\u5408\u662f\u5426\u5b58\u5728\u3002 \u5bf9\u6bcf\u4e2a\u9650\u5236\u5efa\u70b9\uff0c\u5411\u4ee3\u8868\u6a21\u6570\u4e3a0,1,2,3,4\u7684\u70b9\u8fde\u6d41\u91cf\u4e3a\u533a\u95f4\u5185\u4e2a\u6570\u7684\u8fb9\uff0c\u5224\u65ad max_flow(S,T)==n \u5373\u53ef\u3002 78E *2500 Link \u65e0\u804a\u7684\u7801\u519c\u9898\u2026\u2026\u4e3b\u8981\u7801\u91cf\u5728\u4e8e\u5224\u65ad\u6bcf\u4e2a\u65f6\u523b\u70b9\u4e4b\u95f4\u53ef\u4e0d\u53ef\u8fbe\uff0c\u50bb\u903cdfs\uff0c\u5efa\u56fe\u5c31\u662fsb\u5efa\u56fe\uff0c\u6ca1\u52b2 1146G *2600 Link \u5728\u4e00\u6761\u8def\u4e0a\u6709\u6807\u53f7\u4e3a1-n\u7684n\u5ea7\u623f\u5b50\uff0c\u6bcf\u5ea7\u623f\u5b50\u6700\u9ad8\u4e3ah\uff0c\u82e5\u4e00\u5ea7\u623f\u5b50\u7684\u9ad8\u5ea6\u4e3ax\uff0c\u5219\u8fd9\u5ea7\u623f\u5b50\u7684\u6536\u76ca\u4e3ax*x\uff1b\u6709m\u6761\u9650\u5236\uff0c\u6bcf\u6761\u9650\u5236\u8868\u793a\u5982\u679c\u5728l-r\u4e4b\u95f4\u7684\u6240\u6709\u623f\u5b50\u7684\u6700\u5927\u9ad8\u5ea6\u8d85\u8fc7hi\uff0c\u5219\u7f5a\u6b3eci\u3002\u95ee\u6240\u6709\u623f\u5b50\u7684\u6700\u5927\u6536\u76ca\u662f\u591a\u5c11\u3002 \u6700\u5c0f\u5272\u6a21\u578b\uff0c\u5148\u5047\u8bbe\u603b\u6536\u76ca\u4e3a n*h*h \uff0c\u5bf9\u6bcf\u4e2a\u623f\u5b50\u7684\u5efa0-h\u5171h+1\u4e2a\u70b9\uff0cS\u54110\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0ci\u5411i+1\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a h*h-i*i \uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u8868\u793a\u53d6\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u6536\u76ca\uff1b\u6bcf\u4e2a\u9650\u5236\u4f5c\u4e3a\u4e00\u4e2a\u70b9\uff0c\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u7f5a\u6b3ec[i]\uff0c\u88ab\u5272\u8868\u793a\u9700\u8981\u652f\u4ed8\u7f5a\u6b3e\uff1bl,r\u4e4b\u95f4\u7684\u623f\u5b50\u6bcf\u4e2a\u8868\u793a\u9ad8\u5ea6 h[i]+1 \u5411\u8be5\u9650\u5236\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0c\u6700\u540e\u7684\u7b54\u6848\u4e3a n*h*h-max_flow(S\uff0cT)","title":"Cf\u7f51\u7edc\u6d41\u7248\u5207"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/cf\u7f51\u7edc\u6d41\u7248\u5207/#269c-2500","text":"\u7ed9\u4e86\u4e00\u5f20\u7f51\u7edc\u6d41\u56fe\uff0c\u4f46\u56fe\u53ea\u6709\u6d41\u91cf\u6ca1\u6709\u65b9\u5411\uff0c\u8fd8\u539f\u51fa\u56fe\u4e0a\u6bcf\u6761\u8fb9\u7684\u65b9\u5411\u3002 \u6784\u9020\u9898\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684in,out\uff0c\u4eceS\u70b9\u5f00\u59cbBFS\uff0c\u628a\u5f53\u524d\u70b9\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u8fb9\u5168\u90e8\u7528\u4e8e\u51fa\u65b9\u5411\uff0c\u66f4\u65b0in[v]+=cap,out[v]-=cap\uff0c\u5f53in[v]==out[v]\u65f6\u628av\u52a0\u5165\u961f\u5217\uff08\u4f46\u662f\u4e0d\u8981\u628aT\u70b9\u52a0\u5165\u961f\u5217\uff09","title":"269C *2500"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/cf\u7f51\u7edc\u6d41\u7248\u5207/#808f-2500","text":"\u7ed9\u4e86n\u5f20\u5361\u724c\uff0c\u9700\u8981\u7684\u529b\u91cf\u4e4b\u548c\u4e3ak\u3002\u5361\u724c\u7684\u529b\u91cf\u4e3ap[i]\uff0c\u6570\u5b57\u4e3ac[i]\uff0c\u7b49\u7ea7\u4e3al[i]\u3002\u5f53\u7b49\u7ea7\u5c0f\u4e8el[i]\u65f6\u65e0\u6cd5\u4f7f\u7528\u8fd9\u5f20\u5361\u724c\uff1b\u5982\u679c\u6709\u4e24\u5f20\u5361\u724c\u7684\u6570\u5b57\u4e4b\u548c\u4e3a\u7d20\u6570\uff0c\u5219\u4e0d\u80fd\u540c\u65f6\u9009\u53d6\u8fd9\u4e24\u5f20\u5361\u724c\u3002\u95ee\u6700\u5c11\u8981\u8fbe\u5230\u51e0\u7ea7\u624d\u80fd\u9009\u51fa\u529b\u91cf\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8ek\u7684\u5408\u6cd5\u724c\u7ec4\u3002 \u9664\u4e861+1\u4e4b\u5916\u5269\u4e0b\u7684\u4e24\u6570\u4e4b\u548c\u4e3a\u7d20\u6570\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u5947\u6570+\u5076\u6570\uff0c1\u53ea\u53d6\u5408\u6cd5\u7684\u6700\u5927\u4e00\u4e2a\u503c\uff0c\u6784\u5efa\u4e00\u4e2a\u4e8c\u5206\u56fe\u6c42\u6700\u5c0f\u5272\uff0c\u603b\u503c-\u6700\u5c0f\u5272\u5373\u4e3a\u5f53\u524d\u53ef\u4ee5\u6784\u5efa\u7684\u6700\u5927\u503c\uff0c\u4e8c\u5206\u7b49\u7ea7\u5373\u53ef\u6c42\u89e3\u3002","title":"808F *2500"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/cf\u7f51\u7edc\u6d41\u7248\u5207/#884f-2500","text":"\u7ed9\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3an(\u5076\u6570)\u7684\u4e32s\uff0c\u6c42\u539f\u4e32\u7684\u4e00\u4e2a\u6392\u5217p\u4f7f a[i]!=a[n-i+1] \uff0c\u5982\u679cs[i]=p[i]\u5219\u83b7\u5f97\u7b2ci\u4f4d\u7684\u4ef7\u503cb[i]\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8d39\u7528\u6d41\u8dd1\u4e00\u4e0b\uff0cn/2\u4e2a\u70b9\uff0c\u7b2ci\u4e2a\u8868\u793ap[i]\u548cp[n-i+1]\uff0c\u6bcf\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5efa\u4e00\u4e2a\u70b9\u5411\u5b83\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u5982\u679c\u5b57\u6bcd\u4e3as[i]\u6216s[n-i+1]\u5c31\u52a0\u4e0a\u8fb9\u6743\uff08\u76f8\u7b49\u5219\u52a0\u4e0a\u8f83\u5927\u7684\uff09\uff0c\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002","title":"884F *2500"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/cf\u7f51\u7edc\u6d41\u7248\u5207/#1009g-2500","text":"\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u91cd\u6392\u5b57\u7b26\u4e32\u4f7f\u5176\u6ee1\u8db3\u9650\u5236\uff08\u7b2ci\u4f4d\u53ea\u80fd\u662f\u67d0\u4e2a\u6307\u5b9a\u7684\u5b57\u7b26\u96c6\uff09\uff0c\u4f7f\u5b57\u5178\u5e8f\u6700\u5c0f\u3002 \u8d2a\u5fc3\u7684\u9009\u62e9\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5e76\u4f7f\u5176\u540e\u9762\u7684\u5b57\u7b26\u6ee1\u8db3\u4e8c\u5206\u56fe\u5b8c\u7f8e\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u9075\u5faahall\u5b9a\u7406\uff0c\u72b6\u538bcheck\u4e00\u4e0b\u6bcf\u4e00\u4f4d\u7684\u9009\u62e9\u3002 \u2026\u2026\u4e0d\u662f\u7279\u522b\u61c2\uff0c\u6211\u518d\u60f3\u60f3","title":"1009G *2500"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/cf\u7f51\u7edc\u6d41\u7248\u5207/#628f-2500","text":"\u96c6\u5408\u4e2d\u6709n\u4e2a\u6570(n\u662f5\u7684\u500d\u6570)\uff0c\u6700\u5927\u7684\u6570\u5b57\u4e0d\u8d85\u8fc7b\uff0c\u6709q\u4e2a\u9650\u5236(x,y)\uff0c\u8868\u793a1-x\u4e2d\u4e00\u5171\u6709y\u4e2a\u6570\uff0c\u96c6\u5408\u4e2d\u6a215\u4e3a0,1,2,3,4\u7684\u6570\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u95ee\u8fd9\u6837\u7684\u96c6\u5408\u662f\u5426\u5b58\u5728\u3002 \u5bf9\u6bcf\u4e2a\u9650\u5236\u5efa\u70b9\uff0c\u5411\u4ee3\u8868\u6a21\u6570\u4e3a0,1,2,3,4\u7684\u70b9\u8fde\u6d41\u91cf\u4e3a\u533a\u95f4\u5185\u4e2a\u6570\u7684\u8fb9\uff0c\u5224\u65ad max_flow(S,T)==n \u5373\u53ef\u3002","title":"628F *2500"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/cf\u7f51\u7edc\u6d41\u7248\u5207/#78e-2500","text":"\u65e0\u804a\u7684\u7801\u519c\u9898\u2026\u2026\u4e3b\u8981\u7801\u91cf\u5728\u4e8e\u5224\u65ad\u6bcf\u4e2a\u65f6\u523b\u70b9\u4e4b\u95f4\u53ef\u4e0d\u53ef\u8fbe\uff0c\u50bb\u903cdfs\uff0c\u5efa\u56fe\u5c31\u662fsb\u5efa\u56fe\uff0c\u6ca1\u52b2","title":"78E *2500"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/cf\u7f51\u7edc\u6d41\u7248\u5207/#1146g-2600","text":"\u5728\u4e00\u6761\u8def\u4e0a\u6709\u6807\u53f7\u4e3a1-n\u7684n\u5ea7\u623f\u5b50\uff0c\u6bcf\u5ea7\u623f\u5b50\u6700\u9ad8\u4e3ah\uff0c\u82e5\u4e00\u5ea7\u623f\u5b50\u7684\u9ad8\u5ea6\u4e3ax\uff0c\u5219\u8fd9\u5ea7\u623f\u5b50\u7684\u6536\u76ca\u4e3ax*x\uff1b\u6709m\u6761\u9650\u5236\uff0c\u6bcf\u6761\u9650\u5236\u8868\u793a\u5982\u679c\u5728l-r\u4e4b\u95f4\u7684\u6240\u6709\u623f\u5b50\u7684\u6700\u5927\u9ad8\u5ea6\u8d85\u8fc7hi\uff0c\u5219\u7f5a\u6b3eci\u3002\u95ee\u6240\u6709\u623f\u5b50\u7684\u6700\u5927\u6536\u76ca\u662f\u591a\u5c11\u3002 \u6700\u5c0f\u5272\u6a21\u578b\uff0c\u5148\u5047\u8bbe\u603b\u6536\u76ca\u4e3a n*h*h \uff0c\u5bf9\u6bcf\u4e2a\u623f\u5b50\u7684\u5efa0-h\u5171h+1\u4e2a\u70b9\uff0cS\u54110\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0ci\u5411i+1\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a h*h-i*i \uff0c\u5272\u6389\u8fd9\u6761\u8fb9\u8868\u793a\u53d6\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u6536\u76ca\uff1b\u6bcf\u4e2a\u9650\u5236\u4f5c\u4e3a\u4e00\u4e2a\u70b9\uff0c\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u7f5a\u6b3ec[i]\uff0c\u88ab\u5272\u8868\u793a\u9700\u8981\u652f\u4ed8\u7f5a\u6b3e\uff1bl,r\u4e4b\u95f4\u7684\u623f\u5b50\u6bcf\u4e2a\u8868\u793a\u9ad8\u5ea6 h[i]+1 \u5411\u8be5\u9650\u5236\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3ainf\uff0c\u6700\u540e\u7684\u7b54\u6848\u4e3a n*h*h-max_flow(S\uff0cT)","title":"1146G *2600"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/","text":"No Problem model 1 \u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\u95ee\u9898 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d 2 \u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898 \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe 3 \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898 \u6700\u5c0f\u8def\u5f84\u8986\u76d6 4 \u9b54\u672f\u7403\u95ee\u9898 \u6700\u5c0f\u8def\u5f84\u8986\u76d6 5 \u5706\u684c\u95ee\u9898 \u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d 6 \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u95ee\u9898 \u6700\u591a\u4e0d\u76f8\u4ea4\u8def\u5f84 7 \u8bd5\u9898\u5e93\u95ee\u9898 \u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d 8 \u673a\u5668\u4eba\u8def\u5f84\u89c4\u5212\u95ee\u9898 ////// 9 \u65b9\u683c\u53d6\u6570\u95ee\u9898 \u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6 10 \u9910\u5dfe\u8ba1\u5212\u95ee\u9898 \u8d39\u7528\u6d41 11 \u822a\u7a7a\u8def\u7ebf\u95ee\u9898 \u8d39\u7528\u6d41 12 \u8f6f\u4ef6\u8865\u4e01\u95ee\u9898 \u6700\u77ed\u8def\u5f84 13 \u661f\u9645\u8f6c\u79fb\u95ee\u9898 \u6b8b\u91cf\u7f51\u7edc\u6700\u5927\u6d41 14 \u5b64\u5c9b\u8425\u6551\u95ee\u9898 \u5206\u5c42\u56fe\u6700\u77ed\u8def 15 \u6c7d\u8f66\u52a0\u6cb9\u884c\u9a76\u95ee\u9898 \u5206\u5c42\u56fe\u6700\u77ed\u8def 16 \u6570\u5b57\u68af\u5f62\u95ee\u9898 \u8d39\u7528\u6d41 17 \u8fd0\u8f93\u95ee\u9898 \u4e8c\u5206\u56fe\u6700\u5927\u6743\u591a\u91cd\u5339\u914d 18 \u5206\u914d\u95ee\u9898 \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d 19 \u8d1f\u8f7d\u5e73\u8861\u95ee\u9898 \u8d39\u7528\u6d41 20 \u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898 \u8d39\u7528\u6d41 21 \u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898 \u6700\u5927\u6743\u4e0d\u76f8\u4ea4\u8def\u5f84 22 \u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898 \u8d39\u7528\u6d41 23 \u706b\u661f\u63a2\u9669\u95ee\u9898 \u8d39\u7528\u6d41 24 \u9a91\u58eb\u5171\u5b58\u95ee\u9898 \u6700\u5927\u72ec\u7acb\u96c6 1.\u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\u95ee\u9898 Link \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u76f4\u63a5\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 200 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i <= m ) add ( S , i , 1 ); else add ( i , T , 1 ); } while ( scanf ( \"%d%d\" , & u , & v ) != EOF ) add ( u , v , 1 ); printf ( \"%d \\n \" , max_flow ( S , T )); return 0 ; } 2.\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898 Link \u5fc5\u987b\u9009\u62e9\u6240\u6709\u5de6\u7aef\u70b9\u624d\u80fd\u9009\u62e9\u53f3\u7aef\u70b9\u83b7\u5f97\u6536\u76ca\uff0c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u6a21\u578b\u3002\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe=\u603b\u6743\u503c\u548c-\u6700\u5c0f\u5272 \u8f93\u51fa\u65b9\u6848\u65f6\u9009\u62e9\u4e0eS/T\u76f8\u8fde\u6ee1\u6d41\u7684\u5272\u8fb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 2500 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } int n , m ; //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) break ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } int cnt = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( level [ i ] > 0 ) { if ( cnt ++ ) printf ( \" \" ); printf ( \"%d\" , i ); } } printf ( \" \\n \" ); cnt = 0 ; for ( int i = 1 + m ; i <= n + m ; i ++ ) { if ( level [ i ] > 0 ) { if ( cnt ++ ) printf ( \" \" ); printf ( \"%d\" , i - m ); } } printf ( \" \\n \" ); return flow ; } int main () { int val , sum = 0 , a [ 55 ], b [ 55 ]; char tools [ 10000 ]; scanf ( \"%d%d\" , & m , & n ); int S = 0 , T = m + n + 1 ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & val ); b [ i ] = val ; sum += val ; add ( S , i , val ); memset ( tools , 0 , sizeof tools ); cin . getline ( tools , 10000 ); int ulen = 0 , tool ; while ( sscanf ( tools + ulen , \"%d\" , & tool ) == 1 ) { add ( i , tool + m , INF ); if ( tool == 0 ) ulen ++ ; else { while ( tool ) { tool /= 10 ; ulen ++ ; } } ulen ++ ; } } for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & val ); add ( i + m , T , val ); a [ i ] = val ; } printf ( \"%d \\n \" , sum - max_flow ( S , T )); return 0 ; } 3. \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898 Link \u62c6\u70b9\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570=|G|-\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6570\uff08\uff5c\uff27\uff5c\u662f\u6709\u5411\u56fe\u4e2d\u7684\u603b\u8fb9\u6570\uff09 \u8f93\u51fa\u8def\u5f84\uff1a\u5e76\u67e5\u96c6\u7ef4\u62a4\u540c\u4e00\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u9012\u5f52\u5411\u4e0b\u627e\u6ee1\u6d41\u7684\u70b9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 400 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n ; void print ( int x ) { for ( auto e : G [ x ]) { if ( e . cap == 0 && e . to > n ) { printf ( \" %d\" , e . to - n ); print ( e . to - n ); } } } int pre [ 400 + 10 ]; int Find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = Find ( pre [ x ]); } int main () { int m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = 2 * n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { add ( S , i , 1 ); add ( i + n , T , 1 ); } for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); add ( u , v + n , 1 ); } int ans = n - max_flow ( S , T ); for ( int i = S ; i <= T ; i ++ ) pre [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) for ( auto e : G [ i ]) if ( e . to > n && e . to < T && e . cap == 0 ) pre [ e . to - n ] = Find ( i ); for ( int i = 1 ; i <= n ; i ++ ) { if ( i == Find ( i )) { printf ( \"%d\" , i ); print ( i ); printf ( \" \\n \" ); } } printf ( \"%d \\n \" , ans ); return 0 ; } 4.\u9b54\u672f\u7403\u95ee\u9898 Link \u62c6\u70b9\u5efa\u4e8c\u5206\u56fe\uff0c\u679a\u4e3e\u7b54\u6848A\uff0c\u5728\u539f\u56fe\u4e0a\u76f4\u63a5\u52a0\u70b9\u5e76\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u76f4\u63a5\u589e\u5e7f\uff0c\u6240\u6c42\u7b54\u6848\u4e3a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u5f53\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u2264n\u65f6\u5747\u4e3a\u53ef\u884c\u89e3\u3002\u5411\u524d\u53d6\u6ee1\u6d41\u8fb9\u8f93\u51fa\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int nex [ MAX_V ]; bool vis [ MAX_V ]; int main () { int n ; scanf ( \"%d\" , & n ); int m = 0 , ans = 0 , s = 0 , t = 10000 ; for (;;) { m ++ ; for ( int i = 1 ; i < m ; i ++ ) if ( sqrt ( i + m ) == ( int ) sqrt ( i + m )) add ( i , m + 5000 , 1 ); add ( s , m , 1 ), add ( m + 5000 , t , 1 ); ans += max_flow ( s , t ); if ( m - ans > n ) break ; } printf ( \"%d \\n \" , m - 1 ); for ( int i = 1 ; i < m ; i ++ ) for ( auto x : G [ i ]) if ( x . cap == 0 ) { nex [ i ] = x . to - 5000 ; break ; } for ( int i = 1 ; i < m ; i ++ ) { if ( vis [ i ]) continue ; printf ( \"%d\" , i ); int p = nex [ i ]; while ( p != - 5000 ) { vis [ p ] = 1 ; printf ( \" %d\" , p ); p = nex [ p ]; } printf ( \" \\n \" ); } return 0 ; } 5. \u5706\u684c\u95ee\u9898 Link \u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\uff0c\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , m , x , sum = 0 ; scanf ( \"%d%d\" , & n , & m ); int s = 0 , t = n + m + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); add ( s , i , x ); sum += x ; } for ( int i = 1 + n ; i <= m + n ; i ++ ) { scanf ( \"%d\" , & x ); add ( i , t , x ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 + n ; j <= m + n ; j ++ ) add ( i , j , 1 ); if ( sum > max_flow ( s , t )) return puts ( \"0\" ), 0 ; puts ( \"1\" ); for ( int i = 1 ; i <= n ; i ++ ) { bool flag = false ; for ( auto x : G [ i ]) if ( x . cap == 0 ) { if ( flag ) printf ( \" \" ); flag = true ; if ( x . to != 0 ) printf ( \"%d\" , x . to - n ); } printf ( \" \\n \" ); } return 0 ; } 6. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u95ee\u9898 Link \u7b2c\u4e00\u95ee\u8dd1n\u65b9\u7684dp\uff0c\u7b2c\u4e8c\u95ee\u5bf9\u4e8e f[j]=f[i]+1 \u4e14 a[i]<a[j] \u7684\u70b9\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\u8dd1\u6700\u5927\u6d41\uff0c\u7b2c\u4e09\u95ee\u5c06\u70b91\u548cn\u7684\u8fb9\u6539\u4e3aINF\u8dd1\u6700\u5927\u6d41\u3002 \u6700\u957f\u957f\u5ea6\u4e3a1\u65f6\u540e\u4e24\u95ee\u76f4\u63a5\u8f93\u51fa\u4e2a\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , k ; int a [ MAX_V ], f [ MAX_V ]; int solve1 () { int S = 0 , T = 2 * n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( f [ i ] == 1 ) add ( S , i , 1 ); if ( f [ i ] == k ) add ( i + n , T , 1 ); add ( i , i + n , 1 ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] == f [ i ] + 1 ) add ( i + n , j , 1 ); int ans = max_flow ( S , T ); printf ( \"%d \\n \" , ans ); return ans ; } void solve2 () { int S = 0 , T = 2 * n + 1 , v ; for ( int i = S ; i <= T ; i ++ ) G [ i ]. clear (); for ( int i = 1 ; i <= n ; i ++ ) { v = ( i == 1 || i == n ) ? INF : 1 ; if ( f [ i ] == 1 ) add ( S , i , v ); if ( f [ i ] == k ) add ( i + n , T , v ); add ( i , i + n , v ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] == f [ i ] + 1 ) add ( i + n , j , 1 ); printf ( \"%d \\n \" , max_flow ( S , T )); } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ) { f [ i ] = 1 ; for ( int j = 1 ; j < i ; j ++ ) if ( a [ i ] >= a [ j ]) f [ i ] = max ( f [ i ], f [ j ] + 1 ); k = max ( k , f [ i ]); } printf ( \"%d \\n \" , k ); int ans = solve1 (); if ( k > 1 ) solve2 (); else printf ( \"%d \\n \" , ans ); return 0 ; } 7.\u8bd5\u9898\u5e93\u95ee\u9898 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1200 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , k , t , x , sum = 0 ; scanf ( \"%d%d\" , & n , & k ); int S = 0 , T = n + k + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); add ( i + k , T , x ); sum += x ; } for ( int i = 1 ; i <= k ; i ++ ) { scanf ( \"%d\" , & t ); add ( S , i , 1 ); while ( t -- ) { scanf ( \"%d\" , & x ); add ( i , k + x , 1 ); } } if ( max_flow ( S , T ) < sum ) return 0 * puts ( \"No Solution!\" ); for ( int i = k + 1 ; i <= k + n ; i ++ ) { printf ( \"%d:\" , i - k ); for ( auto v : G [ i ]) if ( v . cap ) printf ( \" %d\" , v . to ); printf ( \" \\n \" ); } return 0 ; } 9.\u65b9\u683c\u53d6\u6570\u95ee\u9898 Link \u5bf9\u65b9\u683c\u4e0a\u7684\u70b9\u6839\u636e\u884c\u5217\u5947\u5076\u9ed1\u767d\u67d3\u8272\uff0c\u5efa\u4e8c\u5206\u56fe\uff0c\u9ed1\u70b9\u5411\u56db\u5468\u767d\u70b9\u8fde\u8fb9\uff0c\u8981\u6c42\u7684\u7b54\u6848\u662f\u6ca1\u6709\u8fb9\u76f8\u8fde\u7684\u6743\u503c\u548c\u6700\u5927\u7684\u70b9\u96c6\u3002 \u4e8c\u5206\u56fe\u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6=\u70b9\u6743\u548c-\u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u6743\u8986\u76d6\u96c6 \u8dd1\u6700\u5927\u6d41\u51cf\u4e00\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , m ; inline int pt ( int x , int y ) { return x * m + y ; } int main () { int x , sum = 0 ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = 1001 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { scanf ( \"%d\" , & x ); if (( i + j ) % 2 ) { add ( S , pt ( i , j ), x ); if ( j + 1 <= m ) add ( pt ( i , j ), pt ( i , j + 1 ), INF ); if ( j - 1 > 0 ) add ( pt ( i , j ), pt ( i , j - 1 ), INF ); if ( i + 1 <= n ) add ( pt ( i , j ), pt ( i + 1 , j ), INF ); if ( i - 1 > 0 ) add ( pt ( i , j ), pt ( i - 1 , j ), INF ); } else add ( pt ( i , j ), T , x ); sum += x ; } } printf ( \"%d \\n \" , sum - max_flow ( S , T )); return 0 ; } 10.\u9910\u5dfe\u8ba1\u5212\u95ee\u9898 Link \u62c6\u70b9\u5efa\u56fe\uff0c A_i A_i \u8868\u793a\u5f53\u5929\u53ef\u4ee5\u63d0\u4f9b\u7684\u9910\u5dfe\u6570\uff0c B_i B_i \u8868\u793a\u5f53\u5929\u83b7\u5f97\u7684\u9910\u5dfe\u6570\u3002 S S \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u9700\u7684\u603b\u6570x\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u5f53\u5929\u6700\u591a\u53ef\u4ee5\u63d0\u4f9bx\u4e2a\u9910\u5dfe\u3002 B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u9700\u7684\u603b\u6570x\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u5f53\u5929\u6700\u5c11\u9700\u8981\u83b7\u5f97x\u4e2a\u9910\u5dfe\u3002 S S \u5411 B_i B_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a P P \uff0c\u8868\u793a\u5728\u5f53\u5929\u8d2d\u4e70\u65b0\u9910\u5dfe\u7684\u82b1\u8d39\u3002 A_i A_i \u5411 B_{i+M} B_{i+M} \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a F F \uff0c\u8868\u793a\u5728\u7b2ci\u5929\u7ecf\u8fc7M\u5929\u7684\u5feb\u6d17\u53ef\u4ee5\u83b7\u5f97\u9910\u5dfe\u3002 A_i A_i \u5411 B_{i+N} B_{i+N} \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a S S \uff0c\u8868\u793a\u5728\u7b2ci\u5929\u7ecf\u8fc7N\u5929\u7684\u6162\u6d17\u53ef\u4ee5\u83b7\u5f97\u9910\u5dfe\u3002 \u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int main () { int n , P , M , F , N , S , x ; scanf ( \"%d%d%d%d%d%d\" , & n , & P , & M , & F , & N , & S ); int s = 0 , t = 2 * n + 1 ; ans . init ( t ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( s , i * 2 - 1 , x , 0 ); ans . addEdge ( i * 2 , t , x , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( s , i * 2 , inf , P ); for ( int i = 1 ; i < n ; i ++ ) ans . addEdge ( i * 2 - 1 , i * 2 + 1 , inf , 0 ); for ( int i = 1 ; i + M <= n ; i ++ ) ans . addEdge ( i * 2 - 1 , ( i + M ) * 2 , inf , F ); for ( int i = 1 ; i + N <= n ; i ++ ) ans . addEdge ( i * 2 - 1 , ( i + N ) * 2 , inf , S ); printf ( \"%d \\n \" , ans . mincostMaxFlow ( s , t )); return 0 ; } 11.\u822a\u7a7a\u8def\u7ebf\u95ee\u9898 Link \u5efa\u56fe\u8dd1\u8d39\u7528\u6d41\uff0c\u6839\u636e\u6d41\u91cf\u53d8\u5316\u8f93\u51fa\u8def\u5f84\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 #include <bits/stdc++.h> using namespace std ; const int maxn = 200 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; string name [ 15 ]; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } void printPath ( int s , int t , int n ) { cout << name [ 1 ] << endl ; for ( int x = 1 ; x != t ;) { x += n ; for ( int i : G [ x ]) { if ( edges [ i ]. to > x - n && edges [ i ]. flow > 0 ) { int u = x - n , v = edges [ i ]. to ; x = v ; if ( x == t ) break ; edges [ i ]. flow -- ; cout << name [ v ] << endl ; break ; } } } vector < int > ans ; ans . push_back ( 1 ); for ( int x = 1 ; x != t ;) { x += n ; for ( int i : G [ x ]) { if ( edges [ i ]. to > x - n && edges [ i ]. flow > 0 ) { int u = x - n , v = edges [ i ]. to ; x = v ; if ( x == t ) break ; edges [ i ]. flow -- ; ans . push_back ( v ); break ; } } } for ( int i = ans . size () - 2 ; i >= 0 ; i -- ) cout << name [ ans [ i ]] << endl ; } } ans ; int main () { int n , m ; string x , y ; map < string , int > mp ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> x ; mp [ x ] = i ; name [ i ] = x ; } int S = 0 , T = 2 * n + 1 ; ans . init ( T ); while ( m -- ) { cin >> x >> y ; int u = mp [ x ], v = mp [ y ]; if ( u > v ) swap ( u , v ); ans . addEdge ( u + n , v , 2 , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i , i + n , 1 , - 1 ); ans . addEdge ( 1 , 1 + n , 1 , 0 ); ans . addEdge ( n , n + n , 1 , 0 ); ans . addEdge ( S , 1 , 2 , 0 ); ans . addEdge ( 2 * n , T , 2 , 0 ); int res = - ans . mincostMaxFlow ( S , T ); if ( res == 0 ) return 0 * puts ( \"No Solution!\" ); cout << res << endl ; ans . printPath ( S , T , n ); return 0 ; } 12.\u8f6f\u4ef6\u8865\u4e01\u95ee\u9898 Link \u6211\u7f13\u7f13\u6253\u51fa\u4e00\u4e2a\u95ee\u53f7 \u8fd9\u662f\u4e2a\u9524\u5b50\u7684\u7f51\u7edc\u6d41\uff0c\u8fd9\u662f\u6700\u77ed\u8def\u554a \u72b6\u538b\u4e00\u4e0b\u8f6c\u79fb\u65b9\u6848\u7136\u540e\u8dd1\u4ece(1<<n)-1\u52300\u7684\u6700\u77ed\u8def 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <bits/stdc++.h> using namespace std ; const int maxn = ( 1 << 21 ); const int inf = 0x3f3f3f3f ; struct node { int b1 , b2 , f1 , f2 , w ; bool check ( int x ) { return (( x & b1 ) == b1 ) && (( x & b2 ) == 0 ); } int change ( int x ) { x ^= x & f1 ; x |= f2 ; return x ; } } a [ 105 ]; int n , m , dis [ maxn ]; void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = 0 ; i < m ; i ++ ) if ( a [ i ]. check ( u )) { int v = a [ i ]. change ( u ); if ( dis [ v ] > dis [ u ] + a [ i ]. w ) { dis [ v ] = dis [ u ] + a [ i ]. w ; que . push ({ dis [ v ], v }); } } } } int main () { char s1 [ 55 ], s2 [ 55 ]; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%s%s\" , & a [ i ]. w , s1 , s2 ); for ( int j = 0 ; j < n ; j ++ ) { if ( s1 [ j ] == '+' ) a [ i ]. b1 |= ( 1 << j ); else if ( s1 [ j ] == '-' ) a [ i ]. b2 |= ( 1 << j ); if ( s2 [ j ] == '-' ) a [ i ]. f1 |= ( 1 << j ); else if ( s2 [ j ] == '+' ) a [ i ]. f2 |= ( 1 << j ); } } dijkstra (( 1 << n ) - 1 ); printf ( \"%d \\n \" , dis [ 0 ] == inf ? 0 : dis [ 0 ]); return 0 ; } 13.\u661f\u9645\u8f6c\u79fb\u95ee\u9898 Link \u62c6\u70b9\u5efa\u56fe\uff0c\u679a\u4e3e\u5929\u6570\u3002\u5bf9\u4e8e\u7b2ci\u5929\u4e0a\u7684\u70b9x\uff0c\u4ecei-1\u5929\u7684x\u70b9\u8fde\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\uff1b\u5e76\u5bf9\u5f53\u5929\u7684\u8f6c\u79fb\u65b9\u6848\u8fde\u8fb9\uff0c\u6bcf\u6b21\u76f4\u63a5\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8dd1\u6700\u5927\u6d41\uff0c\u603b\u6d41\u91cf\u7b49\u4e8ek\u65f6\u7684\u5929\u6570\u5373\u4e3a\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int pos [ 105 ][ 105 ], x [ 105 ], t [ 105 ]; int main () { int n , m , k ; scanf ( \"%d%d%d\" , & n , & m , & k ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & x [ i ], & t [ i ]); for ( int j = 0 ; j < t [ i ]; j ++ ) { scanf ( \"%d\" , & pos [ i ][ j ]); pos [ i ][ j ] += 2 ; } } int S = 0 , T , ans = 0 ; add ( S , 2 , k ); n += 2 ; for ( int tt = 1 ; tt <= 100 ; tt ++ ) { T = tt * n + 1 ; for ( int i = 0 ; i < m ; i ++ ) { int u = ( tt - 1 ) % t [ i ], v = tt % t [ i ]; u = pos [ i ][ u ], v = pos [ i ][ v ]; add (( tt - 1 ) * n + u , tt * n + v , x [ i ]); } for ( int i = 1 ; i <= n ; i ++ ) add (( tt - 1 ) * n + i , tt * n + i , INF ); ans += max_flow ( S , T ); if ( ans >= k ) return 0 * printf ( \"%d \\n \" , tt ); } puts ( \"0\" ); return 0 ; } 14. \u5b64\u5c9b\u8425\u6551\u95ee\u9898 Link \u72b6\u538b+\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u4ee3\u7801\u80fd\u529b\u4e22\u4eba\uff0c\u8c03\u4e00\u4e0b\u5348 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 #include <bits/stdc++.h> using namespace std ; const int maxn = 2e5 + 10 ; const int inf = 0x3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 20 * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int n , m , sum ; int pt ( int x , int y , int dep ) { int id = ( x - 1 ) * m + y ; return id + dep * sum ; } int mp [ 105 ][ 105 ], key [ 105 ][ 105 ], lim ; int dx [ 4 ] = { 1 , 0 , - 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , - 1 }; int main () { int p , x1 , y1 , x2 , y2 , g , k ; scanf ( \"%d%d%d\" , & n , & m , & p ); lim = ( 1 << p ); sum = n * m ; scanf ( \"%d\" , & k ); memset ( head , 0xff , sizeof dis ); while ( k -- ) { scanf ( \"%d%d%d%d%d\" , & x1 , & y1 , & x2 , & y2 , & g ); int u = pt ( x1 , y1 , 0 ), v = pt ( x2 , y2 , 0 ); if ( g == 0 ) mp [ u ][ v ] = mp [ v ][ u ] = - 1 ; else mp [ u ][ v ] = mp [ v ][ u ] = ( 1 << ( g - 1 )); } scanf ( \"%d\" , & k ); while ( k -- ) { scanf ( \"%d%d%d\" , & x1 , & y1 , & g ); key [ x1 ][ y1 ] |= ( 1 << ( g - 1 )); } for ( int i = 0 ; i < lim ; i ++ ) { for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= m ; y ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { int xx = x + dx [ k ], yy = y + dy [ k ]; if ( xx < 1 || xx > n || yy < 1 || yy > m ) continue ; if ( mp [ pt ( x , y , 0 )][ pt ( xx , yy , 0 )] == - 1 ) continue ; int op = mp [ pt ( x , y , 0 )][ pt ( xx , yy , 0 )]; if (( op & i ) == op ) add ( pt ( x , y , i ), pt ( xx , yy , i | key [ xx ][ yy ]), 1 ); } } } } int s = pt ( 1 , 1 , 0 ), t = pt ( n , m , lim - 1 ) + 1 ; for ( int i = 0 ; i < lim ; i ++ ) add ( pt ( n , m , i ), t , 0 ); dijkstra ( s ); printf ( \"%d \\n \" , dis [ t ] == inf ? - 1 : dis [ t ]); return 0 ; } 15.\u6c7d\u8f66\u52a0\u6cb9\u884c\u9a76\u95ee\u9898 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #include <bits/stdc++.h> using namespace std ; const int maxn = 5e5 + 10 ; const int inf = 0x3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 2 * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int p [ 105 ][ 105 ], n ; int pt ( int x , int y , int dep ) { return ( x - 1 ) * n + y + dep * n * n ; } int dx [ 4 ] = { 1 , 0 , - 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , - 1 }; int main () { int k , a , b , c ; scanf ( \"%d%d%d%d%d\" , & n , & k , & a , & b , & c ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & p [ i ][ j ]); int s = 0 , t = pt ( n , n , k ) + 1 ; memset ( head , 0xff , sizeof head ); add ( s , pt ( 1 , 1 , k ), 0 ); for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= n ; y ++ ) { for ( int i = 0 ; i <= k ; i ++ ) add ( pt ( x , y , i ), pt ( x , y , k ), a + c ); for ( int i = 0 ; i < 4 ; i ++ ) { int fx = dx [ i ] + x , fy = dy [ i ] + y ; if ( fx < 1 || fx > n || fy < 1 || fy > n ) continue ; for ( int j = 1 ; j <= k ; j ++ ) { if ( p [ fx ][ fy ]) { if ( fx < x || fy < y ) add ( pt ( x , y , j ), pt ( fx , fy , k ), a + b ); else add ( pt ( x , y , j ), pt ( fx , fy , k ), a ); } else { if ( fx < x || fy < y ) add ( pt ( x , y , j ), pt ( fx , fy , j - 1 ), b ); else add ( pt ( x , y , j ), pt ( fx , fy , j - 1 ), 0 ); } } } } } for ( int i = 0 ; i <= k ; i ++ ) add ( pt ( n , n , i ), t , 0 ); dijkstra ( s ); printf ( \"%d \\n \" , dis [ t ]); return 0 ; } 16.\u6570\u5b57\u68af\u5f62\u95ee\u9898 Link \u7b2c\u4e00\u95ee\u6c42\u4e0d\u76f8\u4ea4\u8def\u5f84\uff0c\u62c6\u70b9\u4f7fi\u5230i+n\u7684\u6d41\u91cf\u4e3a1 \u7b2c\u4e8c\u95ee\u70b9\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u628a\u4e0a\u9762\u62c6\u70b9\u7684\u6d41\u91cf\u6539\u6210INF \u7b2c\u4e09\u95ee\u8fb9\u4e5f\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u628a\u52a0\u7684\u8fb9\u7684\u6d41\u91cf\u4e5f\u6539\u6210INF\uff0c\u6ce8\u610f\u6700\u4e0b\u5c42\u5230T\u7684\u8fb9\u4e5f\u8981\u6539 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , m , p , a [ 55 ][ 55 ]; void solve1 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , 1 , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , 1 , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , 1 , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , 1 , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , 1 , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , 1 , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , inf , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , inf , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve3 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , inf , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , inf , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , inf , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , inf , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d%d\" , & n , & m ); p = ( n + ( n + m - 1 )) * m / 2 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 1 ; j <= n + i ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]); solve1 (); solve2 (); solve3 (); return 0 ; } 17.\u8fd0\u8f93\u95ee\u9898 Link \u4e8c\u5206\u56fe\u6700\u5927\u6743\u591a\u91cd\u5339\u914d\uff0c\u65e0\u8111\u8d39\u7528\u6d41 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , m , a [ 105 ], b [ 105 ], cost [ 105 ][ 105 ]; void solve1 () { int S = 0 , T = n + m + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , a [ i ], 0 ); for ( int i = 1 ; i <= m ; i ++ ) ans . addEdge ( i + n , T , b [ i ], 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) ans . addEdge ( i , j + n , inf , - cost [ i ][ j ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = n + m + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , a [ i ], 0 ); for ( int i = 1 ; i <= m ; i ++ ) ans . addEdge ( i + n , T , b [ i ], 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) ans . addEdge ( i , j + n , inf , cost [ i ][ j ]); printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , & b [ i ]); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); solve2 (); solve1 (); return 0 ; } 18.\u5206\u914d\u95ee\u9898 Link \u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\uff0c\u65e0\u8111\u8d39\u7528\u6d41*2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , cost [ 105 ][ 105 ]; void solve1 () { int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans . addEdge ( i , j + n , 1 , cost [ i ][ j ]); printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans . addEdge ( i , j + n , 1 , - cost [ i ][ j ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); solve1 (); solve2 (); return 0 ; } 19.\u8d1f\u8f7d\u5e73\u8861\u95ee\u9898 Link \u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\uff0c S S \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u524d\u70b9\u539f\u6765\u7684\u5927\u5c0f\uff0c\u8d39\u7528\u4e3a0\uff1b A_i A_i \u5411 B_i B_i \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a0\uff0c\u5411 B_{i-1} B_{i-1} \u548c B_{i+1} B_{i+1} \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a1\uff0c\u5bb9\u91cf\u4e3aINF; B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u76ee\u6807\u503c\u5927\u5c0f\uff0c\u8d39\u7528\u4e3a0. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <bits/stdc++.h> using namespace std ; const int maxn = 1000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int main () { int n , sum = 0 , x ; scanf ( \"%d\" , & n ); int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); sum += x ; ans . addEdge ( S , i , x , 0 ); } sum /= n ; for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , inf , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i , i + n , sum , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { int x = i - 1 , y = i + 1 ; if ( x < 1 ) x += n ; if ( y > n ) y -= n ; ans . addEdge ( i , x , inf , 1 ); ans . addEdge ( i , y , inf , 1 ); } printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); return 0 ; } 20.\u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898 Link \u8d39\u7528\u6d41\uff0c\u8f93\u5165\u683c\u5f0f\u4ee4\u4ebaD\u533a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int id [ 25 ][ 25 ]; int main () { int a , b , p , q , k , x , y ; scanf ( \"%d%d%d%d\" , & a , & b , & p , & q ); int tot = 0 ; p ++ ; q ++ ; for ( int i = 1 ; i <= p ; i ++ ) for ( int j = 1 ; j <= q ; j ++ ) id [ i ][ j ] = ++ tot ; int S = 0 , T = tot + 1 ; ans . init ( T ); for ( int i = 1 ; i <= p ; i ++ ) { for ( int j = 1 ; j < q ; j ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( id [ i ][ j ], id [ i ][ j + 1 ], 1 , - x ); ans . addEdge ( id [ i ][ j ], id [ i ][ j + 1 ], inf , 0 ); } } for ( int j = 1 ; j <= q ; j ++ ) { for ( int i = 1 ; i < p ; i ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( id [ i ][ j ], id [ i + 1 ][ j ], 1 , - x ); ans . addEdge ( id [ i ][ j ], id [ i + 1 ][ j ], inf , 0 ); } } while ( a -- ) { scanf ( \"%d%d%d\" , & k , & x , & y ); ans . addEdge ( S , id [ x + 1 ][ y + 1 ], k , 0 ); } while ( b -- ) { scanf ( \"%d%d%d\" , & k , & x , & y ); ans . addEdge ( id [ x + 1 ][ y + 1 ], T , k , 0 ); } printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; } 21.\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898 Link \u62c6\u70b9\u5efa\u56fe\uff0c\u8d85\u7ea7\u6e90\u70b9 S S \u5411 S1 S1 \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a k k \uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u6700\u591a\u53d6 k k \u4e2a\u5f00\u5934\u7684\u533a\u95f4\uff1b S1 S1 \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b A_i A_i \u5411 B_i B_i \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a\u8be5\u533a\u95f4\u6743\u503c\uff0c\u8868\u793a\u53d6\u8fd9\u4e2a\u533a\u95f4\uff1b B_i B_i \u5411\u6240\u6709\u5728\u5176\u53f3\u4fa7\u4e14\u4e0e\u5b83\u4e0d\u76f8\u4ea4\u7684 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff0c\u8dd1 S S \u5230 T T \u7684\u8d39\u7528\u6d41\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int l [ 505 ], r [ 505 ], c [ 505 ]; int main () { int n , k ; scanf ( \"%d%d\" , & n , & k ); int S = 0 , T = 2 * n + 1 , S1 = T + 1 ; ans . init ( S1 ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & l [ i ], & r [ i ]); if ( l [ i ] > r [ i ]) swap ( l [ i ], r [ i ]); ans . addEdge ( i , i + n , 1 , - ( r [ i ] - l [ i ])); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) if ( r [ i ] <= l [ j ]) ans . addEdge ( i + n , j , 1 , 0 ); ans . addEdge ( S , S1 , k , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { ans . addEdge ( S1 , i , 1 , 0 ); ans . addEdge ( i + n , T , 1 , 0 ); } printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; } 22.\u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898 Link \u8ddf\u4e0a\u4e00\u9898\u6a21\u578b\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff0c\u6362\u4e86\u4e2a\u65b9\u6cd5\u3002 \u628a\u7ebf\u6bb5\u6295\u5f71\u5230X\u8f74\u4e0a\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u533a\u95f4\u96c6\u95ee\u9898\uff0c\u4f46\u662f\u56e0\u4e3a\u5b58\u5728 x=r \u8fd9\u6837\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u76f4\u63a5\u5efa\u56fe\u4f1a\u4ea7\u751f\u8d1f\u73af\uff0c\u9700\u8981\u62c6\u70b9\u3002 \u79bb\u6563\u5316\u533a\u95f4\u7aef\u70b9\uff0c\u76f8\u90bb\u7684\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a0\uff1b\u533a\u95f4\u7aef\u70b9 L[i] \u5411 R[i] \u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a -val[i] \uff0cS\u548cT\u5206\u522b\u5411\u6700\u5de6\u548c\u6700\u53f3\u7aef\u70b9\u8fde\u6d41\u91cf\u4e3ak\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\u8dd1\u8d39\u7528\u6d41\u5373\u4e3a\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; inline int dis ( int x1 , int y1 , int x2 , int y2 ) { return sqrt ( 1ll * ( x2 - x1 ) * ( x2 - x1 ) + 1ll * ( y2 - y1 ) * ( y2 - y1 )); } int n , L [ 505 ], R [ 505 ], val [ 505 ]; map < int , int > M ; int discretization () { vector < int > v ; for ( int i = 1 ; i <= n ; i ++ ) v . push_back ( L [ i ]), v . push_back ( R [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 0 ; i < v . size (); i ++ ) M [ v [ i ]] = i + 1 ; for ( int i = 1 ; i <= n ; i ++ ) L [ i ] = M [ L [ i ]], R [ i ] = M [ R [ i ]]; return v . size (); } int main () { int k , a , b , c , d ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d%d%d\" , & a , & b , & c , & d ); val [ i ] = dis ( a , b , c , d ); L [ i ] = a * 2 , R [ i ] = c * 2 ; if ( L [ i ] > R [ i ]) swap ( L [ i ], R [ i ]); if ( L [ i ] == R [ i ]) R [ i ] ++ ; else L [ i ] ++ ; } int m = discretization (); int S = 0 , T = m + 1 ; ans . init ( T ); ans . addEdge ( S , 1 , k , 0 ), ans . addEdge ( m , T , k , 0 ); for ( int i = 1 ; i < m ; i ++ ) ans . addEdge ( i , i + 1 , inf , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( L [ i ], R [ i ], 1 , - val [ i ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; } 23.\u706b\u661f\u63a2\u9669\u95ee\u9898 Link \u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\uff0c\u8f93\u51fa\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; int a [ 50 ][ 50 ], id [ 50 ][ 50 ]; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } void printPath ( int cnt , int n , int m ) { int p = id [ 1 ][ 1 ]; while ( p != id [ n ][ m ]) { int x = ( p - 1 ) / m , y = ( p - 1 ) % m ; for ( auto i : G [ p + n * m ]) { int tmp = edges [ i ]. to ; int xx = ( tmp - 1 ) / m , yy = ( tmp - 1 ) % m ; if ( xx <= x && yy <= y ) continue ; if ( edges [ i ]. flow > 0 ) { edges [ i ]. flow -- ; //printf(\"%d %d %d %d\\n\", edges[i].from, edges[i].to, edges[i].cap, edges[i].flow); //printf(\"%d %d\\n\", xx + 1, yy + 1); if ( xx > x ) printf ( \"%d 0 \\n \" , cnt ); else printf ( \"%d 1 \\n \" , cnt ); p = tmp ; break ; } } } } } ans ; int main () { int x , n , m ; scanf ( \"%d%d%d\" , & x , & m , & n ); int S = 0 , T = 2 * n * m + 1 , tot = 0 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]), id [ i ][ j ] = ++ tot ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( i + 1 <= n ) ans . addEdge ( id [ i ][ j ] + n * m , id [ i + 1 ][ j ], inf , 0 ); if ( j + 1 <= m ) ans . addEdge ( id [ i ][ j ] + n * m , id [ i ][ j + 1 ], inf , 0 ); if ( a [ i ][ j ] == 0 || a [ i ][ j ] == 2 ) ans . addEdge ( id [ i ][ j ], id [ i ][ j ] + n * m , inf , 0 ); if ( a [ i ][ j ] == 2 ) ans . addEdge ( id [ i ][ j ], id [ i ][ j ] + n * m , 1 , - 1 ); } } ans . addEdge ( S , id [ 1 ][ 1 ], x , 0 ); ans . addEdge ( id [ n ][ m ] + n * m , T , x , 0 ); ans . mincostMaxFlow ( S , T ); for ( int i = 1 ; i <= x ; i ++ ) ans . printPath ( i , n , m ); return 0 ; } 24.\u9a91\u58eb\u5171\u5b58\u95ee\u9898 Link \u663e\u7136\u6240\u7ed9\u6a21\u578b\u662f\u4e8c\u5206\u56fe\uff0c\u6700\u5927\u72ec\u7acb\u96c6-\u4e0d\u53ef\u9009\u7684\u8fb9\u5373\u4e3a\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 50000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , vis [ 205 ][ 205 ]; int dx [ 8 ] = { - 2 , - 1 , - 2 , - 1 , 2 , 1 , 2 , 1 }; int dy [ 8 ] = { - 1 , - 2 , 1 , 2 , - 1 , - 2 , 1 , 2 }; int id ( int x , int y ) { return ( x - 1 ) * n + y ; } bool check ( int x , int y ) { return x > 0 && x <= n && y > 0 && y <= n && ! vis [ x ][ y ]; } int main () { int m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = n * n + 1 ; for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); vis [ u ][ v ] = 1 ; } for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= n ; y ++ ) { if ( ! check ( x , y )) continue ; if (( x + y ) % 2 ) add ( S , id ( x , y ), 1 ); else add ( id ( x , y ), T , 1 ); if (( x + y ) % 2 == 0 ) continue ; for ( int i = 0 ; i < 8 ; i ++ ) { int fx = x + dx [ i ], fy = y + dy [ i ]; if ( check ( fx , fy )) add ( id ( x , y ), id ( fx , fy ), 1 ); } } } printf ( \"%d \\n \" , n * n - max_flow ( S , T ) - m ); return 0 ; }","title":"\u7f51\u7edc\u6d4124\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#1","text":"\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u76f4\u63a5\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 200 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i <= m ) add ( S , i , 1 ); else add ( i , T , 1 ); } while ( scanf ( \"%d%d\" , & u , & v ) != EOF ) add ( u , v , 1 ); printf ( \"%d \\n \" , max_flow ( S , T )); return 0 ; }","title":"1.\u98de\u884c\u5458\u914d\u5bf9\u65b9\u6848\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#2","text":"\u5fc5\u987b\u9009\u62e9\u6240\u6709\u5de6\u7aef\u70b9\u624d\u80fd\u9009\u62e9\u53f3\u7aef\u70b9\u83b7\u5f97\u6536\u76ca\uff0c\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u6a21\u578b\u3002\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe=\u603b\u6743\u503c\u548c-\u6700\u5c0f\u5272 \u8f93\u51fa\u65b9\u6848\u65f6\u9009\u62e9\u4e0eS/T\u76f8\u8fde\u6ee1\u6d41\u7684\u5272\u8fb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 2500 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } int n , m ; //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) break ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } int cnt = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { if ( level [ i ] > 0 ) { if ( cnt ++ ) printf ( \" \" ); printf ( \"%d\" , i ); } } printf ( \" \\n \" ); cnt = 0 ; for ( int i = 1 + m ; i <= n + m ; i ++ ) { if ( level [ i ] > 0 ) { if ( cnt ++ ) printf ( \" \" ); printf ( \"%d\" , i - m ); } } printf ( \" \\n \" ); return flow ; } int main () { int val , sum = 0 , a [ 55 ], b [ 55 ]; char tools [ 10000 ]; scanf ( \"%d%d\" , & m , & n ); int S = 0 , T = m + n + 1 ; for ( int i = 1 ; i <= m ; i ++ ) { scanf ( \"%d\" , & val ); b [ i ] = val ; sum += val ; add ( S , i , val ); memset ( tools , 0 , sizeof tools ); cin . getline ( tools , 10000 ); int ulen = 0 , tool ; while ( sscanf ( tools + ulen , \"%d\" , & tool ) == 1 ) { add ( i , tool + m , INF ); if ( tool == 0 ) ulen ++ ; else { while ( tool ) { tool /= 10 ; ulen ++ ; } } ulen ++ ; } } for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & val ); add ( i + m , T , val ); a [ i ] = val ; } printf ( \"%d \\n \" , sum - max_flow ( S , T )); return 0 ; }","title":"2.\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#3","text":"\u62c6\u70b9\u6c42\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u6570=|G|-\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u6570\uff08\uff5c\uff27\uff5c\u662f\u6709\u5411\u56fe\u4e2d\u7684\u603b\u8fb9\u6570\uff09 \u8f93\u51fa\u8def\u5f84\uff1a\u5e76\u67e5\u96c6\u7ef4\u62a4\u540c\u4e00\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u9012\u5f52\u5411\u4e0b\u627e\u6ee1\u6d41\u7684\u70b9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 400 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n ; void print ( int x ) { for ( auto e : G [ x ]) { if ( e . cap == 0 && e . to > n ) { printf ( \" %d\" , e . to - n ); print ( e . to - n ); } } } int pre [ 400 + 10 ]; int Find ( int x ) { return x == pre [ x ] ? x : pre [ x ] = Find ( pre [ x ]); } int main () { int m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = 2 * n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { add ( S , i , 1 ); add ( i + n , T , 1 ); } for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); add ( u , v + n , 1 ); } int ans = n - max_flow ( S , T ); for ( int i = S ; i <= T ; i ++ ) pre [ i ] = i ; for ( int i = 1 ; i <= n ; i ++ ) for ( auto e : G [ i ]) if ( e . to > n && e . to < T && e . cap == 0 ) pre [ e . to - n ] = Find ( i ); for ( int i = 1 ; i <= n ; i ++ ) { if ( i == Find ( i )) { printf ( \"%d\" , i ); print ( i ); printf ( \" \\n \" ); } } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"3.  \u6700\u5c0f\u8def\u5f84\u8986\u76d6\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#4","text":"\u62c6\u70b9\u5efa\u4e8c\u5206\u56fe\uff0c\u679a\u4e3e\u7b54\u6848A\uff0c\u5728\u539f\u56fe\u4e0a\u76f4\u63a5\u52a0\u70b9\u5e76\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u76f4\u63a5\u589e\u5e7f\uff0c\u6240\u6c42\u7b54\u6848\u4e3a\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff0c\u5f53\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u2264n\u65f6\u5747\u4e3a\u53ef\u884c\u89e3\u3002\u5411\u524d\u53d6\u6ee1\u6d41\u8fb9\u8f93\u51fa\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int nex [ MAX_V ]; bool vis [ MAX_V ]; int main () { int n ; scanf ( \"%d\" , & n ); int m = 0 , ans = 0 , s = 0 , t = 10000 ; for (;;) { m ++ ; for ( int i = 1 ; i < m ; i ++ ) if ( sqrt ( i + m ) == ( int ) sqrt ( i + m )) add ( i , m + 5000 , 1 ); add ( s , m , 1 ), add ( m + 5000 , t , 1 ); ans += max_flow ( s , t ); if ( m - ans > n ) break ; } printf ( \"%d \\n \" , m - 1 ); for ( int i = 1 ; i < m ; i ++ ) for ( auto x : G [ i ]) if ( x . cap == 0 ) { nex [ i ] = x . to - 5000 ; break ; } for ( int i = 1 ; i < m ; i ++ ) { if ( vis [ i ]) continue ; printf ( \"%d\" , i ); int p = nex [ i ]; while ( p != - 5000 ) { vis [ p ] = 1 ; printf ( \" %d\" , p ); p = nex [ p ]; } printf ( \" \\n \" ); } return 0 ; }","title":"4.\u9b54\u672f\u7403\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#5","text":"\u4e8c\u5206\u56fe\u591a\u91cd\u5339\u914d\uff0c\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , m , x , sum = 0 ; scanf ( \"%d%d\" , & n , & m ); int s = 0 , t = n + m + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); add ( s , i , x ); sum += x ; } for ( int i = 1 + n ; i <= m + n ; i ++ ) { scanf ( \"%d\" , & x ); add ( i , t , x ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 + n ; j <= m + n ; j ++ ) add ( i , j , 1 ); if ( sum > max_flow ( s , t )) return puts ( \"0\" ), 0 ; puts ( \"1\" ); for ( int i = 1 ; i <= n ; i ++ ) { bool flag = false ; for ( auto x : G [ i ]) if ( x . cap == 0 ) { if ( flag ) printf ( \" \" ); flag = true ; if ( x . to != 0 ) printf ( \"%d\" , x . to - n ); } printf ( \" \\n \" ); } return 0 ; }","title":"5.  \u5706\u684c\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#6","text":"\u7b2c\u4e00\u95ee\u8dd1n\u65b9\u7684dp\uff0c\u7b2c\u4e8c\u95ee\u5bf9\u4e8e f[j]=f[i]+1 \u4e14 a[i]<a[j] \u7684\u70b9\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\u8dd1\u6700\u5927\u6d41\uff0c\u7b2c\u4e09\u95ee\u5c06\u70b91\u548cn\u7684\u8fb9\u6539\u4e3aINF\u8dd1\u6700\u5927\u6d41\u3002 \u6700\u957f\u957f\u5ea6\u4e3a1\u65f6\u540e\u4e24\u95ee\u76f4\u63a5\u8f93\u51fa\u4e2a\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , k ; int a [ MAX_V ], f [ MAX_V ]; int solve1 () { int S = 0 , T = 2 * n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( f [ i ] == 1 ) add ( S , i , 1 ); if ( f [ i ] == k ) add ( i + n , T , 1 ); add ( i , i + n , 1 ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] == f [ i ] + 1 ) add ( i + n , j , 1 ); int ans = max_flow ( S , T ); printf ( \"%d \\n \" , ans ); return ans ; } void solve2 () { int S = 0 , T = 2 * n + 1 , v ; for ( int i = S ; i <= T ; i ++ ) G [ i ]. clear (); for ( int i = 1 ; i <= n ; i ++ ) { v = ( i == 1 || i == n ) ? INF : 1 ; if ( f [ i ] == 1 ) add ( S , i , v ); if ( f [ i ] == k ) add ( i + n , T , v ); add ( i , i + n , v ); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = i + 1 ; j <= n ; j ++ ) if ( a [ i ] <= a [ j ] && f [ j ] == f [ i ] + 1 ) add ( i + n , j , 1 ); printf ( \"%d \\n \" , max_flow ( S , T )); } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ) { f [ i ] = 1 ; for ( int j = 1 ; j < i ; j ++ ) if ( a [ i ] >= a [ j ]) f [ i ] = max ( f [ i ], f [ j ] + 1 ); k = max ( k , f [ i ]); } printf ( \"%d \\n \" , k ); int ans = solve1 (); if ( k > 1 ) solve2 (); else printf ( \"%d \\n \" , ans ); return 0 ; }","title":"6.  \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1200 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int main () { int n , k , t , x , sum = 0 ; scanf ( \"%d%d\" , & n , & k ); int S = 0 , T = n + k + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); add ( i + k , T , x ); sum += x ; } for ( int i = 1 ; i <= k ; i ++ ) { scanf ( \"%d\" , & t ); add ( S , i , 1 ); while ( t -- ) { scanf ( \"%d\" , & x ); add ( i , k + x , 1 ); } } if ( max_flow ( S , T ) < sum ) return 0 * puts ( \"No Solution!\" ); for ( int i = k + 1 ; i <= k + n ; i ++ ) { printf ( \"%d:\" , i - k ); for ( auto v : G [ i ]) if ( v . cap ) printf ( \" %d\" , v . to ); printf ( \" \\n \" ); } return 0 ; }","title":"7.\u8bd5\u9898\u5e93\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#9","text":"\u5bf9\u65b9\u683c\u4e0a\u7684\u70b9\u6839\u636e\u884c\u5217\u5947\u5076\u9ed1\u767d\u67d3\u8272\uff0c\u5efa\u4e8c\u5206\u56fe\uff0c\u9ed1\u70b9\u5411\u56db\u5468\u767d\u70b9\u8fde\u8fb9\uff0c\u8981\u6c42\u7684\u7b54\u6848\u662f\u6ca1\u6709\u8fb9\u76f8\u8fde\u7684\u6743\u503c\u548c\u6700\u5927\u7684\u70b9\u96c6\u3002 \u4e8c\u5206\u56fe\u6700\u5927\u70b9\u6743\u72ec\u7acb\u96c6=\u70b9\u6743\u548c-\u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u6743\u8986\u76d6\u96c6 \u8dd1\u6700\u5927\u6d41\u51cf\u4e00\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , m ; inline int pt ( int x , int y ) { return x * m + y ; } int main () { int x , sum = 0 ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = 1001 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { scanf ( \"%d\" , & x ); if (( i + j ) % 2 ) { add ( S , pt ( i , j ), x ); if ( j + 1 <= m ) add ( pt ( i , j ), pt ( i , j + 1 ), INF ); if ( j - 1 > 0 ) add ( pt ( i , j ), pt ( i , j - 1 ), INF ); if ( i + 1 <= n ) add ( pt ( i , j ), pt ( i + 1 , j ), INF ); if ( i - 1 > 0 ) add ( pt ( i , j ), pt ( i - 1 , j ), INF ); } else add ( pt ( i , j ), T , x ); sum += x ; } } printf ( \"%d \\n \" , sum - max_flow ( S , T )); return 0 ; }","title":"9.\u65b9\u683c\u53d6\u6570\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#10","text":"\u62c6\u70b9\u5efa\u56fe\uff0c A_i A_i \u8868\u793a\u5f53\u5929\u53ef\u4ee5\u63d0\u4f9b\u7684\u9910\u5dfe\u6570\uff0c B_i B_i \u8868\u793a\u5f53\u5929\u83b7\u5f97\u7684\u9910\u5dfe\u6570\u3002 S S \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u9700\u7684\u603b\u6570x\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u5f53\u5929\u6700\u591a\u53ef\u4ee5\u63d0\u4f9bx\u4e2a\u9910\u5dfe\u3002 B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u5929\u6240\u9700\u7684\u603b\u6570x\uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u5f53\u5929\u6700\u5c11\u9700\u8981\u83b7\u5f97x\u4e2a\u9910\u5dfe\u3002 S S \u5411 B_i B_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a P P \uff0c\u8868\u793a\u5728\u5f53\u5929\u8d2d\u4e70\u65b0\u9910\u5dfe\u7684\u82b1\u8d39\u3002 A_i A_i \u5411 B_{i+M} B_{i+M} \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a F F \uff0c\u8868\u793a\u5728\u7b2ci\u5929\u7ecf\u8fc7M\u5929\u7684\u5feb\u6d17\u53ef\u4ee5\u83b7\u5f97\u9910\u5dfe\u3002 A_i A_i \u5411 B_{i+N} B_{i+N} \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a S S \uff0c\u8868\u793a\u5728\u7b2ci\u5929\u7ecf\u8fc7N\u5929\u7684\u6162\u6d17\u53ef\u4ee5\u83b7\u5f97\u9910\u5dfe\u3002 \u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int main () { int n , P , M , F , N , S , x ; scanf ( \"%d%d%d%d%d%d\" , & n , & P , & M , & F , & N , & S ); int s = 0 , t = 2 * n + 1 ; ans . init ( t ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( s , i * 2 - 1 , x , 0 ); ans . addEdge ( i * 2 , t , x , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( s , i * 2 , inf , P ); for ( int i = 1 ; i < n ; i ++ ) ans . addEdge ( i * 2 - 1 , i * 2 + 1 , inf , 0 ); for ( int i = 1 ; i + M <= n ; i ++ ) ans . addEdge ( i * 2 - 1 , ( i + M ) * 2 , inf , F ); for ( int i = 1 ; i + N <= n ; i ++ ) ans . addEdge ( i * 2 - 1 , ( i + N ) * 2 , inf , S ); printf ( \"%d \\n \" , ans . mincostMaxFlow ( s , t )); return 0 ; }","title":"10.\u9910\u5dfe\u8ba1\u5212\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#11","text":"\u5efa\u56fe\u8dd1\u8d39\u7528\u6d41\uff0c\u6839\u636e\u6d41\u91cf\u53d8\u5316\u8f93\u51fa\u8def\u5f84\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 #include <bits/stdc++.h> using namespace std ; const int maxn = 200 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; string name [ 15 ]; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } void printPath ( int s , int t , int n ) { cout << name [ 1 ] << endl ; for ( int x = 1 ; x != t ;) { x += n ; for ( int i : G [ x ]) { if ( edges [ i ]. to > x - n && edges [ i ]. flow > 0 ) { int u = x - n , v = edges [ i ]. to ; x = v ; if ( x == t ) break ; edges [ i ]. flow -- ; cout << name [ v ] << endl ; break ; } } } vector < int > ans ; ans . push_back ( 1 ); for ( int x = 1 ; x != t ;) { x += n ; for ( int i : G [ x ]) { if ( edges [ i ]. to > x - n && edges [ i ]. flow > 0 ) { int u = x - n , v = edges [ i ]. to ; x = v ; if ( x == t ) break ; edges [ i ]. flow -- ; ans . push_back ( v ); break ; } } } for ( int i = ans . size () - 2 ; i >= 0 ; i -- ) cout << name [ ans [ i ]] << endl ; } } ans ; int main () { int n , m ; string x , y ; map < string , int > mp ; cin >> n >> m ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> x ; mp [ x ] = i ; name [ i ] = x ; } int S = 0 , T = 2 * n + 1 ; ans . init ( T ); while ( m -- ) { cin >> x >> y ; int u = mp [ x ], v = mp [ y ]; if ( u > v ) swap ( u , v ); ans . addEdge ( u + n , v , 2 , 0 ); } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i , i + n , 1 , - 1 ); ans . addEdge ( 1 , 1 + n , 1 , 0 ); ans . addEdge ( n , n + n , 1 , 0 ); ans . addEdge ( S , 1 , 2 , 0 ); ans . addEdge ( 2 * n , T , 2 , 0 ); int res = - ans . mincostMaxFlow ( S , T ); if ( res == 0 ) return 0 * puts ( \"No Solution!\" ); cout << res << endl ; ans . printPath ( S , T , n ); return 0 ; }","title":"11.\u822a\u7a7a\u8def\u7ebf\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#12","text":"\u6211\u7f13\u7f13\u6253\u51fa\u4e00\u4e2a\u95ee\u53f7 \u8fd9\u662f\u4e2a\u9524\u5b50\u7684\u7f51\u7edc\u6d41\uff0c\u8fd9\u662f\u6700\u77ed\u8def\u554a \u72b6\u538b\u4e00\u4e0b\u8f6c\u79fb\u65b9\u6848\u7136\u540e\u8dd1\u4ece(1<<n)-1\u52300\u7684\u6700\u77ed\u8def 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <bits/stdc++.h> using namespace std ; const int maxn = ( 1 << 21 ); const int inf = 0x3f3f3f3f ; struct node { int b1 , b2 , f1 , f2 , w ; bool check ( int x ) { return (( x & b1 ) == b1 ) && (( x & b2 ) == 0 ); } int change ( int x ) { x ^= x & f1 ; x |= f2 ; return x ; } } a [ 105 ]; int n , m , dis [ maxn ]; void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = 0 ; i < m ; i ++ ) if ( a [ i ]. check ( u )) { int v = a [ i ]. change ( u ); if ( dis [ v ] > dis [ u ] + a [ i ]. w ) { dis [ v ] = dis [ u ] + a [ i ]. w ; que . push ({ dis [ v ], v }); } } } } int main () { char s1 [ 55 ], s2 [ 55 ]; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%s%s\" , & a [ i ]. w , s1 , s2 ); for ( int j = 0 ; j < n ; j ++ ) { if ( s1 [ j ] == '+' ) a [ i ]. b1 |= ( 1 << j ); else if ( s1 [ j ] == '-' ) a [ i ]. b2 |= ( 1 << j ); if ( s2 [ j ] == '-' ) a [ i ]. f1 |= ( 1 << j ); else if ( s2 [ j ] == '+' ) a [ i ]. f2 |= ( 1 << j ); } } dijkstra (( 1 << n ) - 1 ); printf ( \"%d \\n \" , dis [ 0 ] == inf ? 0 : dis [ 0 ]); return 0 ; }","title":"12.\u8f6f\u4ef6\u8865\u4e01\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#13","text":"\u62c6\u70b9\u5efa\u56fe\uff0c\u679a\u4e3e\u5929\u6570\u3002\u5bf9\u4e8e\u7b2ci\u5929\u4e0a\u7684\u70b9x\uff0c\u4ecei-1\u5929\u7684x\u70b9\u8fde\u5bb9\u91cf\u4e3aINF\u7684\u8fb9\uff1b\u5e76\u5bf9\u5f53\u5929\u7684\u8f6c\u79fb\u65b9\u6848\u8fde\u8fb9\uff0c\u6bcf\u6b21\u76f4\u63a5\u5728\u6b8b\u91cf\u7f51\u7edc\u4e0a\u8dd1\u6700\u5927\u6d41\uff0c\u603b\u6d41\u91cf\u7b49\u4e8ek\u65f6\u7684\u5929\u6570\u5373\u4e3a\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int pos [ 105 ][ 105 ], x [ 105 ], t [ 105 ]; int main () { int n , m , k ; scanf ( \"%d%d%d\" , & n , & m , & k ); for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & x [ i ], & t [ i ]); for ( int j = 0 ; j < t [ i ]; j ++ ) { scanf ( \"%d\" , & pos [ i ][ j ]); pos [ i ][ j ] += 2 ; } } int S = 0 , T , ans = 0 ; add ( S , 2 , k ); n += 2 ; for ( int tt = 1 ; tt <= 100 ; tt ++ ) { T = tt * n + 1 ; for ( int i = 0 ; i < m ; i ++ ) { int u = ( tt - 1 ) % t [ i ], v = tt % t [ i ]; u = pos [ i ][ u ], v = pos [ i ][ v ]; add (( tt - 1 ) * n + u , tt * n + v , x [ i ]); } for ( int i = 1 ; i <= n ; i ++ ) add (( tt - 1 ) * n + i , tt * n + i , INF ); ans += max_flow ( S , T ); if ( ans >= k ) return 0 * printf ( \"%d \\n \" , tt ); } puts ( \"0\" ); return 0 ; }","title":"13.\u661f\u9645\u8f6c\u79fb\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#14","text":"\u72b6\u538b+\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c\u4ee3\u7801\u80fd\u529b\u4e22\u4eba\uff0c\u8c03\u4e00\u4e0b\u5348 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 #include <bits/stdc++.h> using namespace std ; const int maxn = 2e5 + 10 ; const int inf = 0x3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 20 * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int n , m , sum ; int pt ( int x , int y , int dep ) { int id = ( x - 1 ) * m + y ; return id + dep * sum ; } int mp [ 105 ][ 105 ], key [ 105 ][ 105 ], lim ; int dx [ 4 ] = { 1 , 0 , - 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , - 1 }; int main () { int p , x1 , y1 , x2 , y2 , g , k ; scanf ( \"%d%d%d\" , & n , & m , & p ); lim = ( 1 << p ); sum = n * m ; scanf ( \"%d\" , & k ); memset ( head , 0xff , sizeof dis ); while ( k -- ) { scanf ( \"%d%d%d%d%d\" , & x1 , & y1 , & x2 , & y2 , & g ); int u = pt ( x1 , y1 , 0 ), v = pt ( x2 , y2 , 0 ); if ( g == 0 ) mp [ u ][ v ] = mp [ v ][ u ] = - 1 ; else mp [ u ][ v ] = mp [ v ][ u ] = ( 1 << ( g - 1 )); } scanf ( \"%d\" , & k ); while ( k -- ) { scanf ( \"%d%d%d\" , & x1 , & y1 , & g ); key [ x1 ][ y1 ] |= ( 1 << ( g - 1 )); } for ( int i = 0 ; i < lim ; i ++ ) { for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= m ; y ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { int xx = x + dx [ k ], yy = y + dy [ k ]; if ( xx < 1 || xx > n || yy < 1 || yy > m ) continue ; if ( mp [ pt ( x , y , 0 )][ pt ( xx , yy , 0 )] == - 1 ) continue ; int op = mp [ pt ( x , y , 0 )][ pt ( xx , yy , 0 )]; if (( op & i ) == op ) add ( pt ( x , y , i ), pt ( xx , yy , i | key [ xx ][ yy ]), 1 ); } } } } int s = pt ( 1 , 1 , 0 ), t = pt ( n , m , lim - 1 ) + 1 ; for ( int i = 0 ; i < lim ; i ++ ) add ( pt ( n , m , i ), t , 0 ); dijkstra ( s ); printf ( \"%d \\n \" , dis [ t ] == inf ? - 1 : dis [ t ]); return 0 ; }","title":"14. \u5b64\u5c9b\u8425\u6551\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#15","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #include <bits/stdc++.h> using namespace std ; const int maxn = 5e5 + 10 ; const int inf = 0x3f3f3f3f ; int head [ maxn ], dis [ maxn ], cnt ; struct Edge { int nex , to , w ; } edge [ 2 * maxn ]; void add ( int u , int v , int w ) { edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); } } } } int p [ 105 ][ 105 ], n ; int pt ( int x , int y , int dep ) { return ( x - 1 ) * n + y + dep * n * n ; } int dx [ 4 ] = { 1 , 0 , - 1 , 0 }; int dy [ 4 ] = { 0 , 1 , 0 , - 1 }; int main () { int k , a , b , c ; scanf ( \"%d%d%d%d%d\" , & n , & k , & a , & b , & c ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & p [ i ][ j ]); int s = 0 , t = pt ( n , n , k ) + 1 ; memset ( head , 0xff , sizeof head ); add ( s , pt ( 1 , 1 , k ), 0 ); for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= n ; y ++ ) { for ( int i = 0 ; i <= k ; i ++ ) add ( pt ( x , y , i ), pt ( x , y , k ), a + c ); for ( int i = 0 ; i < 4 ; i ++ ) { int fx = dx [ i ] + x , fy = dy [ i ] + y ; if ( fx < 1 || fx > n || fy < 1 || fy > n ) continue ; for ( int j = 1 ; j <= k ; j ++ ) { if ( p [ fx ][ fy ]) { if ( fx < x || fy < y ) add ( pt ( x , y , j ), pt ( fx , fy , k ), a + b ); else add ( pt ( x , y , j ), pt ( fx , fy , k ), a ); } else { if ( fx < x || fy < y ) add ( pt ( x , y , j ), pt ( fx , fy , j - 1 ), b ); else add ( pt ( x , y , j ), pt ( fx , fy , j - 1 ), 0 ); } } } } } for ( int i = 0 ; i <= k ; i ++ ) add ( pt ( n , n , i ), t , 0 ); dijkstra ( s ); printf ( \"%d \\n \" , dis [ t ]); return 0 ; }","title":"15.\u6c7d\u8f66\u52a0\u6cb9\u884c\u9a76\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#16","text":"\u7b2c\u4e00\u95ee\u6c42\u4e0d\u76f8\u4ea4\u8def\u5f84\uff0c\u62c6\u70b9\u4f7fi\u5230i+n\u7684\u6d41\u91cf\u4e3a1 \u7b2c\u4e8c\u95ee\u70b9\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u628a\u4e0a\u9762\u62c6\u70b9\u7684\u6d41\u91cf\u6539\u6210INF \u7b2c\u4e09\u95ee\u8fb9\u4e5f\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u628a\u52a0\u7684\u8fb9\u7684\u6d41\u91cf\u4e5f\u6539\u6210INF\uff0c\u6ce8\u610f\u6700\u4e0b\u5c42\u5230T\u7684\u8fb9\u4e5f\u8981\u6539 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , m , p , a [ 55 ][ 55 ]; void solve1 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , 1 , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , 1 , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , 1 , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , 1 , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , 1 , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , 1 , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , inf , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , inf , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve3 () { int S = 0 , T = 2 * p + 1 ; ans . init ( T ); for ( int i = 0 ; i < m ; i ++ ) { int tp = ( n + ( n + i - 1 )) * i / 2 , tp1 = ( n + ( n + i )) * ( i + 1 ) / 2 ; for ( int j = 1 ; j <= i + n ; j ++ ) { if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j , inf , - a [ i + 1 ][ j ]); if ( i + 1 < m ) ans . addEdge ( tp + p + j , tp1 + j + 1 , inf , - a [ i + 1 ][ j + 1 ]); ans . addEdge ( tp + j , tp + p + j , inf , 0 ); } } for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , - a [ 0 ][ i ]); int tmp = p - ( n + m - 1 ); for ( int i = 1 ; i <= n + m ; i ++ ) ans . addEdge ( tmp + p + i , T , inf , 0 ); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d%d\" , & n , & m ); p = ( n + ( n + m - 1 )) * m / 2 ; for ( int i = 0 ; i < m ; i ++ ) for ( int j = 1 ; j <= n + i ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]); solve1 (); solve2 (); solve3 (); return 0 ; }","title":"16.\u6570\u5b57\u68af\u5f62\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#17","text":"\u4e8c\u5206\u56fe\u6700\u5927\u6743\u591a\u91cd\u5339\u914d\uff0c\u65e0\u8111\u8d39\u7528\u6d41 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , m , a [ 105 ], b [ 105 ], cost [ 105 ][ 105 ]; void solve1 () { int S = 0 , T = n + m + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , a [ i ], 0 ); for ( int i = 1 ; i <= m ; i ++ ) ans . addEdge ( i + n , T , b [ i ], 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) ans . addEdge ( i , j + n , inf , - cost [ i ][ j ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = n + m + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , a [ i ], 0 ); for ( int i = 1 ; i <= m ; i ++ ) ans . addEdge ( i + n , T , b [ i ], 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) ans . addEdge ( i , j + n , inf , cost [ i ][ j ]); printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d\" , & b [ i ]); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); solve2 (); solve1 (); return 0 ; }","title":"17.\u8fd0\u8f93\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#18","text":"\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\uff0c\u65e0\u8111\u8d39\u7528\u6d41*2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int n , cost [ 105 ][ 105 ]; void solve1 () { int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans . addEdge ( i , j + n , 1 , cost [ i ][ j ]); printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); } void solve2 () { int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( S , i , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , 1 , 0 ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) ans . addEdge ( i , j + n , 1 , - cost [ i ][ j ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); } int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) scanf ( \"%d\" , & cost [ i ][ j ]); solve1 (); solve2 (); return 0 ; }","title":"18.\u5206\u914d\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#19","text":"\u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\uff0c S S \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u5f53\u524d\u70b9\u539f\u6765\u7684\u5927\u5c0f\uff0c\u8d39\u7528\u4e3a0\uff1b A_i A_i \u5411 B_i B_i \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a0\uff0c\u5411 B_{i-1} B_{i-1} \u548c B_{i+1} B_{i+1} \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a1\uff0c\u5bb9\u91cf\u4e3aINF; B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u76ee\u6807\u503c\u5927\u5c0f\uff0c\u8d39\u7528\u4e3a0. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <bits/stdc++.h> using namespace std ; const int maxn = 1000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int main () { int n , sum = 0 , x ; scanf ( \"%d\" , & n ); int S = 0 , T = 2 * n + 1 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); sum += x ; ans . addEdge ( S , i , x , 0 ); } sum /= n ; for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i + n , T , inf , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( i , i + n , sum , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { int x = i - 1 , y = i + 1 ; if ( x < 1 ) x += n ; if ( y > n ) y -= n ; ans . addEdge ( i , x , inf , 1 ); ans . addEdge ( i , y , inf , 1 ); } printf ( \"%d \\n \" , ans . mincostMaxFlow ( S , T )); return 0 ; }","title":"19.\u8d1f\u8f7d\u5e73\u8861\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#20","text":"\u8d39\u7528\u6d41\uff0c\u8f93\u5165\u683c\u5f0f\u4ee4\u4ebaD\u533a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int id [ 25 ][ 25 ]; int main () { int a , b , p , q , k , x , y ; scanf ( \"%d%d%d%d\" , & a , & b , & p , & q ); int tot = 0 ; p ++ ; q ++ ; for ( int i = 1 ; i <= p ; i ++ ) for ( int j = 1 ; j <= q ; j ++ ) id [ i ][ j ] = ++ tot ; int S = 0 , T = tot + 1 ; ans . init ( T ); for ( int i = 1 ; i <= p ; i ++ ) { for ( int j = 1 ; j < q ; j ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( id [ i ][ j ], id [ i ][ j + 1 ], 1 , - x ); ans . addEdge ( id [ i ][ j ], id [ i ][ j + 1 ], inf , 0 ); } } for ( int j = 1 ; j <= q ; j ++ ) { for ( int i = 1 ; i < p ; i ++ ) { scanf ( \"%d\" , & x ); ans . addEdge ( id [ i ][ j ], id [ i + 1 ][ j ], 1 , - x ); ans . addEdge ( id [ i ][ j ], id [ i + 1 ][ j ], inf , 0 ); } } while ( a -- ) { scanf ( \"%d%d%d\" , & k , & x , & y ); ans . addEdge ( S , id [ x + 1 ][ y + 1 ], k , 0 ); } while ( b -- ) { scanf ( \"%d%d%d\" , & k , & x , & y ); ans . addEdge ( id [ x + 1 ][ y + 1 ], T , k , 0 ); } printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; }","title":"20.\u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#21k","text":"\u62c6\u70b9\u5efa\u56fe\uff0c\u8d85\u7ea7\u6e90\u70b9 S S \u5411 S1 S1 \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a k k \uff0c\u8d39\u7528\u4e3a0\uff0c\u8868\u793a\u6700\u591a\u53d6 k k \u4e2a\u5f00\u5934\u7684\u533a\u95f4\uff1b S1 S1 \u5411 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b A_i A_i \u5411 B_i B_i \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a\u8be5\u533a\u95f4\u6743\u503c\uff0c\u8868\u793a\u53d6\u8fd9\u4e2a\u533a\u95f4\uff1b B_i B_i \u5411\u6240\u6709\u5728\u5176\u53f3\u4fa7\u4e14\u4e0e\u5b83\u4e0d\u76f8\u4ea4\u7684 A_i A_i \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff1b B_i B_i \u5411 T T \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\uff0c\u8dd1 S S \u5230 T T \u7684\u8d39\u7528\u6d41\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; int l [ 505 ], r [ 505 ], c [ 505 ]; int main () { int n , k ; scanf ( \"%d%d\" , & n , & k ); int S = 0 , T = 2 * n + 1 , S1 = T + 1 ; ans . init ( S1 ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d\" , & l [ i ], & r [ i ]); if ( l [ i ] > r [ i ]) swap ( l [ i ], r [ i ]); ans . addEdge ( i , i + n , 1 , - ( r [ i ] - l [ i ])); } for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) if ( r [ i ] <= l [ j ]) ans . addEdge ( i + n , j , 1 , 0 ); ans . addEdge ( S , S1 , k , 0 ); for ( int i = 1 ; i <= n ; i ++ ) { ans . addEdge ( S1 , i , 1 , 0 ); ans . addEdge ( i + n , T , 1 , 0 ); } printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; }","title":"21.\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#22k","text":"\u8ddf\u4e0a\u4e00\u9898\u6a21\u578b\u5176\u5b9e\u662f\u4e00\u6837\u7684\uff0c\u6362\u4e86\u4e2a\u65b9\u6cd5\u3002 \u628a\u7ebf\u6bb5\u6295\u5f71\u5230X\u8f74\u4e0a\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u533a\u95f4\u96c6\u95ee\u9898\uff0c\u4f46\u662f\u56e0\u4e3a\u5b58\u5728 x=r \u8fd9\u6837\u7684\u7ebf\u6bb5\uff0c\u5982\u679c\u76f4\u63a5\u5efa\u56fe\u4f1a\u4ea7\u751f\u8d1f\u73af\uff0c\u9700\u8981\u62c6\u70b9\u3002 \u79bb\u6563\u5316\u533a\u95f4\u7aef\u70b9\uff0c\u76f8\u90bb\u7684\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a0\uff1b\u533a\u95f4\u7aef\u70b9 L[i] \u5411 R[i] \u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a -val[i] \uff0cS\u548cT\u5206\u522b\u5411\u6700\u5de6\u548c\u6700\u53f3\u7aef\u70b9\u8fde\u6d41\u91cf\u4e3ak\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\u8dd1\u8d39\u7528\u6d41\u5373\u4e3a\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } } ans ; inline int dis ( int x1 , int y1 , int x2 , int y2 ) { return sqrt ( 1ll * ( x2 - x1 ) * ( x2 - x1 ) + 1ll * ( y2 - y1 ) * ( y2 - y1 )); } int n , L [ 505 ], R [ 505 ], val [ 505 ]; map < int , int > M ; int discretization () { vector < int > v ; for ( int i = 1 ; i <= n ; i ++ ) v . push_back ( L [ i ]), v . push_back ( R [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 0 ; i < v . size (); i ++ ) M [ v [ i ]] = i + 1 ; for ( int i = 1 ; i <= n ; i ++ ) L [ i ] = M [ L [ i ]], R [ i ] = M [ R [ i ]]; return v . size (); } int main () { int k , a , b , c , d ; scanf ( \"%d%d\" , & n , & k ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d%d%d%d\" , & a , & b , & c , & d ); val [ i ] = dis ( a , b , c , d ); L [ i ] = a * 2 , R [ i ] = c * 2 ; if ( L [ i ] > R [ i ]) swap ( L [ i ], R [ i ]); if ( L [ i ] == R [ i ]) R [ i ] ++ ; else L [ i ] ++ ; } int m = discretization (); int S = 0 , T = m + 1 ; ans . init ( T ); ans . addEdge ( S , 1 , k , 0 ), ans . addEdge ( m , T , k , 0 ); for ( int i = 1 ; i < m ; i ++ ) ans . addEdge ( i , i + 1 , inf , 0 ); for ( int i = 1 ; i <= n ; i ++ ) ans . addEdge ( L [ i ], R [ i ], 1 , - val [ i ]); printf ( \"%d \\n \" , - ans . mincostMaxFlow ( S , T )); return 0 ; }","title":"22.\u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#23","text":"\u62c6\u70b9\u8dd1\u8d39\u7528\u6d41\uff0c\u8f93\u51fa\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #include <bits/stdc++.h> using namespace std ; const int maxn = 10000 + 10 ; const int inf = 0x3f3f3f3f ; struct Edge { int from , to , cap , flow , cost ; }; int a [ 50 ][ 50 ], id [ 50 ][ 50 ]; struct MCMF { int n , m ; vector < Edge > edges ; vector < int > G [ maxn ]; bool inq [ maxn ]; int dis [ maxn ], path [ maxn ], a [ maxn ]; void init ( int n ) { this -> n = n ; for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); edges . clear (); } void addEdge ( int from , int to , int cap , int cost ) { edges . push_back ( Edge { from , to , cap , 0 , cost }); edges . push_back ( Edge { to , from , 0 , 0 , - cost }); m = edges . size (); G [ from ]. push_back ( m - 2 ); G [ to ]. push_back ( m - 1 ); } bool Bellman_Ford ( int s , int t , int & flow , int & cost ) { for ( int i = 0 ; i <= n ; i ++ ) dis [ i ] = inf ; memset ( inq , 0 , sizeof inq ); dis [ s ] = 0 , inq [ s ] = true , path [ s ] = 0 , a [ s ] = inf ; queue < int > Q ; Q . push ( s ); while ( ! Q . empty ()) { int u = Q . front (); Q . pop (); inq [ u ] = false ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { Edge & e = edges [ G [ u ][ i ]]; if ( e . cap > e . flow && dis [ e . to ] > dis [ u ] + e . cost ) { dis [ e . to ] = dis [ u ] + e . cost ; path [ e . to ] = G [ u ][ i ]; a [ e . to ] = min ( a [ u ], e . cap - e . flow ); if ( ! inq [ e . to ]) { Q . push ( e . to ); inq [ e . to ] = true ; } } } } if ( dis [ t ] == inf ) return false ; flow += a [ t ]; cost += dis [ t ] * a [ t ]; for ( int u = t ; u != s ; u = edges [ path [ u ]]. from ) { edges [ path [ u ]]. flow += a [ t ]; edges [ path [ u ] ^ 1 ]. flow -= a [ t ]; } return true ; } int mincostMaxFlow ( int s , int t ) { int flow = 0 , cost = 0 ; while ( Bellman_Ford ( s , t , flow , cost )); return cost ; } void printPath ( int cnt , int n , int m ) { int p = id [ 1 ][ 1 ]; while ( p != id [ n ][ m ]) { int x = ( p - 1 ) / m , y = ( p - 1 ) % m ; for ( auto i : G [ p + n * m ]) { int tmp = edges [ i ]. to ; int xx = ( tmp - 1 ) / m , yy = ( tmp - 1 ) % m ; if ( xx <= x && yy <= y ) continue ; if ( edges [ i ]. flow > 0 ) { edges [ i ]. flow -- ; //printf(\"%d %d %d %d\\n\", edges[i].from, edges[i].to, edges[i].cap, edges[i].flow); //printf(\"%d %d\\n\", xx + 1, yy + 1); if ( xx > x ) printf ( \"%d 0 \\n \" , cnt ); else printf ( \"%d 1 \\n \" , cnt ); p = tmp ; break ; } } } } } ans ; int main () { int x , n , m ; scanf ( \"%d%d%d\" , & x , & m , & n ); int S = 0 , T = 2 * n * m + 1 , tot = 0 ; ans . init ( T ); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) scanf ( \"%d\" , & a [ i ][ j ]), id [ i ][ j ] = ++ tot ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { if ( i + 1 <= n ) ans . addEdge ( id [ i ][ j ] + n * m , id [ i + 1 ][ j ], inf , 0 ); if ( j + 1 <= m ) ans . addEdge ( id [ i ][ j ] + n * m , id [ i ][ j + 1 ], inf , 0 ); if ( a [ i ][ j ] == 0 || a [ i ][ j ] == 2 ) ans . addEdge ( id [ i ][ j ], id [ i ][ j ] + n * m , inf , 0 ); if ( a [ i ][ j ] == 2 ) ans . addEdge ( id [ i ][ j ], id [ i ][ j ] + n * m , 1 , - 1 ); } } ans . addEdge ( S , id [ 1 ][ 1 ], x , 0 ); ans . addEdge ( id [ n ][ m ] + n * m , T , x , 0 ); ans . mincostMaxFlow ( S , T ); for ( int i = 1 ; i <= x ; i ++ ) ans . printPath ( i , n , m ); return 0 ; }","title":"23.\u706b\u661f\u63a2\u9669\u95ee\u9898"},{"location":"Personal Page/Verly/\u7f51\u7edc\u6d41/\u7f51\u7edc\u6d4124\u9898/#24","text":"\u663e\u7136\u6240\u7ed9\u6a21\u578b\u662f\u4e8c\u5206\u56fe\uff0c\u6700\u5927\u72ec\u7acb\u96c6-\u4e0d\u53ef\u9009\u7684\u8fb9\u5373\u4e3a\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 50000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } int n , vis [ 205 ][ 205 ]; int dx [ 8 ] = { - 2 , - 1 , - 2 , - 1 , 2 , 1 , 2 , 1 }; int dy [ 8 ] = { - 1 , - 2 , 1 , 2 , - 1 , - 2 , 1 , 2 }; int id ( int x , int y ) { return ( x - 1 ) * n + y ; } bool check ( int x , int y ) { return x > 0 && x <= n && y > 0 && y <= n && ! vis [ x ][ y ]; } int main () { int m , u , v ; scanf ( \"%d%d\" , & n , & m ); int S = 0 , T = n * n + 1 ; for ( int i = 0 ; i < m ; i ++ ) { scanf ( \"%d%d\" , & u , & v ); vis [ u ][ v ] = 1 ; } for ( int x = 1 ; x <= n ; x ++ ) { for ( int y = 1 ; y <= n ; y ++ ) { if ( ! check ( x , y )) continue ; if (( x + y ) % 2 ) add ( S , id ( x , y ), 1 ); else add ( id ( x , y ), T , 1 ); if (( x + y ) % 2 == 0 ) continue ; for ( int i = 0 ; i < 8 ; i ++ ) { int fx = x + dx [ i ], fy = y + dy [ i ]; if ( check ( fx , fy )) add ( id ( x , y ), id ( fx , fy ), 1 ); } } } printf ( \"%d \\n \" , n * n - max_flow ( S , T ) - m ); return 0 ; }","title":"24.\u9a91\u58eb\u5171\u5b58\u95ee\u9898"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 586 (Div. 1 + Div. 2)/","text":"https://codeforces.com/contest/1220 \u8d5b\u4e2d A,B,C \uff0c\u8d5b\u540e D,E A. Cards Link \u9898\u610f\uff1a\u7ed9\u6253\u4e71\u540e\u7684\u53ea\u5305\u542b zero \u548c one \u7684\u4e32\uff0c\u6c42\u53ef\u80fd\u7684\u6700\u5927\u5b57\u5178\u5e8f01\u4e32 \u9898\u89e3\uff1a\u8bb0\u5f55 n \u7684\u4e2a\u6570\u4e3a1\u7684\u4e2a\u6570\uff0c z \u4e3a0\u7684\u4e2a\u6570\u6216\u80050\u7684\u4e2a\u6570\u4e3a (n-num(1)*3)/4 B. Multiplication Table Link \u9898\u610f\uff1a\u4e00\u4e2a\u672a\u77e5\u5e8f\u5217a\uff0c\u7ed9\u51fa\u4e00\u4e2a\u77e9\u9635\u6bcf\u4e2a\u6570\u8868\u793a a_i * a_j \uff0c\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u6ca1\u6709\u6570\u5b57\uff0c\u6c42\u5e8f\u5217 \u9898\u89e3\uff1a a_i = sqrt((a_i * a_j) * (a_i * a_k) / (a_j * a_k)) a_i = sqrt((a_i * a_j) * (a_i * a_k) / (a_j * a_k)) C. Substring Game in the Lesson Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32\uff0c\u6c42\u521d\u59cb\u6bcf\u4e2a\u70b9\u4e3a\u67d0\u4f4d\u7f6e\u65f6\u80fd\u535a\u5f08\u62d3\u5c55\u4e32\u6bd4\u5f53\u524d\u4e32\u5b57\u5178\u5e8f\u5c0f\u7684\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5148\u624b\u5982\u679c\u80fd\u52a8\u5c31\u53d6\u6700\u5c0f\u7684\u4e32\u5373\u53ef\u83b7\u80dc\u3002 D. Alex and Julian Link \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2aB\u96c6\u5408\uff0c\u5bf9\u4e8e\u5168\u4f53\u6574\u6570\u96c6\u5408\u5efa\u56fe\uff0c\u5982\u679cB\u96c6\u5408\u4e2d\u5b58\u5728 |i-j| \uff0c\u5219 i\uff0cj \u4e4b\u95f4\u6709\u8fb9\u3002\u6c42\u81f3\u5c11\u4eceB\u4e2d\u5220\u6389\u591a\u5c11\uff08\u4e14\u8981\u4efb\u610f\u65b9\u6848\uff09\u4e2a\u6570\u53ef\u4ee5\u4f7f\u5f97\u5efa\u56fe\u4e3a\u4e8c\u5206\u56fe\u3002 \u9898\u89e3\uff1a\u4e8c\u5206\u56fe\u5f53\u4e14\u4ec5\u5f53\u56fe\u4e2d\u6ca1\u6709\u5947\u73af\u3002\u8003\u8651B\u4e2d\u4e24\u4e2a\u6570x\uff0cy\uff0c\u4ee4z=gcd(x,y)\uff0cx\u2019 = x/z\uff0c y\u2018 = y/z\u3002\u5219\u5fc5\u5b9a\u5b58\u5728\u73af\u957f\u5ea6\u4e3a x'+y' \uff0c\u7531gcd\u5b9a\u4e49\u53ef\u77e5 x\u2018 \u4e0e y\u2019 \u4e92\u8d28\uff0c\u800c x'+y' \u53c8\u4e3a\u5076\u6570\uff0c\u6240\u4ee5 x\u2019 \uff0c y\u2018 \u90fd\u4e3a\u5947\u6570\uff0c\u5982\u679cx\u4e0ey\u4e2d2\u7684\u56e0\u5b50\u4e2a\u6570\u4e0d\u540c x\u2019 \u4e0e y\u2018 \u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u4e3a\u5076\u6570\u4e0d\u6ee1\u8db3\u9898\u610f\uff0c\u6240\u4ee5B\u4e2d\u4e24\u4e24\u4e4b\u95f42\u7684\u56e0\u5b50\u6570\u76f8\u540c\uff0c\u5373B\u4e2d\u6240\u6709\u5143\u7d202\u7684\u56e0\u5b50\u6570\u76f8\u540c\uff0c\u53d6\u51fa\u4efb\u610f\u6700\u5927\u7684\u542b\u76f8\u540c\u6570\u91cf2\u56e0\u5b50\u7684\u96c6\u5408\u5373\u53ef\u3002 E. Tourism Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u542b\u70b9\u6743\u65e0\u91cd\u8fb9\u65e0\u81ea\u73af\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u4e0d\u8fde\u7eed\u91cd\u590d\u7ecf\u8fc7\u540c\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e0b\u4eces\u51fa\u53d1\u80fd\u7ecf\u8fc7\u6700\u5927\u7684\u70b9\u6743\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u8003\u8651\u53f6\u5b50\uff0c\u663e\u7136\u5230\u8fbe\u53f6\u5b50\u65f6\u4f1a\u76f4\u63a5\u7ec8\u6b62\uff0c\u663e\u7136\u5728\u4e00\u4e2a\u73af\u4e0a\u4ece\u4efb\u610f\u70b9\u8fdb\u5165\u73af\u53ef\u4ee5\u4ece\u4efb\u610f\u70b9\u51fa\u73af\uff0c\u7136\u540e\u5bf9\u4e8e\u591a\u4e2a\u8054\u901a\u7684\u73af\u663e\u7136\u53ef\u4ee5\u53d6\u5230\u6240\u6709\u70b9\uff08\u4ece\u4efb\u610f\u70b9\u51fa\u53d1\u5230\u4e00\u4e2a\u73af\u7136\u540e\u56de\u5230\u8be5\u70b9\u518d\u53d6\u53e6\u5916\u7684\u73af\uff09\u3002\u552f\u4e00\u9700\u8981\u8003\u8651\u7684\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5bf9\u4e8e\u5b64\u7acb\u8fde\u5411\u53f6\u5b50\u8282\u70b9\u7684\u94fe\uff0c\u663e\u7136\u53ea\u6709\u4e00\u6761\u53ef\u4ee5\u88ab\u9009\u4e2d\uff0c\u6240\u4ee5\u53d6\u5176\u4e2d\u6700\u957f\uff08\u6307\u6743\u503c\u548c\u6700\u5927\uff09\u7684\u4e00\u6761\u5373\u53ef\u3002\u6ce8\u610f\u5982\u679c\u8d77\u70b9\u5728\u8fd9\u6837\u7684\u94fe\u4e0a\u90a3\u4e48\u8d77\u70b9\u8fd9\u6761\u94fe\u662f\u5fc5\u53d6\u7684\u6240\u4ee5\u8d77\u70b9\u5f53\u505a\u5355\u4e2a\u70b9\u7684\u73af\u770b\u5f85\u5373\u53ef\u3002\u505a\u4e00\u4e2a\u7c7btop\u5e8f\u53d6\u51fa\u6700\u5927\u94fe\u7136\u540e\u52a0\u4e0a\u6240\u6709\u73af\u5373\u662f\u7b54\u6848\u3002","title":"Codeforces Round 586 (Div. 1 + Div. 2)"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 586 (Div. 1 + Div. 2)/#a-cards","text":"\u9898\u610f\uff1a\u7ed9\u6253\u4e71\u540e\u7684\u53ea\u5305\u542b zero \u548c one \u7684\u4e32\uff0c\u6c42\u53ef\u80fd\u7684\u6700\u5927\u5b57\u5178\u5e8f01\u4e32 \u9898\u89e3\uff1a\u8bb0\u5f55 n \u7684\u4e2a\u6570\u4e3a1\u7684\u4e2a\u6570\uff0c z \u4e3a0\u7684\u4e2a\u6570\u6216\u80050\u7684\u4e2a\u6570\u4e3a (n-num(1)*3)/4","title":"A. Cards"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 586 (Div. 1 + Div. 2)/#b-multiplication-table","text":"\u9898\u610f\uff1a\u4e00\u4e2a\u672a\u77e5\u5e8f\u5217a\uff0c\u7ed9\u51fa\u4e00\u4e2a\u77e9\u9635\u6bcf\u4e2a\u6570\u8868\u793a a_i * a_j \uff0c\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u6ca1\u6709\u6570\u5b57\uff0c\u6c42\u5e8f\u5217 \u9898\u89e3\uff1a a_i = sqrt((a_i * a_j) * (a_i * a_k) / (a_j * a_k)) a_i = sqrt((a_i * a_j) * (a_i * a_k) / (a_j * a_k))","title":"B. Multiplication Table"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 586 (Div. 1 + Div. 2)/#c-substring-game-in-the-lesson","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32\uff0c\u6c42\u521d\u59cb\u6bcf\u4e2a\u70b9\u4e3a\u67d0\u4f4d\u7f6e\u65f6\u80fd\u535a\u5f08\u62d3\u5c55\u4e32\u6bd4\u5f53\u524d\u4e32\u5b57\u5178\u5e8f\u5c0f\u7684\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5148\u624b\u5982\u679c\u80fd\u52a8\u5c31\u53d6\u6700\u5c0f\u7684\u4e32\u5373\u53ef\u83b7\u80dc\u3002","title":"C. Substring Game in the Lesson"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 586 (Div. 1 + Div. 2)/#d-alex-and-julian","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2aB\u96c6\u5408\uff0c\u5bf9\u4e8e\u5168\u4f53\u6574\u6570\u96c6\u5408\u5efa\u56fe\uff0c\u5982\u679cB\u96c6\u5408\u4e2d\u5b58\u5728 |i-j| \uff0c\u5219 i\uff0cj \u4e4b\u95f4\u6709\u8fb9\u3002\u6c42\u81f3\u5c11\u4eceB\u4e2d\u5220\u6389\u591a\u5c11\uff08\u4e14\u8981\u4efb\u610f\u65b9\u6848\uff09\u4e2a\u6570\u53ef\u4ee5\u4f7f\u5f97\u5efa\u56fe\u4e3a\u4e8c\u5206\u56fe\u3002 \u9898\u89e3\uff1a\u4e8c\u5206\u56fe\u5f53\u4e14\u4ec5\u5f53\u56fe\u4e2d\u6ca1\u6709\u5947\u73af\u3002\u8003\u8651B\u4e2d\u4e24\u4e2a\u6570x\uff0cy\uff0c\u4ee4z=gcd(x,y)\uff0cx\u2019 = x/z\uff0c y\u2018 = y/z\u3002\u5219\u5fc5\u5b9a\u5b58\u5728\u73af\u957f\u5ea6\u4e3a x'+y' \uff0c\u7531gcd\u5b9a\u4e49\u53ef\u77e5 x\u2018 \u4e0e y\u2019 \u4e92\u8d28\uff0c\u800c x'+y' \u53c8\u4e3a\u5076\u6570\uff0c\u6240\u4ee5 x\u2019 \uff0c y\u2018 \u90fd\u4e3a\u5947\u6570\uff0c\u5982\u679cx\u4e0ey\u4e2d2\u7684\u56e0\u5b50\u4e2a\u6570\u4e0d\u540c x\u2019 \u4e0e y\u2018 \u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u4e3a\u5076\u6570\u4e0d\u6ee1\u8db3\u9898\u610f\uff0c\u6240\u4ee5B\u4e2d\u4e24\u4e24\u4e4b\u95f42\u7684\u56e0\u5b50\u6570\u76f8\u540c\uff0c\u5373B\u4e2d\u6240\u6709\u5143\u7d202\u7684\u56e0\u5b50\u6570\u76f8\u540c\uff0c\u53d6\u51fa\u4efb\u610f\u6700\u5927\u7684\u542b\u76f8\u540c\u6570\u91cf2\u56e0\u5b50\u7684\u96c6\u5408\u5373\u53ef\u3002","title":"D. Alex and Julian"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 586 (Div. 1 + Div. 2)/#e-tourism","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u542b\u70b9\u6743\u65e0\u91cd\u8fb9\u65e0\u81ea\u73af\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u4e0d\u8fde\u7eed\u91cd\u590d\u7ecf\u8fc7\u540c\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\u4e0b\u4eces\u51fa\u53d1\u80fd\u7ecf\u8fc7\u6700\u5927\u7684\u70b9\u6743\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u8003\u8651\u53f6\u5b50\uff0c\u663e\u7136\u5230\u8fbe\u53f6\u5b50\u65f6\u4f1a\u76f4\u63a5\u7ec8\u6b62\uff0c\u663e\u7136\u5728\u4e00\u4e2a\u73af\u4e0a\u4ece\u4efb\u610f\u70b9\u8fdb\u5165\u73af\u53ef\u4ee5\u4ece\u4efb\u610f\u70b9\u51fa\u73af\uff0c\u7136\u540e\u5bf9\u4e8e\u591a\u4e2a\u8054\u901a\u7684\u73af\u663e\u7136\u53ef\u4ee5\u53d6\u5230\u6240\u6709\u70b9\uff08\u4ece\u4efb\u610f\u70b9\u51fa\u53d1\u5230\u4e00\u4e2a\u73af\u7136\u540e\u56de\u5230\u8be5\u70b9\u518d\u53d6\u53e6\u5916\u7684\u73af\uff09\u3002\u552f\u4e00\u9700\u8981\u8003\u8651\u7684\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5bf9\u4e8e\u5b64\u7acb\u8fde\u5411\u53f6\u5b50\u8282\u70b9\u7684\u94fe\uff0c\u663e\u7136\u53ea\u6709\u4e00\u6761\u53ef\u4ee5\u88ab\u9009\u4e2d\uff0c\u6240\u4ee5\u53d6\u5176\u4e2d\u6700\u957f\uff08\u6307\u6743\u503c\u548c\u6700\u5927\uff09\u7684\u4e00\u6761\u5373\u53ef\u3002\u6ce8\u610f\u5982\u679c\u8d77\u70b9\u5728\u8fd9\u6837\u7684\u94fe\u4e0a\u90a3\u4e48\u8d77\u70b9\u8fd9\u6761\u94fe\u662f\u5fc5\u53d6\u7684\u6240\u4ee5\u8d77\u70b9\u5f53\u505a\u5355\u4e2a\u70b9\u7684\u73af\u770b\u5f85\u5373\u53ef\u3002\u505a\u4e00\u4e2a\u7c7btop\u5e8f\u53d6\u51fa\u6700\u5927\u94fe\u7136\u540e\u52a0\u4e0a\u6240\u6709\u73af\u5373\u662f\u7b54\u6848\u3002","title":"E. Tourism"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 588 (Div. 2)/","text":"https://codeforces.com/contest/1230 \u8d5b\u4e2d A,B,C,D \uff0c\u8d5b\u540e E\uff0cF A. Dawid and Bags of Candies Link \u9898\u610f\uff1a\u7ed94\u4e2a\u6570\uff0c\u6c42\u80fd\u4e0d\u80fd\u5206\u6210\u4e24\u4e2a\u96c6\u5408\u4f7f\u4e24\u4e2a\u96c6\u5408\u5185\u7684\u6570\u548c\u76f8\u7b49 \u9898\u89e3\uff1a\u53ea\u67094\u4e2a\u6570\u968f\u4fbf\u5199\u90fd\u5bf9\uff0c\u6211\u5199\u4e86\u72b6\u6001\u538b\u7f29\u679a\u4e3e\u5b50\u96c6\u3002 B. Ania and Minimizing Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u6570\u5b57\u4e32s\uff0c\u6c42\u6539\u53d8\u5176\u4e2d\u6700\u591ak\u4f4d\uff0c\u4f7f\u5176\u53d8\u6210\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u6700\u5c0f\u6570\u5b57 \u9898\u89e3\uff1a\u76f4\u63a5\u5206\u4e00\u4e0b\u7c7b\uff0c\u5176\u4e2d\u9996\u4f4d\u5982\u679c\u8981\u6539\u53d8\u5c31\u53ea\u80fd\u662f1\u4f4d\u6570\u3002 C. Anadi and Domino Link \u9898\u610f\uff1a\u6700\u591a7\u4e2a\u70b921\u6761\u8fb9\uff0c\u6c42\u5176\u4e2d\u8fb9\u5305\u542b\u6240\u7ed9\u768421\u6761\u8fb9\u4e2d\u6700\u591a\u591a\u5c11\u79cd\u3002 \u9898\u89e3\uff1a\u9898\u610f\u6740\uff0c\u76f4\u63a5\u7206\u641c\u679a\u4e3e7\u4e2a\u70b9\u7684\u989c\u8272\u5373\u53ef\u3002 D. Marcin and Training Camp Link \u9898\u610f\uff1a\u6bcf\u4e2a\u4eba\u6709\u4e24\u4e2a\u5c5e\u6027a\u548cb\uff0ca\u662f\u5b83\u6280\u80fd\u70b9\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0cb\u662f\u5b83\u7684\u6743\u503c\uff0c\u5b9a\u4e49\u5982\u679cx\u7684a\u6709y\u7684a\u4e2d\u4e0d\u5b58\u5728\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5219x>y\u3002\u73b0\u5728\u6c42\u4e00\u4e2a\u96c6\u5408\u4f7f\u5f97\u96c6\u5408\u4e2d\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u4eba\u5927\u4e8e\u5176\u4ed6\u6240\u6709\u4eba\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u96c6\u5408\u7684b\u6743\u503c\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u6613\u5f97\u591a\u4e2a\u4ebaa\u76f8\u7b49\u65f6\u624d\u80fd\u6ee1\u8db3\u9898\u610f\uff0c\u7136\u540e\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\u5e76\u5408\u5e76\uff0c\u7136\u540e\u6c42\u51fa\u4ed6\u4eec\u6ee1\u8db3\u9898\u610f\u7684a\u503c\u7684\u5b50\u96c6\u548c\u5373\u662f\u7b54\u6848\u3002 E. Kamil and Making a Stream Link \u9898\u610f\uff1a\u6c42\u4e00\u68f5\u6811\u4e0agcd(link(u, v))\u7684\u548c\uff0cu\u662fv\u7684\u7956\u5148\u3002 \u9898\u89e3\uff1a\u4ece\u4e0a\u5f80\u4e0b\u9012\u5f52\uff0c\u6bcf\u4e2a\u6570\u7684\u56e0\u5b50\u6570\u662fLOG\u7ea7\u522b\u6240\u4ee5\u5efa\u7acb\u4e00\u4e2avector\u6216\u8005map\u5b58\u4e0b\u6765\u7b97\u5c31\u53ef\u4ee5\u4e86\uff0c\u590d\u6742\u5ea6 O(nlogn) \u6216 O(nlognlogn) \u3002 F. Konrad and Company Evaluation Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u4e00\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u90fd\u671d\u5916\u8fde\uff08\u6539\u53d8\u65b9\u5411\uff09\uff0c\u6bcf\u6b21\u6c42 \\sum in[i] * out[i] \\sum in[i] * out[i] \u9898\u89e3\uff1a\u66b4\u529b\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u5165\u8fb9\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e00\u4e2a\u70b9\u5c06\u5176\u5165\u8fb9\u6e05\u7a7a\u5e76\u53cd\u5411\u8fde\u63a5\u5373\u53ef\u3002\u590d\u6742\u5ea6\u53ef\u8fc7\uff0c\u5177\u4f53\u7b97\u4e0d\u6e05\uff0c\u9898\u89e3\u8bf4\u662f O(q*sqrt(m)) \u3002","title":"Codeforces Round 588 (Div. 2)"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 588 (Div. 2)/#a-dawid-and-bags-of-candies","text":"\u9898\u610f\uff1a\u7ed94\u4e2a\u6570\uff0c\u6c42\u80fd\u4e0d\u80fd\u5206\u6210\u4e24\u4e2a\u96c6\u5408\u4f7f\u4e24\u4e2a\u96c6\u5408\u5185\u7684\u6570\u548c\u76f8\u7b49 \u9898\u89e3\uff1a\u53ea\u67094\u4e2a\u6570\u968f\u4fbf\u5199\u90fd\u5bf9\uff0c\u6211\u5199\u4e86\u72b6\u6001\u538b\u7f29\u679a\u4e3e\u5b50\u96c6\u3002","title":"A. Dawid and Bags of Candies"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 588 (Div. 2)/#b-ania-and-minimizing","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u6570\u5b57\u4e32s\uff0c\u6c42\u6539\u53d8\u5176\u4e2d\u6700\u591ak\u4f4d\uff0c\u4f7f\u5176\u53d8\u6210\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u6700\u5c0f\u6570\u5b57 \u9898\u89e3\uff1a\u76f4\u63a5\u5206\u4e00\u4e0b\u7c7b\uff0c\u5176\u4e2d\u9996\u4f4d\u5982\u679c\u8981\u6539\u53d8\u5c31\u53ea\u80fd\u662f1\u4f4d\u6570\u3002","title":"B. Ania and Minimizing"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 588 (Div. 2)/#c-anadi-and-domino","text":"\u9898\u610f\uff1a\u6700\u591a7\u4e2a\u70b921\u6761\u8fb9\uff0c\u6c42\u5176\u4e2d\u8fb9\u5305\u542b\u6240\u7ed9\u768421\u6761\u8fb9\u4e2d\u6700\u591a\u591a\u5c11\u79cd\u3002 \u9898\u89e3\uff1a\u9898\u610f\u6740\uff0c\u76f4\u63a5\u7206\u641c\u679a\u4e3e7\u4e2a\u70b9\u7684\u989c\u8272\u5373\u53ef\u3002","title":"C. Anadi and Domino"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 588 (Div. 2)/#d-marcin-and-training-camp","text":"\u9898\u610f\uff1a\u6bcf\u4e2a\u4eba\u6709\u4e24\u4e2a\u5c5e\u6027a\u548cb\uff0ca\u662f\u5b83\u6280\u80fd\u70b9\u7684\u4e8c\u8fdb\u5236\u8868\u793a\uff0cb\u662f\u5b83\u7684\u6743\u503c\uff0c\u5b9a\u4e49\u5982\u679cx\u7684a\u6709y\u7684a\u4e2d\u4e0d\u5b58\u5728\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5219x>y\u3002\u73b0\u5728\u6c42\u4e00\u4e2a\u96c6\u5408\u4f7f\u5f97\u96c6\u5408\u4e2d\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u4eba\u5927\u4e8e\u5176\u4ed6\u6240\u6709\u4eba\uff0c\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684\u96c6\u5408\u7684b\u6743\u503c\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u6613\u5f97\u591a\u4e2a\u4ebaa\u76f8\u7b49\u65f6\u624d\u80fd\u6ee1\u8db3\u9898\u610f\uff0c\u7136\u540e\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u6240\u4ee5\u6c42\u51fa\u6240\u6709\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\u5e76\u5408\u5e76\uff0c\u7136\u540e\u6c42\u51fa\u4ed6\u4eec\u6ee1\u8db3\u9898\u610f\u7684a\u503c\u7684\u5b50\u96c6\u548c\u5373\u662f\u7b54\u6848\u3002","title":"D. Marcin and Training Camp"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 588 (Div. 2)/#e-kamil-and-making-a-stream","text":"\u9898\u610f\uff1a\u6c42\u4e00\u68f5\u6811\u4e0agcd(link(u, v))\u7684\u548c\uff0cu\u662fv\u7684\u7956\u5148\u3002 \u9898\u89e3\uff1a\u4ece\u4e0a\u5f80\u4e0b\u9012\u5f52\uff0c\u6bcf\u4e2a\u6570\u7684\u56e0\u5b50\u6570\u662fLOG\u7ea7\u522b\u6240\u4ee5\u5efa\u7acb\u4e00\u4e2avector\u6216\u8005map\u5b58\u4e0b\u6765\u7b97\u5c31\u53ef\u4ee5\u4e86\uff0c\u590d\u6742\u5ea6 O(nlogn) \u6216 O(nlognlogn) \u3002","title":"E. Kamil and Making a Stream"},{"location":"Personal Page/badcw/Codeforces/Codeforces Round 588 (Div. 2)/#f-konrad-and-company-evaluation","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u4e00\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u90fd\u671d\u5916\u8fde\uff08\u6539\u53d8\u65b9\u5411\uff09\uff0c\u6bcf\u6b21\u6c42 \\sum in[i] * out[i] \\sum in[i] * out[i] \u9898\u89e3\uff1a\u66b4\u529b\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u5165\u8fb9\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e00\u4e2a\u70b9\u5c06\u5176\u5165\u8fb9\u6e05\u7a7a\u5e76\u53cd\u5411\u8fde\u63a5\u5373\u53ef\u3002\u590d\u6742\u5ea6\u53ef\u8fc7\uff0c\u5177\u4f53\u7b97\u4e0d\u6e05\uff0c\u9898\u89e3\u8bf4\u662f O(q*sqrt(m)) \u3002","title":"F. Konrad and Company Evaluation"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/","text":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898 Link \u72b6\u6001\u538b\u7f29dp\u5e38\u7528\u6765\u5904\u7406\u91cf\u7ea7\u5f88\u5c0f\u7684np\u95ee\u9898 \u7531\u6b64\u8fd8\u53ef\u4ee5\u884d\u751f\u51fa\u8f6e\u5ed3\u7ebfdp\u53ca\u5728\u6b64\u4e4b\u4e0a\u7684\u63d2\u5934dp \u72b6\u6001\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u4e2d\u6709\u4e00\u4e9b\u5c0f\u64cd\u4f5c\u60f3\u5206\u4eab\u4e00\u4e0b\uff1a 1\u3001\u679a\u4e3e\u4e8c\u8fdb\u5236\u72b6\u6001\u5b50\u96c6 Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 //for(int i = 0; i != s; i = (i-s)&s) void print ( int x ) { if ( x < 2 ) printf ( \"%d\" , x ); else { print ( x >> 1 ); print ( x % 2 ); } } int main () { int s = 0 B1111 ; for ( int i = 0 ; i != s ; i = ( i - s ) & s ) { print ( i ); printf ( \" \\n \" ); } } /*\u8f93\u51fa\u4e3a\uff1a 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 */ \u5f88\u65b9\u4fbf\u800c\u4e14\u662f\u5347\u5e8f 2\u3001\u72b6\u6001\u7684\u5404\u79cd\u57fa\u672c\u64cd\u4f5c Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // \u6240\u6709\u4f4d\u4e3a1 ( 1 << n ) - 1 //\u6ce8\u610f\u4f4d\u8fd0\u7b97\u6bd4\u4e00\u6b21\u8fd0\u7b97\u4f18\u5148\u7ea7\u4f4e\u6240\u4ee5\u8981\u52a0\u62ec\u53f7 // \u5224\u65ad\u7b2ci\u4f4d stat & ( 1 << i ) // lowbit\uff0c\u72b6\u6001\u4e2d\u6700\u9760\u8fd1\u672b\u5c3e\u76841 i & - i // \u6c42\u72b6\u6001\u4e2d\u542b\u6709\u7684\u9009\u4e2d\u6570\u91cf\uff0c\u76f8\u5f53\u4e8e\u6c42\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570 int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( stat & ( 1 << i )) c ++ ; // \u6216\u8005\u76f4\u63a5\u9884\u5904\u7406\uff0c\u8fd9\u91cc\u7528\u5230\u4e86lowbit for ( int i = 0 ; i < ( 1 << n ); ++ i ) c [ i ] = c [ i ^ ( i & - i )] + 1 ; // \u679a\u4e3e\u9012\u63a8\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u5b9e\u968f\u4fbf\u5199\u5c31\u662f\u4e86 for ( int i = 0 ; i < n ; ++ i ) { if (( stat & ( 1 << i )) == 0 ) { int newstat = stat | ( 1 << i ); } } 3\u3001\u8f6e\u5ed3\u7ebfdp\u5165\u95e8 Link \u8bf4\u5230\u8f6e\u5ed3\u7ebfdp\u5c31\u662f\u90a3\u4e2a\u65b9\u683c\u586b\u5145\u95ee\u9898\uff0c\u6c42\u75281*2\u7684\u65b9\u683c\u586b\u6ee1n\u00d7m\u7684\u65b9\u6848\u6570\u3002 \u3010poj 2411\u3011 \u8fd9\u91cc\u662f\u57fa\u7840\u90e8\u5206\uff0c\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7 \u8bbe\u8ba1 dp[i][j][k] dp[i][j][k] \u662f\u7b2ci\u884c\u7b2cj\u5217\uff0c\u4e0a\u65b9\u72b6\u6001\u4e3ak\u7684\u65b9\u6848\u6570 \u6700\u540e\u6c42\u89e3\u7684\u662f dp[n][m][(1<<m)-1] dp[n][m][(1<<m)-1] 0000xxx xxxx000 \u8fd9\u6837\u4e00\u5f20\u56fe\uff0c\u8868\u793a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217\uff0c\u90a3\u4e48\u5b83\u6240\u9700\u8981\u7684\u72b6\u6001\u4e3a\u6807x\u7684\u4f4d\u7f6e\u662f\u5426\u586b\u5145\uff0c\u5f80\u4e0b\u9012\u63a8\u5c06\u7b2c2\u884c\u7b2c5\u5217\u586b\u5145\u4e00\u4e2a\u7ad6\u7740\u7684\u65b9\u683c\u7684\u8bdd\u5c31\u662f\uff1a 1 int newstat = stat >> 1 | ( 1 << m - 1 ) | 1 \u5176\u4e2d stat>>1 \u5c31\u662f\u628a\u72b6\u6001\u53d8\u6210\u4e86 00000xx xxxxx00 \u53bb\u6389\u4e86\u5934\u4f4d\uff0c\u589e\u52a0\u4e86\u4e00\u4f4d\uff0c\u8fd9\u5c31\u662f\u8f6e\u5ed3\u7ebfdp\uff0c\u7c7b\u4f3c\u4e00\u4e2a\u53d6\u7a97\u53e3shift\u7684\u8fc7\u7a0b\u3002\u6807x\u7684\u4f4d\u7f6e\u4e5f\u5c31\u662f\u8f6e\u5ed3\u7ebf\u3002 \u65b9\u683c\u586b\u5145\u95ee\u9898\u7684\u5177\u4f53\u89e3\u7b54\u662f\uff1a 1\u3001\u6bcf\u6b21\u679a\u4e3e\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u4e00\u662f\u6b64\u4f4d\u7f6e\u4e0d\u586b\uff0c\u4e8c\u662f\u6b64\u4f4d\u7f6e\u586b\u7ad6\u7740\u76841\u00d72\u4e5f\u5c31\u662f\u4e0a\u4e00\u884c\u540c\u5217\u548c\u6b64\u4f4d\u7f6e\uff0c\u4e09\u662f\u586b\u6a2a\u7740\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u5217\u540c\u884c\u548c\u6b64\u4f4d\u7f6e 2\u3001\u5982\u679c\u8f6e\u5ed3\u7ebf\u4e2d\u4e0a\u4e00\u884c\u540c\u5217\u7684\u4f4d\u7f6e\u4e3a\u7a7a\u5fc5\u987b\u8981\u586b\u4e0a\u4e0d\u7136\u4e4b\u540e\u5c31\u6ca1\u6709\u65b9\u6cd5\u53ef\u4ee5\u5c06\u90a3\u4e2a\u4f4d\u7f6e\u8865\u4e0a\u6240\u4ee5\u662f 1 2 3 4 5 if (( stat & 2 ) == 0 ) { int newstat = stat >> 1 | ( 1 << m - 1 ) | 1 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; //i,j-1\u770b\u60c5\u51b5\u6539\u52a8\uff0c\u662f\u5b83\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u4f4d\u7f6e continue ; } \u6ce8\u610f\u6b64\u65f6\u8981\u4e0d\u662f\u7b2c\u4e00\u884c\uff0c\u6839\u636e\u4f60\u4ece1\u8fd8\u662f0\u5f00\u59cb\u8bb0\u5f55\u884c\u6570\u53ef\u80fd\u6709\u8d1f\u4e0b\u6807\u7684\u98ce\u9669\u6240\u4ee5\u5224\u65ad\u4e00\u4e0bi\u662f\u5426\u5927\u4e8e\u5f00\u59cb\u884c\u4e0b\u6807 3\u3001\u5982\u679c\u4e0d\u662f\u4ee5\u4e0a\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e0d\u586b 1 2 int newstat = stat >> 1 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; 4\u3001\u5982\u679c\u5de6\u8fb9\u4e3a\u7a7a\u53ef\u4ee5\u586b 1 2 3 4 if (( stat & ( 1 << m - 1 )) == 0 ) { int newstat = stat >> 1 | 3 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; } \u5f53\u7136\u4ee5\u4e0a\u53ea\u662f\u89e3\u91ca\u6027\u7684\u5199\u6cd5\uff0c\u771f\u8981\u505a\u9898\u7684\u8bdd\u663e\u7136\u53ef\u4ee5\u52a0\u4e2a\u6eda\u52a8\u6570\u7ec4\uff0c\u5b83\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4e0e\u4e0a\u4e00\u4e2a\u72b6\u6001\u76f8\u5173\uff0c\u800c\u4e14\u5199\u8d77\u6765\u53cd\u800c\u66f4\u7b80\u5355\u3002 \u6211\u4e60\u60ef\u6765\u8bb2\u662f\u628a\u6700\u8fdc\u4f4d\u770b\u505a0\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53f3\u6ea2 0000xxx xxxx000 \u7b80\u5355\u6765\u8bb2\u6bd4\u5982\u8fd9\u4e2a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217 \u90a3\u4e48\u5b83\u72b6\u6001\u5c31\u8981\u53bb\u8868\u793a\u6807\u201cx\u201d\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u628a\u5b83\u6b63\u4e0a\u65b9\uff08\u4e5f\u5c31\u662f1\uff0c5\uff09\u90a3\u4e2a\u70b9\u770b\u505a\u662f\u72b6\u6001\u7684\u6700\u540e\u4e00\u4f4d\u4e5f\u5c31\u662f0\u4f4d\uff0c\u5728\u5f80\u4e0b\u9012\u63a8\u7684\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u591f 1 int newstat = stat >> 1 | ( 1 << m - 1 ) \u76f4\u63a5\u5f97\u51fa\u4e0b\u4e00\u7ec4\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u8003\u8651\u6ea2\u51fa\u4f4d \u5982\u679c\u53cd\u7740\u8bbe\u8ba1\u72b6\u538b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u6765\u51cf\u53bb\u6ea2\u51fa\u4f4d \u4e00\u9053\u9898\uff1acodeforces 903F \u5927\u610f\uff1a\u7ed9\u4e00\u4e2a4\u00d7m\u7684\u77e9\u9635\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e3ax\uff0c\u9700\u8981\u75281\u00d71\uff0c 2\u00d72\uff0c3\u00d73\uff0c 4\u00d74\u7684\u683c\u5b50\u5c06\u5176\u586b\u5145\u4f7f\u5f97\u6240\u6709x\u4f4d\u7f6e\u90fd\u8981\u88ab\u8986\u76d6\u3002\u6bcf\u79cd\u683c\u5b50\u6709\u4e00\u4e2a\u4ee3\u4ef7\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002 \u663e\u7136\u6b64\u9898\u8f6e\u5ed3\u7ebf\u5927\u5c0f\u4e3a4*4\u4e5f\u5c31\u662f\u524d16\u4e2a\u683c\u5b50\uff0c\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u4e0b\u5f80\u4e0a\u9012\u63a8\u5373\u53ef\u3002 \u552f\u4e00\u4e0d\u597d\u5904\u7406\u7684\u662f\u8fd9\u4e2a\u4ee3\u4ef7\u95ee\u9898\u3002 \u5f3a\u70c8\u63a8\u8350\u8bfb\u4e00\u4e0bdotorya\u7684\u4ee3\u7801\uff0c\u7b80\u76f4\u795e\u4f5c\uff0c\u8bfb\u5230\u5c31\u662f\u8d5a\u5230 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 // https://codeforces.com/contest/903/submission/33174261 int A [ 5 ]; int val [ 5 ]; char in [ 4 ][ 1050 ]; int nxt [ 65536 ][ 120 ]; int cost [ 120 ]; int dp [ 1050 ][ 4096 ]; int main () { int N , i , j , k , l , m ; scanf ( \"%d\" , & N ); for ( i = 1 ; i <= 4 ; i ++ ) scanf ( \"%d\" , & A [ i ]); for ( i = 0 ; i < 4 ; i ++ ) scanf ( \"%s\" , in [ i ]); for ( i = 1 ; i <= 4 ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) for ( k = 0 ; k < i ; k ++ ) val [ i ] |= 1 << ( 4 * j + k ); } int p = 0 ; for ( i = 0 ; i <= 1 ; i ++ ) { for ( j = 0 ; j <= 2 ; j ++ ) { for ( k = 0 ; k <= 3 ; k ++ ) { for ( l = 0 ; l <= 4 ; l ++ ) { int totc = A [ i ] + A [ j ] + A [ k ] + A [ l ]; cost [ p ] = totc ; int v = ( val [ i ] << 3 ) | ( val [ j ] << 2 ) | ( val [ k ] << 1 ) | val [ l ]; for ( m = 0 ; m < 65536 ; m ++ ) nxt [ m ][ p ] = m & ~ v ; p ++ ; } } } } memset ( dp , 0x3f , sizeof ( dp )); int st = 0 ; for ( i = 0 ; i < 1 ; i ++ ) { for ( j = 0 ; j < 4 ; j ++ ) { st = st * 2 ; if ( in [ j ][ i ] == '*' ) st ++ ; } } for ( i = 0 ; i < 120 ; i ++ ) dp [ 0 ][ nxt [ st ][ i ]] = min ( dp [ 0 ][ nxt [ st ][ i ]], cost [ i ]); for ( i = 1 ; i < N ; i ++ ) { int v = 0 ; for ( j = 0 ; j < 4 ; j ++ ) v = v * 2 + ( int )( in [ j ][ i ] == '*' ); for ( j = 0 ; j < 4096 ; j ++ ) { if ( dp [ i - 1 ][ j ] > 1000000 ) continue ; l = j * 16 + v ; for ( k = 0 ; k < 120 ; k ++ ) { int x = nxt [ l ][ k ]; if ( x < 4096 ) dp [ i ][ x ] = min ( dp [ i ][ x ], dp [ i - 1 ][ j ] + cost [ k ]); } } } return ! printf ( \"%d \\n \" , dp [ N - 1 ][ 0 ]); } \u9996\u5148 val[1\uff5e4] val[1\uff5e4] \u8868\u793a\u4e861\u00d71\u52304\u00d74\u7684\u65b9\u683c\u586b\u5145\u7684\u8f6e\u5ed3\u7ebf\u5f62\u72b6 \u7136\u540e\u9884\u5904\u7406\u4e2d\u7684\u4e00\u4e2a nxt \u6570\u7ec4\u662f\u771f\u7684\u7cbe\u9ad3\uff0c net[m][p] net[m][p] \u8868\u793a\u7684\u662f\u628am\u72b6\u6001\u7ecf\u8fc7p\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u72b6\u6001\uff0cp\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u7684\u4ee3\u4ef7\u4e3a cost[p] cost[p] \uff0c\u7531\u4e8e\u72b6\u538bdp\u8fd9\u79cd\u4e1c\u897f\u771f\u7684\u662f\u4e0d\u80fd\u8868\u793a\u5f88\u591a\u72b6\u6001\uff0c\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u4e5f\u4f1a\u5f88\u5c0f\uff0c\u8fd9\u6837\u7684\u9884\u5904\u7406\u4e0d\u4ec5\u53ef\u4ee5\u5f88\u597d\u7684\u63d0\u9ad8\u4ee3\u7801\u8fd0\u884c\u6548\u7387\u8fd8\u53ef\u4ee5\u51cf\u4f4e\u6211\u4eec\u7684\u7f16\u5199\u96be\u5ea6\u3002 \u6ce8\u610f\u4ed6\u8fd9\u91cc\u8f6c\u79fb\u65b9\u5f0f\u7684\u603b\u6570\u7684\u95ee\u9898\uff0c\u5176\u5b9e\u6211\u4eec\u8bf416\u4e2a\u683c\u5b50\u75281~4\u7684\u65b9\u683c\u586b\u6ee1\u6700\u591a\u751a\u81f3\u9700\u898116\u4e2a1*1\uff0c\u4f46\u662f4\u4e2a1\u00d7 1\u5fc5\u7136\u662f\u53ea\u4e0e\u524d\u4e00\u5217\u76f8\u5173\u8054\uff0c\u6240\u4ee5\u6700\u591a4\u4e2a\u5c31\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u95ee\u9898p\u7684\u72b6\u6001\u6570\u5c31\u662f 1\u00d72\u00d73\u00d74=24 1\u00d72\u00d73\u00d74=24 \u79cd\uff0c\u867d\u7136\u4e0d\u660e\u767d\u4ed6\u4e3a\u4f55\u8981\u5199\u6210120\u79cd\u4f46\u662f\u8fd9\u4e2anxt\u6570\u7ec4\u7684\u4f18\u8d8a\u6027\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u7b97\u540e\u9762\u7684p\u4e0d\u505a\u5904\u7406\uff0c\u5b83\u4ecd\u7136\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3anxt\u6570\u7ec4\u9ed8\u8ba4\u6307\u54110\uff0c\u518d\u600e\u4e48\u778e\u5f04\u5b83\u6700\u7ec80\u65e2\u4e0d\u662f\u7b54\u6848\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u4e2d\u95f4\u72b6\u6001\uff0c\u540c\u65f6\u4ee3\u4ef7\u4e5f\u662f0\u3002 \u7136\u540e\u53ef\u4ee5\u8bf4\u540e\u9762\u968f\u4fbf\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u90fd\u662f\u53ef\u4ee5\u5199\u7684\u4e86\uff0c\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002 4\u3001\u63d2\u5934dp Link \u7b49\u54ea\u5929\u4f1a\u624b\u6495\u4e86\u518d\u5199 \u5927\u6982\u6b65\u9aa4\u662f\uff1a\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf->\u8bbe\u8ba1\u63d2\u5934\u7f16\u7801->\u8003\u8651hashmap\u7684\u5b58\u50a8->\u8bbe\u8ba1\u72b6\u6001\u8f6c\u79fb->\u5f00\u59cb\u4e0a\u624b \u8fd9\u4e2a\u7b97\u6cd5\u8ba9\u6211\u89c9\u5f97\u5728\u505a\u7a0b\u5e8f\u8bbe\u8ba1\u800c\u4e0d\u662f\u7b97\u6cd5\u8bbe\u8ba1\u3002 5\u3001\u72b6\u538bdp\u5176\u4ed6\u7ec6\u8282 Link \u987a\u5e8f\u95ee\u9898\uff1a \u4f8b\u9898\uff1a https://www.cometoj.com/contest/52/problem/C \u5f88\u7cbe\u9ad3\u7684\u4e00\u9898\uff0c\u6c42\u89e3\u6240\u6709\u5408\u6cd5\u6392\u5217\u7684\u9006\u5e8f\u5bf9 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u7684\u6743\u503c\u548c \u672c\u6765\u72b6\u538b\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u76f8\u5f53\u56f0\u96be\uff0c\u56e0\u4e3a\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u5e26\u987a\u5e8f\u7684\u9009\u62e9\u95ee\u9898\uff0c\u4e00\u822c\u6765\u8bb2\u66b4\u529b\u662f\u9636\u4e58\u7ea7\u522b\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u79cd\u95ee\u9898\u5c31\u548c\u72b6\u538bdp\u89e3\u51b3\u65c5\u884c\u5546\u95ee\u9898\u4e00\u6837\uff0c\u5c06\u9636\u4e58\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u6307\u6570\u7ea7\u3002 \u5176\u5b9e\u53ef\u4ee5\u5bf9\u5df2\u9009\u62e9\u7684\u4f4d\u7f6e\u8fdb\u884c\u72b6\u538b\uff0c\u7136\u540e\u6dfb\u52a0\u5e8f\u5217\u5c31\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u8003\u8651\u987a\u5e8f\u3002 \u7528\u4e00\u4e2a dp[1<<maxn] dp[1<<maxn] \u8868\u793a\u67d0\u79cd\u9009\u62e9\u4e0b\u7684\u6743\u503c\u8d21\u732e \u8fd9\u6837\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u539f\u56e0\u662f\u5176\u5b9e\u5b83\u72b6\u6001\u4e2d1\u7684\u4e2a\u6570\u5c31\u662f\u5f53\u524d\u53d6\u7684\u6570\u7684\u5927\u5c0f-1\u3002 \u8003\u8651\u8f6c\u79fb\u65b9\u4e58\uff1a dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) \u5176\u4e2ds\u2019\u8868\u793as\u7684\u5b50\u96c6\uff0ct\u8868\u793as\u2019\u4e2d1\u7684\u4e2a\u6570\uff08\u5373\u5f53\u524d\u53d6\u7684\u6570-1\uff09\uff0cpre\u8868\u793a\u6bd4t\u5c0f\u7684\u67d0\u4e2a\u6570 \u770b\u4f3c\u4e0d\u53ef\u89e3\uff0c\u5176\u5b9e\u7531\u4e8e\u786e\u5b9a\u4e86\u4ece\u5c0f\u5230\u5927\u653e\u6570\u7684\u987a\u5e8f\uff0c\u5b83\u771f\u6b63\u6bcf\u79cd\u60c5\u51b5\u7684\u987a\u5e8f\u53cd\u800c\u53d8\u5f97\u4e0d\u90a3\u4e48\u91cd\u8981\u4e86\u3002 \u8bb0\u5f55 g[1<<maxn] g[1<<maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u7684\u53ef\u80fd\u6392\u5217\u4e2a\u6570 t[1<<maxn][maxn] t[1<<maxn][maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u4e0b\u67d0\u4f4d\u7f6e\u4e0a\u6240\u6709\u6392\u5217\u53ef\u80fd\u6027\u7684\u503c\u7684\u548c\u3002 \u7531\u4e8e\u4e0b\u4e00\u79cd\u72b6\u6001\u7684\u6570\u6bd4\u5df2\u6dfb\u52a0\u7684\u6570\u90fd\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u662f\u5305\u542b\u5728\u503c\u5185\u4e14\u5728\u5f53\u524d\u4f4d\u7f6e\u540e\u9762\u7684\u6570\u90fd\u662f\u9006\u5e8f\u5bf9\u3002 \u8f6c\u79fb\u5c31\u53d8\u7b80\u5355\u4e86 \u8bbes\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u4e3ay\uff0c\u679a\u4e3e\u5230\u7684\u4f4d\u7f6e\uff08 s\\bigoplus s' s\\bigoplus s' \uff09\u4e3ax \u5219\u6709 \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \u770b\u7684\u6709\u70b9\u4e91\u91cc\u96fe\u91cc\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709\u5b50\u96c6\u7684\u60c5\u51b5\u90fd\u7d2f\u52a0\u5230\u4e00\u8d77\uff0ct\u6570\u7ec4\u5c31\u662f\u7528\u6765\u50a8\u5b58\u6bcf\u4f4d\u4e0a\u5b50\u96c6\u6240\u6709\u60c5\u51b5\u7684\u6570\u5b57\u548c\u3002\u7136\u540e\u6bcf\u6b21\u628a\u5b83\u540e\u9762\u7684\u548c\u52a0\u5230dp\u6570\u7ec4\u5373\u53ef \u7ef4\u62a4g\u6570\u7ec4\u662f\u4e3a\u4e86\u66f4\u65b0t\u6570\u7ec4\uff0c\u6240\u4ee5\u6574\u4e2a\u4e00\u6765\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u5957\u8def\uff1a \u5bf9\u4e00\u4e2a\u5e26\u987a\u5e8f\u548c\u6743\u503c\u7684\u72b6\u538bdp\uff0c\u5f80\u5f80\u9700\u8981\u7ef4\u62a4\u4e09\u4e2a\u6743\u503c\uff1a\u72b6\u6001\u7684\u53ef\u80fd\u6027\u4e2a\u6570\u3001\u72b6\u6001\u4e0a\u6bcf\u4e00\u4f4d\u7684\u6743\u503c\u548c\u3001\u72b6\u6001\u672c\u8eab\u4ee3\u8868\u7684\u586b\u5145\u65b9\u5f0f\u3002 \u4e00\u9053\u65b0\u9898\uff1acodeforces 1152F1 \u5927\u610f\uff1a\u6709n\u4e2a\u7269\u54c1\uff0c\u4f60\u53ef\u4ee5\u9009k\u4e2a\uff0c\u6bcf\u6b21\u9009\u62e9\u7684\u662f\u4e4b\u524d\u6ca1\u6709\u9009\u8fc7\u800c\u4e14\u8bbe\u4e0a\u4e00\u4e2a\u7684\u4f4d\u7f6e\u4e3ax\uff0c\u5f53\u524d\u7269\u54c1\u53ea\u80fd\u5728 1~x+m 1~x+m \u4e4b\u95f4\u9009\u62e9\uff0c\u6c42\u9009k\u4e2a\u7684\u65b9\u6848\u6570 \u53c8\u662f\u6307\u5b9a\u4e86\u987a\u5e8f\uff0c\u5982\u679c\u786e\u5b9a\uff08\u5750\u6807\uff09\u4ece\u5c0f\u5f80\u5927\u53d6\uff0c\u90a3\u4e48\u5f53\u524d\u8981\u53d6\u7684\u70b9\u53ea\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5\u6709\u5173\uff0c\u8fd9\u4e2a\u70b9\u8981\u4e48\u76f4\u63a5\u662f\u6700\u540e\u4e00\u4e2a\u53d6\uff0c\u8981\u4e48\u4e4b\u524dm\u4f4d\u6709\u53d6\u8fc7\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u662f\u5b83\u4eec\u8f6c\u79fb\u8fc7\u6765\u3002 \u76f4\u63a5\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u4e3a\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5 dp[i][j][k] dp[i][j][k] \u8868\u793a\u524di\u4e2a\u7269\u54c1\uff0c\u53d6\u4e86j\u4e2a\uff0ci-k\u5230i\u7684\u53d6\u6570\u60c5\u51b5\u4e3ak\u7684\u65b9\u6848\u6570\u3002 dp[i + 1][j][stat>>1] += dp[i][j][stat] dp[i + 1][j][stat>>1] += dp[i][j][stat] \u8868\u793a\u4e0d\u53d6\u76f4\u63a5\u628a\u8f6e\u5ed3\u7ebf\u79fb\u4f4d dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) \u8868\u793a\u53d6\u6700\u540e\u4e00\u4e2a\uff0c\u65b9\u6848\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u60c5\u51b5\u76f8\u5173 \u6b64\u9898large\u7248\u672c\u7684n\u8303\u56f4\u6269\u5927\u5230\u4e861e9\uff0c\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u4e0d\u600e\u4e48\u5e38\u89c1\u7684\u64cd\u4f5c\uff1a\u8f6e\u5ed3\u7ebf+\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4e00\u822c\u6765\u8bb2\u8f6e\u5ed3\u7ebf\u7684\u7b2c\u4e00\u7ef4\u662f\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4ee3\u66ff\u7684\uff0c\u56e0\u4e3a\u5f80\u5f80\u786e\u5b9a\u4e86\u679a\u4e3e\u987a\u5e8f\u4e4b\u540e\u6bcf\u4e00\u4f4d\u5176\u5b9e\u5c31\u53ea\u4e0e\u524d\u4e00\u4f4d\u6709\u5173\uff0c\u6240\u4ee5\u51fa\u6210\u77e9\u9635\u5feb\u901f\u5e42\u4e5f\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u5f88\u602a\u5f02\u7684\u662f\u5c31\u7b97\u4e0d\u7b97\u7b2c\u4e00\u7ef4\uff0c\u5b83\u8fd8\u6709\u4e00\u7ef4\u53d6\u7684\u6570\u91cf\u548c\u4e00\u4e2amask\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\u77e9\u9635\u5feb\u901f\u5e42\u9700\u8981\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u77e9\u9635\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u4e09\u7ef4\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4f17\u6240\u5468\u77e5\u77e9\u9635\u5230\u4e8c\u7ef4\u9012\u63a8\u57fa\u672c\u65e0\u89e3\uff0c\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0c\u4f46\u662f\u672c\u9898\u7684m\u9650\u5236\u5728\u4e864\u4ee5\u5185\u800c\u4e14k\u572812\u4ee5\u5185\u3002\u5c06\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u6309mapindex\u7f29\u6210\u4e00\u7ef4\u4e4b\u540e\u77e9\u9635\u5927\u5c0f\u4e5f\u53ea\u6709 12*(1<<4) 12*(1<<4) \uff0c\u603b\u4f53\u590d\u6742\u5ea6\u5c31\u662f O(logn*(k*(1<<m))^3) O(logn*(k*(1<<m))^3) \uff0c\u8fd8\u662f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185 \u6b64\u9898large\u7248\u672c\u7684\u9012\u63a8\u77e9\u9635\u786e\u5b9e\u4e0d\u592a\u597d\u8ba1\u7b97\uff0c\u5177\u4f53\u65b9\u5f0f\u89c1 \u77e9\u9635\u5feb\u901f\u5e42 6\u3001\u5206\u8fa8\u72b6\u538bdp\u548c\u8d39\u7528\u6d41 Link \u4f17\u6240\u5468\u77e5\u8d39\u7528\u6d41\u548c\u72b6\u538bdp\u90fd\u662f\u7528\u6765\u89e3\u51b3\u5c0f\u8303\u56f4\u6570\u636e\u7684np\u95ee\u9898\u7684\u3002\u90a3\u4e48\u5f53\u62ff\u5230\u4e00\u4e2a\u9898\u770b\u7684\u6570\u636e\u8303\u56f420\u751a\u81f310\u4ee5\u5185\u600e\u6837\u5206\u8fa8\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002 \u72b6\u538bdp\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff1a\u53d6\u8fd8\u662f\u4e0d\u53d6\uff0c\u80fd\u4e0d\u80fd\u53d6\u3002 \u8d39\u7528\u6d41\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\uff1a\u4e00\u822c\u4e0d\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u95ee\u9898\u3002 \u90a3\u4e48\u9996\u5148\u5e94\u8be5\u770b\u662f\u5426\u662f\u7ebf\u6027\u6216\u987a\u5e8f\u65e0\u5173\u7684\u95ee\u9898\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u770b\u662f\u5426\u7b26\u5408\u53d6\u4e0d\u53d6\u768401\u89c4\u5219\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u72b6\u538b\u57fa\u672c\u65e0\u6cd5\u89e3\u51b3\uff0c\u8003\u8651\u8d39\u7528\u6d41\u548c\u7206\u641c\u3002","title":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#dp","text":"\u72b6\u6001\u538b\u7f29dp\u5e38\u7528\u6765\u5904\u7406\u91cf\u7ea7\u5f88\u5c0f\u7684np\u95ee\u9898 \u7531\u6b64\u8fd8\u53ef\u4ee5\u884d\u751f\u51fa\u8f6e\u5ed3\u7ebfdp\u53ca\u5728\u6b64\u4e4b\u4e0a\u7684\u63d2\u5934dp \u72b6\u6001\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u4e2d\u6709\u4e00\u4e9b\u5c0f\u64cd\u4f5c\u60f3\u5206\u4eab\u4e00\u4e0b\uff1a","title":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 //for(int i = 0; i != s; i = (i-s)&s) void print ( int x ) { if ( x < 2 ) printf ( \"%d\" , x ); else { print ( x >> 1 ); print ( x % 2 ); } } int main () { int s = 0 B1111 ; for ( int i = 0 ; i != s ; i = ( i - s ) & s ) { print ( i ); printf ( \" \\n \" ); } } /*\u8f93\u51fa\u4e3a\uff1a 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 */ \u5f88\u65b9\u4fbf\u800c\u4e14\u662f\u5347\u5e8f","title":"1\u3001\u679a\u4e3e\u4e8c\u8fdb\u5236\u72b6\u6001\u5b50\u96c6"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // \u6240\u6709\u4f4d\u4e3a1 ( 1 << n ) - 1 //\u6ce8\u610f\u4f4d\u8fd0\u7b97\u6bd4\u4e00\u6b21\u8fd0\u7b97\u4f18\u5148\u7ea7\u4f4e\u6240\u4ee5\u8981\u52a0\u62ec\u53f7 // \u5224\u65ad\u7b2ci\u4f4d stat & ( 1 << i ) // lowbit\uff0c\u72b6\u6001\u4e2d\u6700\u9760\u8fd1\u672b\u5c3e\u76841 i & - i // \u6c42\u72b6\u6001\u4e2d\u542b\u6709\u7684\u9009\u4e2d\u6570\u91cf\uff0c\u76f8\u5f53\u4e8e\u6c42\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570 int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) if ( stat & ( 1 << i )) c ++ ; // \u6216\u8005\u76f4\u63a5\u9884\u5904\u7406\uff0c\u8fd9\u91cc\u7528\u5230\u4e86lowbit for ( int i = 0 ; i < ( 1 << n ); ++ i ) c [ i ] = c [ i ^ ( i & - i )] + 1 ; // \u679a\u4e3e\u9012\u63a8\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u5b9e\u968f\u4fbf\u5199\u5c31\u662f\u4e86 for ( int i = 0 ; i < n ; ++ i ) { if (( stat & ( 1 << i )) == 0 ) { int newstat = stat | ( 1 << i ); } }","title":"2\u3001\u72b6\u6001\u7684\u5404\u79cd\u57fa\u672c\u64cd\u4f5c"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#3dp","text":"\u8bf4\u5230\u8f6e\u5ed3\u7ebfdp\u5c31\u662f\u90a3\u4e2a\u65b9\u683c\u586b\u5145\u95ee\u9898\uff0c\u6c42\u75281*2\u7684\u65b9\u683c\u586b\u6ee1n\u00d7m\u7684\u65b9\u6848\u6570\u3002 \u3010poj 2411\u3011 \u8fd9\u91cc\u662f\u57fa\u7840\u90e8\u5206\uff0c\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7 \u8bbe\u8ba1 dp[i][j][k] dp[i][j][k] \u662f\u7b2ci\u884c\u7b2cj\u5217\uff0c\u4e0a\u65b9\u72b6\u6001\u4e3ak\u7684\u65b9\u6848\u6570 \u6700\u540e\u6c42\u89e3\u7684\u662f dp[n][m][(1<<m)-1] dp[n][m][(1<<m)-1] 0000xxx xxxx000 \u8fd9\u6837\u4e00\u5f20\u56fe\uff0c\u8868\u793a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217\uff0c\u90a3\u4e48\u5b83\u6240\u9700\u8981\u7684\u72b6\u6001\u4e3a\u6807x\u7684\u4f4d\u7f6e\u662f\u5426\u586b\u5145\uff0c\u5f80\u4e0b\u9012\u63a8\u5c06\u7b2c2\u884c\u7b2c5\u5217\u586b\u5145\u4e00\u4e2a\u7ad6\u7740\u7684\u65b9\u683c\u7684\u8bdd\u5c31\u662f\uff1a 1 int newstat = stat >> 1 | ( 1 << m - 1 ) | 1 \u5176\u4e2d stat>>1 \u5c31\u662f\u628a\u72b6\u6001\u53d8\u6210\u4e86 00000xx xxxxx00 \u53bb\u6389\u4e86\u5934\u4f4d\uff0c\u589e\u52a0\u4e86\u4e00\u4f4d\uff0c\u8fd9\u5c31\u662f\u8f6e\u5ed3\u7ebfdp\uff0c\u7c7b\u4f3c\u4e00\u4e2a\u53d6\u7a97\u53e3shift\u7684\u8fc7\u7a0b\u3002\u6807x\u7684\u4f4d\u7f6e\u4e5f\u5c31\u662f\u8f6e\u5ed3\u7ebf\u3002 \u65b9\u683c\u586b\u5145\u95ee\u9898\u7684\u5177\u4f53\u89e3\u7b54\u662f\uff1a 1\u3001\u6bcf\u6b21\u679a\u4e3e\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u4e00\u662f\u6b64\u4f4d\u7f6e\u4e0d\u586b\uff0c\u4e8c\u662f\u6b64\u4f4d\u7f6e\u586b\u7ad6\u7740\u76841\u00d72\u4e5f\u5c31\u662f\u4e0a\u4e00\u884c\u540c\u5217\u548c\u6b64\u4f4d\u7f6e\uff0c\u4e09\u662f\u586b\u6a2a\u7740\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u5217\u540c\u884c\u548c\u6b64\u4f4d\u7f6e 2\u3001\u5982\u679c\u8f6e\u5ed3\u7ebf\u4e2d\u4e0a\u4e00\u884c\u540c\u5217\u7684\u4f4d\u7f6e\u4e3a\u7a7a\u5fc5\u987b\u8981\u586b\u4e0a\u4e0d\u7136\u4e4b\u540e\u5c31\u6ca1\u6709\u65b9\u6cd5\u53ef\u4ee5\u5c06\u90a3\u4e2a\u4f4d\u7f6e\u8865\u4e0a\u6240\u4ee5\u662f 1 2 3 4 5 if (( stat & 2 ) == 0 ) { int newstat = stat >> 1 | ( 1 << m - 1 ) | 1 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; //i,j-1\u770b\u60c5\u51b5\u6539\u52a8\uff0c\u662f\u5b83\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u4f4d\u7f6e continue ; } \u6ce8\u610f\u6b64\u65f6\u8981\u4e0d\u662f\u7b2c\u4e00\u884c\uff0c\u6839\u636e\u4f60\u4ece1\u8fd8\u662f0\u5f00\u59cb\u8bb0\u5f55\u884c\u6570\u53ef\u80fd\u6709\u8d1f\u4e0b\u6807\u7684\u98ce\u9669\u6240\u4ee5\u5224\u65ad\u4e00\u4e0bi\u662f\u5426\u5927\u4e8e\u5f00\u59cb\u884c\u4e0b\u6807 3\u3001\u5982\u679c\u4e0d\u662f\u4ee5\u4e0a\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e0d\u586b 1 2 int newstat = stat >> 1 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; 4\u3001\u5982\u679c\u5de6\u8fb9\u4e3a\u7a7a\u53ef\u4ee5\u586b 1 2 3 4 if (( stat & ( 1 << m - 1 )) == 0 ) { int newstat = stat >> 1 | 3 ; dp [ i ][ j ][ newstat ] += dp [ i ][ j - 1 ][ stat ]; } \u5f53\u7136\u4ee5\u4e0a\u53ea\u662f\u89e3\u91ca\u6027\u7684\u5199\u6cd5\uff0c\u771f\u8981\u505a\u9898\u7684\u8bdd\u663e\u7136\u53ef\u4ee5\u52a0\u4e2a\u6eda\u52a8\u6570\u7ec4\uff0c\u5b83\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4e0e\u4e0a\u4e00\u4e2a\u72b6\u6001\u76f8\u5173\uff0c\u800c\u4e14\u5199\u8d77\u6765\u53cd\u800c\u66f4\u7b80\u5355\u3002 \u6211\u4e60\u60ef\u6765\u8bb2\u662f\u628a\u6700\u8fdc\u4f4d\u770b\u505a0\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53f3\u6ea2 0000xxx xxxx000 \u7b80\u5355\u6765\u8bb2\u6bd4\u5982\u8fd9\u4e2a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217 \u90a3\u4e48\u5b83\u72b6\u6001\u5c31\u8981\u53bb\u8868\u793a\u6807\u201cx\u201d\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u628a\u5b83\u6b63\u4e0a\u65b9\uff08\u4e5f\u5c31\u662f1\uff0c5\uff09\u90a3\u4e2a\u70b9\u770b\u505a\u662f\u72b6\u6001\u7684\u6700\u540e\u4e00\u4f4d\u4e5f\u5c31\u662f0\u4f4d\uff0c\u5728\u5f80\u4e0b\u9012\u63a8\u7684\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u591f 1 int newstat = stat >> 1 | ( 1 << m - 1 ) \u76f4\u63a5\u5f97\u51fa\u4e0b\u4e00\u7ec4\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u8003\u8651\u6ea2\u51fa\u4f4d \u5982\u679c\u53cd\u7740\u8bbe\u8ba1\u72b6\u538b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u6765\u51cf\u53bb\u6ea2\u51fa\u4f4d \u4e00\u9053\u9898\uff1acodeforces 903F \u5927\u610f\uff1a\u7ed9\u4e00\u4e2a4\u00d7m\u7684\u77e9\u9635\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e3ax\uff0c\u9700\u8981\u75281\u00d71\uff0c 2\u00d72\uff0c3\u00d73\uff0c 4\u00d74\u7684\u683c\u5b50\u5c06\u5176\u586b\u5145\u4f7f\u5f97\u6240\u6709x\u4f4d\u7f6e\u90fd\u8981\u88ab\u8986\u76d6\u3002\u6bcf\u79cd\u683c\u5b50\u6709\u4e00\u4e2a\u4ee3\u4ef7\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002 \u663e\u7136\u6b64\u9898\u8f6e\u5ed3\u7ebf\u5927\u5c0f\u4e3a4*4\u4e5f\u5c31\u662f\u524d16\u4e2a\u683c\u5b50\uff0c\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u4e0b\u5f80\u4e0a\u9012\u63a8\u5373\u53ef\u3002 \u552f\u4e00\u4e0d\u597d\u5904\u7406\u7684\u662f\u8fd9\u4e2a\u4ee3\u4ef7\u95ee\u9898\u3002 \u5f3a\u70c8\u63a8\u8350\u8bfb\u4e00\u4e0bdotorya\u7684\u4ee3\u7801\uff0c\u7b80\u76f4\u795e\u4f5c\uff0c\u8bfb\u5230\u5c31\u662f\u8d5a\u5230 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 // https://codeforces.com/contest/903/submission/33174261 int A [ 5 ]; int val [ 5 ]; char in [ 4 ][ 1050 ]; int nxt [ 65536 ][ 120 ]; int cost [ 120 ]; int dp [ 1050 ][ 4096 ]; int main () { int N , i , j , k , l , m ; scanf ( \"%d\" , & N ); for ( i = 1 ; i <= 4 ; i ++ ) scanf ( \"%d\" , & A [ i ]); for ( i = 0 ; i < 4 ; i ++ ) scanf ( \"%s\" , in [ i ]); for ( i = 1 ; i <= 4 ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) for ( k = 0 ; k < i ; k ++ ) val [ i ] |= 1 << ( 4 * j + k ); } int p = 0 ; for ( i = 0 ; i <= 1 ; i ++ ) { for ( j = 0 ; j <= 2 ; j ++ ) { for ( k = 0 ; k <= 3 ; k ++ ) { for ( l = 0 ; l <= 4 ; l ++ ) { int totc = A [ i ] + A [ j ] + A [ k ] + A [ l ]; cost [ p ] = totc ; int v = ( val [ i ] << 3 ) | ( val [ j ] << 2 ) | ( val [ k ] << 1 ) | val [ l ]; for ( m = 0 ; m < 65536 ; m ++ ) nxt [ m ][ p ] = m & ~ v ; p ++ ; } } } } memset ( dp , 0x3f , sizeof ( dp )); int st = 0 ; for ( i = 0 ; i < 1 ; i ++ ) { for ( j = 0 ; j < 4 ; j ++ ) { st = st * 2 ; if ( in [ j ][ i ] == '*' ) st ++ ; } } for ( i = 0 ; i < 120 ; i ++ ) dp [ 0 ][ nxt [ st ][ i ]] = min ( dp [ 0 ][ nxt [ st ][ i ]], cost [ i ]); for ( i = 1 ; i < N ; i ++ ) { int v = 0 ; for ( j = 0 ; j < 4 ; j ++ ) v = v * 2 + ( int )( in [ j ][ i ] == '*' ); for ( j = 0 ; j < 4096 ; j ++ ) { if ( dp [ i - 1 ][ j ] > 1000000 ) continue ; l = j * 16 + v ; for ( k = 0 ; k < 120 ; k ++ ) { int x = nxt [ l ][ k ]; if ( x < 4096 ) dp [ i ][ x ] = min ( dp [ i ][ x ], dp [ i - 1 ][ j ] + cost [ k ]); } } } return ! printf ( \"%d \\n \" , dp [ N - 1 ][ 0 ]); } \u9996\u5148 val[1\uff5e4] val[1\uff5e4] \u8868\u793a\u4e861\u00d71\u52304\u00d74\u7684\u65b9\u683c\u586b\u5145\u7684\u8f6e\u5ed3\u7ebf\u5f62\u72b6 \u7136\u540e\u9884\u5904\u7406\u4e2d\u7684\u4e00\u4e2a nxt \u6570\u7ec4\u662f\u771f\u7684\u7cbe\u9ad3\uff0c net[m][p] net[m][p] \u8868\u793a\u7684\u662f\u628am\u72b6\u6001\u7ecf\u8fc7p\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u72b6\u6001\uff0cp\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u7684\u4ee3\u4ef7\u4e3a cost[p] cost[p] \uff0c\u7531\u4e8e\u72b6\u538bdp\u8fd9\u79cd\u4e1c\u897f\u771f\u7684\u662f\u4e0d\u80fd\u8868\u793a\u5f88\u591a\u72b6\u6001\uff0c\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u4e5f\u4f1a\u5f88\u5c0f\uff0c\u8fd9\u6837\u7684\u9884\u5904\u7406\u4e0d\u4ec5\u53ef\u4ee5\u5f88\u597d\u7684\u63d0\u9ad8\u4ee3\u7801\u8fd0\u884c\u6548\u7387\u8fd8\u53ef\u4ee5\u51cf\u4f4e\u6211\u4eec\u7684\u7f16\u5199\u96be\u5ea6\u3002 \u6ce8\u610f\u4ed6\u8fd9\u91cc\u8f6c\u79fb\u65b9\u5f0f\u7684\u603b\u6570\u7684\u95ee\u9898\uff0c\u5176\u5b9e\u6211\u4eec\u8bf416\u4e2a\u683c\u5b50\u75281~4\u7684\u65b9\u683c\u586b\u6ee1\u6700\u591a\u751a\u81f3\u9700\u898116\u4e2a1*1\uff0c\u4f46\u662f4\u4e2a1\u00d7 1\u5fc5\u7136\u662f\u53ea\u4e0e\u524d\u4e00\u5217\u76f8\u5173\u8054\uff0c\u6240\u4ee5\u6700\u591a4\u4e2a\u5c31\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u95ee\u9898p\u7684\u72b6\u6001\u6570\u5c31\u662f 1\u00d72\u00d73\u00d74=24 1\u00d72\u00d73\u00d74=24 \u79cd\uff0c\u867d\u7136\u4e0d\u660e\u767d\u4ed6\u4e3a\u4f55\u8981\u5199\u6210120\u79cd\u4f46\u662f\u8fd9\u4e2anxt\u6570\u7ec4\u7684\u4f18\u8d8a\u6027\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u7b97\u540e\u9762\u7684p\u4e0d\u505a\u5904\u7406\uff0c\u5b83\u4ecd\u7136\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3anxt\u6570\u7ec4\u9ed8\u8ba4\u6307\u54110\uff0c\u518d\u600e\u4e48\u778e\u5f04\u5b83\u6700\u7ec80\u65e2\u4e0d\u662f\u7b54\u6848\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u4e2d\u95f4\u72b6\u6001\uff0c\u540c\u65f6\u4ee3\u4ef7\u4e5f\u662f0\u3002 \u7136\u540e\u53ef\u4ee5\u8bf4\u540e\u9762\u968f\u4fbf\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u90fd\u662f\u53ef\u4ee5\u5199\u7684\u4e86\uff0c\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002","title":"3\u3001\u8f6e\u5ed3\u7ebfdp\u5165\u95e8"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#4dp","text":"\u7b49\u54ea\u5929\u4f1a\u624b\u6495\u4e86\u518d\u5199 \u5927\u6982\u6b65\u9aa4\u662f\uff1a\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf->\u8bbe\u8ba1\u63d2\u5934\u7f16\u7801->\u8003\u8651hashmap\u7684\u5b58\u50a8->\u8bbe\u8ba1\u72b6\u6001\u8f6c\u79fb->\u5f00\u59cb\u4e0a\u624b \u8fd9\u4e2a\u7b97\u6cd5\u8ba9\u6211\u89c9\u5f97\u5728\u505a\u7a0b\u5e8f\u8bbe\u8ba1\u800c\u4e0d\u662f\u7b97\u6cd5\u8bbe\u8ba1\u3002","title":"4\u3001\u63d2\u5934dp"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#5dp","text":"\u987a\u5e8f\u95ee\u9898\uff1a \u4f8b\u9898\uff1a https://www.cometoj.com/contest/52/problem/C \u5f88\u7cbe\u9ad3\u7684\u4e00\u9898\uff0c\u6c42\u89e3\u6240\u6709\u5408\u6cd5\u6392\u5217\u7684\u9006\u5e8f\u5bf9 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u7684\u6743\u503c\u548c \u672c\u6765\u72b6\u538b\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u76f8\u5f53\u56f0\u96be\uff0c\u56e0\u4e3a\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u5e26\u987a\u5e8f\u7684\u9009\u62e9\u95ee\u9898\uff0c\u4e00\u822c\u6765\u8bb2\u66b4\u529b\u662f\u9636\u4e58\u7ea7\u522b\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u79cd\u95ee\u9898\u5c31\u548c\u72b6\u538bdp\u89e3\u51b3\u65c5\u884c\u5546\u95ee\u9898\u4e00\u6837\uff0c\u5c06\u9636\u4e58\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u6307\u6570\u7ea7\u3002 \u5176\u5b9e\u53ef\u4ee5\u5bf9\u5df2\u9009\u62e9\u7684\u4f4d\u7f6e\u8fdb\u884c\u72b6\u538b\uff0c\u7136\u540e\u6dfb\u52a0\u5e8f\u5217\u5c31\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u8003\u8651\u987a\u5e8f\u3002 \u7528\u4e00\u4e2a dp[1<<maxn] dp[1<<maxn] \u8868\u793a\u67d0\u79cd\u9009\u62e9\u4e0b\u7684\u6743\u503c\u8d21\u732e \u8fd9\u6837\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u539f\u56e0\u662f\u5176\u5b9e\u5b83\u72b6\u6001\u4e2d1\u7684\u4e2a\u6570\u5c31\u662f\u5f53\u524d\u53d6\u7684\u6570\u7684\u5927\u5c0f-1\u3002 \u8003\u8651\u8f6c\u79fb\u65b9\u4e58\uff1a dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) \u5176\u4e2ds\u2019\u8868\u793as\u7684\u5b50\u96c6\uff0ct\u8868\u793as\u2019\u4e2d1\u7684\u4e2a\u6570\uff08\u5373\u5f53\u524d\u53d6\u7684\u6570-1\uff09\uff0cpre\u8868\u793a\u6bd4t\u5c0f\u7684\u67d0\u4e2a\u6570 \u770b\u4f3c\u4e0d\u53ef\u89e3\uff0c\u5176\u5b9e\u7531\u4e8e\u786e\u5b9a\u4e86\u4ece\u5c0f\u5230\u5927\u653e\u6570\u7684\u987a\u5e8f\uff0c\u5b83\u771f\u6b63\u6bcf\u79cd\u60c5\u51b5\u7684\u987a\u5e8f\u53cd\u800c\u53d8\u5f97\u4e0d\u90a3\u4e48\u91cd\u8981\u4e86\u3002 \u8bb0\u5f55 g[1<<maxn] g[1<<maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u7684\u53ef\u80fd\u6392\u5217\u4e2a\u6570 t[1<<maxn][maxn] t[1<<maxn][maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u4e0b\u67d0\u4f4d\u7f6e\u4e0a\u6240\u6709\u6392\u5217\u53ef\u80fd\u6027\u7684\u503c\u7684\u548c\u3002 \u7531\u4e8e\u4e0b\u4e00\u79cd\u72b6\u6001\u7684\u6570\u6bd4\u5df2\u6dfb\u52a0\u7684\u6570\u90fd\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u662f\u5305\u542b\u5728\u503c\u5185\u4e14\u5728\u5f53\u524d\u4f4d\u7f6e\u540e\u9762\u7684\u6570\u90fd\u662f\u9006\u5e8f\u5bf9\u3002 \u8f6c\u79fb\u5c31\u53d8\u7b80\u5355\u4e86 \u8bbes\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u4e3ay\uff0c\u679a\u4e3e\u5230\u7684\u4f4d\u7f6e\uff08 s\\bigoplus s' s\\bigoplus s' \uff09\u4e3ax \u5219\u6709 \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \u770b\u7684\u6709\u70b9\u4e91\u91cc\u96fe\u91cc\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709\u5b50\u96c6\u7684\u60c5\u51b5\u90fd\u7d2f\u52a0\u5230\u4e00\u8d77\uff0ct\u6570\u7ec4\u5c31\u662f\u7528\u6765\u50a8\u5b58\u6bcf\u4f4d\u4e0a\u5b50\u96c6\u6240\u6709\u60c5\u51b5\u7684\u6570\u5b57\u548c\u3002\u7136\u540e\u6bcf\u6b21\u628a\u5b83\u540e\u9762\u7684\u548c\u52a0\u5230dp\u6570\u7ec4\u5373\u53ef \u7ef4\u62a4g\u6570\u7ec4\u662f\u4e3a\u4e86\u66f4\u65b0t\u6570\u7ec4\uff0c\u6240\u4ee5\u6574\u4e2a\u4e00\u6765\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u5957\u8def\uff1a \u5bf9\u4e00\u4e2a\u5e26\u987a\u5e8f\u548c\u6743\u503c\u7684\u72b6\u538bdp\uff0c\u5f80\u5f80\u9700\u8981\u7ef4\u62a4\u4e09\u4e2a\u6743\u503c\uff1a\u72b6\u6001\u7684\u53ef\u80fd\u6027\u4e2a\u6570\u3001\u72b6\u6001\u4e0a\u6bcf\u4e00\u4f4d\u7684\u6743\u503c\u548c\u3001\u72b6\u6001\u672c\u8eab\u4ee3\u8868\u7684\u586b\u5145\u65b9\u5f0f\u3002 \u4e00\u9053\u65b0\u9898\uff1acodeforces 1152F1 \u5927\u610f\uff1a\u6709n\u4e2a\u7269\u54c1\uff0c\u4f60\u53ef\u4ee5\u9009k\u4e2a\uff0c\u6bcf\u6b21\u9009\u62e9\u7684\u662f\u4e4b\u524d\u6ca1\u6709\u9009\u8fc7\u800c\u4e14\u8bbe\u4e0a\u4e00\u4e2a\u7684\u4f4d\u7f6e\u4e3ax\uff0c\u5f53\u524d\u7269\u54c1\u53ea\u80fd\u5728 1~x+m 1~x+m \u4e4b\u95f4\u9009\u62e9\uff0c\u6c42\u9009k\u4e2a\u7684\u65b9\u6848\u6570 \u53c8\u662f\u6307\u5b9a\u4e86\u987a\u5e8f\uff0c\u5982\u679c\u786e\u5b9a\uff08\u5750\u6807\uff09\u4ece\u5c0f\u5f80\u5927\u53d6\uff0c\u90a3\u4e48\u5f53\u524d\u8981\u53d6\u7684\u70b9\u53ea\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5\u6709\u5173\uff0c\u8fd9\u4e2a\u70b9\u8981\u4e48\u76f4\u63a5\u662f\u6700\u540e\u4e00\u4e2a\u53d6\uff0c\u8981\u4e48\u4e4b\u524dm\u4f4d\u6709\u53d6\u8fc7\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u662f\u5b83\u4eec\u8f6c\u79fb\u8fc7\u6765\u3002 \u76f4\u63a5\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u4e3a\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5 dp[i][j][k] dp[i][j][k] \u8868\u793a\u524di\u4e2a\u7269\u54c1\uff0c\u53d6\u4e86j\u4e2a\uff0ci-k\u5230i\u7684\u53d6\u6570\u60c5\u51b5\u4e3ak\u7684\u65b9\u6848\u6570\u3002 dp[i + 1][j][stat>>1] += dp[i][j][stat] dp[i + 1][j][stat>>1] += dp[i][j][stat] \u8868\u793a\u4e0d\u53d6\u76f4\u63a5\u628a\u8f6e\u5ed3\u7ebf\u79fb\u4f4d dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) \u8868\u793a\u53d6\u6700\u540e\u4e00\u4e2a\uff0c\u65b9\u6848\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u60c5\u51b5\u76f8\u5173 \u6b64\u9898large\u7248\u672c\u7684n\u8303\u56f4\u6269\u5927\u5230\u4e861e9\uff0c\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u4e0d\u600e\u4e48\u5e38\u89c1\u7684\u64cd\u4f5c\uff1a\u8f6e\u5ed3\u7ebf+\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4e00\u822c\u6765\u8bb2\u8f6e\u5ed3\u7ebf\u7684\u7b2c\u4e00\u7ef4\u662f\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4ee3\u66ff\u7684\uff0c\u56e0\u4e3a\u5f80\u5f80\u786e\u5b9a\u4e86\u679a\u4e3e\u987a\u5e8f\u4e4b\u540e\u6bcf\u4e00\u4f4d\u5176\u5b9e\u5c31\u53ea\u4e0e\u524d\u4e00\u4f4d\u6709\u5173\uff0c\u6240\u4ee5\u51fa\u6210\u77e9\u9635\u5feb\u901f\u5e42\u4e5f\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u5f88\u602a\u5f02\u7684\u662f\u5c31\u7b97\u4e0d\u7b97\u7b2c\u4e00\u7ef4\uff0c\u5b83\u8fd8\u6709\u4e00\u7ef4\u53d6\u7684\u6570\u91cf\u548c\u4e00\u4e2amask\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\u77e9\u9635\u5feb\u901f\u5e42\u9700\u8981\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u77e9\u9635\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u4e09\u7ef4\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4f17\u6240\u5468\u77e5\u77e9\u9635\u5230\u4e8c\u7ef4\u9012\u63a8\u57fa\u672c\u65e0\u89e3\uff0c\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0c\u4f46\u662f\u672c\u9898\u7684m\u9650\u5236\u5728\u4e864\u4ee5\u5185\u800c\u4e14k\u572812\u4ee5\u5185\u3002\u5c06\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u6309mapindex\u7f29\u6210\u4e00\u7ef4\u4e4b\u540e\u77e9\u9635\u5927\u5c0f\u4e5f\u53ea\u6709 12*(1<<4) 12*(1<<4) \uff0c\u603b\u4f53\u590d\u6742\u5ea6\u5c31\u662f O(logn*(k*(1<<m))^3) O(logn*(k*(1<<m))^3) \uff0c\u8fd8\u662f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185 \u6b64\u9898large\u7248\u672c\u7684\u9012\u63a8\u77e9\u9635\u786e\u5b9e\u4e0d\u592a\u597d\u8ba1\u7b97\uff0c\u5177\u4f53\u65b9\u5f0f\u89c1 \u77e9\u9635\u5feb\u901f\u5e42","title":"5\u3001\u72b6\u538bdp\u5176\u4ed6\u7ec6\u8282"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#6dp","text":"\u4f17\u6240\u5468\u77e5\u8d39\u7528\u6d41\u548c\u72b6\u538bdp\u90fd\u662f\u7528\u6765\u89e3\u51b3\u5c0f\u8303\u56f4\u6570\u636e\u7684np\u95ee\u9898\u7684\u3002\u90a3\u4e48\u5f53\u62ff\u5230\u4e00\u4e2a\u9898\u770b\u7684\u6570\u636e\u8303\u56f420\u751a\u81f310\u4ee5\u5185\u600e\u6837\u5206\u8fa8\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002 \u72b6\u538bdp\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff1a\u53d6\u8fd8\u662f\u4e0d\u53d6\uff0c\u80fd\u4e0d\u80fd\u53d6\u3002 \u8d39\u7528\u6d41\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\uff1a\u4e00\u822c\u4e0d\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u95ee\u9898\u3002 \u90a3\u4e48\u9996\u5148\u5e94\u8be5\u770b\u662f\u5426\u662f\u7ebf\u6027\u6216\u987a\u5e8f\u65e0\u5173\u7684\u95ee\u9898\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u770b\u662f\u5426\u7b26\u5408\u53d6\u4e0d\u53d6\u768401\u89c4\u5219\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u72b6\u538b\u57fa\u672c\u65e0\u6cd5\u89e3\u51b3\uff0c\u8003\u8651\u8d39\u7528\u6d41\u548c\u7206\u641c\u3002","title":"6\u3001\u5206\u8fa8\u72b6\u538bdp\u548c\u8d39\u7528\u6d41"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/","text":"\u77e9\u9635\u5feb\u901f\u5e42 Link \u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u80fd\u7528\u6eda\u52a8\u4f18\u5316\u7684\u524d\u540e\u9879\u5173\u8054\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff0c\u800c\u4e14\u4e00\u822c\u9012\u63a8\u9879\u6570\u8fc7\u5927\u4f7f\u7528\u666e\u901a\u679a\u4e3e\u4e0d\u80fd\u89e3\u51b3\u3002 \u590d\u6742\u5ea6\uff1a \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u57fa\u672c\u601d\u60f3\u548c\u524d\u7f6e\u6280\u80fd\uff1a\u77e9\u9635\u4e58\u6cd5 1\u3001\u77e9\u9635\u5feb\u901f\u5e42\u7684\u57fa\u672c\u8fc7\u7a0b Link \u6784\u9020\u521d\u59cb\u77e9\u9635 \u6784\u9020\u9012\u63a8\u77e9\u9635 \u9012\u63a8\u77e9\u9635\u4f7f\u7528\u5feb\u901f\u5e42\u7b97\u6cd5\u9012\u63a8\u51fa\u7ed3\u679c\u77e9\u9635 \u521d\u59cb\u77e9\u9635\u4e0e\u7ed3\u679c\u77e9\u9635\u76f8\u4e58\u5f97\u5230\u6700\u7ec8\u7ed3\u679c \u51e0\u5927\u7279\u70b9 \u521d\u59cb\u77e9\u9635\u53ea\u6709\u4e00\u884c\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u4e00\u5217\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7684\u65b9\u4fbf\u6027\u548c\u4e60\u60ef\u95ee\u9898\u5e38\u91c7\u7528\u4e00\u884c\uff09\uff0c\u5217\u6570\u7531\u9012\u63a8\u5f0f\u51b3\u5b9a \u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\uff0c\u884c\u5217\u6570\u4e0e\u521d\u59cb\u77e9\u9635\u5217\u6570\u76f8\u540c \u5feb\u901f\u5e42\u771f\u7684\u662f\u5feb\u901f\u5e42\uff0c\u5c31\u662f\u6309\u7167\u500d\u589e\u7684\u601d\u60f3\u5c06\u9012\u63a8\u77e9\u9635\u53d8\u6210n\u6b21\u65b9\uff0c\u7531\u4e8e\u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\u6240\u4ee5\u662f\u5b58\u5728\u6b21\u65b9\u7684\u3002 \u7531\u4e8e\u5feb\u901f\u5e42\u4e00\u5f00\u59cb\u9700\u8981\u4e00\u4e2a\u5e7a\u5143\u4f5c\u4e3a\u521d\u59cb\u7ed3\u679c\uff0c\u5e38\u5e38\u76f4\u63a5\u628a\u521d\u59cb\u77e9\u9635\u66ff\u6362\u4e0a\u53bb\uff0c\u5e26\u5165\u8ba1\u7b97\uff0c\u6700\u7ec8\u5feb\u901f\u5e42\u7684\u7ed3\u679c\u5c31\u662f\u89e3\u3002 2\u3001\u4f8b\u9898 Link \u6c42\u5927fib\u6570 Link \u4f17\u6240\u5468\u77e5 fib[i]=fib[i-1]+fib[i-2] \uff0c\u6240\u4ee5\u76f4\u63a5\u6784\u9020\u4e0a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u50cf\u8fd9\u79cd\u7b80\u5355\u7684\u52a0\u51cf\u9012\u63a8\u7684\u8bdd\u7ef4\u6570\u5c31\u53ef\u4ee5\u7b49\u4e8e\u9012\u63a8\u5f0f\u4e2d\u7684\u9879\u6570 \u521d\u59cb\u77e9\u9635 fib[0] = 1, fib[1] = 1 \uff0c\u9012\u63a8\u77e9\u9635 \\begin{bmatrix} 0&1\\\\ 1&1\\\\ \\end{bmatrix} \u90fd\u77e5\u9053\u5de6\u884c\u4e58\u53f3\u5217\uff0c\u6240\u4ee5\u53f3\u8fb9\u7684\u7b2c\u4e00\u5217\u548c\u5de6\u8fb9\u7684\u7b2c\u4e00\u884c\u5c31\u6784\u6210\u4e86\u4e0b\u4e00\u4e2a\u9012\u63a8\u7684\u6570\uff0c\u4ece fib[0] fib[1] \u53d8\u6210 fib[1] fib[2] \uff0c\u8fd9\u6837\u4ee5\u6765\u5c31\u53ef\u4ee5\u5199\u51fa\u9012\u63a8\u77e9\u9635\u4e86\u3002 \u6c42 f[n] = f[n-1] + n^3 f[n] = f[n-1] + n^3 Link \u5177\u4f53\u662f\u4e0d\u662f\u6211\u4e5f\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f46\u662f\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff0c\u50cf\u8fd9\u79cd\u5e26\u975e\u5e38\u6570\u6b21\u65b9\u7684\u4e1c\u897f\u8bb2\u4e2a\u9053\u7406\u786e\u5b9e\u6bd4\u8f83\u96be\u6784\u9020\u9012\u63a8\u77e9\u9635 \u7531\u4e8e (n+1)^3=n^3+3*n^2+3*n+1 (n+1)^3=n^3+3*n^2+3*n+1 \uff0c\u4e0d\u4f1a\u53ef\u4ee5\u5b66\u4e8c\u9879\u5f0f\u5b9a\u7406 \u6784\u9020 \\begin{cases} p[n]=1 \\\\ g1[n]=g1[n-1]*3+p[n-1] \\\\ g2[n]=g2[n-1]*3+g1[n-1] \\\\ g3[n]=g3[n-1]+g2[n] \\\\ f[n]=f[n-1]+g3[n-1] \\end{cases} \u5373\u53ef\u3002 \u6c42\u9ad8\u7ef4\u77e9\u9635\u7684\u77e9\u9635\u5feb\u901f\u5e42 Link \u5177\u4f53\u6765\u8bb2\u662f\u521d\u59cb\u77e9\u9635\u4e0d\u6b62\u4e00\u7ef4 \u6709\u6ca1\u6709\u89e3\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u8fd9\u662f\u4e2a\u663e\u7136\u4e0d\u662f\u51e0\u4e2a\u5c0f\u65f6\u80fd\u5199\u51fa\u6765\u7684\u7b97\u6cd5\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u6210\u6307\u6570\u7ea7\u66b4\u6da8 \u5177\u4f53\u6765\u8bb2\u5c31\u662f\u628a\u4e8c\u7ef4\u53d8\u6210\u4e00\u7ef4\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u7f16\u53f7\u4e4b\u540e\u5c06\u77e9\u9635\u5316\u6210\u4e00\u7ef4\u518d\u6c42\u89e3\u3002(codeforces 1152F2) 3\u3001\u6a21\u677f Link \u4e00\u5957\u81ea\u7528\u7684\u6a21\u677f\uff0c\u4e0d\u7b97\u7b80\u4fbf\u4f46\u662f\u6bd5\u7adf\u4eb2\u624b\u5199\u7684\u5f88\u719f\u6089\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 const int maxn = 10 ; const int mod = 1e9 + 7 ; int sz ; struct matrix { ll gg [ maxn ][ maxn ]; matrix () { memset ( gg , 0 , sizeof ( gg ));} void show () { printf ( \"* \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%lld \" , gg [ i ][ j ]); } printf ( \" \\n \" ); } } int tr () { int res = 0 ; // for (int i = 0; i < n; ++i) { // res += gg[i][i]; // } return res ; } } t1 , res ; int n , m , k ; //a * b\uff0c x\u4e3aa\u7684\u5217\u6570\uff0c y\u4e3ab\u7684\u884c\u6570\uff0ck\u4e3aa\u7684\u884c\u548cb\u7684\u5217\u6570 matrix multiply ( matrix a , matrix b , int x , int y , int kk ) { matrix temp ; //\u6784\u9020\u51fd\u6570\u6e05\u96f6 memset ( temp . gg , 0 , sizeof ( temp . gg )); for ( int i = 0 ; i < x ; ++ i ) { for ( int j = 0 ; j < y ; ++ j ) { for ( int k = 0 ; k < kk ; ++ k ) { temp . gg [ i ][ j ] = ( temp . gg [ i ][ j ] + a . gg [ i ][ k ] * b . gg [ k ][ j ]) % mod ; } } } return temp ; } void quickSolve ( ll k ) { while ( k > 0 ) { if ( k & 1 ) { res = multiply ( res , t1 , 1 , sz , sz ); } t1 = multiply ( t1 , t1 , sz , sz , sz ); k >>= 1 ; } }","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#_1","text":"\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u80fd\u7528\u6eda\u52a8\u4f18\u5316\u7684\u524d\u540e\u9879\u5173\u8054\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff0c\u800c\u4e14\u4e00\u822c\u9012\u63a8\u9879\u6570\u8fc7\u5927\u4f7f\u7528\u666e\u901a\u679a\u4e3e\u4e0d\u80fd\u89e3\u51b3\u3002 \u590d\u6742\u5ea6\uff1a \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u57fa\u672c\u601d\u60f3\u548c\u524d\u7f6e\u6280\u80fd\uff1a\u77e9\u9635\u4e58\u6cd5","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#1","text":"\u6784\u9020\u521d\u59cb\u77e9\u9635 \u6784\u9020\u9012\u63a8\u77e9\u9635 \u9012\u63a8\u77e9\u9635\u4f7f\u7528\u5feb\u901f\u5e42\u7b97\u6cd5\u9012\u63a8\u51fa\u7ed3\u679c\u77e9\u9635 \u521d\u59cb\u77e9\u9635\u4e0e\u7ed3\u679c\u77e9\u9635\u76f8\u4e58\u5f97\u5230\u6700\u7ec8\u7ed3\u679c \u51e0\u5927\u7279\u70b9 \u521d\u59cb\u77e9\u9635\u53ea\u6709\u4e00\u884c\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u4e00\u5217\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7684\u65b9\u4fbf\u6027\u548c\u4e60\u60ef\u95ee\u9898\u5e38\u91c7\u7528\u4e00\u884c\uff09\uff0c\u5217\u6570\u7531\u9012\u63a8\u5f0f\u51b3\u5b9a \u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\uff0c\u884c\u5217\u6570\u4e0e\u521d\u59cb\u77e9\u9635\u5217\u6570\u76f8\u540c \u5feb\u901f\u5e42\u771f\u7684\u662f\u5feb\u901f\u5e42\uff0c\u5c31\u662f\u6309\u7167\u500d\u589e\u7684\u601d\u60f3\u5c06\u9012\u63a8\u77e9\u9635\u53d8\u6210n\u6b21\u65b9\uff0c\u7531\u4e8e\u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\u6240\u4ee5\u662f\u5b58\u5728\u6b21\u65b9\u7684\u3002 \u7531\u4e8e\u5feb\u901f\u5e42\u4e00\u5f00\u59cb\u9700\u8981\u4e00\u4e2a\u5e7a\u5143\u4f5c\u4e3a\u521d\u59cb\u7ed3\u679c\uff0c\u5e38\u5e38\u76f4\u63a5\u628a\u521d\u59cb\u77e9\u9635\u66ff\u6362\u4e0a\u53bb\uff0c\u5e26\u5165\u8ba1\u7b97\uff0c\u6700\u7ec8\u5feb\u901f\u5e42\u7684\u7ed3\u679c\u5c31\u662f\u89e3\u3002","title":"1\u3001\u77e9\u9635\u5feb\u901f\u5e42\u7684\u57fa\u672c\u8fc7\u7a0b"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#2","text":"","title":"2\u3001\u4f8b\u9898"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#fib","text":"\u4f17\u6240\u5468\u77e5 fib[i]=fib[i-1]+fib[i-2] \uff0c\u6240\u4ee5\u76f4\u63a5\u6784\u9020\u4e0a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u50cf\u8fd9\u79cd\u7b80\u5355\u7684\u52a0\u51cf\u9012\u63a8\u7684\u8bdd\u7ef4\u6570\u5c31\u53ef\u4ee5\u7b49\u4e8e\u9012\u63a8\u5f0f\u4e2d\u7684\u9879\u6570 \u521d\u59cb\u77e9\u9635 fib[0] = 1, fib[1] = 1 \uff0c\u9012\u63a8\u77e9\u9635 \\begin{bmatrix} 0&1\\\\ 1&1\\\\ \\end{bmatrix} \u90fd\u77e5\u9053\u5de6\u884c\u4e58\u53f3\u5217\uff0c\u6240\u4ee5\u53f3\u8fb9\u7684\u7b2c\u4e00\u5217\u548c\u5de6\u8fb9\u7684\u7b2c\u4e00\u884c\u5c31\u6784\u6210\u4e86\u4e0b\u4e00\u4e2a\u9012\u63a8\u7684\u6570\uff0c\u4ece fib[0] fib[1] \u53d8\u6210 fib[1] fib[2] \uff0c\u8fd9\u6837\u4ee5\u6765\u5c31\u53ef\u4ee5\u5199\u51fa\u9012\u63a8\u77e9\u9635\u4e86\u3002","title":"\u6c42\u5927fib\u6570"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#fn-fn-1-n3fn-fn-1-n3","text":"\u5177\u4f53\u662f\u4e0d\u662f\u6211\u4e5f\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f46\u662f\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff0c\u50cf\u8fd9\u79cd\u5e26\u975e\u5e38\u6570\u6b21\u65b9\u7684\u4e1c\u897f\u8bb2\u4e2a\u9053\u7406\u786e\u5b9e\u6bd4\u8f83\u96be\u6784\u9020\u9012\u63a8\u77e9\u9635 \u7531\u4e8e (n+1)^3=n^3+3*n^2+3*n+1 (n+1)^3=n^3+3*n^2+3*n+1 \uff0c\u4e0d\u4f1a\u53ef\u4ee5\u5b66\u4e8c\u9879\u5f0f\u5b9a\u7406 \u6784\u9020 \\begin{cases} p[n]=1 \\\\ g1[n]=g1[n-1]*3+p[n-1] \\\\ g2[n]=g2[n-1]*3+g1[n-1] \\\\ g3[n]=g3[n-1]+g2[n] \\\\ f[n]=f[n-1]+g3[n-1] \\end{cases} \u5373\u53ef\u3002","title":"\u6c42f[n] = f[n-1] + n^3f[n] = f[n-1] + n^3"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#_2","text":"\u5177\u4f53\u6765\u8bb2\u662f\u521d\u59cb\u77e9\u9635\u4e0d\u6b62\u4e00\u7ef4 \u6709\u6ca1\u6709\u89e3\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u8fd9\u662f\u4e2a\u663e\u7136\u4e0d\u662f\u51e0\u4e2a\u5c0f\u65f6\u80fd\u5199\u51fa\u6765\u7684\u7b97\u6cd5\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u6210\u6307\u6570\u7ea7\u66b4\u6da8 \u5177\u4f53\u6765\u8bb2\u5c31\u662f\u628a\u4e8c\u7ef4\u53d8\u6210\u4e00\u7ef4\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u7f16\u53f7\u4e4b\u540e\u5c06\u77e9\u9635\u5316\u6210\u4e00\u7ef4\u518d\u6c42\u89e3\u3002(codeforces 1152F2)","title":"\u6c42\u9ad8\u7ef4\u77e9\u9635\u7684\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#3","text":"\u4e00\u5957\u81ea\u7528\u7684\u6a21\u677f\uff0c\u4e0d\u7b97\u7b80\u4fbf\u4f46\u662f\u6bd5\u7adf\u4eb2\u624b\u5199\u7684\u5f88\u719f\u6089\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 const int maxn = 10 ; const int mod = 1e9 + 7 ; int sz ; struct matrix { ll gg [ maxn ][ maxn ]; matrix () { memset ( gg , 0 , sizeof ( gg ));} void show () { printf ( \"* \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) { printf ( \"%lld \" , gg [ i ][ j ]); } printf ( \" \\n \" ); } } int tr () { int res = 0 ; // for (int i = 0; i < n; ++i) { // res += gg[i][i]; // } return res ; } } t1 , res ; int n , m , k ; //a * b\uff0c x\u4e3aa\u7684\u5217\u6570\uff0c y\u4e3ab\u7684\u884c\u6570\uff0ck\u4e3aa\u7684\u884c\u548cb\u7684\u5217\u6570 matrix multiply ( matrix a , matrix b , int x , int y , int kk ) { matrix temp ; //\u6784\u9020\u51fd\u6570\u6e05\u96f6 memset ( temp . gg , 0 , sizeof ( temp . gg )); for ( int i = 0 ; i < x ; ++ i ) { for ( int j = 0 ; j < y ; ++ j ) { for ( int k = 0 ; k < kk ; ++ k ) { temp . gg [ i ][ j ] = ( temp . gg [ i ][ j ] + a . gg [ i ][ k ] * b . gg [ k ][ j ]) % mod ; } } } return temp ; } void quickSolve ( ll k ) { while ( k > 0 ) { if ( k & 1 ) { res = multiply ( res , t1 , 1 , sz , sz ); } t1 = multiply ( t1 , t1 , sz , sz , sz ); k >>= 1 ; } }","title":"3\u3001\u6a21\u677f"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/","text":"kmp\u7b97\u6cd5 Link \u89c9\u5f97\u81ea\u5df1\u5b57\u7b26\u4e32\u592a\u83dc\u4e86\u8ddf\u7740\u7b97\u5bfc\u91cd\u5b66\u4e00\u904d \u7b97\u6cd5\u7b80\u8ff0 Link \u5229\u7528next\u6570\u7ec4\u7ebf\u6027\u7684\u89e3\u51b3\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898 \u5b9a\u4e49\u539f\u4e32 T[1...n] \uff0c\u6a21\u5f0f\u4e32 P\uff08pattern\uff09[1...m] \uff0c\u82e5\u51fa\u73b0 T[s+1...s+m] = P[1...m] \u5219\u79f0\u6b64\u4e3a\u4e00\u6b21\u6210\u529f\u7684\u5339\u914d\uff0cs\u79f0\u4f5c\u6709\u6548\u504f\u79fb\u3002 \u66b4\u529b\u590d\u6742\u5ea6\u662f O\uff08n\u00d7m\uff09 \u5373\u5bf9\u4e8e\u539f\u4e32\u7684\u6bcf\u4e2a\u5b50\u4e32\u505a\u4e00\u6b21\u5faa\u73af\u7684\u5339\u914d\u3002 \u7b97\u6cd5\u5b9e\u73b0 Link next\u6570\u7ec4\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u5f0f\u4e32 P \uff0c\u5b83\u7684\u524d i \u9879\u79f0\u4f5c P_i \uff0c next[i] \u5c31\u8868\u793a\u6700\u5927\u7684 next[i] \u4f7f\u5f97 P_{next[i]} \u662f P_i \u7684\u540e\u7f00\uff0c\u5b9a\u4e49 next[0] \u4e3a-1 \u4f8b\u5982\u4e32 ababaca \u7684next\u6570\u7ec41\u52307\u9879\u4e3a\uff1a 0012301 \u5df2\u77e5 P[1...q] \u4e0e T[s+1...s+q] \u5339\u914d\uff0c\u800c P[q+1] != T[s+q+1] \uff0c\u5219\u5c06 T \u540e\u79fb\u4e00\u4f4d\u7684\u540c\u65f6\u5c06 q \u53d8\u4e3a next[q] \u5373\u53ef\u53d1\u73b0 P[1...next[q]] \u4e0e T[s'+1, s'+k] \u5339\u914d\uff08\u5176\u4e2d s'+k = s+q \uff09\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5 O(m) \u9884\u5904\u7406 O(n) \u8ba1\u7b97\u7ed3\u679c\u4e86\u3002 getNext\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 int nex [ maxm ]; void getNext ( char * s , int len ) { int i = 0 , j = - 1 ; nex [ i ] = j ; while ( i < len ) { if ( j == - 1 || s [ i ] == s [ j ]) nex [ ++ i ] = ++ j ; else j = nex [ j ]; } } \u5339\u914d\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 // a\u4e3a\u539f\u4e32\uff0cb\u4e3a\u6a21\u5f0f\u4e32\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u6a21\u5f0f\u4e32\u7684\u4f4d\u7f6e\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1 int KMP ( char * a , char * b , int n , int m ) { getNext ( b , m ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( j == - 1 || a [ i ] == b [ j ]) ++ i , ++ j ; else j = nxt [ j ]; } return j == m ? i - m + 1 : - 1 ; } \u4f8b\u9898 Link \uff08\u7531\u4e8e\u672c\u6587\u64b0\u5199\u65f6vjudge\u6302\u4e86\uff0c\u6ca1\u6709\u5728vj\u4e0a\u6302\u9898\uff09 https://vjudge.net/contest/328570 luoguP3375 Link \u9898\u610f\uff1a\u6c42\u51fa\u6240\u6709\u6a21\u5f0f\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5e76\u8f93\u51fanext\u6570\u7ec4 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1atest.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/22/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} // nxt[0]\u8868\u793a\u5931\u914d\u5230\u5b8c\u5168\u4e0d\u5339\u914d int nxt [ maxn ]; void getNext ( char * s , int len ) { int i = 0 , j = - 1 ; nxt [ i ] = j ; while ( i < len ) { if ( j == - 1 || s [ i ] == s [ j ]) nxt [ ++ i ] = ++ j ; else j = nxt [ j ]; } } // a\u4e3a\u539f\u4e32\uff0cb\u4e3a\u6a21\u5f0f\u4e32\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u6a21\u5f0f\u4e32\u7684\u4f4d\u7f6e\uff08\u8d77\u70b9\u4e3a1\uff09\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1 int KMP ( char * a , char * b , int n , int m ) { getNext ( b , m ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( j == - 1 || a [ i ] == b [ j ]) ++ i , ++ j ; else j = nxt [ j ]; if ( j == m ) { printf ( \"%d \\n \" , i - m + 1 ); j = nxt [ j ]; } } return j == m ? i - m + 1 : - 1 ; } char s [ maxn ], p [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%s%s\" , s , p ); int lens = strlen ( s ), lenp = strlen ( p ); KMP ( s , p , lens , lenp ); for ( int i = 1 ; i <= lenp ; ++ i ) printf ( \"%d%c\" , nxt [ i ], i == lenp ? '\\n' : ' ' ); return 0 ; } A - Oulipo Link \u9898\u610f\uff1a\u6c42p\u5728s\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u9898\u89e3\uff1akmp\u626b\u626b\u626b O(n) B - Number Sequence Link \u9898\u610f\uff1a\u6c42p\u5728s\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807 \u9898\u89e3\uff1akmp\u626b\u5230\u7b2c\u4e00\u6b21j=m\u505c C - Period Link \u9898\u610f\uff1a\u7ed9\u5b9as\uff0c\u6c42s\u7684\u6bcf\u4e2a\u524d\u7f00\u7684\u6700\u5c0f\u5faa\u73af\u8282\u4f7f\u5f97\u4efb\u610f\u4e2a\u8fd9\u6837\u7684\u5faa\u73af\u8282\u5e76\u884c\u62fc\u6210\u8fd9\u4e2a\u524d\u7f00\uff0c\u5176\u4e2d\u524d\u7f00\u672c\u8eab\u4e0d\u7b97\u3002 \u9898\u89e3\uff1akmp\u6c42\u6700\u5c0f\u5faa\u73af\u8282\uff0c len - nxt[len] \u5c31\u662f\u8be5\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282\u5927\u5c0f\u3002\u5224\u4e00\u4e0b\u80fd\u6574\u9664\u5373\u662f\u89e3\u3002 D - Power Strings Link \u9898\u610f\uff1a\u7ed9\u5b9as\u6c42\u6700\u5927\u5faa\u73af\u6b21\u6570 \u9898\u89e3\uff1akmp\u6c42\u6700\u5c0f\u5faa\u73af\u8282 F - Cyclic Nacklace Link \u9898\u610f\uff1a\u6c42\u6700\u5c11\u8865\u591a\u5c11\u5b57\u7b26\u4f7f\u539f\u4e32\u6210\u4e3a\u5faa\u73af\u4e32 \u9898\u89e3\uff1a\u6c42\u51fa\u6700\u5c0f\u5faa\u73af\u8282\u7136\u540e\u968f\u4fbf\u5199\u4e00\u4e0b G - Simpsons\u2019 Hidden Talents Link \u9898\u610f\uff1a\u7ed9s\u548cp\u4e32\uff0c\u6c42p\u4e32\u7684\u524d\u7f00\u7b49\u4e8es\u7684\u540e\u7f00\u7684\u6700\u5927\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u6c42\u51fap\u4e32\u7684next\u6570\u7ec4\uff0c\u5bf9\u7740s\u8dd1\u4e00\u904d\uff0c\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u8f93\u51fa\u5f53\u524dj\u5373\u53ef\u3002 H - Milking Grid Link \u9898\u610f\uff1a\u7ed9\u4e8c\u7ef4\u4e32s\uff0c\u6c42\u6700\u5c0f\u7684\u5de6\u4e0a\u89d2\u77e9\u9635\u4f7f\u5f97\u5b83\u662f\u6574\u4e2a\u77e9\u9635\u7684\u4e00\u4e2a\u5faa\u73af\u8282\u3002 \u9898\u89e3\uff1a\u884c\u5217\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u8003\u8651\u5355\u7ef4\u7684\u4e32\u5373\u53ef\u3002\u7528hash\u5c06\u884c\u6216\u5217\u5904\u7406\u6210\u5355\u4e2a\u5b57\u7b26\u5373\u53ef\u3002\u6700\u5c0f\u503c\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002 I - Theme Section Link \u9898\u610f\uff1a\u7ed9\u4e32s\u6c42\u62c6\u5206\u5f62\u5982XAXBX\u7684\u6700\u957fX\u7684\u957f\u5ea6 \u9898\u89e3\uff1anxt\u6570\u7ec4\u6c42\u51fa\u6765\u540e\uff0c\u9996\u5c3e\u90fd\u662fX\u5373nxt\u4ece\u5c3e\u90e8\u5f80\u524d\u8df3\uff0c\u7136\u540e\u6c42\u51fa\u90a3\u6bb5\u533a\u95f4\u5185\u4e2d\u95f4\u6709nxt\u4e0e\u5f53\u524d\u957f\u5ea6\u76f8\u7b49\u7684\u70b9\u5373\u662f\u7b54\u6848\u3002 J - A Secret Link \u9898\u610f\uff1a\u7ed9s\u548cp\u6c42p\u7684\u6240\u6709\u540e\u7f00\u5728s\u4e2d\u51fa\u73b0\u7684\u4e2a\u6570\u00d7p\u7684\u540e\u7f00\u957f\u5ea6\u7684\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u5bf9s\u548cp\u90fd\u7ffb\u8f6c\uff0c\u6c42s\u7684\u6bcf\u4e2a\u524d\u7f00\u5bf9p\u7684\u524d\u7f00\u7684\u6700\u5927\u5339\u914d\u5ea6\uff0c\u4fdd\u5b58\u5728\u540e\u7f00\u6570\u7ec4\u4e2d\uff0c\u5bf9\u540e\u7f00\u6570\u7ec4\u5012\u7740\u5f80\u524d\u7ebf\u6027\u626b\u4e00\u6b21\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\uff0c\u56e0\u4e3a\u540e\u7f00\u7684i\u5982\u679c\u6709\u5339\u914d\u5fc5\u80fd\u5339\u914d\u5230nxt[i]\uff0c\u6240\u4ee5\u52a0\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u5904\u540e\u7f00\u6570\u7ec4\u53ea\u662f\u53d6\u5b83\u5b57\u9762\u610f\u601d\u3002 K - Bazinga Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u4e32\uff0c\u6c42\u6700\u5927\u4e0b\u6807\u6ee1\u8db3\u524d\u9762\u7684\u4e32\u6709\u4e0d\u662f\u5b83\u7684\u5b50\u4e32\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u5982\u679cs_i\u662fs_{i+1}\u7684\u5b50\u4e32\uff0c\u5bf9s_{i+1}\u53ca\u4ee5\u540e\u7684\u4e32\u90fd\u4e0es_i\u65e0\u5173\uff0c\u6240\u4ee5\u505a\u4e00\u4e2a\u526a\u679d\u5373\u53ef\uff0c\u6700\u574f\u60c5\u51b5\u4e5f\u53ea\u6709 O(n*len)","title":"Kmp"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#kmp","text":"\u89c9\u5f97\u81ea\u5df1\u5b57\u7b26\u4e32\u592a\u83dc\u4e86\u8ddf\u7740\u7b97\u5bfc\u91cd\u5b66\u4e00\u904d","title":"kmp\u7b97\u6cd5"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#_1","text":"\u5229\u7528next\u6570\u7ec4\u7ebf\u6027\u7684\u89e3\u51b3\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898 \u5b9a\u4e49\u539f\u4e32 T[1...n] \uff0c\u6a21\u5f0f\u4e32 P\uff08pattern\uff09[1...m] \uff0c\u82e5\u51fa\u73b0 T[s+1...s+m] = P[1...m] \u5219\u79f0\u6b64\u4e3a\u4e00\u6b21\u6210\u529f\u7684\u5339\u914d\uff0cs\u79f0\u4f5c\u6709\u6548\u504f\u79fb\u3002 \u66b4\u529b\u590d\u6742\u5ea6\u662f O\uff08n\u00d7m\uff09 \u5373\u5bf9\u4e8e\u539f\u4e32\u7684\u6bcf\u4e2a\u5b50\u4e32\u505a\u4e00\u6b21\u5faa\u73af\u7684\u5339\u914d\u3002","title":"\u7b97\u6cd5\u7b80\u8ff0"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#_2","text":"next\u6570\u7ec4\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u5f0f\u4e32 P \uff0c\u5b83\u7684\u524d i \u9879\u79f0\u4f5c P_i \uff0c next[i] \u5c31\u8868\u793a\u6700\u5927\u7684 next[i] \u4f7f\u5f97 P_{next[i]} \u662f P_i \u7684\u540e\u7f00\uff0c\u5b9a\u4e49 next[0] \u4e3a-1 \u4f8b\u5982\u4e32 ababaca \u7684next\u6570\u7ec41\u52307\u9879\u4e3a\uff1a 0012301 \u5df2\u77e5 P[1...q] \u4e0e T[s+1...s+q] \u5339\u914d\uff0c\u800c P[q+1] != T[s+q+1] \uff0c\u5219\u5c06 T \u540e\u79fb\u4e00\u4f4d\u7684\u540c\u65f6\u5c06 q \u53d8\u4e3a next[q] \u5373\u53ef\u53d1\u73b0 P[1...next[q]] \u4e0e T[s'+1, s'+k] \u5339\u914d\uff08\u5176\u4e2d s'+k = s+q \uff09\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5 O(m) \u9884\u5904\u7406 O(n) \u8ba1\u7b97\u7ed3\u679c\u4e86\u3002 getNext\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 int nex [ maxm ]; void getNext ( char * s , int len ) { int i = 0 , j = - 1 ; nex [ i ] = j ; while ( i < len ) { if ( j == - 1 || s [ i ] == s [ j ]) nex [ ++ i ] = ++ j ; else j = nex [ j ]; } } \u5339\u914d\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 // a\u4e3a\u539f\u4e32\uff0cb\u4e3a\u6a21\u5f0f\u4e32\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u6a21\u5f0f\u4e32\u7684\u4f4d\u7f6e\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1 int KMP ( char * a , char * b , int n , int m ) { getNext ( b , m ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( j == - 1 || a [ i ] == b [ j ]) ++ i , ++ j ; else j = nxt [ j ]; } return j == m ? i - m + 1 : - 1 ; }","title":"\u7b97\u6cd5\u5b9e\u73b0"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#_3","text":"\uff08\u7531\u4e8e\u672c\u6587\u64b0\u5199\u65f6vjudge\u6302\u4e86\uff0c\u6ca1\u6709\u5728vj\u4e0a\u6302\u9898\uff09 https://vjudge.net/contest/328570","title":"\u4f8b\u9898"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#luogup3375","text":"\u9898\u610f\uff1a\u6c42\u51fa\u6240\u6709\u6a21\u5f0f\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5e76\u8f93\u51fanext\u6570\u7ec4 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1atest.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/22/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} // nxt[0]\u8868\u793a\u5931\u914d\u5230\u5b8c\u5168\u4e0d\u5339\u914d int nxt [ maxn ]; void getNext ( char * s , int len ) { int i = 0 , j = - 1 ; nxt [ i ] = j ; while ( i < len ) { if ( j == - 1 || s [ i ] == s [ j ]) nxt [ ++ i ] = ++ j ; else j = nxt [ j ]; } } // a\u4e3a\u539f\u4e32\uff0cb\u4e3a\u6a21\u5f0f\u4e32\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u627e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u6a21\u5f0f\u4e32\u7684\u4f4d\u7f6e\uff08\u8d77\u70b9\u4e3a1\uff09\uff0c\u627e\u4e0d\u5230\u8fd4\u56de-1 int KMP ( char * a , char * b , int n , int m ) { getNext ( b , m ); int i = 0 , j = 0 ; while ( i < n && j < m ) { if ( j == - 1 || a [ i ] == b [ j ]) ++ i , ++ j ; else j = nxt [ j ]; if ( j == m ) { printf ( \"%d \\n \" , i - m + 1 ); j = nxt [ j ]; } } return j == m ? i - m + 1 : - 1 ; } char s [ maxn ], p [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%s%s\" , s , p ); int lens = strlen ( s ), lenp = strlen ( p ); KMP ( s , p , lens , lenp ); for ( int i = 1 ; i <= lenp ; ++ i ) printf ( \"%d%c\" , nxt [ i ], i == lenp ? '\\n' : ' ' ); return 0 ; }","title":"luoguP3375"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#a-oulipo","text":"\u9898\u610f\uff1a\u6c42p\u5728s\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u9898\u89e3\uff1akmp\u626b\u626b\u626b O(n)","title":"A - Oulipo"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#b-number-sequence","text":"\u9898\u610f\uff1a\u6c42p\u5728s\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807 \u9898\u89e3\uff1akmp\u626b\u5230\u7b2c\u4e00\u6b21j=m\u505c","title":"B - Number Sequence"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#c-period","text":"\u9898\u610f\uff1a\u7ed9\u5b9as\uff0c\u6c42s\u7684\u6bcf\u4e2a\u524d\u7f00\u7684\u6700\u5c0f\u5faa\u73af\u8282\u4f7f\u5f97\u4efb\u610f\u4e2a\u8fd9\u6837\u7684\u5faa\u73af\u8282\u5e76\u884c\u62fc\u6210\u8fd9\u4e2a\u524d\u7f00\uff0c\u5176\u4e2d\u524d\u7f00\u672c\u8eab\u4e0d\u7b97\u3002 \u9898\u89e3\uff1akmp\u6c42\u6700\u5c0f\u5faa\u73af\u8282\uff0c len - nxt[len] \u5c31\u662f\u8be5\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282\u5927\u5c0f\u3002\u5224\u4e00\u4e0b\u80fd\u6574\u9664\u5373\u662f\u89e3\u3002","title":"C - Period"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#d-power-strings","text":"\u9898\u610f\uff1a\u7ed9\u5b9as\u6c42\u6700\u5927\u5faa\u73af\u6b21\u6570 \u9898\u89e3\uff1akmp\u6c42\u6700\u5c0f\u5faa\u73af\u8282","title":"D - Power Strings"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#f-cyclic-nacklace","text":"\u9898\u610f\uff1a\u6c42\u6700\u5c11\u8865\u591a\u5c11\u5b57\u7b26\u4f7f\u539f\u4e32\u6210\u4e3a\u5faa\u73af\u4e32 \u9898\u89e3\uff1a\u6c42\u51fa\u6700\u5c0f\u5faa\u73af\u8282\u7136\u540e\u968f\u4fbf\u5199\u4e00\u4e0b","title":"F - Cyclic Nacklace"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#g-simpsons-hidden-talents","text":"\u9898\u610f\uff1a\u7ed9s\u548cp\u4e32\uff0c\u6c42p\u4e32\u7684\u524d\u7f00\u7b49\u4e8es\u7684\u540e\u7f00\u7684\u6700\u5927\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u6c42\u51fap\u4e32\u7684next\u6570\u7ec4\uff0c\u5bf9\u7740s\u8dd1\u4e00\u904d\uff0c\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u8f93\u51fa\u5f53\u524dj\u5373\u53ef\u3002","title":"G - Simpsons\u2019 Hidden Talents"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#h-milking-grid","text":"\u9898\u610f\uff1a\u7ed9\u4e8c\u7ef4\u4e32s\uff0c\u6c42\u6700\u5c0f\u7684\u5de6\u4e0a\u89d2\u77e9\u9635\u4f7f\u5f97\u5b83\u662f\u6574\u4e2a\u77e9\u9635\u7684\u4e00\u4e2a\u5faa\u73af\u8282\u3002 \u9898\u89e3\uff1a\u884c\u5217\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u8003\u8651\u5355\u7ef4\u7684\u4e32\u5373\u53ef\u3002\u7528hash\u5c06\u884c\u6216\u5217\u5904\u7406\u6210\u5355\u4e2a\u5b57\u7b26\u5373\u53ef\u3002\u6700\u5c0f\u503c\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002","title":"H - Milking Grid"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#i-theme-section","text":"\u9898\u610f\uff1a\u7ed9\u4e32s\u6c42\u62c6\u5206\u5f62\u5982XAXBX\u7684\u6700\u957fX\u7684\u957f\u5ea6 \u9898\u89e3\uff1anxt\u6570\u7ec4\u6c42\u51fa\u6765\u540e\uff0c\u9996\u5c3e\u90fd\u662fX\u5373nxt\u4ece\u5c3e\u90e8\u5f80\u524d\u8df3\uff0c\u7136\u540e\u6c42\u51fa\u90a3\u6bb5\u533a\u95f4\u5185\u4e2d\u95f4\u6709nxt\u4e0e\u5f53\u524d\u957f\u5ea6\u76f8\u7b49\u7684\u70b9\u5373\u662f\u7b54\u6848\u3002","title":"I - Theme Section"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#j-a-secret","text":"\u9898\u610f\uff1a\u7ed9s\u548cp\u6c42p\u7684\u6240\u6709\u540e\u7f00\u5728s\u4e2d\u51fa\u73b0\u7684\u4e2a\u6570\u00d7p\u7684\u540e\u7f00\u957f\u5ea6\u7684\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u5bf9s\u548cp\u90fd\u7ffb\u8f6c\uff0c\u6c42s\u7684\u6bcf\u4e2a\u524d\u7f00\u5bf9p\u7684\u524d\u7f00\u7684\u6700\u5927\u5339\u914d\u5ea6\uff0c\u4fdd\u5b58\u5728\u540e\u7f00\u6570\u7ec4\u4e2d\uff0c\u5bf9\u540e\u7f00\u6570\u7ec4\u5012\u7740\u5f80\u524d\u7ebf\u6027\u626b\u4e00\u6b21\u5c31\u53ef\u4ee5\u5f97\u51fa\u7b54\u6848\uff0c\u56e0\u4e3a\u540e\u7f00\u7684i\u5982\u679c\u6709\u5339\u914d\u5fc5\u80fd\u5339\u914d\u5230nxt[i]\uff0c\u6240\u4ee5\u52a0\u8fc7\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u5904\u540e\u7f00\u6570\u7ec4\u53ea\u662f\u53d6\u5b83\u5b57\u9762\u610f\u601d\u3002","title":"J - A Secret"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/kmp/#k-bazinga","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u4e32\uff0c\u6c42\u6700\u5927\u4e0b\u6807\u6ee1\u8db3\u524d\u9762\u7684\u4e32\u6709\u4e0d\u662f\u5b83\u7684\u5b50\u4e32\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u5982\u679cs_i\u662fs_{i+1}\u7684\u5b50\u4e32\uff0c\u5bf9s_{i+1}\u53ca\u4ee5\u540e\u7684\u4e32\u90fd\u4e0es_i\u65e0\u5173\uff0c\u6240\u4ee5\u505a\u4e00\u4e2a\u526a\u679d\u5373\u53ef\uff0c\u6700\u574f\u60c5\u51b5\u4e5f\u53ea\u6709 O(n*len)","title":"K - Bazinga"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/","text":"\u56de\u6587\u6811 Link \u7b97\u6cd5\u7b80\u8ff0 Link \u5229\u7528fail\u6307\u9488\u7ebf\u6027\u5730\u89e3\u51b3\u4e00\u5207\u56de\u6587\u4e32\u8ba1\u6570\u95ee\u9898\u3002 \u522b\u79f0\uff1a\u56de\u6587\u81ea\u52a8\u673a\u3001PAM \u662f\u53ef\u4ee5\u5b8c\u5168\u66ff\u4ee3Maracher\u7b97\u6cd5\u7684\u4e0a\u4f4d\u7b97\u6cd5\uff0c\u9664\u4e86\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4f18\u4e8eMaracher\u7b97\u6cd5\u3002 \u7b97\u6cd5\u5b9e\u73b0 Link \u57fa\u7840\u9700\u8981\u7684\u6570\u7ec4\u5982\u4e0b 1 2 3 4 5 6 7 8 int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6210\uff0cN\u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 \u56de\u6587\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u4ee3\u8868\u4e00\u4e2a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\uff0c\u5176\u4e2d0\u8282\u70b9\u8868\u793a\u7a7a\u957f\u56de\u6587\u4e32\uff0c1\u8868\u793a\u5947\u6570\u7a7a\u957f\u56de\u6587\u4e32\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u3002 \u5728\u56de\u6587\u6811\u4e2d\u589e\u52a0\u65b0\u8282\u70b9 1 2 3 4 5 6 7 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; cnt [ p ] = 0 ; num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } \u521d\u59cb\u5316\u56de\u6587\u6811 1 2 3 4 5 6 7 8 9 void init () { //\u521d\u59cb\u5316 p = 0 ; newnode ( 0 ); // \u5076\u6570\u7a7a\u4e32 newnode ( - 1 ); // \u5947\u6570\u7a7a\u4e32 last = 0 ; n = 0 ; S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; // \u5076\u6570\u7a7a\u4e32\u7684fail\u6307\u9488\u6307\u5411\u5947\u6570\u7a7a\u4e32 } \u83b7\u53d6\u5931\u914dfail\u6307\u9488 1 2 3 4 int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } \u5f80\u56de\u6587\u4e32\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 1 2 3 4 5 6 7 8 9 10 11 void add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } last = next [ cur ][ c ]; // last\u6307\u9488\u8868\u793a\u5f53\u524d\u65b0\u589e\u56de\u6587\u4e32\u7684\u4f4d\u7f6e } \u590d\u6742\u5ea6\u8bc1\u660e Link \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u4e32\uff0c\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7n\uff0c\u6700\u591a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\u4e2a\u6570\u4e0d\u8d85\u8fc7n\uff0c\u76f8\u540c\u56de\u6587\u4e32\u4e2a\u6570\u4e0d\u8d85\u8fc7n\uff0c\u6574\u4e2a\u7b97\u6cd5\u7c7b\u4f3ckmp\u5339\u914d\u7684\u5931\u914d\u8fd0\u7b97\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n*\u5b57\u7b26\u96c6\u5927\u5c0f) \u4f8b\u9898 Link https://vjudge.net/contest/292544 A - Palisection Link \u9898\u610f\uff1a\u6c42\u4e00\u4e2a\u4e32\u6240\u6709\u56de\u6587\u5b50\u4e32\u4e24\u4e24\u76f8\u4ea4\u7684\u5bf9\u6570 \u9898\u89e3\uff1a\u6b63\u5411\u5efa\u7acb\u56de\u6587\u6811\uff0c\u4fdd\u5b58\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 a \uff0c\u518d\u53cd\u5411\u5efa\u7acb\u56de\u6587\u6811\u4fdd\u5b58\u540e\u7f00\u56de\u6587\u4e32\u4e2a\u6570 b \uff0c\u5219\u603b\u6570\u4e3a sum*(sum-1)/2 - \\sum {a_i * b_{i+1}} sum*(sum-1)/2 - \\sum {a_i * b_{i+1}} \uff0c\u6ce8\u610f\u6b64\u9898\u5361\u4e86\u56de\u6587\u6811\u5185\u5b58\uff0c\u9700\u8981\u4e00\u4e9b\u5947\u6280\u6deb\u5de7\u7528\u65f6\u95f4\u6362\u53d6\u7a7a\u95f4\u3002 \u4f7f\u7528vector\u4fdd\u5b58next\u6570\u7ec4\u4ee5\u7b80\u5316\u7a7a\u95f4\uff0cfirst\u662f\u5b57\u7b26\uff0csecond\u662f\u503c\u5373\u53ef\u3002 1 vector < pair < int , int > > next [ maxn ]; \u5404\u79cd\u64cd\u4f5c\u90fd\u4f1a\u53d8\u5f97\u590d\u6742\u4e00\u4e9b\u4f46\u662f\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u7b97\u6ee1\u4e5f\u5c31\u662f\u591a\u4e86\u4e2a\u5b57\u7b26\u96c6\u7684\u5e38\u6570\u3002 B - Palindromes and Super Abilities Link \u9898\u610f\uff1a\u6c42\u524d\u7f00\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u76f4\u63a5\u5efa\u7acb\u56de\u6587\u6811\u7684\u8fc7\u7a0b\u4e2d\u8f93\u51fap-2\u5373\u53ef C - CA Loves Palindromic Link \u9898\u610f\uff1a\u6c42\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u4e32\u957f1000\uff0c\u5bf9\u6240\u6709\u7684\u5b50\u4e32\u5efa\u7acb\u56de\u6587\u6811\u4fdd\u5b58p-2\uff0c\u5bf9\u8be2\u95ee\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u3002 D - \u56de\u6587\u4e32 Link \u9898\u610f\uff1a\u6c42\u67d0\u79cd\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u00d7\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5efa\u7acb\u56de\u6587\u6811\u540e\u5bf9p-2\u4e2a\u8282\u70b9\u8ba1\u7b97len\u00d7cnt\u7684\u6700\u5927\u503c\u3002 E - Trie in Tina Town Link \u9898\u610f\uff1a\u7ed9\u4e00\u68f5trie\uff0c\u6c42\u4ece\u67d0\u4e2a\u70b9\u5230\u5b83\u67d0\u4e2a\u5b50\u8282\u70b9\u4e3a\u56de\u6587\u4e32\u7684\u957f\u5ea6\u548c\u3002 \u9898\u89e3\uff1adfs\u65f6\u5e26\u56de\u9000\u7684\u5efa\u7acb\u56de\u6587\u6811\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u5e26\u4fee\uff08popback\u548cpushback\uff09\u7684\u6c42\u4e00\u4e2a\u4e32\u7684\u56de\u6587\u4e32\u957f\u5ea6\u00d7\u51fa\u73b0\u6b21\u6570\u7684\u548c\u3002\u8fd9\u4e2a\u95ee\u9898\u53ea\u9700\u8981\u628alast\u6539\u4e3a\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u957f\u5ea6\u5efa\u7acb\u4e0d\u540c\u7684last\uff0c\u7136\u540e\u52a8\u6001\u7684\u7edf\u8ba1\u6240\u6709len\u7684\u548c\u5373\u53ef\u3002 F - \u6700\u957f\u53cc\u56de\u6587\u4e32 Link \u9898\u610f\uff1a\u7ed9\u4e32s\uff0c\u6c42x\uff0cy\u90fd\u4e3a\u56de\u6587\u4e32\u4e14x+y\u4e3as\u7684\u5b50\u4e32\u4e2d len(x+y) \u7684\u6700\u5927\u503c \u9898\u89e3\uff1a\u6b63\u53cd\u5efa\u7acb\u56de\u6587\u6811\u6c42\u548c G - \u62c9\u62c9\u961f\u6392\u7ec3 Link \u9898\u610f\uff1a\u6c42\u524dm\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u79ef\u3002 \u9898\u89e3\uff1a\u6c42\u51fa\u6240\u6709\u975e\u91cd\u56de\u6587\u5b50\u4e32\u53ca\u6570\u91cf\u3001\u957f\u5ea6\u3002\u4fdd\u5b58\u5230\u6570\u7ec4\u6700\u591a\u53ea\u6709\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6n\u9879\u3002 H - Harry and magic string Link \u9898\u610f\uff1a\u7ed9\u4e32s\uff0c\u6c42\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u5b50\u56de\u6587\u4e32\u7684\u5bf9\u6570\u3002 \u9898\u89e3\uff1a\u6b63\u53cd\u5efa\u7acb\u56de\u6587\u6811\u6c42\u524d\u540e\u7f00\uff0c\u79ef\u548c\u5373\u53ef\u3002 I - Victor and String Link \u9898\u610f\uff1a\u9996\u5148\u662f\u4e00\u4e2a\u7a7a\u4e32s\uff0cm\u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4ee5\u4e0b\u56db\u79cd - 1\u3001pushback - 2\u3001pushfront - 3\u3001\u6c42\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 - 4\u3001\u6c42\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u5199\u4e00\u4e2a\u652f\u6301\u524d\u540e\u63d2\u7684\u56de\u6587\u6811\u5c31\u53ef\u4ee5\u4e86\uff0c\u5177\u4f53\u65b9\u6cd5\u7c7b\u4f3c\u6811\u4e0a\u56de\u6587\u6811\u90a3\u9898\uff0c\u5efa\u7acb\u4e24\u4e2alast\uff0c\u5206\u522b\u8868\u793a\u524d\u7f00\u94fe\u548c\u540e\u7f00\u94fe\uff0c\u8ba9\u63d2\u5165\u64cd\u4f5c\u90fd\u53d8\u6210\u4e00\u822c\u7684add\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53\u5f53\u524d\u6574\u4e2a\u4e32\u4e3a\u56de\u6587\u4e32\u65f6\u4f1a\u5bfc\u81f4\u4e24\u4e2alast\u7ffb\u8f6c\uff0c\u9700\u8981\u628a\u67d0\u4e00\u4e2a\u8c03\u56de\u539f\u70b9\u3002 J - The Problem to Slow Down You Link \u9898\u610f\uff1a\u7ed9\u4e24\u4e2a\u4e32\uff0c\u6c42\u5176\u4e2d\u76f8\u540c\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u56de\u6587\u6811\u672c\u8d28\u4ecd\u7136\u662f\u81ea\u52a8\u673a\uff0c\u6240\u4ee5\u6ee1\u8db3trie\u6811\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u4e32\u6765\u8bf4\u4ed6\u4eec\u7684\u76f8\u540c\u56de\u6587\u5b50\u4e32\u5fc5\u7136\u662f\u540c\u6784\u7684\u90e8\u5206trie\u6811\u3002\u6240\u4ee5\u76f4\u63a5dfs\u904d\u5386trie\u6811\u5c06\u76f8\u540c\u8282\u70b9\u7684cnt\u79ef\u548c\u5373\u53ef\u3002 K - Virus synthesis Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32s\uff0c\u6c42\u4ece\u7a7a\u4e32\u5f00\u59cb\uff0c\u53ef\u4ee5pushback\u6216pushfront\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u5c06\u5f53\u524d\u4e32\u5de6\u590d\u5236\u7ffb\u8f6c\u6216\u53f3\u590d\u5236\u7ffb\u8f6c\uff0c\u5f97\u5230\u5f53\u524d\u4e32\u81f3\u5c11\u9700\u8981\u591a\u5c11\u6b65\u3002 \u9898\u89e3\uff1a\u4e0d\u4f1a\u5199 L - Palindromic Substring Link M - Contest Page Link N - Palindromes and Super Abilities 2 Link","title":"\u56de\u6587\u6811"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#_1","text":"","title":"\u56de\u6587\u6811"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#_2","text":"\u5229\u7528fail\u6307\u9488\u7ebf\u6027\u5730\u89e3\u51b3\u4e00\u5207\u56de\u6587\u4e32\u8ba1\u6570\u95ee\u9898\u3002 \u522b\u79f0\uff1a\u56de\u6587\u81ea\u52a8\u673a\u3001PAM \u662f\u53ef\u4ee5\u5b8c\u5168\u66ff\u4ee3Maracher\u7b97\u6cd5\u7684\u4e0a\u4f4d\u7b97\u6cd5\uff0c\u9664\u4e86\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4f18\u4e8eMaracher\u7b97\u6cd5\u3002","title":"\u7b97\u6cd5\u7b80\u8ff0"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#_3","text":"\u57fa\u7840\u9700\u8981\u7684\u6570\u7ec4\u5982\u4e0b 1 2 3 4 5 6 7 8 int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6210\uff0cN\u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 \u56de\u6587\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u4ee3\u8868\u4e00\u4e2a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\uff0c\u5176\u4e2d0\u8282\u70b9\u8868\u793a\u7a7a\u957f\u56de\u6587\u4e32\uff0c1\u8868\u793a\u5947\u6570\u7a7a\u957f\u56de\u6587\u4e32\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u3002 \u5728\u56de\u6587\u6811\u4e2d\u589e\u52a0\u65b0\u8282\u70b9 1 2 3 4 5 6 7 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; cnt [ p ] = 0 ; num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } \u521d\u59cb\u5316\u56de\u6587\u6811 1 2 3 4 5 6 7 8 9 void init () { //\u521d\u59cb\u5316 p = 0 ; newnode ( 0 ); // \u5076\u6570\u7a7a\u4e32 newnode ( - 1 ); // \u5947\u6570\u7a7a\u4e32 last = 0 ; n = 0 ; S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; // \u5076\u6570\u7a7a\u4e32\u7684fail\u6307\u9488\u6307\u5411\u5947\u6570\u7a7a\u4e32 } \u83b7\u53d6\u5931\u914dfail\u6307\u9488 1 2 3 4 int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } \u5f80\u56de\u6587\u4e32\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 1 2 3 4 5 6 7 8 9 10 11 void add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } last = next [ cur ][ c ]; // last\u6307\u9488\u8868\u793a\u5f53\u524d\u65b0\u589e\u56de\u6587\u4e32\u7684\u4f4d\u7f6e }","title":"\u7b97\u6cd5\u5b9e\u73b0"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#_4","text":"\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u4e32\uff0c\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7n\uff0c\u6700\u591a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\u4e2a\u6570\u4e0d\u8d85\u8fc7n\uff0c\u76f8\u540c\u56de\u6587\u4e32\u4e2a\u6570\u4e0d\u8d85\u8fc7n\uff0c\u6574\u4e2a\u7b97\u6cd5\u7c7b\u4f3ckmp\u5339\u914d\u7684\u5931\u914d\u8fd0\u7b97\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n*\u5b57\u7b26\u96c6\u5927\u5c0f)","title":"\u590d\u6742\u5ea6\u8bc1\u660e"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#_5","text":"https://vjudge.net/contest/292544","title":"\u4f8b\u9898"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#a-palisection","text":"\u9898\u610f\uff1a\u6c42\u4e00\u4e2a\u4e32\u6240\u6709\u56de\u6587\u5b50\u4e32\u4e24\u4e24\u76f8\u4ea4\u7684\u5bf9\u6570 \u9898\u89e3\uff1a\u6b63\u5411\u5efa\u7acb\u56de\u6587\u6811\uff0c\u4fdd\u5b58\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 a \uff0c\u518d\u53cd\u5411\u5efa\u7acb\u56de\u6587\u6811\u4fdd\u5b58\u540e\u7f00\u56de\u6587\u4e32\u4e2a\u6570 b \uff0c\u5219\u603b\u6570\u4e3a sum*(sum-1)/2 - \\sum {a_i * b_{i+1}} sum*(sum-1)/2 - \\sum {a_i * b_{i+1}} \uff0c\u6ce8\u610f\u6b64\u9898\u5361\u4e86\u56de\u6587\u6811\u5185\u5b58\uff0c\u9700\u8981\u4e00\u4e9b\u5947\u6280\u6deb\u5de7\u7528\u65f6\u95f4\u6362\u53d6\u7a7a\u95f4\u3002 \u4f7f\u7528vector\u4fdd\u5b58next\u6570\u7ec4\u4ee5\u7b80\u5316\u7a7a\u95f4\uff0cfirst\u662f\u5b57\u7b26\uff0csecond\u662f\u503c\u5373\u53ef\u3002 1 vector < pair < int , int > > next [ maxn ]; \u5404\u79cd\u64cd\u4f5c\u90fd\u4f1a\u53d8\u5f97\u590d\u6742\u4e00\u4e9b\u4f46\u662f\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u7b97\u6ee1\u4e5f\u5c31\u662f\u591a\u4e86\u4e2a\u5b57\u7b26\u96c6\u7684\u5e38\u6570\u3002","title":"A - Palisection"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#b-palindromes-and-super-abilities","text":"\u9898\u610f\uff1a\u6c42\u524d\u7f00\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u76f4\u63a5\u5efa\u7acb\u56de\u6587\u6811\u7684\u8fc7\u7a0b\u4e2d\u8f93\u51fap-2\u5373\u53ef","title":"B - Palindromes and Super Abilities"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#c-ca-loves-palindromic","text":"\u9898\u610f\uff1a\u6c42\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u4e32\u957f1000\uff0c\u5bf9\u6240\u6709\u7684\u5b50\u4e32\u5efa\u7acb\u56de\u6587\u6811\u4fdd\u5b58p-2\uff0c\u5bf9\u8be2\u95ee\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u3002","title":"C - CA Loves Palindromic"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#d-","text":"\u9898\u610f\uff1a\u6c42\u67d0\u79cd\u56de\u6587\u5b50\u4e32\u957f\u5ea6\u00d7\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5efa\u7acb\u56de\u6587\u6811\u540e\u5bf9p-2\u4e2a\u8282\u70b9\u8ba1\u7b97len\u00d7cnt\u7684\u6700\u5927\u503c\u3002","title":"D - \u56de\u6587\u4e32"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#e-trie-in-tina-town","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u68f5trie\uff0c\u6c42\u4ece\u67d0\u4e2a\u70b9\u5230\u5b83\u67d0\u4e2a\u5b50\u8282\u70b9\u4e3a\u56de\u6587\u4e32\u7684\u957f\u5ea6\u548c\u3002 \u9898\u89e3\uff1adfs\u65f6\u5e26\u56de\u9000\u7684\u5efa\u7acb\u56de\u6587\u6811\uff0c\u95ee\u9898\u8f6c\u6362\u4e3a\u5e26\u4fee\uff08popback\u548cpushback\uff09\u7684\u6c42\u4e00\u4e2a\u4e32\u7684\u56de\u6587\u4e32\u957f\u5ea6\u00d7\u51fa\u73b0\u6b21\u6570\u7684\u548c\u3002\u8fd9\u4e2a\u95ee\u9898\u53ea\u9700\u8981\u628alast\u6539\u4e3a\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u957f\u5ea6\u5efa\u7acb\u4e0d\u540c\u7684last\uff0c\u7136\u540e\u52a8\u6001\u7684\u7edf\u8ba1\u6240\u6709len\u7684\u548c\u5373\u53ef\u3002","title":"E - Trie in Tina Town"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#f-","text":"\u9898\u610f\uff1a\u7ed9\u4e32s\uff0c\u6c42x\uff0cy\u90fd\u4e3a\u56de\u6587\u4e32\u4e14x+y\u4e3as\u7684\u5b50\u4e32\u4e2d len(x+y) \u7684\u6700\u5927\u503c \u9898\u89e3\uff1a\u6b63\u53cd\u5efa\u7acb\u56de\u6587\u6811\u6c42\u548c","title":"F - \u6700\u957f\u53cc\u56de\u6587\u4e32"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#g-","text":"\u9898\u610f\uff1a\u6c42\u524dm\u957f\u7684\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u79ef\u3002 \u9898\u89e3\uff1a\u6c42\u51fa\u6240\u6709\u975e\u91cd\u56de\u6587\u5b50\u4e32\u53ca\u6570\u91cf\u3001\u957f\u5ea6\u3002\u4fdd\u5b58\u5230\u6570\u7ec4\u6700\u591a\u53ea\u6709\u6700\u957f\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6n\u9879\u3002","title":"G - \u62c9\u62c9\u961f\u6392\u7ec3"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#h-harry-and-magic-string","text":"\u9898\u610f\uff1a\u7ed9\u4e32s\uff0c\u6c42\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u5b50\u56de\u6587\u4e32\u7684\u5bf9\u6570\u3002 \u9898\u89e3\uff1a\u6b63\u53cd\u5efa\u7acb\u56de\u6587\u6811\u6c42\u524d\u540e\u7f00\uff0c\u79ef\u548c\u5373\u53ef\u3002","title":"H - Harry and magic string"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#i-victor-and-string","text":"\u9898\u610f\uff1a\u9996\u5148\u662f\u4e00\u4e2a\u7a7a\u4e32s\uff0cm\u6b21\u64cd\u4f5c\uff0c\u64cd\u4f5c\u6709\u4ee5\u4e0b\u56db\u79cd - 1\u3001pushback - 2\u3001pushfront - 3\u3001\u6c42\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u4e2a\u6570 - 4\u3001\u6c42\u56de\u6587\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3\uff1a\u5199\u4e00\u4e2a\u652f\u6301\u524d\u540e\u63d2\u7684\u56de\u6587\u6811\u5c31\u53ef\u4ee5\u4e86\uff0c\u5177\u4f53\u65b9\u6cd5\u7c7b\u4f3c\u6811\u4e0a\u56de\u6587\u6811\u90a3\u9898\uff0c\u5efa\u7acb\u4e24\u4e2alast\uff0c\u5206\u522b\u8868\u793a\u524d\u7f00\u94fe\u548c\u540e\u7f00\u94fe\uff0c\u8ba9\u63d2\u5165\u64cd\u4f5c\u90fd\u53d8\u6210\u4e00\u822c\u7684add\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5f53\u5f53\u524d\u6574\u4e2a\u4e32\u4e3a\u56de\u6587\u4e32\u65f6\u4f1a\u5bfc\u81f4\u4e24\u4e2alast\u7ffb\u8f6c\uff0c\u9700\u8981\u628a\u67d0\u4e00\u4e2a\u8c03\u56de\u539f\u70b9\u3002","title":"I - Victor and String"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#j-the-problem-to-slow-down-you","text":"\u9898\u610f\uff1a\u7ed9\u4e24\u4e2a\u4e32\uff0c\u6c42\u5176\u4e2d\u76f8\u540c\u56de\u6587\u5b50\u4e32\u7684\u957f\u5ea6\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u56de\u6587\u6811\u672c\u8d28\u4ecd\u7136\u662f\u81ea\u52a8\u673a\uff0c\u6240\u4ee5\u6ee1\u8db3trie\u6811\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u4e32\u6765\u8bf4\u4ed6\u4eec\u7684\u76f8\u540c\u56de\u6587\u5b50\u4e32\u5fc5\u7136\u662f\u540c\u6784\u7684\u90e8\u5206trie\u6811\u3002\u6240\u4ee5\u76f4\u63a5dfs\u904d\u5386trie\u6811\u5c06\u76f8\u540c\u8282\u70b9\u7684cnt\u79ef\u548c\u5373\u53ef\u3002","title":"J - The Problem to Slow Down You"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#k-virus-synthesis","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32s\uff0c\u6c42\u4ece\u7a7a\u4e32\u5f00\u59cb\uff0c\u53ef\u4ee5pushback\u6216pushfront\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u5c06\u5f53\u524d\u4e32\u5de6\u590d\u5236\u7ffb\u8f6c\u6216\u53f3\u590d\u5236\u7ffb\u8f6c\uff0c\u5f97\u5230\u5f53\u524d\u4e32\u81f3\u5c11\u9700\u8981\u591a\u5c11\u6b65\u3002 \u9898\u89e3\uff1a\u4e0d\u4f1a\u5199","title":"K - Virus synthesis"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#l-palindromic-substring","text":"","title":"L - Palindromic Substring"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#m-contest-page","text":"","title":"M - Contest Page"},{"location":"Personal Page/badcw/\u5b57\u7b26\u4e32/\u56de\u6587\u6811/#n-palindromes-and-super-abilities-2","text":"","title":"N - Palindromes and Super Abilities 2"},{"location":"Topic Training/Segment Tree/SegmentTree2/","text":"url F - Counter Strike Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u5e26\u6743\u7269\u54c1\u6c42\u53d6\u6cd5\u65b9\u6848\u6570\uff0c\u9700\u8981\u4fdd\u8bc1\u53d6\u7684\u7269\u54c1\u5e73\u5747\u6743\u503c\u5927\u4e8ek\u4e14\u53d6\u7684\u7269\u54c1\u662f\u8fde\u7eed\u7684 pre[i] - pre[j] > k * (i - j + 1) \\\\ (a[i] - k) + (a[i + 1] - k) + \\dots + (a[j] - k) > 0 \\\\ i > j \\&\\& newpre[i] > newpre[j] \\\\ pre[i] - pre[j] > k * (i - j + 1) \\\\ (a[i] - k) + (a[i + 1] - k) + \\dots + (a[j] - k) > 0 \\\\ i > j \\&\\& newpre[i] > newpre[j] \\\\ \u5373\u6c42\u6b63\u5e8f\u5bf9\u4e2a\u6570 G - Rectangles Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u4e8c\u7ef4\u533a\u95f4\uff0cm\u6b21\u8be2\u95ee\u9762\u79ef\u5e76 n\u8f83\u5c0f\u76f4\u63a5\u533a\u95f4\u5e76\u5373\u53ef\uff0c\u7531\u4e8e\u662f\u6574\u578b\u9762\u79ef\uff0c\u9700\u8981\u4ed4\u7ec6\u5bf9\u533a\u95f4\u79bb\u6563\u5316\uff0c\u611f\u89c9\u53ef\u4ee5\u7384\u5b66\u4f18\u5316\u4e00\u4e0b\u5efa\u6811\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u51fa\u7684\u79bb\u8c31\uff0c\u5e76\u4e0d\u63a8\u8350\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u6574\u578b\u7684\u9762\u79ef\u5e76\u3002 H - Ping pong Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u6570\u5b57\uff0c\u6c42\u4e09\u5143\u9006\u5e8f\u5bf9\u548c\u4e09\u5143\u6b63\u5e8f\u5bf9\u6570\u91cf\u548c \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6b63\u53cd\u6c42\u51fa\u6b63\u9006\u5e8f\u5bf9\u6570\u91cf\u4e58\u52a0\u5373\u53ef \u5f88\u5751\u7684\u4e00\u70b9\u662f\u5b83\u5e76\u6ca1\u6709\u8bf4a\u5e8f\u5217\u662fn\u7684\u6392\u5217 I - Lost Cows Link \u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u6392\u5217\u4e2d\u6bcf\u4e2a\u70b9\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5c0f\u4e8e\u5b83\u7684\u70b9\uff0c\u6784\u9020\u51fa\u6b64\u6392\u5217 \u4ece\u540e\u5f80\u524d\u679a\u4e3e\u5373\u53ef\uff0c\u6bcf\u6b21\u4e8c\u5206\u4e00\u4e2a\u6700\u5c0f\u70b9\u4f7f\u5f97\u524d\u7f00\u548c\u7b26\u5408\u9898\u610f\u5373\u53ef J - Billboard Link \u9898\u610f\uff1a\u7ed9 h*w h*w \u7684\u77e9\u9635\uff0c\u8981\u628a n n \u4ef6\u7269\u54c1\u586b\u5165\uff0c\u6bcf\u4ef6\u7269\u54c1\u7684\u5927\u5c0f\u662f 1*w_i 1*w_i \uff0c\u6bcf\u6b21\u8d2a\u5fc3\u7684\u627e\u6700\u4e0a\u3001\u6700\u5de6\u7684\u70b9\uff0c\u5982\u679c\u80fd\u586b\u5165\u5219\u8f93\u51fa\u884c\u53f7\u3002 \u7ecf\u5178\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u5373\u53ef\uff0c\u627e\u51fa\u53ef\u4ee5\u6539\u7684\u6700\u5de6\u533a\u95f4\uff0c\u6bd4\u8f83\u7c7b\u4f3c\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c K - Memory Control Link \u9898\u610f\uff1a\u6709\u4e00\u4e2a\u5168\u7a7a\u5730\u5740\uff0c4\u79cd\u64cd\u4f5c\uff1a 1. \u6e05\u7a7a\u6574\u4e2a\u5e8f\u5217\uff0c\u8f93\u51fa\u201cReset Now\u201d 2. \u53d6\u51fa\u6700\u5de6\u7aef\u7684\u8fde\u7eedx\u4e2a\u7a7a\u5730\u5740\uff0c\u8f93\u51fa\u201cNew at A\u201d\u6216\u8005\u201cReject New\u201d 3. \u6e05\u7a7a\u5305\u542bx\u7684\u8fde\u7eed\u5730\u5740\u5757\uff0c\u8f93\u51fa\u201cFree from A to B\u201d\u6216\u8005\u201cReject Free\u201d 4. \u8f93\u51fa\u7b2cx\u4e2a\u8fde\u7eed\u5730\u5740\u5757\u7684\u5de6\u7aef\u70b9\uff0c\u8f93\u51fa\u201cGet at A\u201d\u6216\u8005\u201cReject Get\u201d \u5c31\u662fhotel\u7684\u5347\u7ea7\u7248\uff0c\u5177\u4f53\u6765\u8bf4\uff1a - \u7ef4\u62a4\u6700\u5927\u8fde\u7eed\u53ef\u7528\u533a\u95f4\uff08lsum,rsum,mxsum\uff09 - \u7ef4\u62a4\u5df2\u9009\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff08lpos,rpos\uff09 - \u7ef4\u62a4\u5de6\u7aef\u70b9\u4e2a\u6570\uff08val\uff09 1\u64cd\u4f5c\u6574\u4e2a\u533a\u95f4\u6e05\u7a7alazy 2\u64cd\u4f5c\u53d6\u51fa\u6700\u5de6\u7aef\u7684\u4e0d\u5c0f\u4e8ex\u7684\u7a7a\u5730\u5740 3\u64cd\u4f5c\u53d6\u51fax\u7684\u5de6\u53f3\u7aef\u70b9\u5e76\u66f4\u65b0 4\u64cd\u4f5c\u7ebf\u6bb5\u6811\u4e0a\u5206\u6cbb\u5373\u53ef L - Man Down Link \u9898\u610f\uff1a\u662f\u7537\u4eba\u5c31\u4e0b\u4e00\u767e\u5c42\uff0c\u6bcf\u4e2a\u677f\u5b50\u6709\u6743\u503c\uff0c\u6389\u843d\u4e0b\u6765\u52a0\u6743\uff0c\u6c42\u6700\u7ec8\u6700\u5927\u6743\u503c\uff0c\u82e5\u662f\u8d1f\u6570\u8f93\u51fa-1\uff0c\u521d\u59cb\u5728\u6700\u9ad8\u70b9\uff0c\u6709\u6700\u9ad8\u7684\u677f\u5b50\u7684\u6743\u503c+100 \u6309\u9006\u5e8f\u8fdb\u884cDAG\u4e0adp\uff0c\u6bcf\u6b21\u628a\u4e00\u4e2a\u677f\u5b50\u7684\u5de6\u53f3\u7aef\u70b9\u4e2d\u5927\u7684\u90a3\u4e2a\u6743\u503c\u52a0\u5230\u677f\u5b50\u533a\u95f4\u4e0a\u5373\u53ef \u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e00\u76f4tle\uff0c\u91cd\u5199\u4e00\u904d\u8fc7\u4e86 M - Multiply game Link \u9898\u610f\uff1a\u533a\u95f4\u79ef\u3001\u5355\u70b9\u4fee\u6539 \u50bb\u903c\u9898 N - Posters Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u6709\u77e9\u5f62\u5b54\u7684\u77e9\u5f62\uff0c\u6c42\u8986\u76d6\u9762\u79ef\u5e76 \u6c99\u6bd4\u63d0 O - Light Link","title":"SegmentTree2"},{"location":"Topic Training/Segment Tree/SegmentTree2/#f-counter-strike","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u5e26\u6743\u7269\u54c1\u6c42\u53d6\u6cd5\u65b9\u6848\u6570\uff0c\u9700\u8981\u4fdd\u8bc1\u53d6\u7684\u7269\u54c1\u5e73\u5747\u6743\u503c\u5927\u4e8ek\u4e14\u53d6\u7684\u7269\u54c1\u662f\u8fde\u7eed\u7684 pre[i] - pre[j] > k * (i - j + 1) \\\\ (a[i] - k) + (a[i + 1] - k) + \\dots + (a[j] - k) > 0 \\\\ i > j \\&\\& newpre[i] > newpre[j] \\\\ pre[i] - pre[j] > k * (i - j + 1) \\\\ (a[i] - k) + (a[i + 1] - k) + \\dots + (a[j] - k) > 0 \\\\ i > j \\&\\& newpre[i] > newpre[j] \\\\ \u5373\u6c42\u6b63\u5e8f\u5bf9\u4e2a\u6570","title":"F - Counter Strike"},{"location":"Topic Training/Segment Tree/SegmentTree2/#g-rectangles","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u4e8c\u7ef4\u533a\u95f4\uff0cm\u6b21\u8be2\u95ee\u9762\u79ef\u5e76 n\u8f83\u5c0f\u76f4\u63a5\u533a\u95f4\u5e76\u5373\u53ef\uff0c\u7531\u4e8e\u662f\u6574\u578b\u9762\u79ef\uff0c\u9700\u8981\u4ed4\u7ec6\u5bf9\u533a\u95f4\u79bb\u6563\u5316\uff0c\u611f\u89c9\u53ef\u4ee5\u7384\u5b66\u4f18\u5316\u4e00\u4e0b\u5efa\u6811\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u51fa\u7684\u79bb\u8c31\uff0c\u5e76\u4e0d\u63a8\u8350\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u6574\u578b\u7684\u9762\u79ef\u5e76\u3002","title":"G - Rectangles"},{"location":"Topic Training/Segment Tree/SegmentTree2/#h-ping-pong","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u6570\u5b57\uff0c\u6c42\u4e09\u5143\u9006\u5e8f\u5bf9\u548c\u4e09\u5143\u6b63\u5e8f\u5bf9\u6570\u91cf\u548c \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6b63\u53cd\u6c42\u51fa\u6b63\u9006\u5e8f\u5bf9\u6570\u91cf\u4e58\u52a0\u5373\u53ef \u5f88\u5751\u7684\u4e00\u70b9\u662f\u5b83\u5e76\u6ca1\u6709\u8bf4a\u5e8f\u5217\u662fn\u7684\u6392\u5217","title":"H - Ping pong"},{"location":"Topic Training/Segment Tree/SegmentTree2/#i-lost-cows","text":"\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u6392\u5217\u4e2d\u6bcf\u4e2a\u70b9\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5c0f\u4e8e\u5b83\u7684\u70b9\uff0c\u6784\u9020\u51fa\u6b64\u6392\u5217 \u4ece\u540e\u5f80\u524d\u679a\u4e3e\u5373\u53ef\uff0c\u6bcf\u6b21\u4e8c\u5206\u4e00\u4e2a\u6700\u5c0f\u70b9\u4f7f\u5f97\u524d\u7f00\u548c\u7b26\u5408\u9898\u610f\u5373\u53ef","title":"I - Lost Cows"},{"location":"Topic Training/Segment Tree/SegmentTree2/#j-billboard","text":"\u9898\u610f\uff1a\u7ed9 h*w h*w \u7684\u77e9\u9635\uff0c\u8981\u628a n n \u4ef6\u7269\u54c1\u586b\u5165\uff0c\u6bcf\u4ef6\u7269\u54c1\u7684\u5927\u5c0f\u662f 1*w_i 1*w_i \uff0c\u6bcf\u6b21\u8d2a\u5fc3\u7684\u627e\u6700\u4e0a\u3001\u6700\u5de6\u7684\u70b9\uff0c\u5982\u679c\u80fd\u586b\u5165\u5219\u8f93\u51fa\u884c\u53f7\u3002 \u7ecf\u5178\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u5373\u53ef\uff0c\u627e\u51fa\u53ef\u4ee5\u6539\u7684\u6700\u5de6\u533a\u95f4\uff0c\u6bd4\u8f83\u7c7b\u4f3c\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u64cd\u4f5c","title":"J - Billboard"},{"location":"Topic Training/Segment Tree/SegmentTree2/#k-memory-control","text":"\u9898\u610f\uff1a\u6709\u4e00\u4e2a\u5168\u7a7a\u5730\u5740\uff0c4\u79cd\u64cd\u4f5c\uff1a 1. \u6e05\u7a7a\u6574\u4e2a\u5e8f\u5217\uff0c\u8f93\u51fa\u201cReset Now\u201d 2. \u53d6\u51fa\u6700\u5de6\u7aef\u7684\u8fde\u7eedx\u4e2a\u7a7a\u5730\u5740\uff0c\u8f93\u51fa\u201cNew at A\u201d\u6216\u8005\u201cReject New\u201d 3. \u6e05\u7a7a\u5305\u542bx\u7684\u8fde\u7eed\u5730\u5740\u5757\uff0c\u8f93\u51fa\u201cFree from A to B\u201d\u6216\u8005\u201cReject Free\u201d 4. \u8f93\u51fa\u7b2cx\u4e2a\u8fde\u7eed\u5730\u5740\u5757\u7684\u5de6\u7aef\u70b9\uff0c\u8f93\u51fa\u201cGet at A\u201d\u6216\u8005\u201cReject Get\u201d \u5c31\u662fhotel\u7684\u5347\u7ea7\u7248\uff0c\u5177\u4f53\u6765\u8bf4\uff1a - \u7ef4\u62a4\u6700\u5927\u8fde\u7eed\u53ef\u7528\u533a\u95f4\uff08lsum,rsum,mxsum\uff09 - \u7ef4\u62a4\u5df2\u9009\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff08lpos,rpos\uff09 - \u7ef4\u62a4\u5de6\u7aef\u70b9\u4e2a\u6570\uff08val\uff09 1\u64cd\u4f5c\u6574\u4e2a\u533a\u95f4\u6e05\u7a7alazy 2\u64cd\u4f5c\u53d6\u51fa\u6700\u5de6\u7aef\u7684\u4e0d\u5c0f\u4e8ex\u7684\u7a7a\u5730\u5740 3\u64cd\u4f5c\u53d6\u51fax\u7684\u5de6\u53f3\u7aef\u70b9\u5e76\u66f4\u65b0 4\u64cd\u4f5c\u7ebf\u6bb5\u6811\u4e0a\u5206\u6cbb\u5373\u53ef","title":"K - Memory Control"},{"location":"Topic Training/Segment Tree/SegmentTree2/#l-man-down","text":"\u9898\u610f\uff1a\u662f\u7537\u4eba\u5c31\u4e0b\u4e00\u767e\u5c42\uff0c\u6bcf\u4e2a\u677f\u5b50\u6709\u6743\u503c\uff0c\u6389\u843d\u4e0b\u6765\u52a0\u6743\uff0c\u6c42\u6700\u7ec8\u6700\u5927\u6743\u503c\uff0c\u82e5\u662f\u8d1f\u6570\u8f93\u51fa-1\uff0c\u521d\u59cb\u5728\u6700\u9ad8\u70b9\uff0c\u6709\u6700\u9ad8\u7684\u677f\u5b50\u7684\u6743\u503c+100 \u6309\u9006\u5e8f\u8fdb\u884cDAG\u4e0adp\uff0c\u6bcf\u6b21\u628a\u4e00\u4e2a\u677f\u5b50\u7684\u5de6\u53f3\u7aef\u70b9\u4e2d\u5927\u7684\u90a3\u4e2a\u6743\u503c\u52a0\u5230\u677f\u5b50\u533a\u95f4\u4e0a\u5373\u53ef \u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e00\u76f4tle\uff0c\u91cd\u5199\u4e00\u904d\u8fc7\u4e86","title":"L - Man Down"},{"location":"Topic Training/Segment Tree/SegmentTree2/#m-multiply-game","text":"\u9898\u610f\uff1a\u533a\u95f4\u79ef\u3001\u5355\u70b9\u4fee\u6539 \u50bb\u903c\u9898","title":"M - Multiply game"},{"location":"Topic Training/Segment Tree/SegmentTree2/#n-posters","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u6709\u77e9\u5f62\u5b54\u7684\u77e9\u5f62\uff0c\u6c42\u8986\u76d6\u9762\u79ef\u5e76 \u6c99\u6bd4\u63d0","title":"N - Posters"},{"location":"Topic Training/Segment Tree/SegmentTree2/#o-light","text":"","title":"O - Light"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanchang Regional/","text":"Name Date Solved A B C D E F G H I J K L M 2019 ICPC Asia Nanchang Regional 2019/12/11 5/13 . O O . O . O . . . . O . B. A Funny Bipartite Graph Link \u7ed9\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc73\u3002\u8981\u6c42\u9009\u53d6\u56fe\u4e2d\u7684\u4e00\u4e9b\u8fb9\uff0c\u6765\u6784\u9020\u4e00\u5f20\u65b0\u56fe\uff0c\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a \u5de6\u4fa7\u7684\u67d0\u4e9b\u70b9\u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u65b0\u56fe\u4e2d\uff1b \u53f3\u4fa7\u7684\u6240\u6709\u70b9\u5fc5\u987b\u540c\u65f6\u51fa\u73b0\u5728\u65b0\u56fe\u4e2d\uff1b \u5de6\u4fa7\u7684\u70b9\u6709\u6743\u503cw[i]\uff0c\u5728\u65b0\u56fe\u4e2d\u7684\u82b1\u8d39\u4e3a w^{d} w^{d} \uff0c\u5176\u4e2dd\u4e3a\u8be5\u70b9\u7684\u5ea6\u6570\uff1b \u6c42\u6784\u5efa\u4e00\u5f20\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u56fe\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u9898\u89e3\uff1a\u6b63\u89e3\u662fdp\uff0c\u6211\u968f\u4fbfdfs\u5e38\u89c4\u526a\u4e00\u4e0b\u679d\u5c31\u8fc7\u4e86\u566b C. And and Pair Link \u7ed9\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570n\uff0c\u6c42\u6ee1\u8db3\u5982\u4e0b\u9650\u5236\u7684\u70b9\u5bf9 (i,j) (i,j) \u7684\u6570\u91cf\uff1a 0\u2264j\u2264i\u2264n 0\u2264j\u2264i\u2264n i\\&n=i i\\&n=i i\\&j=0 i\\&j=0 \u5176\u4e2dn\u7684\u4f4d\u6570\u2264 10^5 10^5 \u9898\u89e3\uff1a\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6570n\u7684\u6bcf\u4e2a\u4ee51\u5f00\u5934\u7684\u540e\u7f00\uff0c\u5b83\u7684\u7b54\u6848\u4e3a 3^x+2^y 3^x+2^y \uff0c\u5176\u4e2d x x \u8868\u793a\u540e\u7f00\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570\uff0c y y \u8868\u793a0\u7684\u4e2a\u6570\uff0c\u6c42\u548c+1\uff08\u8868\u793a0,0\u7684\u8d21\u732e\uff09\u5373\u53ef\u3002 E. Bob\u2019s Problem Link \u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u56fe\u4e0a\u7684\u8fb9\u5206\u4e3a\u9ed1\u8fb9\u548c\u767d\u8fb9\u4e24\u7c7b\u3002\u8981\u6c42\u6784\u9020\u4e00\u5f20\u65b0\u56fe\uff0c\u5176\u4e2d\u767d\u8fb9\u7684\u6570\u91cf\u4e0d\u8d85\u8fc7k\uff0c\u4f7f\u65b0\u56fe\u4e2d\u7684\u70b9\u4e24\u4e24\u53ef\u8fbe\uff0c\u6c42\u80fd\u6784\u9020\u51fa\u7684\u65b0\u56fe\u7684\u6700\u5927\u8fb9\u6743\u3002 \u9898\u89e3\uff1a\u9996\u5148\u8fde\u4e0a\u6240\u6709\u9ed1\u8fb9\uff0c\u5bf9\u767d\u8fb9\u8dd1\u6700\u5927\u751f\u6210\u6811\uff0c\u5982\u679c\u4e0d\u5230k\u5219\u8d2a\u5fc3\u5730\u53d6\u6ca1\u6709\u53d6\u7684\u767d\u8fb9\u3002\u8bb0\u5f97\u5224\u56fe\u662f\u5426\u8fde\u901a\u3002 G. Eating Plan Link \u7ed9\u4e00\u4e2a\u5e8f\u5217a\uff0ca\u4e3a1-n\u7684\u67d0\u4e2a\u6392\u5217\uff0c b_i=a_i! b_i=a_i! \u4e00\u5171\u7ed9\u51fam\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u8be5\u5e8f\u5217\u6700\u77ed\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u4e32( (b_l+b_{l+1}+...+b_r)\\%t \u2265k (b_l+b_{l+1}+...+b_r)\\%t \u2265k )\u7684\u5b50\u4e32\u957f\u5ea6\uff0c\u5176\u4e2dt=998857459\u3002 \u9898\u89e3\uff1a\u62c6\u5206\u4e00\u4e0b\u7d20\u56e0\u5b50\u53ef\u4ee5\u5f97\u5230 t=461\u00d7773\u00d72803 t=461\u00d7773\u00d72803 \uff0c\u4e5f\u5c31\u662f\u5f53 a_i\u22652803 a_i\u22652803 \u65f6\uff0c a_i\uff01\\%t=0 a_i\uff01\\%t=0 .\u6240\u4ee5for\u4e00\u4e0b\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b50\u4e32\u548c\u7684\u6700\u5c0f\u957f\u5ea6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u4e8c\u5206\u67e5\u627e\u4e00\u4e0b\u5c31\u884c\u3002 L. Who is the Champion Link N \u652f\u7403\u961f\u8fdb\u884c\u8db3\u7403\u6bd4\u8d5b,\u6bcf\u4e24\u652f\u7403\u961f\u5747\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b,\u80dc\u65b9\u79ef\u4e09\u5206,\u8d1f\u65b9\u79ef\u96f6\u5206,\u82e5\u6253\u5e73\u5219\u4e24\u961f\u5747\u79ef\u4e00\u5206\u3002\u6309\u7167\u79ef\u5206\u4e0e\u51c0\u80dc\u7403\u8fdb\u884c\u6392\u540d,\u95ee\u6700\u540e\u54ea\u652f\u7403\u961f\u83b7\u5f97\u51a0\u519b,\u82e5\u65e0\u6cd5\u51b3\u51fa\u51a0\u519b\u5219\u8f93\u51fa\u201cplay-offs\u2019\u2019\u3002 \u7b7e\u5230\u9898\uff0c\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002","title":"2019 ICPC Asia Nanchang Regional"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanchang Regional/#b-a-funny-bipartite-graph","text":"\u7ed9\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u4e0d\u8d85\u8fc73\u3002\u8981\u6c42\u9009\u53d6\u56fe\u4e2d\u7684\u4e00\u4e9b\u8fb9\uff0c\u6765\u6784\u9020\u4e00\u5f20\u65b0\u56fe\uff0c\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a \u5de6\u4fa7\u7684\u67d0\u4e9b\u70b9\u4e0d\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u65b0\u56fe\u4e2d\uff1b \u53f3\u4fa7\u7684\u6240\u6709\u70b9\u5fc5\u987b\u540c\u65f6\u51fa\u73b0\u5728\u65b0\u56fe\u4e2d\uff1b \u5de6\u4fa7\u7684\u70b9\u6709\u6743\u503cw[i]\uff0c\u5728\u65b0\u56fe\u4e2d\u7684\u82b1\u8d39\u4e3a w^{d} w^{d} \uff0c\u5176\u4e2dd\u4e3a\u8be5\u70b9\u7684\u5ea6\u6570\uff1b \u6c42\u6784\u5efa\u4e00\u5f20\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u56fe\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u9898\u89e3\uff1a\u6b63\u89e3\u662fdp\uff0c\u6211\u968f\u4fbfdfs\u5e38\u89c4\u526a\u4e00\u4e0b\u679d\u5c31\u8fc7\u4e86\u566b","title":"B. A Funny Bipartite Graph"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanchang Regional/#c-and-and-pair","text":"\u7ed9\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570n\uff0c\u6c42\u6ee1\u8db3\u5982\u4e0b\u9650\u5236\u7684\u70b9\u5bf9 (i,j) (i,j) \u7684\u6570\u91cf\uff1a 0\u2264j\u2264i\u2264n 0\u2264j\u2264i\u2264n i\\&n=i i\\&n=i i\\&j=0 i\\&j=0 \u5176\u4e2dn\u7684\u4f4d\u6570\u2264 10^5 10^5 \u9898\u89e3\uff1a\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6570n\u7684\u6bcf\u4e2a\u4ee51\u5f00\u5934\u7684\u540e\u7f00\uff0c\u5b83\u7684\u7b54\u6848\u4e3a 3^x+2^y 3^x+2^y \uff0c\u5176\u4e2d x x \u8868\u793a\u540e\u7f00\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570\uff0c y y \u8868\u793a0\u7684\u4e2a\u6570\uff0c\u6c42\u548c+1\uff08\u8868\u793a0,0\u7684\u8d21\u732e\uff09\u5373\u53ef\u3002","title":"C. And and Pair"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanchang Regional/#e-bobs-problem","text":"\u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u56fe\u4e0a\u7684\u8fb9\u5206\u4e3a\u9ed1\u8fb9\u548c\u767d\u8fb9\u4e24\u7c7b\u3002\u8981\u6c42\u6784\u9020\u4e00\u5f20\u65b0\u56fe\uff0c\u5176\u4e2d\u767d\u8fb9\u7684\u6570\u91cf\u4e0d\u8d85\u8fc7k\uff0c\u4f7f\u65b0\u56fe\u4e2d\u7684\u70b9\u4e24\u4e24\u53ef\u8fbe\uff0c\u6c42\u80fd\u6784\u9020\u51fa\u7684\u65b0\u56fe\u7684\u6700\u5927\u8fb9\u6743\u3002 \u9898\u89e3\uff1a\u9996\u5148\u8fde\u4e0a\u6240\u6709\u9ed1\u8fb9\uff0c\u5bf9\u767d\u8fb9\u8dd1\u6700\u5927\u751f\u6210\u6811\uff0c\u5982\u679c\u4e0d\u5230k\u5219\u8d2a\u5fc3\u5730\u53d6\u6ca1\u6709\u53d6\u7684\u767d\u8fb9\u3002\u8bb0\u5f97\u5224\u56fe\u662f\u5426\u8fde\u901a\u3002","title":"E. Bob's Problem"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanchang Regional/#g-eating-plan","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217a\uff0ca\u4e3a1-n\u7684\u67d0\u4e2a\u6392\u5217\uff0c b_i=a_i! b_i=a_i! \u4e00\u5171\u7ed9\u51fam\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u8be5\u5e8f\u5217\u6700\u77ed\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u4e32( (b_l+b_{l+1}+...+b_r)\\%t \u2265k (b_l+b_{l+1}+...+b_r)\\%t \u2265k )\u7684\u5b50\u4e32\u957f\u5ea6\uff0c\u5176\u4e2dt=998857459\u3002 \u9898\u89e3\uff1a\u62c6\u5206\u4e00\u4e0b\u7d20\u56e0\u5b50\u53ef\u4ee5\u5f97\u5230 t=461\u00d7773\u00d72803 t=461\u00d7773\u00d72803 \uff0c\u4e5f\u5c31\u662f\u5f53 a_i\u22652803 a_i\u22652803 \u65f6\uff0c a_i\uff01\\%t=0 a_i\uff01\\%t=0 .\u6240\u4ee5for\u4e00\u4e0b\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b50\u4e32\u548c\u7684\u6700\u5c0f\u957f\u5ea6\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u4e8c\u5206\u67e5\u627e\u4e00\u4e0b\u5c31\u884c\u3002","title":"G. Eating Plan"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanchang Regional/#l-who-is-the-champion","text":"N \u652f\u7403\u961f\u8fdb\u884c\u8db3\u7403\u6bd4\u8d5b,\u6bcf\u4e24\u652f\u7403\u961f\u5747\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b,\u80dc\u65b9\u79ef\u4e09\u5206,\u8d1f\u65b9\u79ef\u96f6\u5206,\u82e5\u6253\u5e73\u5219\u4e24\u961f\u5747\u79ef\u4e00\u5206\u3002\u6309\u7167\u79ef\u5206\u4e0e\u51c0\u80dc\u7403\u8fdb\u884c\u6392\u540d,\u95ee\u6700\u540e\u54ea\u652f\u7403\u961f\u83b7\u5f97\u51a0\u519b,\u82e5\u65e0\u6cd5\u51b3\u51fa\u51a0\u519b\u5219\u8f93\u51fa\u201cplay-offs\u2019\u2019\u3002 \u7b7e\u5230\u9898\uff0c\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002","title":"L. Who is the Champion"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanjing Regional Contest/","text":"Name Date solved A B C D E F G H I J K 2019 ICPC Asia Nanjing Regional Contest 2019/10/27 6 O . O . . O . \u00d8 . \u00d8 O A. A Hard Problem Link \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u627e\u5230\u4e00\u4e2a\u6b63\u6574\u6570k, \u4f7f\u5bf9\u4e8e{1, 2, 3, \u2026, n} \u7684\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\u4e2d\u90fd\u81f3\u5c11\u5b58\u5728\u4e00\u7ec4\u6570(u,v)\uff0c\u4f7fu\u80fd\u88abv\u6574\u9664\u3002 \u6700\u5927\u7684\u4e24\u4e24\u4e0d\u4e92\u4e3a\u56e0\u5b50\u7684\u60c5\u51b5\u662f\u53d6\u5927\u4e8e\u7b49\u4e8e \\lceil {n \\over 2}\\rceil \\lceil {n \\over 2}\\rceil \u7684\u6240\u6709\u6570\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u53d6\u4e00\u4e2a\u6570\uff0c\u4e00\u5b9a\u662f\u67d0\u539f\u96c6\u5408\u4e2d\u67d0\u4e00\u4e2a\u6570\u7684\u00bd\uff0c\u7b54\u6848\u662f \\lceil {n \\over 2}\\rceil + 1 \\lceil {n \\over 2}\\rceil + 1 C. Digital Path Link \u7ed9\u4e00\u4e2an\u00d7m\u7684\u77e9\u9635\uff0c\u77e9\u9635\u5185\u503c\u7684\u5927\u5c0f\u4e3a[-10 7,10 7]\u3002\u5176\u4e2d\u4e00\u6761\u5408\u6cd5\u7684\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\uff1a\u76f8\u90bb\u4e24\u6b65\u7684\u683c\u5b50\u4e4b\u95f4\u6709\u8fb9\u76f8\u90bb\uff0c\u4e14\u5f53\u524d\u683c\u5b50\u6570\u503c\u4e3a\u4e0a\u4e00\u6b65+1\uff0c\u5e76\u4e14\u4e0d\u80fd\u7ee7\u7eed\u6269\u5c55\u3002\u95ee\u8be5\u77e9\u9635\u4e2d\u6709\u591a\u5c11\u6761\u5408\u6cd5\u8def\u5f84\u3002 dp[i][j][k] \u8868\u793ai\u884cj\u5217\u7684\u70b9\u6709\u591a\u5c11\u6761\u4ee5\u5b83\u7ed3\u675f\u7684\u8def\u5f84\uff0ck\u8868\u793a\u8def\u5f84\u7684\u957f\u5ea6\u4e3a2,3, >=4\u7684\u8def\u5f84\u79cd\u7c7b\uff0c\u6bcf\u6b21\u5411\u56db\u5468\u66f4\u65b0\u6269\u5c55\uff0c\u5982\u679c\u90fd\u4e0d\u80fd\u6269\u5c55\u8868\u793a\u8def\u5f84\u4ee5\u5b83\u4e3a\u7ed3\u5c3e\uff0c\u8bb0\u5f55\u7b54\u6848\u3002 F. Paper Grading Link \u5bf9\u5e8f\u5217\u548c\u4ea4\u6362\u64cd\u4f5c\u5206\u5757\uff0c\u5f53\u64cd\u4f5c\u8fbe\u5230\u5757\u5927\u5c0f\u65f6rebuild\u5373\u53ef\uff0c\u5e8f\u5217\u7684\u5757\u5185\u4f7f\u7528\u5b57\u5178\u6811\u7ef4\u62a4\u5373\u53ef\u3002\u64cd\u4f5c\u4e0d\u5230\u5757\u5927\u5c0f\u65f6\u5355\u72ec\u8ba1\u7b97swap\u540e\u7684\u589e\u91cf\u548c\u51cf\u91cf\u7684\u8d21\u732e\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(nsqrt(n)) O(nsqrt(n)) \u6b63\u89e3\u597d\u50cf\u662fhash+\u4e8c\u7ef4\u6570\u70b9\uff0c\u590d\u6742\u5ea6 O(nlog^2(n)) O(nlog^2(n)) H. Prince and Princess Link \u738b\u5b50\u60f3\u5411\u516c\u4e3b\u6c42\u5a5a\u3002\u5bab\u4e2d\u6709\u4e09\u7c7b\u4eba\uff0c\u4ee5\u516c\u4e3b\u4e3a\u9996\u8d5e\u6210\u5a5a\u793c\u7684\u4eba\uff0c\u53cd\u5bf9\u5a5a\u793c\u7684\u4eba\uff0c\u4e0d\u5173\u5fc3\u7684\u4eba\uff0c\u4ed6\u4eec\u7684\u4eba\u6570\u4e3aa\uff0cb\uff0cc(a>0, b,c\u22650)\u3002\u738b\u5b50\u77e5\u9053\u4e09\u7c7b\u4eba\u7684\u6570\u91cf\uff0c\u8fd9\u4e9b\u4eba\u5206\u522b\u5446\u5728\u5404\u81ea\u7684\u623f\u95f4\uff0c\u738b\u5b50\u53ef\u4ee5\u5411\u623f\u95f4\u5185\u7684\u4eba\u63d0\u4ee5\u4e0b\u4e09\u7c7b\u95ee\u9898\uff1a \u4f60\u662f\u8c01 \u5728X\u623f\u95f4\u5185\u7684\u4eba\u662f\u8c01 \u516c\u4e3b\u5728\u54ea\u4e2a\u623f\u95f4 \u6240\u6709\u4eba\u90fd\u4f1a\u56de\u7b54\u95ee\u9898\uff0c\u4f46\u8d5e\u6210\u5a5a\u793c\u7684\u4eba\u4f1a\u544a\u8bc9\u4ed6\u6b63\u786e\u7684\u7b54\u6848\uff0c\u53cd\u5bf9\u5a5a\u793c\u7684\u4eba\u4f1a\u544a\u8bc9\u4ed6\u9519\u8bef\u7684\u7b54\u6848\uff0c\u4e0d\u5173\u5fc3\u7684\u4eba\u4f1a\u968f\u673a\u7ed9\u51fa\u56de\u7b54\u3002\u738b\u5b50\u8981\u81f3\u5c11\u95ee\u51e0\u4e2a\u95ee\u9898\uff0c\u624d\u80fd\u627e\u5230\u516c\u4e3b\u6240\u5728\u7684\u623f\u95f4\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u8f93\u51fa-1. \u6700\u574f\u60c5\u51b5\u4e0b\u628ac\u770b\u505ab\uff0c\u5982\u679cb+c>a\uff0c\u90a3\u4e48\u738b\u5b50\u6ca1\u6709\u529e\u6cd5\u627e\u5230\u516c\u4e3b\u3002\u5426\u5219\u95ee2*(b+c)+1\u4e2a\u4eba\u201c\u516c\u4e3b\u5728\u54ea\u4e2a\u623f\u95f4\u201d\u5c31\u80fd\u627e\u5230\u516c\u4e3b\u3002 \u7279\u52241,0,0\u4e3a0\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u623f\u95f4\uff0c\u8fd9\u4e2a\u623f\u95f4\u91cc\u9762\u4e00\u5b9a\u662f\u516c\u4e3b\u3002 J. Spy Link A,B\u5404\u6709n\u652f\u961f\uff0c\u5176\u4e2dA\u7684\u961f\u4f0d\u80fd\u529b\u503c\u5df2\u7ecf\u786e\u5b9a\u3002B\u6709\u4e24\u7c7b\u4eba\uff0c\u8981\u628a\u4e00\u7c7b\u4eba\u548c\u53e6\u4e00\u7c7b\u4eba\u642d\u914d\uff0c\u80fd\u529b\u503c\u4e3a\u4e24\u8005\u7684\u80fd\u529b\u503c\u4e4b\u548c\u3002\u642d\u914d\u5b8c\u540e\u5c06A,B\u7684\u961f\u4f0d\u968f\u673a\u6392\u5217\u5bf9\u6218\uff0c\u5982\u679cA\u7684\u7b2ci\u4e2a\u961f\u4f0d\u80fd\u529b\u503c\u5c0f\u4e8eB\u548c\u5b83\u5bf9\u6218\u7684\u961f\u4f0d\uff0c\u5219B\u53ef\u4ee5\u83b7\u5f97\u5206\u6570val[i]\u3002\u8f93\u51fa\u7ec4\u961f\u540eB\u7684\u6700\u5927\u5f97\u5206\u7684\u671f\u671b\u00d7n\u3002 \u5bf9\u671f\u671b\u5f0f\u5b50\u5316\u7b80\u4e4b\u540e\u5c31\u662f\u88f8\u7684\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\uff0cB\u7684a[i]\u548cb[j]\u8fde\u8fb9\u7684\u8fb9\u6743\u4e3a \\sum_{k=1}^n{a[i]+b[j]>c[k]?val[k]:0} \\sum_{k=1}^n{a[i]+b[j]>c[k]?val[k]:0} \u3002\u8fd9\u9898\u5361\u4e86KMdfs\u677f\u5b50\u3002 K. Triangle Link \u7ed9\u4e86\u4e09\u89d2\u5f62\u4e09\u4e2a\u70b9\u7684\u5750\u6807\u548c\u70b9P\uff0c\u8981\u6c42\u627e\u4e00\u4e2a\u70b9Q\uff0c\u4f7f\u7ebf\u6bb5PQ\u5e73\u5206\u4e09\u89d2\u5f62\u7684\u9762\u79ef\uff0cP,Q\u90fd\u5728\u4e09\u89d2\u5f62\u8fb9\u4e0a\u3002 \u4e8c\u5206100\u6b21\u53ef\u8fc7\uff0c\u76f4\u63a5\u7b97\u7684\u8bdd\u7528sin\u4f1a\u5361\u7cbe\u5ea6\uff0c\u5f0f\u5b50\u91cc\u9762sin\u53ef\u4ee5\u5316\u7b80\u6389\uff0c\u63a8\u51fa\u6765\u7684\u7b54\u6848\u503c\u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\u3002","title":"2019 ICPC Asia Nanjing Regional Contest"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanjing Regional Contest/#a-a-hard-problem","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u627e\u5230\u4e00\u4e2a\u6b63\u6574\u6570k, \u4f7f\u5bf9\u4e8e{1, 2, 3, \u2026, n} \u7684\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\u4e2d\u90fd\u81f3\u5c11\u5b58\u5728\u4e00\u7ec4\u6570(u,v)\uff0c\u4f7fu\u80fd\u88abv\u6574\u9664\u3002 \u6700\u5927\u7684\u4e24\u4e24\u4e0d\u4e92\u4e3a\u56e0\u5b50\u7684\u60c5\u51b5\u662f\u53d6\u5927\u4e8e\u7b49\u4e8e \\lceil {n \\over 2}\\rceil \\lceil {n \\over 2}\\rceil \u7684\u6240\u6709\u6570\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u53d6\u4e00\u4e2a\u6570\uff0c\u4e00\u5b9a\u662f\u67d0\u539f\u96c6\u5408\u4e2d\u67d0\u4e00\u4e2a\u6570\u7684\u00bd\uff0c\u7b54\u6848\u662f \\lceil {n \\over 2}\\rceil + 1 \\lceil {n \\over 2}\\rceil + 1","title":"A. A Hard Problem"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanjing Regional Contest/#c-digital-path","text":"\u7ed9\u4e00\u4e2an\u00d7m\u7684\u77e9\u9635\uff0c\u77e9\u9635\u5185\u503c\u7684\u5927\u5c0f\u4e3a[-10 7,10 7]\u3002\u5176\u4e2d\u4e00\u6761\u5408\u6cd5\u7684\u8def\u5f84\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\uff1a\u76f8\u90bb\u4e24\u6b65\u7684\u683c\u5b50\u4e4b\u95f4\u6709\u8fb9\u76f8\u90bb\uff0c\u4e14\u5f53\u524d\u683c\u5b50\u6570\u503c\u4e3a\u4e0a\u4e00\u6b65+1\uff0c\u5e76\u4e14\u4e0d\u80fd\u7ee7\u7eed\u6269\u5c55\u3002\u95ee\u8be5\u77e9\u9635\u4e2d\u6709\u591a\u5c11\u6761\u5408\u6cd5\u8def\u5f84\u3002 dp[i][j][k] \u8868\u793ai\u884cj\u5217\u7684\u70b9\u6709\u591a\u5c11\u6761\u4ee5\u5b83\u7ed3\u675f\u7684\u8def\u5f84\uff0ck\u8868\u793a\u8def\u5f84\u7684\u957f\u5ea6\u4e3a2,3, >=4\u7684\u8def\u5f84\u79cd\u7c7b\uff0c\u6bcf\u6b21\u5411\u56db\u5468\u66f4\u65b0\u6269\u5c55\uff0c\u5982\u679c\u90fd\u4e0d\u80fd\u6269\u5c55\u8868\u793a\u8def\u5f84\u4ee5\u5b83\u4e3a\u7ed3\u5c3e\uff0c\u8bb0\u5f55\u7b54\u6848\u3002","title":"C. Digital Path"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanjing Regional Contest/#f-paper-grading","text":"\u5bf9\u5e8f\u5217\u548c\u4ea4\u6362\u64cd\u4f5c\u5206\u5757\uff0c\u5f53\u64cd\u4f5c\u8fbe\u5230\u5757\u5927\u5c0f\u65f6rebuild\u5373\u53ef\uff0c\u5e8f\u5217\u7684\u5757\u5185\u4f7f\u7528\u5b57\u5178\u6811\u7ef4\u62a4\u5373\u53ef\u3002\u64cd\u4f5c\u4e0d\u5230\u5757\u5927\u5c0f\u65f6\u5355\u72ec\u8ba1\u7b97swap\u540e\u7684\u589e\u91cf\u548c\u51cf\u91cf\u7684\u8d21\u732e\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(nsqrt(n)) O(nsqrt(n)) \u6b63\u89e3\u597d\u50cf\u662fhash+\u4e8c\u7ef4\u6570\u70b9\uff0c\u590d\u6742\u5ea6 O(nlog^2(n)) O(nlog^2(n))","title":"F. Paper Grading"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanjing Regional Contest/#h-prince-and-princess","text":"\u738b\u5b50\u60f3\u5411\u516c\u4e3b\u6c42\u5a5a\u3002\u5bab\u4e2d\u6709\u4e09\u7c7b\u4eba\uff0c\u4ee5\u516c\u4e3b\u4e3a\u9996\u8d5e\u6210\u5a5a\u793c\u7684\u4eba\uff0c\u53cd\u5bf9\u5a5a\u793c\u7684\u4eba\uff0c\u4e0d\u5173\u5fc3\u7684\u4eba\uff0c\u4ed6\u4eec\u7684\u4eba\u6570\u4e3aa\uff0cb\uff0cc(a>0, b,c\u22650)\u3002\u738b\u5b50\u77e5\u9053\u4e09\u7c7b\u4eba\u7684\u6570\u91cf\uff0c\u8fd9\u4e9b\u4eba\u5206\u522b\u5446\u5728\u5404\u81ea\u7684\u623f\u95f4\uff0c\u738b\u5b50\u53ef\u4ee5\u5411\u623f\u95f4\u5185\u7684\u4eba\u63d0\u4ee5\u4e0b\u4e09\u7c7b\u95ee\u9898\uff1a \u4f60\u662f\u8c01 \u5728X\u623f\u95f4\u5185\u7684\u4eba\u662f\u8c01 \u516c\u4e3b\u5728\u54ea\u4e2a\u623f\u95f4 \u6240\u6709\u4eba\u90fd\u4f1a\u56de\u7b54\u95ee\u9898\uff0c\u4f46\u8d5e\u6210\u5a5a\u793c\u7684\u4eba\u4f1a\u544a\u8bc9\u4ed6\u6b63\u786e\u7684\u7b54\u6848\uff0c\u53cd\u5bf9\u5a5a\u793c\u7684\u4eba\u4f1a\u544a\u8bc9\u4ed6\u9519\u8bef\u7684\u7b54\u6848\uff0c\u4e0d\u5173\u5fc3\u7684\u4eba\u4f1a\u968f\u673a\u7ed9\u51fa\u56de\u7b54\u3002\u738b\u5b50\u8981\u81f3\u5c11\u95ee\u51e0\u4e2a\u95ee\u9898\uff0c\u624d\u80fd\u627e\u5230\u516c\u4e3b\u6240\u5728\u7684\u623f\u95f4\u3002\u5982\u679c\u627e\u4e0d\u5230\uff0c\u8f93\u51fa-1. \u6700\u574f\u60c5\u51b5\u4e0b\u628ac\u770b\u505ab\uff0c\u5982\u679cb+c>a\uff0c\u90a3\u4e48\u738b\u5b50\u6ca1\u6709\u529e\u6cd5\u627e\u5230\u516c\u4e3b\u3002\u5426\u5219\u95ee2*(b+c)+1\u4e2a\u4eba\u201c\u516c\u4e3b\u5728\u54ea\u4e2a\u623f\u95f4\u201d\u5c31\u80fd\u627e\u5230\u516c\u4e3b\u3002 \u7279\u52241,0,0\u4e3a0\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u623f\u95f4\uff0c\u8fd9\u4e2a\u623f\u95f4\u91cc\u9762\u4e00\u5b9a\u662f\u516c\u4e3b\u3002","title":"H. Prince and Princess"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanjing Regional Contest/#j-spy","text":"A,B\u5404\u6709n\u652f\u961f\uff0c\u5176\u4e2dA\u7684\u961f\u4f0d\u80fd\u529b\u503c\u5df2\u7ecf\u786e\u5b9a\u3002B\u6709\u4e24\u7c7b\u4eba\uff0c\u8981\u628a\u4e00\u7c7b\u4eba\u548c\u53e6\u4e00\u7c7b\u4eba\u642d\u914d\uff0c\u80fd\u529b\u503c\u4e3a\u4e24\u8005\u7684\u80fd\u529b\u503c\u4e4b\u548c\u3002\u642d\u914d\u5b8c\u540e\u5c06A,B\u7684\u961f\u4f0d\u968f\u673a\u6392\u5217\u5bf9\u6218\uff0c\u5982\u679cA\u7684\u7b2ci\u4e2a\u961f\u4f0d\u80fd\u529b\u503c\u5c0f\u4e8eB\u548c\u5b83\u5bf9\u6218\u7684\u961f\u4f0d\uff0c\u5219B\u53ef\u4ee5\u83b7\u5f97\u5206\u6570val[i]\u3002\u8f93\u51fa\u7ec4\u961f\u540eB\u7684\u6700\u5927\u5f97\u5206\u7684\u671f\u671b\u00d7n\u3002 \u5bf9\u671f\u671b\u5f0f\u5b50\u5316\u7b80\u4e4b\u540e\u5c31\u662f\u88f8\u7684\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\uff0cB\u7684a[i]\u548cb[j]\u8fde\u8fb9\u7684\u8fb9\u6743\u4e3a \\sum_{k=1}^n{a[i]+b[j]>c[k]?val[k]:0} \\sum_{k=1}^n{a[i]+b[j]>c[k]?val[k]:0} \u3002\u8fd9\u9898\u5361\u4e86KMdfs\u677f\u5b50\u3002","title":"J. Spy"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Nanjing Regional Contest/#k-triangle","text":"\u7ed9\u4e86\u4e09\u89d2\u5f62\u4e09\u4e2a\u70b9\u7684\u5750\u6807\u548c\u70b9P\uff0c\u8981\u6c42\u627e\u4e00\u4e2a\u70b9Q\uff0c\u4f7f\u7ebf\u6bb5PQ\u5e73\u5206\u4e09\u89d2\u5f62\u7684\u9762\u79ef\uff0cP,Q\u90fd\u5728\u4e09\u89d2\u5f62\u8fb9\u4e0a\u3002 \u4e8c\u5206100\u6b21\u53ef\u8fc7\uff0c\u76f4\u63a5\u7b97\u7684\u8bdd\u7528sin\u4f1a\u5361\u7cbe\u5ea6\uff0c\u5f0f\u5b50\u91cc\u9762sin\u53ef\u4ee5\u5316\u7b80\u6389\uff0c\u63a8\u51fa\u6765\u7684\u7b54\u6848\u503c\u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\u3002","title":"K. Triangle"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Xuzhou Regional/","text":"Name Date Solved A B C D E F G H I J K L M 2019 ICPC Asia Xuzhou Regional 2019/12/7 6/12 O . O . \u00d8 O . . . . . O \u00d8 \u6709\u4e00\u8bf4\u4e00\uff0c\u5b8c\u5168\u662f\u5728\u778e\u6253\uff08 \u73b0\u573a\u8fc7240+\u7684\u4e24\u4e2a\u94c1\u724c\u9898\u4e0d\u4f1a\u5199\uff0c\u8fd8\u4e0a\u53bb\u51b2sam\uff08\uff1f \u5565\u73a9\u610f\u554a A. Cat Link \u6bcf\u6b21\u8be2\u95ee\u4e00\u7ec4 L,R,S L,R,S \uff0c\u95ee\u6700\u957f\u7684 l\u2295(l+1)\u2295(l+2)\u2295\u2026\u2026\u2295(r-2)\u2295(r-1)\u2295r<=S(L\u2264l\u2264r\u2264R) l\u2295(l+1)\u2295(l+2)\u2295\u2026\u2026\u2295(r-2)\u2295(r-1)\u2295r<=S(L\u2264l\u2264r\u2264R) \u7684l,r\u533a\u95f4\u957f\u5ea6\u662f\u591a\u5c11\u3002 \u56e0\u4e3a 4k\u22954k+1\u22954k+2\u22954k+3=0 4k\u22954k+1\u22954k+2\u22954k+3=0 \uff0c\u6240\u4ee5\u53ea\u8981\u679a\u4e3e\u5de6\u53f3\u7aef\u70b9\u5c31\u597d\u3002 C. <3 numbers Link \u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a L,R L,R \uff0c\u95eeL,R\u533a\u95f4\u7684\u7d20\u6570\u4e2a\u6570x\u662f\u5426\u6ee1\u8db3 \\frac{x}{R-L+1}< \\frac{1}{3} \\frac{x}{R-L+1}< \\frac{1}{3} \u9898\u89e3\uff1a\u7531\u4e8e\u7d20\u6570\u5bc6\u5ea6\uff0c\u5927\u8303\u56f4\u76f4\u63a5\u8f93\u51faYES\uff0c \u5c0f\u8303\u56f4\u66b4\u529b\u5224\u4e00\u4e0b\u3002 E. Multiply Link \u7ed9\u51fa n n \u4e2a\u6570 a_i a_i \uff0c\u4ee4 Z=a_1!\u00d7a_2!\u00d7..\u00d7a_n! Z=a_1!\u00d7a_2!\u00d7..\u00d7a_n! \u73b0\u5728\u7ed9\u51fa X,Y X,Y ,\u4ee4 b_i=Z\u00d7X^i b_i=Z\u00d7X^i \uff0c\u8981\u6c42\u627e\u5230\u6700\u5927\u7684 i i \uff0c\u4f7f b_i|Y! b_i|Y! \u9898\u89e3\uff1aPollard_Rho\u5206\u89e3\u51faX\u7684\u6bcf\u4e2a\u8d28\u56e0\u6570\u53ca\u5176\u4e2a\u6570\uff0c\u8ba1\u7b97\u5176\u5728 \\frac{Y!}{Z} \\frac{Y!}{Z} \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u53d6\u6240\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u5176\u4e2dn!\u7684\u56e0\u5b50\u4e2a\u6570\u4e3a \\frac{n}{p}+\\frac{n}{p^2}+\\dots+\\frac{n}{p^k} \\frac{n}{p}+\\frac{n}{p^2}+\\dots+\\frac{n}{p^k} . F. The Answer to the Ultimate Question of Life, The Universe, and Everything. Link \u662f42\uff01 \u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa x(x\u2264200) x(x\u2264200) \uff0c\u8f93\u51fa a,b,c(-5000\u2264a,b,c\u22645000) a,b,c(-5000\u2264a,b,c\u22645000) \uff0c\u4f7f a^3+b^3+c^3=x a^3+b^3+c^3=x \uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa impossible . \u9898\u89e3\uff1ax\u6bd4\u8f83\u5c0f\uff0c\u8003\u8651\u6253\u8868\uff0c\u679a\u4e3e\u524d\u4e24\u7ef4\u4e8c\u5206\u7b2c\u4e09\u7ef4\u5373\u53ef\u3002 L. Loli, Yen-Jen, and a cool problem Link \u7ed9\u51fa\u4e00\u4e2aTrie\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa x_i,L_i x_i,L_i \uff0c\u95ee\u4eceTrie\u4e0a\u7b2c x_i x_i \u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5411\u7236\u8282\u70b9\u4e0a\u8df3 L_i-1 L_i-1 \u6b21\u7684\u70b9\u4e3a\u8d77\u70b9\uff0c x_i x_i \u4e3a\u7ec8\u70b9\u7684\u5b57\u7b26\u4e32\u5728Trie\u4e0a\u5171\u51fa\u73b0\u591a\u5c11\u6b21\u3002 \u9898\u89e3\uff1a\u5bf9\u539fTrie dfs\u5efa\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u500d\u589e\u5411\u4e0a\u8df3\u5bfb\u627e\u6700\u5927\u7684\u5408\u6cd5\u7956\u5148\uff0c\u5b83\u7684size\u5373\u4e3a\u7b54\u6848\u3002 M. Kill the tree Link \u7ed9\u5b9a\u4e00\u68f5\u4ee51\u4e3a\u6839\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u6c42\u6bcf\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\u3002\u5982\u679c\u6709\u591a\u4e2a\u91cd\u5fc3\uff0c\u5219\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u3002 \u9898\u89e3\uff1a\u4ee5\u4e00\u4e2a\u5df2\u77e5\u6240\u6709\u5b50\u6811\u91cd\u5fc3\u7684\u70b9\u4e3a\u6839\uff0c\u5b83\u7684\u91cd\u5fc3\u5fc5\u5728\u5176\u91cd\u513f\u5b50\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u3002\u4ece\u91cd\u513f\u5b50\u4e0a\u8df3\u5230\u5f53\u524d\u7684root\uff0c\u5982\u679c\u6700\u5927\u5b50\u6811\u7684\u70b9\u6570\u2264\u5b50\u6811\u603b\u8282\u70b9\u6570/2\uff0c\u5219\u8be5\u8282\u70b9\u4e3a\u8be5\u5b50\u6811\u91cd\u5fc3\u3002\u5bf9\u4e8e\u4ee5\u6240\u6709\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u679a\u4e3e\u8def\u5f84\u4e0a\u8df3\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\u3002 \u56e0\u4e3a\u6811\u7684\u91cd\u5fc3\u662f\u76f8\u90bb\u7684\uff0c\u5982\u679c\u6709\u591a\u4e2a\u91cd\u5fc3\uff0c\u53ea\u8981check\u5f53\u524d\u91cd\u5fc3\u7684\u7236\u8282\u70b9\u662f\u5426\u4e5f\u662f\u91cd\u5fc3\u5373\u53ef\u3002","title":"2019 ICPC Asia Xuzhou Regional"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Xuzhou Regional/#a-cat","text":"\u6bcf\u6b21\u8be2\u95ee\u4e00\u7ec4 L,R,S L,R,S \uff0c\u95ee\u6700\u957f\u7684 l\u2295(l+1)\u2295(l+2)\u2295\u2026\u2026\u2295(r-2)\u2295(r-1)\u2295r<=S(L\u2264l\u2264r\u2264R) l\u2295(l+1)\u2295(l+2)\u2295\u2026\u2026\u2295(r-2)\u2295(r-1)\u2295r<=S(L\u2264l\u2264r\u2264R) \u7684l,r\u533a\u95f4\u957f\u5ea6\u662f\u591a\u5c11\u3002 \u56e0\u4e3a 4k\u22954k+1\u22954k+2\u22954k+3=0 4k\u22954k+1\u22954k+2\u22954k+3=0 \uff0c\u6240\u4ee5\u53ea\u8981\u679a\u4e3e\u5de6\u53f3\u7aef\u70b9\u5c31\u597d\u3002","title":"A. Cat"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Xuzhou Regional/#c-3-numbers","text":"\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a L,R L,R \uff0c\u95eeL,R\u533a\u95f4\u7684\u7d20\u6570\u4e2a\u6570x\u662f\u5426\u6ee1\u8db3 \\frac{x}{R-L+1}< \\frac{1}{3} \\frac{x}{R-L+1}< \\frac{1}{3} \u9898\u89e3\uff1a\u7531\u4e8e\u7d20\u6570\u5bc6\u5ea6\uff0c\u5927\u8303\u56f4\u76f4\u63a5\u8f93\u51faYES\uff0c \u5c0f\u8303\u56f4\u66b4\u529b\u5224\u4e00\u4e0b\u3002","title":"C. &lt;3 numbers"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Xuzhou Regional/#e-multiply","text":"\u7ed9\u51fa n n \u4e2a\u6570 a_i a_i \uff0c\u4ee4 Z=a_1!\u00d7a_2!\u00d7..\u00d7a_n! Z=a_1!\u00d7a_2!\u00d7..\u00d7a_n! \u73b0\u5728\u7ed9\u51fa X,Y X,Y ,\u4ee4 b_i=Z\u00d7X^i b_i=Z\u00d7X^i \uff0c\u8981\u6c42\u627e\u5230\u6700\u5927\u7684 i i \uff0c\u4f7f b_i|Y! b_i|Y! \u9898\u89e3\uff1aPollard_Rho\u5206\u89e3\u51faX\u7684\u6bcf\u4e2a\u8d28\u56e0\u6570\u53ca\u5176\u4e2a\u6570\uff0c\u8ba1\u7b97\u5176\u5728 \\frac{Y!}{Z} \\frac{Y!}{Z} \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u53d6\u6240\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\u5176\u4e2dn!\u7684\u56e0\u5b50\u4e2a\u6570\u4e3a \\frac{n}{p}+\\frac{n}{p^2}+\\dots+\\frac{n}{p^k} \\frac{n}{p}+\\frac{n}{p^2}+\\dots+\\frac{n}{p^k} .","title":"E. Multiply"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Xuzhou Regional/#f-the-answer-to-the-ultimate-question-of-life-the-universe-and-everything","text":"\u662f42\uff01 \u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa x(x\u2264200) x(x\u2264200) \uff0c\u8f93\u51fa a,b,c(-5000\u2264a,b,c\u22645000) a,b,c(-5000\u2264a,b,c\u22645000) \uff0c\u4f7f a^3+b^3+c^3=x a^3+b^3+c^3=x \uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa impossible . \u9898\u89e3\uff1ax\u6bd4\u8f83\u5c0f\uff0c\u8003\u8651\u6253\u8868\uff0c\u679a\u4e3e\u524d\u4e24\u7ef4\u4e8c\u5206\u7b2c\u4e09\u7ef4\u5373\u53ef\u3002","title":"F. The Answer to the Ultimate Question of Life, The Universe, and Everything."},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Xuzhou Regional/#l-loli-yen-jen-and-a-cool-problem","text":"\u7ed9\u51fa\u4e00\u4e2aTrie\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa x_i,L_i x_i,L_i \uff0c\u95ee\u4eceTrie\u4e0a\u7b2c x_i x_i \u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5411\u7236\u8282\u70b9\u4e0a\u8df3 L_i-1 L_i-1 \u6b21\u7684\u70b9\u4e3a\u8d77\u70b9\uff0c x_i x_i \u4e3a\u7ec8\u70b9\u7684\u5b57\u7b26\u4e32\u5728Trie\u4e0a\u5171\u51fa\u73b0\u591a\u5c11\u6b21\u3002 \u9898\u89e3\uff1a\u5bf9\u539fTrie dfs\u5efa\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u500d\u589e\u5411\u4e0a\u8df3\u5bfb\u627e\u6700\u5927\u7684\u5408\u6cd5\u7956\u5148\uff0c\u5b83\u7684size\u5373\u4e3a\u7b54\u6848\u3002","title":"L. Loli, Yen-Jen, and a cool problem"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC Asia Xuzhou Regional/#m-kill-the-tree","text":"\u7ed9\u5b9a\u4e00\u68f5\u4ee51\u4e3a\u6839\u8282\u70b9\u7684\u6709\u6839\u6811\uff0c\u6c42\u6bcf\u68f5\u5b50\u6811\u7684\u91cd\u5fc3\u3002\u5982\u679c\u6709\u591a\u4e2a\u91cd\u5fc3\uff0c\u5219\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u3002 \u9898\u89e3\uff1a\u4ee5\u4e00\u4e2a\u5df2\u77e5\u6240\u6709\u5b50\u6811\u91cd\u5fc3\u7684\u70b9\u4e3a\u6839\uff0c\u5b83\u7684\u91cd\u5fc3\u5fc5\u5728\u5176\u91cd\u513f\u5b50\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u3002\u4ece\u91cd\u513f\u5b50\u4e0a\u8df3\u5230\u5f53\u524d\u7684root\uff0c\u5982\u679c\u6700\u5927\u5b50\u6811\u7684\u70b9\u6570\u2264\u5b50\u6811\u603b\u8282\u70b9\u6570/2\uff0c\u5219\u8be5\u8282\u70b9\u4e3a\u8be5\u5b50\u6811\u91cd\u5fc3\u3002\u5bf9\u4e8e\u4ee5\u6240\u6709\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u679a\u4e3e\u8def\u5f84\u4e0a\u8df3\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\u3002 \u56e0\u4e3a\u6811\u7684\u91cd\u5fc3\u662f\u76f8\u90bb\u7684\uff0c\u5982\u679c\u6709\u591a\u4e2a\u91cd\u5fc3\uff0c\u53ea\u8981check\u5f53\u524d\u91cd\u5fc3\u7684\u7236\u8282\u70b9\u662f\u5426\u4e5f\u662f\u91cd\u5fc3\u5373\u53ef\u3002","title":"M. Kill the tree"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC EC-Final/","text":"Name Date solved A B C D E F G H I J K L M 2019 ICPC EC-Final 2019/12/15 3 O . . . O . . . . . . . O \u8d5b\u540e\u603b\u7ed3 Link \u56e0\u4e3a\u98de\u673a\u665a\u70b9\u8d76\u4e0a\u4e86\u98de\u673a\uff0c\u7136\u540e\u6d77\u5e95\u635e\u5f88\u597d\u5403\u3001\u635e\u9762\u5e08\u5085\u5f88np\u3002 \u7136\u540e\u5e26\u4e0a\u4e86\u6b66\u5927\u53d1\u7684\u5c0f\u9ec4\u9e2d\uff0c\u7136\u540e\u5c0f\u9ec4\u9e2d\u5199\u4ee3\u7801\u53ea\u8fc7\u4e86\u4e09\u4e2a\u9898\u3002 \u79e6\u9f99\u8111\u762b\uff0c\u65c1\u8fb9\u7684\u623f\u5b50\u90fd\u50cf\u9b3c\u5c4b\u3002 \u786c\u5ea7\u7eaf\u8111\u762b\uff0c10.5h\u7684\u786c\u5ea7\u4e3a\u5565\u4e0d2h\u98de\u56de\u6765\u5c82\u4e0d\u7f8e\u54c9\u3002 \u8d5b\u4e2d\u5b9e\u9a8c\u8bfe\u88ab\u5224\u5b9a0\u5206\uff0c\u56de\u53bb\u8fd8\u8981\u8003\u8bd5\u3002 \u9762\u524d\u6e21\u6e21\u9e1f\u5495\u4e86\u70ed\u8eab\u8d5b\u7136\u540e\u6b63\u8d5b\u6740\u75af\u4e86\u3002 \u603b\u4f53\u6765\u8bf4\u6b63\u8d5b\u7eaf\u5c5e\u68a6\u6e38\uff0cA\u7b7e\u5230\u8fd8\u7b97\u6b63\u5e38\uff0c\u7136\u540eM\u9898\u633a\u50bb\u7684\uff0c\u66b4\u529b\u5c31\u80fd\u8fc7\uff0c\u7136\u540e\u8fd8\u60f3DAGdp\u7136\u540e\u8fd8\u8d21\u732e\u4e86\u4e00\u53d1\u7f5a\u65f6\uff0c\u66b4\u529b\u4e4b\u540e\u6ca1\u5f00ll\u53c8\u8d21\u732e\u4e00\u53d1\u7f5a\u65f6\u3002E\u9898\u961f\u53cb\u5199\u5410\u4e86\uff0c\u8fd8\u91cd\u542f\u4e86\u56db\u6b21\u673a\u5668\uff0cCLion\u65e0\u5185\u5b58\u4fdd\u62a4\u786e\u5b9e\u96be\u9876\uff08\u6240\u4ee5dfs\u4e3a\u4ec0\u4e48\u80fd\u5199\u70b8\u5462\uff09\u3002\u7136\u540eG\u9898\u4e00\u76f4\u4ee5\u4e3a\u8111\u762b\u6a21\u62df\uff0c\u7136\u540e\u8d5b\u540e\u53d1\u73b0\u9898\u610f\u8bfb\u9519\u4e86\uff0c\u5176\u5b9e\u8d5b\u4e2d\u5df2\u7ecf\u5199\u7684\u5dee\u4e0d\u591a\u4e86\u3002H\u9898\u5176\u5b9e\u4e5f\u770b\u51fa\u6b63\u89e3\u4e86\uff0c\u5fd8\u8bb0\u52a0\u968f\u673a\uff0c\u7ed3\u679cTLE\u4e0d\u60f3\u6539\u4e86\uff0c\u7136\u540e\u8d5b\u540e\u544a\u8bc9\u6211\u771f\u7684\u662f\u6b63\u89e3\u3002\u4e94\u9898\u7b7e\u5230\u8fc7\u4e86\u7a33\u94f6\u51b2\u91d1\uff0c\u7ed3\u679c\u6700\u540e\u4e09\u9898\u722c\u4e86\u3002 \u7136\u540e\u5c31\u68a6\u6e383\u9898EC\u90fd\u80fd\u6253\u4e86\u4e2a\u61a8\u6279\u94dc\u724c\uff0c\u60f3\u628a\u5956\u724c\u6254\u8fdb\u5783\u573e\u6876\u3002 \u7136\u540e\u65e0\u6eda\u699c\u3001\u542c\u67d0\u7262\u5382\u4e00\u5171\u8bb2\u4e863\u4e2a\u5c0f\u65f6\u3001\u8fd8\u4e0d\u5982\u65e9\u8d70\u4e86\uff0c\u724c\u90fd\u4e0d\u60f3\u8981\u3002\u7136\u540e\u6e05\u534e\u559c\u63d0\u8d5b\u5b63\u7b2c\u4e00\u679a\u94dc\u724c\uff08\u4eba\u5de5\u53d1\u724c\u5ff5\u9519\u4e86\uff09\u3002","title":"2019 ICPC EC Final"},{"location":"Training Logs/2019 ICPC Regional/2019 ICPC EC-Final/#_1","text":"\u56e0\u4e3a\u98de\u673a\u665a\u70b9\u8d76\u4e0a\u4e86\u98de\u673a\uff0c\u7136\u540e\u6d77\u5e95\u635e\u5f88\u597d\u5403\u3001\u635e\u9762\u5e08\u5085\u5f88np\u3002 \u7136\u540e\u5e26\u4e0a\u4e86\u6b66\u5927\u53d1\u7684\u5c0f\u9ec4\u9e2d\uff0c\u7136\u540e\u5c0f\u9ec4\u9e2d\u5199\u4ee3\u7801\u53ea\u8fc7\u4e86\u4e09\u4e2a\u9898\u3002 \u79e6\u9f99\u8111\u762b\uff0c\u65c1\u8fb9\u7684\u623f\u5b50\u90fd\u50cf\u9b3c\u5c4b\u3002 \u786c\u5ea7\u7eaf\u8111\u762b\uff0c10.5h\u7684\u786c\u5ea7\u4e3a\u5565\u4e0d2h\u98de\u56de\u6765\u5c82\u4e0d\u7f8e\u54c9\u3002 \u8d5b\u4e2d\u5b9e\u9a8c\u8bfe\u88ab\u5224\u5b9a0\u5206\uff0c\u56de\u53bb\u8fd8\u8981\u8003\u8bd5\u3002 \u9762\u524d\u6e21\u6e21\u9e1f\u5495\u4e86\u70ed\u8eab\u8d5b\u7136\u540e\u6b63\u8d5b\u6740\u75af\u4e86\u3002 \u603b\u4f53\u6765\u8bf4\u6b63\u8d5b\u7eaf\u5c5e\u68a6\u6e38\uff0cA\u7b7e\u5230\u8fd8\u7b97\u6b63\u5e38\uff0c\u7136\u540eM\u9898\u633a\u50bb\u7684\uff0c\u66b4\u529b\u5c31\u80fd\u8fc7\uff0c\u7136\u540e\u8fd8\u60f3DAGdp\u7136\u540e\u8fd8\u8d21\u732e\u4e86\u4e00\u53d1\u7f5a\u65f6\uff0c\u66b4\u529b\u4e4b\u540e\u6ca1\u5f00ll\u53c8\u8d21\u732e\u4e00\u53d1\u7f5a\u65f6\u3002E\u9898\u961f\u53cb\u5199\u5410\u4e86\uff0c\u8fd8\u91cd\u542f\u4e86\u56db\u6b21\u673a\u5668\uff0cCLion\u65e0\u5185\u5b58\u4fdd\u62a4\u786e\u5b9e\u96be\u9876\uff08\u6240\u4ee5dfs\u4e3a\u4ec0\u4e48\u80fd\u5199\u70b8\u5462\uff09\u3002\u7136\u540eG\u9898\u4e00\u76f4\u4ee5\u4e3a\u8111\u762b\u6a21\u62df\uff0c\u7136\u540e\u8d5b\u540e\u53d1\u73b0\u9898\u610f\u8bfb\u9519\u4e86\uff0c\u5176\u5b9e\u8d5b\u4e2d\u5df2\u7ecf\u5199\u7684\u5dee\u4e0d\u591a\u4e86\u3002H\u9898\u5176\u5b9e\u4e5f\u770b\u51fa\u6b63\u89e3\u4e86\uff0c\u5fd8\u8bb0\u52a0\u968f\u673a\uff0c\u7ed3\u679cTLE\u4e0d\u60f3\u6539\u4e86\uff0c\u7136\u540e\u8d5b\u540e\u544a\u8bc9\u6211\u771f\u7684\u662f\u6b63\u89e3\u3002\u4e94\u9898\u7b7e\u5230\u8fc7\u4e86\u7a33\u94f6\u51b2\u91d1\uff0c\u7ed3\u679c\u6700\u540e\u4e09\u9898\u722c\u4e86\u3002 \u7136\u540e\u5c31\u68a6\u6e383\u9898EC\u90fd\u80fd\u6253\u4e86\u4e2a\u61a8\u6279\u94dc\u724c\uff0c\u60f3\u628a\u5956\u724c\u6254\u8fdb\u5783\u573e\u6876\u3002 \u7136\u540e\u65e0\u6eda\u699c\u3001\u542c\u67d0\u7262\u5382\u4e00\u5171\u8bb2\u4e863\u4e2a\u5c0f\u65f6\u3001\u8fd8\u4e0d\u5982\u65e9\u8d70\u4e86\uff0c\u724c\u90fd\u4e0d\u60f3\u8981\u3002\u7136\u540e\u6e05\u534e\u559c\u63d0\u8d5b\u5b63\u7b2c\u4e00\u679a\u94dc\u724c\uff08\u4eba\u5de5\u53d1\u724c\u5ff5\u9519\u4e86\uff09\u3002","title":"\u8d5b\u540e\u603b\u7ed3"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/","text":"2019 Multi-University Training Contest 1 Link Date Solved A B C D E F G H I J K L M 2019/7/22 6/13 \u00d8 O . \u00d8 O . . . \u00d8 . . . \u00d8 A. Blank Link \u75280123\u6784\u9020\u4e00\u4e2a\u5e8f\u5217\uff0c\u6709m\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u63cf\u8ff0\u7684\u662f l \u5230 r \u5185\u6070\u597d\u6709 k \u79cd\u6570\uff0c\u6c42\u65b9\u6848\u6570\u3002 dp[i][j][k][t] \u8868\u793a\u8bbe0123\u5206\u522b\u51fa\u73b0\u7684\u6700\u540e\u4f4d\u7f6e\u4e3a i_,j_,k_,t_ \uff0c\u90a3\u4e48\u5c06\u8fd9\u56db\u4e2a\u4f4d\u7f6e\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\u5f97\u5230 i,j,k,t \uff0c\u6240\u8868\u793a\u7684\u5408\u6cd5\u65b9\u6848\u6570\u3002\u7531\u4e8e\u6bcf\u4e2a\u5730\u65b9\u90fd\u8981\u586b\u6570\uff0c\u5176\u5b9e i \u5fc5\u7136\u662f\u5f53\u524d\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u679a\u4e3e\u4e00\u7ef4 i \uff0c\u7136\u540e\u9012\u63a8\u5f0f\u5f88\u8f7b\u6613\u7684\u63a8\u51fa\u6765\uff0c\u5982\u4e0b\uff1a \\begin{cases} dp[i -1][j][k][t] \\to dp[i][j][k][t]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][j][k]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][j][t]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][k][t]\\\\ \\end{cases} \u6ce8\u610f\u8981\u53bb\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u5bf9\u6bcf\u4e2ar\u8bb0\u5f55\u6240\u6709\u7684 (l,k) \uff0c\u7136\u540e\u679a\u4e3ei\u5230r\u65f6\uff0c\u5982\u679c 1(\u5f53\u524d\u4f4d\u5fc5\u6709\u4e00\u79cd\u6570)+(j\\ge l) + (k \\ge l) + (t \\ge l) \\neq k \u5c31\u628a\u8be5\u72b6\u6001\u6539\u4e3a0\u3002 \u7136\u540e\u5c31\u6ce8\u610f\u4e00\u4e0b\u591a\u7ec4\u6e05\u96f6\u7684\u7ec6\u8282\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 105 ; const int mod = 998244353 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct mint { int n ; mint ( int n_ = 0 ) : n ( n_ ) {} }; mint operator + ( mint a , mint b ) { return ( a . n += b . n ) >= mod ? a . n - mod : a . n ; } mint operator - ( mint a , mint b ) { return ( a . n -= b . n ) < 0 ? a . n + mod : a . n ; } mint operator * ( mint a , mint b ) { return 1LL * a . n * b . n % mod ; } mint & operator += ( mint & a , mint b ) { return a = a + b ; } mint & operator -= ( mint & a , mint b ) { return a = a - b ; } mint & operator *= ( mint & a , mint b ) { return a = a * b ; } ostream & operator << ( ostream & o , mint a ) { return o << a . n ; } ll mul2 ( ll x , ll y , ll p ) { ll res = ( x * y - ( ll )(( long double ) x / p * y + 1.0e-8 ) * p ); return res < 0 ? res + p : res ; } mint dp [ 2 ][ maxn ][ maxn ][ maxn ]; int n , m ; vector < pair < int , int > > lim [ maxn ]; int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"my.out\", \"w\", stdout); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) lim [ i ]. clear (); for ( int i = 1 , u , v , w ; i <= m ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); lim [ v ]. emplace_back ( u , w ); } int now = 0 ; mint res = 0 ; dp [ 1 ][ 0 ][ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { dp [ now ][ j ][ k ][ t ] = 0 ; } } } for ( int j = 0 ; j < i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { dp [ now ][ j ][ k ][ t ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ j ][ k ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ k ][ t ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ j ][ t ] += dp [ ! now ][ j ][ k ][ t ]; } } } for ( int j = 0 ; j < i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { for ( auto x : lim [ i ]) { if ( 1 + ( j >= x . first ) + ( k >= x . first ) + ( t >= x . first ) != x . second ) { dp [ now ][ j ][ k ][ t ] = 0 ; } } if ( i == n ) { res += dp [ now ][ j ][ k ][ t ]; } } } } now = ! now ; } printf ( \"%d \\n \" , res . n ); } return 0 ; } B. Operation Link \u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6027\u57fa\uff0c\u63d2\u5165\u64cd\u4f5c\u4e3a\u7ee7\u627f\u4e0a\u4e00\u4e2a\u70b9\u7684\u7ebf\u6027\u57fa\u5e76\u63d2\u5165\u5f53\u524d\u70b9\u7684\u503c\u3002 \u7ef4\u62a4\u6bcf\u4e2a\u57fa\u5e95\u7ec4\u6210\u7684\u70b9g[i]\uff0c\u5728\u672a\u77e5L\u7684\u60c5\u51b5\u4e0b\u4f7f\u67e5\u8be2LR\u5c3d\u53ef\u80fd\u5927\uff0c\u8003\u8651\u8d2a\u5fc3\uff0c\u4f7f\u7ec4\u6210\u7ebf\u6027\u57fa\u7684\u70b9\u5c3d\u53ef\u80fd\u9760\u8fd1\u5f53\u524d\u70b9\u3002 \u5177\u4f53\u64cd\u4f5c\u4e3a\uff0c\u5bf9\u4e8e\u67d0\u4e00\u4f4d\u7684\u70b9g[i]\uff0c\u5982\u679cpos>g[i]\uff0c\u5219\u628apos\u4e0eg[i]\u4ea4\u6362\uff0c\u4f7fpos\u6210\u4e3a\u7ebf\u6027\u57fa\u7684\u57fa\u5e95\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u67e5\u8be2\u7b2cR\u4e2a\u7ebf\u6027\u57fa\u6240\u6709pos\u5927\u4e8eL\u7684\u57fa\u5e95\u80fd\u7ec4\u6210\u7684\u6700\u5927\u503c\u3002 Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 #include <bits/stdc++.h> using namespace std ; const int maxn = 1e6 + 10 ; int n ; inline int getpos ( int x , int lasans ) { return ( x ^ lasans ) % n + 1 ; } struct LinearBasis { int f [ 30 ], g [ 30 ]; void ins ( int x , int pos ) { for ( int i = 29 ; ~ i ; i -- ) { if (( x >> i ) & 1 ) { if ( f [ i ]) { if ( g [ i ] <= pos ) { x ^= f [ i ]; f [ i ] ^= x ; swap ( g [ i ], pos ); } else x ^= f [ i ]; } else { f [ i ] = x ; g [ i ] = pos ; break ; } } } } int query ( int l ) { int res = 0 ; for ( int i = 29 ; ~ i ; i -- ) if ( g [ i ] >= l ) res = max ( res , res ^ f [ i ]); return res ; } } base [ maxn ]; int main () { int t , q , op , l , r , x ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & q ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); base [ i ] = base [ i - 1 ]; base [ i ]. ins ( x , i ); } int ans = 0 ; while ( q -- ) { scanf ( \"%d\" , & op ); if ( op == 0 ) { scanf ( \"%d%d\" , & l , & r ); l = getpos ( l , ans ), r = getpos ( r , ans ); if ( l > r ) swap ( l , r ); printf ( \"%d \\n \" , ans = base [ r ]. query ( l )); } else { scanf ( \"%d\" , & x ); n ++ ; base [ n ] = base [ n - 1 ], base [ n ]. ins ( x ^ ans , n ); } } } return 0 ; } D. Vacation Link \u8003\u8651 O(n) O(n) \u7684\u89e3\u6cd5\u3002 \u5bf9\u4e8e\u67d0\u4e00\u8f86\u8f66 x x \uff0c\u8ba1\u7b97\u5b83\u5230\u8fbe\u8ddd\u79bb\u505c\u8f66\u7ebf0\u70b9\u5411\u53f3\u8ddd\u79bb\u4e3a \\sum_{i=1}^x l_i\u200b \\sum_{i=1}^x l_i\u200b \u7684\u65f6\u95f4\uff0c\u6700\u5927\u503c\u5373\u4e3a\u7b54\u6848\u3002 \u4e3a\u4ec0\u4e48 \uff1a\u56e0\u4e3a\u5982\u679c\u67d0\u4e00\u8f86\u8f66\u6ca1\u6709\u5230\u8fbe\u8fd9\u4e2a\u70b9\uff0c\u5b83\u540e\u9762\u7684\u8f66\u80af\u5b9a\u88ab\u5b83\u5835\u4f4f\u4e86\uff0c\u4e5f\u5c31\u5bfc\u81f40\u8f66\u4e0d\u80fd\u5230\u8fbe\u505c\u8f66\u7ebf\u3002\u6240\u4ee5\u6bcf\u8f86\u8f66\u90fd\u8d85\u8fc7\u4e86\u5b83\u5bf9\u5e94\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u95f4\u5c31\u662f\u7b54\u6848\u3002 Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; int l [ maxn ], s [ maxn ], v [ maxn ]; int main () { int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & l [ i ]); for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & s [ i ]); for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & v [ i ]); long long L = 0 ; double ans = 1.0 * s [ 0 ] / v [ 0 ], tm ; for ( int i = 1 ; i <= n ; i ++ ) { L += l [ i ]; tm = 1.0 * ( L + s [ i ]) / v [ i ]; ans = max ( ans , tm ); } printf ( \"%f \\n \" , ans ); } return 0 ; } E. Path Link \u8dd1\u51fa\u6700\u77ed\u8def\uff0c\u53d6\u80fd\u591f\u7ec4\u6210\u6700\u77ed\u8def\u7684\u6240\u6709\u8fb9\uff0c\u5efa\u65b0\u56fe\u6c42\u6700\u5c0f\u5272\u3002 Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 #include <bits/stdc++.h> #define int long long using namespace std ; const int maxn = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edges { int to , cap , rev ; }; struct Dinic { vector < edges > G [ maxn ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ maxn ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ maxn ]; //\u5f53\u524d\u5f27 void init () { for ( int i = 1 ; i < maxn ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edges ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edges ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edges & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edges & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } } dinic ; struct Edge { int nex , to , tot , w ; } edge [ maxn ]; struct Dijkstra { int head [ maxn ], dis [ maxn ], cnt ; void init () { memset ( head , 0xff , sizeof head ); cnt = 0 ; } void add ( int u , int v , int w ) { if ( u == v ) return ; int p = - 1 ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) if ( edge [ i ]. to == v ) { p = i ; break ; } if ( ~ p ) { if ( w < edge [ p ]. w ) edge [ p ]. w = w , edge [ p ]. tot = 1 ; else if ( w == edge [ p ]. w ) edge [ p ]. tot ++ ; return ; } edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; edge [ cnt ]. tot = 1 ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); dinic . add ( u , v , w * edge [ i ]. tot ); } else if ( dis [ u ] + w == dis [ v ]) dinic . add ( u , v , w * edge [ i ]. tot ); } } } } G ; signed main () { int t , n , m , u , v , w ; scanf ( \"%lld\" , & t ); while ( t -- ) { scanf ( \"%lld%lld\" , & n , & m ); G . init (); dinic . init (); while ( m -- ) { scanf ( \"%lld%lld%lld\" , & u , & v , & w ); G . add ( u , v , w ); } G . dijkstra ( 1 ); printf ( \"%lld \\n \" , dinic . max_flow ( 1 , n )); } return 0 ; } F. Typewriter Link \u4ee4 dp[i] \u8868\u793a\u6253\u51fa\u524di\u4e2a\u5b57\u7b26\u7684\u82b1\u8d39\u3002\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c dp[i]=dp[i-1]+p \uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u8003\u8651\u6709\u4e00\u4e2a\u6700\u5c0f\u7684 j j \uff0c\u4f7f s(j+1,i) s(j+1,i) \u662f s(1,j) s(1,j) \u7684\u5b50\u4e32\uff0c\u6b64\u65f6\u82b1\u8d39\u4e3a dp[i]=dp[j]+q \uff0c\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b dp[i]=min(dp[i-1]+p,dp[j]+q) dp[i]=min(dp[i-1]+p,dp[j]+q) <span><span class=\"MathJax_Preview\">dp[i]=min(dp[i-1]+p,dp[j]+q)</span><script type=\"math/tex\">dp[i]=min(dp[i-1]+p,dp[j]+q) \u5bf9\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u8003\u8651\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7ef4\u62a4\u4e32 s(1,j) s(1,j) \uff0c\u5f53SAM\u5185\u4e0d\u5b58\u5728 s(j+1,i) s(j+1,i) \u65f6\u4e0d\u65ad\u5f80\u540e\u6dfb\u52a0\u5b57\u7b26\u5e76\u4f7f j=j+1 \uff0c\u76f4\u5230\u627e\u5230\u4e32 s(j+1,i) s(j+1,i) \uff0c\u590d\u6742\u5ea6 O(n) O(n) \u3002 Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e5 + 10 ; char s [ maxn ]; ll p , q , dp [ maxn ]; struct SuffixAutomation { int last , cnt ; int ch [ maxn << 1 ][ 26 ], fa [ maxn << 1 ], len [ maxn << 1 ]; void init () { last = cnt = 1 ; memset ( ch [ 1 ], 0 , sizeof ch [ 1 ]); fa [ 1 ] = len [ 1 ] = 0 ; } int inline newnode () { ++ cnt ; memset ( ch [ cnt ], 0 , sizeof ch [ cnt ]); fa [ cnt ] = len [ cnt ] = 0 ; return cnt ; } void ins ( int c ) { int p = last , np = newnode (); last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = newnode (); len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } } ll solve () { int n = strlen ( s ); init (); ins ( s [ 0 ] - 'a' ); dp [ 0 ] = p ; int pos = 1 , j = 0 ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] = dp [ i - 1 ] + p ; for (;;) { while ( pos != 1 && len [ fa [ pos ]] >= i - j - 1 ) pos = fa [ pos ]; if ( ch [ pos ][ s [ i ] - 'a' ]) { pos = ch [ pos ][ s [ i ] - 'a' ]; break ; } else ins ( s [ ++ j ] - 'a' ); } dp [ i ] = min ( dp [ i ], dp [ j ] + q ); } return dp [ n - 1 ]; } } sam ; int main () { while ( scanf ( \"%s\" , s ) != EOF ) { scanf ( \"%lld%lld\" , & p , & q ); printf ( \"%lld \\n \" , sam . solve ()); } return 0 ; } I. String Link \u9010\u4f4d\u6784\u9020\u7b54\u6848\uff0c\u8d2a\u5fc3\u5730\u52a0\u5165\u80fd\u591f\u52a0\u5165\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\uff08\u5224\u65ad\u52a0\u5165\u4e4b\u540e\u5269\u4e0b\u7684\u540e\u7f00\u4e2d\u6bcf\u79cd\u5b57\u7b26\u7684\u6570\u76ee\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff09\u3002 Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; char s [ maxn ], s1 [ maxn ]; int cnt [ maxn ][ 26 ], l [ 26 ], r [ 26 ], used [ 26 ]; vector < int > g [ 26 ]; int main () { int n , m ; while ( scanf ( \"%s%d\" , s , & m ) != EOF ) { n = strlen ( s ); for ( int i = 0 ; i < 26 ; i ++ ) scanf ( \"%d%d\" , & l [ i ], & r [ i ]); memset ( used , 0 , sizeof used ); memset ( cnt , 0 , sizeof cnt ); for ( int i = 0 ; i < 26 ; i ++ ) g [ i ]. clear (); for ( int i = 0 ; i < n ; i ++ ) g [ s [ i ] - 'a' ]. push_back ( i ); for ( int i = n - 1 ; i >= 0 ; i -- ) for ( int j = 0 ; j < 26 ; j ++ ) cnt [ i ][ j ] = cnt [ i + 1 ][ j ] + ( s [ i ] == 'a' + j ); vector < int >:: iterator head [ 26 ]; for ( int i = 0 ; i < 26 ; i ++ ) head [ i ] = g [ i ]. begin (); int last = - 1 , now = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( used [ j ] == r [ j ]) continue ; while ( head [ j ] != g [ j ]. end () && ( * head [ j ]) <= last ) head [ j ] ++ ; if ( head [ j ] == g [ j ]. end ()) continue ; bool flag = true ; int sum = 0 , pos = * head [ j ]; used [ j ] ++ ; for ( int k = 0 ; k < 26 ; k ++ ) { if ( cnt [ pos + 1 ][ k ] + used [ k ] < l [ k ]) flag = false ; sum += max ( l [ k ] - used [ k ], 0 ); } if ( sum > m - i - 1 ) flag = false ; sum = 0 ; for ( int k = 0 ; k < 26 ; k ++ ) sum += min ( cnt [ pos + 1 ][ k ], r [ k ] - used [ k ]); if ( sum < m - i - 1 ) flag = false ; if ( ! flag ) used [ j ] -- ; else { s1 [ i ] = 'a' + j ; last = pos ; now ++ ; break ; } } if ( now == i ) break ; } s1 [ m ] = 0 ; if ( now < m ) printf ( \"-1 \\n \" ); else printf ( \"%s \\n \" , s1 ); } return 0 ; } M. Code Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u70b9\uff0c\u6c42\u611f\u77e5\u673a\u662f\u5426\u6709\u89e3\uff08\u5373\u80fd\u5426\u4e8c\u5206\u7c7b\uff0c\u7528\u4e00\u6761\u76f4\u7ebf\u5c06\u4e24\u79cd\u70b9\u5206\u5f00\uff09 \u9898\u89e3\uff1a\u5206\u522b\u6c42\u4e24\u7c7b\u7684\u51f8\u5305\uff0c\u5224\u662f\u5426\u51f8\u5305\u76f8\u4ea4\uff0c\u65b9\u6cd5\u662f\u679a\u4e3e\u51f8\u5305\u5185\u7684\u6bcf\u4e2a\u70b9\u770b\u662f\u5426\u5728\u53e6\u4e2a\u51f8\u5305\u5185\uff0c\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u70b9\u4e24\u51f8\u5305\u5c31\u76f8\u4ea4\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #include <bits/stdc++.h> #pragma GCC optimize(\"Ofast\") #pragma GCC optimize (\"unroll-loops\") #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\") #pragma comment(linker, \"/STACK:102400000,102400000\") using namespace std ; const int maxn = 1e6 + 5 ; #define mp make_pair #define fi first #define se second #define pb push_back typedef double db ; const db eps = 1e-6 ; const db pi = acos ( - 1 ); int sign ( db k ){ if ( k > eps ) return 1 ; else if ( k <- eps ) return - 1 ; return 0 ; } int cmp ( db k1 , db k2 ){ return sign ( k1 - k2 );} int inmid ( db k1 , db k2 , db k3 ){ return sign ( k1 - k3 ) * sign ( k2 - k3 ) <= 0 ;} // k3 \u5728 [k1,k2] \u5185 struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} int operator == ( const point & k1 ) const { return cmp ( x , k1 . x ) == 0 && cmp ( y , k1 . y ) == 0 ;} // \u9006\u65f6\u9488\u65cb\u8f6c point turn ( db k1 ){ return ( point ){ x * cos ( k1 ) - y * sin ( k1 ), x * sin ( k1 ) + y * cos ( k1 )};} point turn90 (){ return ( point ){ - y , x };} bool operator < ( const point k1 ) const { int a = cmp ( x , k1 . x ); if ( a ==- 1 ) return 1 ; else if ( a == 1 ) return 0 ; else return cmp ( y , k1 . y ) ==- 1 ; } db abs (){ return sqrt ( x * x + y * y );} db abs2 (){ return x * x + y * y ;} db dis ( point k1 ){ return (( * this ) - k1 ). abs ();} point unit (){ db w = abs (); return ( point ){ x / w , y / w };} void scan (){ double k1 , k2 ; scanf ( \"%lf%lf\" , & k1 , & k2 ); x = k1 ; y = k2 ;} void print (){ printf ( \"%.11lf %.11lf \\n \" , x , y );} db getw (){ return atan2 ( y , x );} point getdel (){ if ( sign ( x ) ==- 1 || ( sign ( x ) == 0 && sign ( y ) ==- 1 )) return ( * this ) * ( - 1 ); else return ( * this );} int getP () const { return sign ( y ) == 1 || ( sign ( y ) == 0 && sign ( x ) ==- 1 );} }; int inmid ( point k1 , point k2 , point k3 ){ return inmid ( k1 . x , k2 . x , k3 . x ) && inmid ( k1 . y , k2 . y , k3 . y );} db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} int onS ( point k1 , point k2 , point q ){ return inmid ( k1 , k2 , q ) && sign ( cross ( k1 - q , k2 - k1 )) == 0 ;} vector < point > ConvexHull ( vector < point > A , int flag = 1 ){ // flag=0 \u4e0d\u4e25\u683c flag=1 \u4e25\u683c int n = A . size (); vector < point > ans ( n * 2 ); sort ( A . begin (), A . end ()); int now =- 1 ; for ( int i = 0 ; i < A . size (); i ++ ){ while ( now > 0 && sign ( cross ( ans [ now ] - ans [ now - 1 ], A [ i ] - ans [ now - 1 ])) < flag ) now -- ; ans [ ++ now ] = A [ i ]; } int pre = now ; for ( int i = n - 2 ; i >= 0 ; i -- ){ while ( now > pre && sign ( cross ( ans [ now ] - ans [ now - 1 ], A [ i ] - ans [ now - 1 ])) < flag ) now -- ; ans [ ++ now ] = A [ i ]; } ans . resize ( now ); return ans ; } //\u5feb\u901f\u5224\u65ad\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185 int contain ( vector < point > A , point q ){ // 2 \u5185\u90e8 1 \u8fb9\u754c 0 \u5916\u90e8 int pd = 0 ; A . push_back ( A [ 0 ]); for ( int i = 1 ; i < A . size (); i ++ ){ point u = A [ i - 1 ], v = A [ i ]; if ( onS ( u , v , q )) return 1 ; if ( cmp ( u . y , v . y ) > 0 ) swap ( u , v ); if ( cmp ( u . y , q . y ) >= 0 || cmp ( v . y , q . y ) < 0 ) continue ; if ( sign ( cross ( u - v , q - v )) < 0 ) pd ^= 1 ; } return pd << 1 ; } int main () { int n , T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); int op ; vector < point > t1 , t2 ; point x ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lf%lf\" , & x . x , & x . y ); scanf ( \"%d\" , & op ); if ( op == 1 ) t1 . push_back ( x ); else t2 . push_back ( x ); } t1 = ConvexHull ( t1 ); t2 = ConvexHull ( t2 ); int flag = 1 ; for ( auto i : t1 ) { if ( contain ( t2 , i )) { flag = 0 ; break ; } } for ( auto j : t2 ) { if ( contain ( t1 , j )) { flag = 0 ; break ; } } printf ( \"%s \\n \" , flag ? \"Successful!\" : \"Infinite loop!\" ); } return 0 ; }","title":"2019 Multi University Training Contest 1"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#2019-multi-university-training-contest-1","text":"Date Solved A B C D E F G H I J K L M 2019/7/22 6/13 \u00d8 O . \u00d8 O . . . \u00d8 . . . \u00d8","title":"2019 Multi-University Training Contest 1"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#a-blank","text":"\u75280123\u6784\u9020\u4e00\u4e2a\u5e8f\u5217\uff0c\u6709m\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u63cf\u8ff0\u7684\u662f l \u5230 r \u5185\u6070\u597d\u6709 k \u79cd\u6570\uff0c\u6c42\u65b9\u6848\u6570\u3002 dp[i][j][k][t] \u8868\u793a\u8bbe0123\u5206\u522b\u51fa\u73b0\u7684\u6700\u540e\u4f4d\u7f6e\u4e3a i_,j_,k_,t_ \uff0c\u90a3\u4e48\u5c06\u8fd9\u56db\u4e2a\u4f4d\u7f6e\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\u5f97\u5230 i,j,k,t \uff0c\u6240\u8868\u793a\u7684\u5408\u6cd5\u65b9\u6848\u6570\u3002\u7531\u4e8e\u6bcf\u4e2a\u5730\u65b9\u90fd\u8981\u586b\u6570\uff0c\u5176\u5b9e i \u5fc5\u7136\u662f\u5f53\u524d\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\u679a\u4e3e\u4e00\u7ef4 i \uff0c\u7136\u540e\u9012\u63a8\u5f0f\u5f88\u8f7b\u6613\u7684\u63a8\u51fa\u6765\uff0c\u5982\u4e0b\uff1a \\begin{cases} dp[i -1][j][k][t] \\to dp[i][j][k][t]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][j][k]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][j][t]\\\\ dp[i -1][j][k][t] \\to dp[i][i-1][k][t]\\\\ \\end{cases} \u6ce8\u610f\u8981\u53bb\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u5bf9\u6bcf\u4e2ar\u8bb0\u5f55\u6240\u6709\u7684 (l,k) \uff0c\u7136\u540e\u679a\u4e3ei\u5230r\u65f6\uff0c\u5982\u679c 1(\u5f53\u524d\u4f4d\u5fc5\u6709\u4e00\u79cd\u6570)+(j\\ge l) + (k \\ge l) + (t \\ge l) \\neq k \u5c31\u628a\u8be5\u72b6\u6001\u6539\u4e3a0\u3002 \u7136\u540e\u5c31\u6ce8\u610f\u4e00\u4e0b\u591a\u7ec4\u6e05\u96f6\u7684\u7ec6\u8282\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 105 ; const int mod = 998244353 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct mint { int n ; mint ( int n_ = 0 ) : n ( n_ ) {} }; mint operator + ( mint a , mint b ) { return ( a . n += b . n ) >= mod ? a . n - mod : a . n ; } mint operator - ( mint a , mint b ) { return ( a . n -= b . n ) < 0 ? a . n + mod : a . n ; } mint operator * ( mint a , mint b ) { return 1LL * a . n * b . n % mod ; } mint & operator += ( mint & a , mint b ) { return a = a + b ; } mint & operator -= ( mint & a , mint b ) { return a = a - b ; } mint & operator *= ( mint & a , mint b ) { return a = a * b ; } ostream & operator << ( ostream & o , mint a ) { return o << a . n ; } ll mul2 ( ll x , ll y , ll p ) { ll res = ( x * y - ( ll )(( long double ) x / p * y + 1.0e-8 ) * p ); return res < 0 ? res + p : res ; } mint dp [ 2 ][ maxn ][ maxn ][ maxn ]; int n , m ; vector < pair < int , int > > lim [ maxn ]; int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"my.out\", \"w\", stdout); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) lim [ i ]. clear (); for ( int i = 1 , u , v , w ; i <= m ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); lim [ v ]. emplace_back ( u , w ); } int now = 0 ; mint res = 0 ; dp [ 1 ][ 0 ][ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { dp [ now ][ j ][ k ][ t ] = 0 ; } } } for ( int j = 0 ; j < i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { dp [ now ][ j ][ k ][ t ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ j ][ k ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ k ][ t ] += dp [ ! now ][ j ][ k ][ t ]; dp [ now ][ i - 1 ][ j ][ t ] += dp [ ! now ][ j ][ k ][ t ]; } } } for ( int j = 0 ; j < i ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { for ( int t = 0 ; t <= k ; ++ t ) { for ( auto x : lim [ i ]) { if ( 1 + ( j >= x . first ) + ( k >= x . first ) + ( t >= x . first ) != x . second ) { dp [ now ][ j ][ k ][ t ] = 0 ; } } if ( i == n ) { res += dp [ now ][ j ][ k ][ t ]; } } } } now = ! now ; } printf ( \"%d \\n \" , res . n ); } return 0 ; }","title":"A. Blank"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#b-operation","text":"\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6027\u57fa\uff0c\u63d2\u5165\u64cd\u4f5c\u4e3a\u7ee7\u627f\u4e0a\u4e00\u4e2a\u70b9\u7684\u7ebf\u6027\u57fa\u5e76\u63d2\u5165\u5f53\u524d\u70b9\u7684\u503c\u3002 \u7ef4\u62a4\u6bcf\u4e2a\u57fa\u5e95\u7ec4\u6210\u7684\u70b9g[i]\uff0c\u5728\u672a\u77e5L\u7684\u60c5\u51b5\u4e0b\u4f7f\u67e5\u8be2LR\u5c3d\u53ef\u80fd\u5927\uff0c\u8003\u8651\u8d2a\u5fc3\uff0c\u4f7f\u7ec4\u6210\u7ebf\u6027\u57fa\u7684\u70b9\u5c3d\u53ef\u80fd\u9760\u8fd1\u5f53\u524d\u70b9\u3002 \u5177\u4f53\u64cd\u4f5c\u4e3a\uff0c\u5bf9\u4e8e\u67d0\u4e00\u4f4d\u7684\u70b9g[i]\uff0c\u5982\u679cpos>g[i]\uff0c\u5219\u628apos\u4e0eg[i]\u4ea4\u6362\uff0c\u4f7fpos\u6210\u4e3a\u7ebf\u6027\u57fa\u7684\u57fa\u5e95\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u67e5\u8be2\u7b2cR\u4e2a\u7ebf\u6027\u57fa\u6240\u6709pos\u5927\u4e8eL\u7684\u57fa\u5e95\u80fd\u7ec4\u6210\u7684\u6700\u5927\u503c\u3002","title":"B. Operation"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 #include <bits/stdc++.h> using namespace std ; const int maxn = 1e6 + 10 ; int n ; inline int getpos ( int x , int lasans ) { return ( x ^ lasans ) % n + 1 ; } struct LinearBasis { int f [ 30 ], g [ 30 ]; void ins ( int x , int pos ) { for ( int i = 29 ; ~ i ; i -- ) { if (( x >> i ) & 1 ) { if ( f [ i ]) { if ( g [ i ] <= pos ) { x ^= f [ i ]; f [ i ] ^= x ; swap ( g [ i ], pos ); } else x ^= f [ i ]; } else { f [ i ] = x ; g [ i ] = pos ; break ; } } } } int query ( int l ) { int res = 0 ; for ( int i = 29 ; ~ i ; i -- ) if ( g [ i ] >= l ) res = max ( res , res ^ f [ i ]); return res ; } } base [ maxn ]; int main () { int t , q , op , l , r , x ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & q ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & x ); base [ i ] = base [ i - 1 ]; base [ i ]. ins ( x , i ); } int ans = 0 ; while ( q -- ) { scanf ( \"%d\" , & op ); if ( op == 0 ) { scanf ( \"%d%d\" , & l , & r ); l = getpos ( l , ans ), r = getpos ( r , ans ); if ( l > r ) swap ( l , r ); printf ( \"%d \\n \" , ans = base [ r ]. query ( l )); } else { scanf ( \"%d\" , & x ); n ++ ; base [ n ] = base [ n - 1 ], base [ n ]. ins ( x ^ ans , n ); } } } return 0 ; }","title":"Code"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#d-vacation","text":"\u8003\u8651 O(n) O(n) \u7684\u89e3\u6cd5\u3002 \u5bf9\u4e8e\u67d0\u4e00\u8f86\u8f66 x x \uff0c\u8ba1\u7b97\u5b83\u5230\u8fbe\u8ddd\u79bb\u505c\u8f66\u7ebf0\u70b9\u5411\u53f3\u8ddd\u79bb\u4e3a \\sum_{i=1}^x l_i\u200b \\sum_{i=1}^x l_i\u200b \u7684\u65f6\u95f4\uff0c\u6700\u5927\u503c\u5373\u4e3a\u7b54\u6848\u3002 \u4e3a\u4ec0\u4e48 \uff1a\u56e0\u4e3a\u5982\u679c\u67d0\u4e00\u8f86\u8f66\u6ca1\u6709\u5230\u8fbe\u8fd9\u4e2a\u70b9\uff0c\u5b83\u540e\u9762\u7684\u8f66\u80af\u5b9a\u88ab\u5b83\u5835\u4f4f\u4e86\uff0c\u4e5f\u5c31\u5bfc\u81f40\u8f66\u4e0d\u80fd\u5230\u8fbe\u505c\u8f66\u7ebf\u3002\u6240\u4ee5\u6bcf\u8f86\u8f66\u90fd\u8d85\u8fc7\u4e86\u5b83\u5bf9\u5e94\u7684\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u65f6\u95f4\u5c31\u662f\u7b54\u6848\u3002","title":"D. Vacation"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#code_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; int l [ maxn ], s [ maxn ], v [ maxn ]; int main () { int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & l [ i ]); for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & s [ i ]); for ( int i = 0 ; i <= n ; i ++ ) scanf ( \"%d\" , & v [ i ]); long long L = 0 ; double ans = 1.0 * s [ 0 ] / v [ 0 ], tm ; for ( int i = 1 ; i <= n ; i ++ ) { L += l [ i ]; tm = 1.0 * ( L + s [ i ]) / v [ i ]; ans = max ( ans , tm ); } printf ( \"%f \\n \" , ans ); } return 0 ; }","title":"Code"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#e-path","text":"\u8dd1\u51fa\u6700\u77ed\u8def\uff0c\u53d6\u80fd\u591f\u7ec4\u6210\u6700\u77ed\u8def\u7684\u6240\u6709\u8fb9\uff0c\u5efa\u65b0\u56fe\u6c42\u6700\u5c0f\u5272\u3002","title":"E. Path"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#code_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 #include <bits/stdc++.h> #define int long long using namespace std ; const int maxn = 10000 + 10 ; const int INF = 0x3f3f3f3f ; //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edges { int to , cap , rev ; }; struct Dinic { vector < edges > G [ maxn ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ maxn ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ maxn ]; //\u5f53\u524d\u5f27 void init () { for ( int i = 1 ; i < maxn ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edges ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edges ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edges & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edges & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } } dinic ; struct Edge { int nex , to , tot , w ; } edge [ maxn ]; struct Dijkstra { int head [ maxn ], dis [ maxn ], cnt ; void init () { memset ( head , 0xff , sizeof head ); cnt = 0 ; } void add ( int u , int v , int w ) { if ( u == v ) return ; int p = - 1 ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) if ( edge [ i ]. to == v ) { p = i ; break ; } if ( ~ p ) { if ( w < edge [ p ]. w ) edge [ p ]. w = w , edge [ p ]. tot = 1 ; else if ( w == edge [ p ]. w ) edge [ p ]. tot ++ ; return ; } edge [ ++ cnt ]. nex = head [ u ]; edge [ cnt ]. w = w ; edge [ cnt ]. to = v ; edge [ cnt ]. tot = 1 ; head [ u ] = cnt ; } void dijkstra ( int s ) { priority_queue < pair < int , int > , vector < pair < int , int > > , greater < pair < int , int > > > que ; memset ( dis , 0x3f , sizeof dis ); que . push ({ 0 , s }); dis [ s ] = 0 ; while ( ! que . empty ()) { auto f = que . top (); que . pop (); int u = f . second , d = f . first ; if ( d != dis [ u ]) continue ; for ( int i = head [ u ]; ~ i ; i = edge [ i ]. nex ) { int v = edge [ i ]. to , w = edge [ i ]. w ; if ( dis [ u ] + w < dis [ v ]) { dis [ v ] = dis [ u ] + w ; que . push ({ dis [ v ], v }); dinic . add ( u , v , w * edge [ i ]. tot ); } else if ( dis [ u ] + w == dis [ v ]) dinic . add ( u , v , w * edge [ i ]. tot ); } } } } G ; signed main () { int t , n , m , u , v , w ; scanf ( \"%lld\" , & t ); while ( t -- ) { scanf ( \"%lld%lld\" , & n , & m ); G . init (); dinic . init (); while ( m -- ) { scanf ( \"%lld%lld%lld\" , & u , & v , & w ); G . add ( u , v , w ); } G . dijkstra ( 1 ); printf ( \"%lld \\n \" , dinic . max_flow ( 1 , n )); } return 0 ; }","title":"Code"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#f-typewriter","text":"\u4ee4 dp[i] \u8868\u793a\u6253\u51fa\u524di\u4e2a\u5b57\u7b26\u7684\u82b1\u8d39\u3002\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c dp[i]=dp[i-1]+p \uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\uff0c\u8003\u8651\u6709\u4e00\u4e2a\u6700\u5c0f\u7684 j j \uff0c\u4f7f s(j+1,i) s(j+1,i) \u662f s(1,j) s(1,j) \u7684\u5b50\u4e32\uff0c\u6b64\u65f6\u82b1\u8d39\u4e3a dp[i]=dp[j]+q \uff0c\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b dp[i]=min(dp[i-1]+p,dp[j]+q) dp[i]=min(dp[i-1]+p,dp[j]+q) <span><span class=\"MathJax_Preview\">dp[i]=min(dp[i-1]+p,dp[j]+q)</span><script type=\"math/tex\">dp[i]=min(dp[i-1]+p,dp[j]+q) \u5bf9\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u8003\u8651\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7ef4\u62a4\u4e32 s(1,j) s(1,j) \uff0c\u5f53SAM\u5185\u4e0d\u5b58\u5728 s(j+1,i) s(j+1,i) \u65f6\u4e0d\u65ad\u5f80\u540e\u6dfb\u52a0\u5b57\u7b26\u5e76\u4f7f j=j+1 \uff0c\u76f4\u5230\u627e\u5230\u4e32 s(j+1,i) s(j+1,i) \uff0c\u590d\u6742\u5ea6 O(n) O(n) \u3002","title":"F. Typewriter"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#code_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 2e5 + 10 ; char s [ maxn ]; ll p , q , dp [ maxn ]; struct SuffixAutomation { int last , cnt ; int ch [ maxn << 1 ][ 26 ], fa [ maxn << 1 ], len [ maxn << 1 ]; void init () { last = cnt = 1 ; memset ( ch [ 1 ], 0 , sizeof ch [ 1 ]); fa [ 1 ] = len [ 1 ] = 0 ; } int inline newnode () { ++ cnt ; memset ( ch [ cnt ], 0 , sizeof ch [ cnt ]); fa [ cnt ] = len [ cnt ] = 0 ; return cnt ; } void ins ( int c ) { int p = last , np = newnode (); last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = newnode (); len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } } ll solve () { int n = strlen ( s ); init (); ins ( s [ 0 ] - 'a' ); dp [ 0 ] = p ; int pos = 1 , j = 0 ; for ( int i = 1 ; i < n ; i ++ ) { dp [ i ] = dp [ i - 1 ] + p ; for (;;) { while ( pos != 1 && len [ fa [ pos ]] >= i - j - 1 ) pos = fa [ pos ]; if ( ch [ pos ][ s [ i ] - 'a' ]) { pos = ch [ pos ][ s [ i ] - 'a' ]; break ; } else ins ( s [ ++ j ] - 'a' ); } dp [ i ] = min ( dp [ i ], dp [ j ] + q ); } return dp [ n - 1 ]; } } sam ; int main () { while ( scanf ( \"%s\" , s ) != EOF ) { scanf ( \"%lld%lld\" , & p , & q ); printf ( \"%lld \\n \" , sam . solve ()); } return 0 ; }","title":"Code"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#i-string","text":"\u9010\u4f4d\u6784\u9020\u7b54\u6848\uff0c\u8d2a\u5fc3\u5730\u52a0\u5165\u80fd\u591f\u52a0\u5165\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\uff08\u5224\u65ad\u52a0\u5165\u4e4b\u540e\u5269\u4e0b\u7684\u540e\u7f00\u4e2d\u6bcf\u79cd\u5b57\u7b26\u7684\u6570\u76ee\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff09\u3002","title":"I. String"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#code_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; char s [ maxn ], s1 [ maxn ]; int cnt [ maxn ][ 26 ], l [ 26 ], r [ 26 ], used [ 26 ]; vector < int > g [ 26 ]; int main () { int n , m ; while ( scanf ( \"%s%d\" , s , & m ) != EOF ) { n = strlen ( s ); for ( int i = 0 ; i < 26 ; i ++ ) scanf ( \"%d%d\" , & l [ i ], & r [ i ]); memset ( used , 0 , sizeof used ); memset ( cnt , 0 , sizeof cnt ); for ( int i = 0 ; i < 26 ; i ++ ) g [ i ]. clear (); for ( int i = 0 ; i < n ; i ++ ) g [ s [ i ] - 'a' ]. push_back ( i ); for ( int i = n - 1 ; i >= 0 ; i -- ) for ( int j = 0 ; j < 26 ; j ++ ) cnt [ i ][ j ] = cnt [ i + 1 ][ j ] + ( s [ i ] == 'a' + j ); vector < int >:: iterator head [ 26 ]; for ( int i = 0 ; i < 26 ; i ++ ) head [ i ] = g [ i ]. begin (); int last = - 1 , now = 0 ; for ( int i = 0 ; i < m ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) { if ( used [ j ] == r [ j ]) continue ; while ( head [ j ] != g [ j ]. end () && ( * head [ j ]) <= last ) head [ j ] ++ ; if ( head [ j ] == g [ j ]. end ()) continue ; bool flag = true ; int sum = 0 , pos = * head [ j ]; used [ j ] ++ ; for ( int k = 0 ; k < 26 ; k ++ ) { if ( cnt [ pos + 1 ][ k ] + used [ k ] < l [ k ]) flag = false ; sum += max ( l [ k ] - used [ k ], 0 ); } if ( sum > m - i - 1 ) flag = false ; sum = 0 ; for ( int k = 0 ; k < 26 ; k ++ ) sum += min ( cnt [ pos + 1 ][ k ], r [ k ] - used [ k ]); if ( sum < m - i - 1 ) flag = false ; if ( ! flag ) used [ j ] -- ; else { s1 [ i ] = 'a' + j ; last = pos ; now ++ ; break ; } } if ( now == i ) break ; } s1 [ m ] = 0 ; if ( now < m ) printf ( \"-1 \\n \" ); else printf ( \"%s \\n \" , s1 ); } return 0 ; }","title":"Code"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/#m-code","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u70b9\uff0c\u6c42\u611f\u77e5\u673a\u662f\u5426\u6709\u89e3\uff08\u5373\u80fd\u5426\u4e8c\u5206\u7c7b\uff0c\u7528\u4e00\u6761\u76f4\u7ebf\u5c06\u4e24\u79cd\u70b9\u5206\u5f00\uff09 \u9898\u89e3\uff1a\u5206\u522b\u6c42\u4e24\u7c7b\u7684\u51f8\u5305\uff0c\u5224\u662f\u5426\u51f8\u5305\u76f8\u4ea4\uff0c\u65b9\u6cd5\u662f\u679a\u4e3e\u51f8\u5305\u5185\u7684\u6bcf\u4e2a\u70b9\u770b\u662f\u5426\u5728\u53e6\u4e2a\u51f8\u5305\u5185\uff0c\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u70b9\u4e24\u51f8\u5305\u5c31\u76f8\u4ea4\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 #include <bits/stdc++.h> #pragma GCC optimize(\"Ofast\") #pragma GCC optimize (\"unroll-loops\") #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\") #pragma comment(linker, \"/STACK:102400000,102400000\") using namespace std ; const int maxn = 1e6 + 5 ; #define mp make_pair #define fi first #define se second #define pb push_back typedef double db ; const db eps = 1e-6 ; const db pi = acos ( - 1 ); int sign ( db k ){ if ( k > eps ) return 1 ; else if ( k <- eps ) return - 1 ; return 0 ; } int cmp ( db k1 , db k2 ){ return sign ( k1 - k2 );} int inmid ( db k1 , db k2 , db k3 ){ return sign ( k1 - k3 ) * sign ( k2 - k3 ) <= 0 ;} // k3 \u5728 [k1,k2] \u5185 struct point { db x , y ; point operator + ( const point & k1 ) const { return ( point ){ k1 . x + x , k1 . y + y };} point operator - ( const point & k1 ) const { return ( point ){ x - k1 . x , y - k1 . y };} point operator * ( db k1 ) const { return ( point ){ x * k1 , y * k1 };} point operator / ( db k1 ) const { return ( point ){ x / k1 , y / k1 };} int operator == ( const point & k1 ) const { return cmp ( x , k1 . x ) == 0 && cmp ( y , k1 . y ) == 0 ;} // \u9006\u65f6\u9488\u65cb\u8f6c point turn ( db k1 ){ return ( point ){ x * cos ( k1 ) - y * sin ( k1 ), x * sin ( k1 ) + y * cos ( k1 )};} point turn90 (){ return ( point ){ - y , x };} bool operator < ( const point k1 ) const { int a = cmp ( x , k1 . x ); if ( a ==- 1 ) return 1 ; else if ( a == 1 ) return 0 ; else return cmp ( y , k1 . y ) ==- 1 ; } db abs (){ return sqrt ( x * x + y * y );} db abs2 (){ return x * x + y * y ;} db dis ( point k1 ){ return (( * this ) - k1 ). abs ();} point unit (){ db w = abs (); return ( point ){ x / w , y / w };} void scan (){ double k1 , k2 ; scanf ( \"%lf%lf\" , & k1 , & k2 ); x = k1 ; y = k2 ;} void print (){ printf ( \"%.11lf %.11lf \\n \" , x , y );} db getw (){ return atan2 ( y , x );} point getdel (){ if ( sign ( x ) ==- 1 || ( sign ( x ) == 0 && sign ( y ) ==- 1 )) return ( * this ) * ( - 1 ); else return ( * this );} int getP () const { return sign ( y ) == 1 || ( sign ( y ) == 0 && sign ( x ) ==- 1 );} }; int inmid ( point k1 , point k2 , point k3 ){ return inmid ( k1 . x , k2 . x , k3 . x ) && inmid ( k1 . y , k2 . y , k3 . y );} db cross ( point k1 , point k2 ){ return k1 . x * k2 . y - k1 . y * k2 . x ;} int onS ( point k1 , point k2 , point q ){ return inmid ( k1 , k2 , q ) && sign ( cross ( k1 - q , k2 - k1 )) == 0 ;} vector < point > ConvexHull ( vector < point > A , int flag = 1 ){ // flag=0 \u4e0d\u4e25\u683c flag=1 \u4e25\u683c int n = A . size (); vector < point > ans ( n * 2 ); sort ( A . begin (), A . end ()); int now =- 1 ; for ( int i = 0 ; i < A . size (); i ++ ){ while ( now > 0 && sign ( cross ( ans [ now ] - ans [ now - 1 ], A [ i ] - ans [ now - 1 ])) < flag ) now -- ; ans [ ++ now ] = A [ i ]; } int pre = now ; for ( int i = n - 2 ; i >= 0 ; i -- ){ while ( now > pre && sign ( cross ( ans [ now ] - ans [ now - 1 ], A [ i ] - ans [ now - 1 ])) < flag ) now -- ; ans [ ++ now ] = A [ i ]; } ans . resize ( now ); return ans ; } //\u5feb\u901f\u5224\u65ad\u70b9\u662f\u5426\u5728\u51f8\u5305\u5185 int contain ( vector < point > A , point q ){ // 2 \u5185\u90e8 1 \u8fb9\u754c 0 \u5916\u90e8 int pd = 0 ; A . push_back ( A [ 0 ]); for ( int i = 1 ; i < A . size (); i ++ ){ point u = A [ i - 1 ], v = A [ i ]; if ( onS ( u , v , q )) return 1 ; if ( cmp ( u . y , v . y ) > 0 ) swap ( u , v ); if ( cmp ( u . y , q . y ) >= 0 || cmp ( v . y , q . y ) < 0 ) continue ; if ( sign ( cross ( u - v , q - v )) < 0 ) pd ^= 1 ; } return pd << 1 ; } int main () { int n , T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); int op ; vector < point > t1 , t2 ; point x ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lf%lf\" , & x . x , & x . y ); scanf ( \"%d\" , & op ); if ( op == 1 ) t1 . push_back ( x ); else t2 . push_back ( x ); } t1 = ConvexHull ( t1 ); t2 = ConvexHull ( t2 ); int flag = 1 ; for ( auto i : t1 ) { if ( contain ( t2 , i )) { flag = 0 ; break ; } } for ( auto j : t2 ) { if ( contain ( t1 , j )) { flag = 0 ; break ; } } printf ( \"%s \\n \" , flag ? \"Successful!\" : \"Infinite loop!\" ); } return 0 ; }","title":"M. Code"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/","text":"2019 Multi-University Training Contest 2 Link Date Solved A B C D E F G H I J K L 2019/7/24 6/12 . . . . O . . \u00d8 \u00d8 O \u00d8 \u00d8 E. Everything Is Generated In Equal Probability Link \u66b4\u529b\u8dd1\u51fa\u524d\u4e24\u9879\uff0c\u6309\u9898\u610f\u6a21\u62df\u9898\u76ee\u7ed9\u7684\u968f\u673a\u7b97\u6cd5\u7b97\u51fa\u7b2c3,4\u9879\uff0c\u4e22\u8fdbOEIS\u627e\u89c4\u5f8b\u5f97\u5230\u901a\u9879\u3002 \u524d5\u9879\u5206\u522b\u662f0,\u2153,8/9,5/3,8/3\uff0c\u628a\u5206\u6bcd\u901a\u5206\u62109\u4e4b\u540e\u7684\u5206\u5b50\u5e8f\u5217\u662f0,3,8,15,24\uff0c\u90a3\u4e48\u901a\u9879\u5c31\u662f F(i)=\\frac{(i+1)(i-1)}{9} F(i)=\\frac{(i+1)(i-1)}{9} <span><span class=\"MathJax_Preview\">F(i)=\\frac{(i+1)(i-1)}{9}</span><script type=\"math/tex\">F(i)=\\frac{(i+1)(i-1)}{9} Code Link Random Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include <bits/stdc++.h> #define random(a,b) ((a)+rand()%((b)-(a)+1)) using namespace std ; int ip ( int a [], int len ) { int cnt = 0 ; for ( int i = 0 ; i < len ; i ++ ) for ( int j = i + 1 ; j < len ; j ++ ) if ( a [ i ] > a [ j ]) cnt ++ ; return cnt ; } int cal ( int a [], int len ) { int cnt = 0 ; if ( len > 0 ) { cnt = ip ( a , len ); int x = random ( 0 , ( 1 << ( len + 1 )) - 1 ); int tmp [ 10 ], len1 = 0 ; for ( int i = 0 ; i < len ; i ++ ) if (( x >> i ) & 1 ) tmp [ len1 ++ ] = a [ i ]; cnt += cal ( tmp , len1 ); } return cnt ; } int a [ 10 ], b [ 10 ]; int main () { int tm = 90000 ; int n = 5 ; for ( int i = 0 ; i < 10 ; i ++ ) a [ i ] = i + 1 ; long long cnt = 0 ; for ( int i = 0 ; i < tm ; i ++ ) { int len = random ( 1 , n ); for ( int j = 0 ; j < len ; j ++ ) b [ j ] = a [ j ]; random_shuffle ( b , b + len ); cnt += cal ( b , len ); } printf ( \"%lld \\n \" , cnt ); return 0 ; } Solution Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int mod = 998244353 ; ll inv ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int main () { long long n ; while ( scanf ( \"%lld\" , & n ) != EOF ) printf ( \"%lld \\n \" , ( n + 1 ) * ( n - 1 ) % mod * inv ( 9 ) % mod ); return 0 ; } H. Harmonious Army Link \u51fa\u4e86\u4e00\u4e07\u904d\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff0c\u7136\u800c\u6bd4\u8d5b\u7684\u65f6\u5019\u770b\u90fd\u6ca1\u770b\u8fd9\u9898\u3002 \u5927\u6982BZOJ2127\uff0cBZOJ2132\uff0cBZOJ3894\u90fd\u662f\u8fd9\u4e2a\u6a21\u578b\u7684\u9898\u3002 \u5bf9\u8fd9\u4e2a\u6a21\u578b\u5efa\u50cf\u4e0a\u56fe\u8fd9\u6837\u7684\u7f51\u7edc\u6d41\uff0c\u6211\u4eec\u4ee4 S=A+B+C S=A+B+C \u8868\u793a\u4e09\u79cd\u6536\u76ca\u7684\u548c\uff0c\u56fe\u4e0a\u6bcf\u4e00\u79cd\u5272\u6cd5\u8868\u793a\u51cf\u53bb\u4e00\u90e8\u5206\u7684\u6536\u76ca\uff0c\u5047\u8bbe\u5f53\u524d\u5272\u96c6\u4e4b\u548c\u4e3a X X \uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u7f51\u7edc\u4f7fS-\u5272\u96c6=\u5f53\u524d\u9009\u6cd5\u7684\u6536\u76ca\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u5272\u96c6\u4e3a{a,b}\u65f6\u8868\u793a\u4e24\u4eba\u9009\u7684\u90fd\u662fMages\uff0c\u6536\u76ca\u4e3aC\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-C=A+B S-C=A+B \uff0c\u6709 a+b=A+B a+b=A+B \u5272\u96c6\u4e3a{c,d}\u65f6\u8868\u793a\u4e24\u4eba\u9009\u7684\u90fd\u662fWarriors\uff0c\u6536\u76ca\u4e3aA\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-A=B+C S-A=B+C \uff0c\u6709 c+d=B+C c+d=B+C \u5272\u96c6\u4e3a{a,e,d}\u6216\u8005{b,e,c}\u65f6\u8868\u793a\u4e00\u4e2a\u4eba\u9009Mage\uff0c\u53e6\u4e00\u4e2a\u4eba\u9009Warrior\uff0c\u6536\u76ca\u4e3aB\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-B=A+C S-B=A+C \uff0c\u6709 a+e+d=A+C a+e+d=A+C , b+e+c=A+C b+e+c=A+C \u4e0d\u59a8\u4ee4a=b,c=d,\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4\u89e3 a=b=(A+B)/2 a=b=(A+B)/2 \uff0c c=d=(C+D)/2 c=d=(C+D)/2 \uff0c e=-B+(A+C)/2 e=-B+(A+C)/2 \u5bf9\u4e8e\u6bcf\u4e00\u7ec4(x,y)\u5efa\u8fd9\u6837\u7684\u7f51\u7edc\u8dd1\u6700\u5c0f\u5272\uff0c\u7528\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u4e3a\u4e86\u907f\u514d\u5efa\u56fe\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5c0f\u6570\u53ef\u4ee5\u628a\u6240\u6709\u6743\u503cx2\uff0c\u8f93\u51fa\u65f6\u518d/2 Code Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 #include <bits/stdc++.h> #define int long long using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f3f3f3f3f ; struct Dinic { //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void init ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } } ans ; int w1 [ 510 ], w2 [ 510 ]; signed main () { int n , m , u , v , a , b , c ; while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF ) { int S = 0 , T = n + 1 ; ans . init ( T ); for ( int i = 0 ; i <= T ; i ++ ) w1 [ i ] = w2 [ i ] = 0 ; int res = 0 ; while ( m -- ) { scanf ( \"%lld%lld%lld%lld%lld\" , & u , & v , & a , & b , & c ); res += 2 * ( a + b + c ); w1 [ u ] += a + b ; w1 [ v ] += a + b ; w2 [ u ] += b + c ; w2 [ v ] += b + c ; ans . add ( u , v , a + c - 2 * b ); ans . add ( v , u , a + c - 2 * b ); } for ( int i = 1 ; i <= n ; i ++ ) { ans . add ( S , i , w1 [ i ]); ans . add ( i , T , w2 [ i ]); } res -= ans . max_flow ( S , T ); res /= 2 ; printf ( \"%lld \\n \" , res ); } return 0 ; } I. I Love Palindrome String Link \u9898\u610f\uff1a\u6c42\u6240\u6709\u957f\u5ea6\u4e3a1\uff5en\u7684\u5b50\u4e32\u6ee1\u8db3 S_i^j S_i^j \u548c S_i^{(i+j)/2} S_i^{(i+j)/2} \u4e3a\u56de\u6587\u4e32\u7684\u4e2a\u6570 \u9898\u89e3\uff1a\u5bf9\u6240\u6709\u56de\u6587\u4e32\u6765\u8bf4\uff0c\u5b83\u524d\u534a\u6bb5\u662f\u5426\u662f\u56de\u6587\u4e32\u90fd\u662f\u786e\u5b9a\u662f\uff0c\u6240\u4ee5\u56de\u6587\u6811\u7ef4\u62a4\u6240\u6709\u672c\u8d28\u4e0d\u540c\u4e32\uff0c\u6bcf\u589e\u52a0\u4e00\u4e2a\u8282\u70b9\u5c31\u8ba1\u7b97\u8fd9\u4e2a\u8282\u70b9\u7684\u524d\u534a\u6bb5\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0a\u4e00\u624bhash\u5feb\u901f\u5224\u65ad\uff0c\u7136\u540e\u5982\u679c\u662f\uff0c\u8be5\u672c\u8d28\u4e32\u7684\u957f\u5ea6\u5c31\u8981\u52a0\u4e2a\u5b83\u4e2a\u6570\u7684\u6743\u503c\uff0c\u6700\u540e\u6574\u5408\u8d77\u6765\u5373\u53ef\uff0c\u590d\u6742\u5ea6 O(n) O(n) \u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1009.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 3e5 + 5 ; const int mod = 51123987 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} typedef unsigned long long ull ; struct mhash { ull base [ maxn ]; ull hash_index [ maxn ]; ull seed ; //31, 131 void inithash ( ull seedt = 31 ) { base [ 0 ] = 1 ; seed = seedt ; for ( int i = 1 ; i < maxn ; ++ i ) base [ i ] = base [ i - 1 ] * seed ; } void hash ( char * p , int n ) { // from 1 to n hash_index [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) hash_index [ i ] = hash_index [ i - 1 ] * seed + p [ i ] - 'a' ; } ull gethash ( int s , int e ) { return hash_index [ e ] - hash_index [ s - 1 ] * base [ e - s + 1 ]; } } pre , last ; int n ; char s [ maxn ]; char s1 [ maxn ]; bool check ( int l , int r ) { return pre . gethash ( l , r ) == last . gethash ( n - r + 1 , n - l + 1 ) && pre . gethash ( l , ( l + r ) / 2 ) == last . gethash ( n - ( l + r ) / 2 + 1 , n - l + 1 ); } const int N = 26 ; struct Palindromic_Tree { // vector<pair<int, int> > next[maxn]; int ok [ maxn ]; int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6784\u6210 int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int cnt [ maxn ]{}; //\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u7684\u4e2a\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0c\u6700\u540ecount()\u51fd\u6570\u8dd1\u4e00\u904d\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 // next[p].clear(); for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; cnt [ p ] = 0 ; num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } void init () { //\u521d\u59cb\u5316 n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; } int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } int add ( int c , int pos ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e // int x = find(cur, c); // if (!x) { if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 // x = now; // fail[now] = find(get_fail(fail[cur]), c); // next[cur].emplace_back(make_pair(c, now)); fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u4fbf\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; ok [ now ] = check ( pos - len [ now ] + 1 , pos ); } // last = x; last = next [ cur ][ c ]; cnt [ last ] ++ ; return num [ last ]; } void count () { for ( int i = p - 1 ; i >= 0 ; -- i ) cnt [ fail [ i ]] += cnt [ i ]; //\u7236\u4eb2\u7d2f\u52a0\u513f\u5b50\u7684cnt\uff0c\u56e0\u4e3a\u5982\u679cfail[v]=u\uff0c\u5219u\u4e00\u5b9a\u662fv\u7684\u5b50\u56de\u6587\u4e32\uff01 } } solve ; int ttans [ maxn ]; int main ( int argc , char * argv []) { pre . inithash (); last . inithash (); while ( scanf ( \"%s\" , s + 1 ) != EOF ) { n = strlen ( s + 1 ); for ( int i = 1 ; i <= n ; ++ i ) s1 [ n - i + 1 ] = s [ i ]; pre . hash ( s , n ); last . hash ( s1 , n ); solve . init (); for ( int i = 1 ; i <= n ; ++ i ) solve . add ( s [ i ] - 'a' , i ); solve . count (); for ( int i = 1 ; i <= n ; ++ i ) ttans [ i ] = 0 ; for ( int i = 2 ; i <= solve . p ; ++ i ) { ttans [ solve . len [ i ]] += solve . cnt [ i ] * solve . ok [ i ]; } for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d%c\" , ttans [ i ], i == n ? '\\n' : ' ' ); } return 0 ; } J. Just Skip The Problem Link \u9898\u610f\uff1a\u8981\u786e\u5b9a\u4e00\u4e2a2\u8fdb\u5236\u4f4d\u4e3an\u7684\u6570x\uff0c\u6c42\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u53ef\u4ee5\u56de\u7b54\u5b83&x\u662f\u5426\u4e3a0\u3002\u95ee\u6240\u6709\u7684\u6700\u5c11\u6b21\u6570\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3\uff1a\u63a8\u4e00\u63a8\u663e\u7136\u6bcf\u6b21\u95ee\u5b83\u67d0\u4e2a2\u8fdb\u5236\u4f4d\u5c31\u884c\uff0c\u6700\u5c11n\u6b21\uff0c\u7136\u540e\u5c31\u662fn\u4e2a\u6570\u7684\u5168\u6392\u5217\uff0c\u7531\u4e8e\u6a21\u6570\u53ea\u6709 1e6+3 \uff0c\u76f4\u63a5\u63a8\u524d 1e6+3 \u9879\u7684\u9636\u4e58\uff0c\u540e\u9762\u5168\u662f0\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 4 ; const int mod = 1e6 + 3 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll jie [ maxn ] = { 1 }; int main ( int argc , char * argv []) { for ( int i = 1 ; i < maxn ; ++ i ) jie [ i ] = jie [ i - 1 ] * i % mod ; int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { printf ( \"%lld \\n \" , n < maxn ? jie [ n ] : 0ll ); } return 0 ; } K. Keen On Everything But Triangle Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u6c42l\u5230r\u4e2d\u4f7f\u7528\u4e09\u4e2a\u6570\u5b57\u80fd\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u4e2d\u7684\u6700\u957f\u5468\u957f\u3002 \u9898\u89e3\uff1a\u9996\u5148\u4e86\u89e3\u5230\u8fd9\u4e09\u6761\u8fb9\u5fc5\u7136\u662f\uff08\u6570\u503c\u5927\u5c0f\u4e0a\uff09\u76f8\u90bb\u7684\u4e09\u4e2a\u3002\u53cd\u8bc1\u6cd5\u6613\u8bc1\uff0c\u5c31\u76f4\u63a5\u662f\u4e00\u5b9a\u6709\u66f4\u76f8\u90bb\u7684\u6570\u53ef\u4ee5\u4f7f\u5f97\u7b54\u6848\u66f4\u5927\uff0c\u7136\u540e\u8003\u8651\u4ece\u5c0f\u5230\u5927\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u663e\u7136 1 1 2 3 5 8 ... \u8fd9\u4e2a\u5e8f\u5217\u662f\u6700\u5c0f\u7684\u80fd\u6784\u4e0d\u6210\u4e09\u89d2\u5f62\u7684\u5e8f\u5217\uff0c\u800c\u6211\u4eec\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\u9012\u589e\u5de8\u5feb\uff0c\u63a8\u51fa\u6765\u5927\u698244\u9879\u5c31\u8d85\u8fc71e9\u4e86\uff0c\u7136\u540e\u5c31\u7ef4\u62a4\u533a\u95f4\u524d44\u9879\u5927\u503c\u5373\u53ef\u3002\u672c\u6765\u5199\u4e86\u4e00\u6ce2\u5de8\u4f18\u7f8e\u7684\u7ebf\u6bb5\u6811+\u83ab\u961f\uff0c\u7136\u540e\u5c31\u66b4\u6bd9\u5728\u83ab\u961f\u7684\u6839\u53f7\u590d\u6742\u5ea6\u4e0b\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1011.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-24 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int val [ maxn << 2 ][ 45 ]; int a [ maxn ]; int res [ 45 ], tp [ 45 ]; int le , re , k ; int n , m ; inline void pushup ( int * a , int * b ) { int i = 0 , j = 0 , now = 0 ; while ( now < 45 ) { if ( a [ i ] > b [ j ]) { res [ now ++ ] = a [ i ++ ]; } else res [ now ++ ] = b [ j ++ ]; } } inline void build ( int rt , int l , int r ) { if ( l == r ) { val [ rt ][ 0 ] = a [ l ]; for ( int i = 1 ; i < 45 ; ++ i ) val [ rt ][ i ] = 0 ; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); pushup ( val [ rt << 1 ], val [ rt << 1 | 1 ]); for ( int i = 0 ; i < 45 ; ++ i ) val [ rt ][ i ] = res [ i ]; } inline void query ( int rt , int l , int r ) { if ( le <= l && r <= re ) { pushup ( tp , val [ rt ]); for ( int i = 0 ; i < 45 ; ++ i ) tp [ i ] = res [ i ]; return ; } int mid = l + r >> 1 ; if ( le <= mid ) query ( rt << 1 , l , mid ); if ( re > mid ) query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { // freopen(\"data1.in\", \"r\", stdin); while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } build ( 1 , 1 , n ); while ( m -- ) { scanf ( \"%d%d\" , & le , & re ); for ( int i = 0 ; i < 45 ; ++ i ) tp [ i ] = 0 ; query ( 1 , 1 , n ); ll tt = - 1 ; for ( int i = 0 ; i < 43 ; ++ i ) { if ( tp [ i + 2 ] == 0 ) break ; if ( tp [ i + 1 ] + tp [ i + 2 ] > tp [ i ]) { tt = ( ll ) tp [ i ] + tp [ i + 1 ] + tp [ i + 2 ]; break ; } } printf ( \"%lld \\n \" , tt ); // fflush(stdout); } } return 0 ; } L. Longest Subarray Link \u9898\u610f\uff1a\u7ed9nck\uff0c\u8868\u793a\u5e8f\u5217\u957f\u5ea6\u4e3an\uff0c\u5e8f\u5217\u4e2d\u5143\u7d20\u96c6\u4e3ac\uff0c\u8981\u6c42\u6700\u957f\u7684\u5b50\u5e8f\u5217\u4f7f\u5f97\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u5143\u7d20\u4e2a\u6570\u8981\u4e48\u662f0\u8981\u4e48\u4e0d\u5c0f\u4e8ek\u3002 \u9898\u89e3\uff1a\u8fd9\u4e5f\u592a\u5bb9\u6613\u53bb\u60f3dp\u89e3\u6cd5\u4e86\u5427\uff0c\u7136\u540e\u53d1\u73b0\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0cc\u7ef4dp\u3002\u7136\u540e\u8003\u8651\u7ef4\u62a4\u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\u6bcf\u4e2a\u6570\u7684\u80fd\u7528\u7684\u533a\u95f4\uff0c\u663e\u7136\u9664\u4e86\u53f3\u7aef\u70b9\u5f53\u524d\u7684\u503c\uff0c\u5176\u4ed6\u503c\u7684\u533a\u95f4\u4e0e\u4e0a\u4e00\u4e2a\u53f3\u7aef\u70b9\u76f8\u540c\uff0c\u591a\u4e00\u4e2a\u5728\u5f53\u524d\u533a\u95f4\u80fd\u53d6\uff0c\u6240\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u80fd\u53d6\u591a\u5c11\u4e2a\u503c\uff0c\u5f53\u524d\u70b9\u9996\u5148\u52a0\u4e0ac-1\u4e2a\u503c\uff0c\u7136\u540e\u8003\u8651\u5f53\u524d\u503c\u7684\u533a\u95f4\u53d8\u5316\uff0c\u4e00\u4e2a\u662f0\u533a\u95f4\u88ab\u53bb\u6389\u4e86\uff0c\u6240\u4ee5\u4ece\u5f53\u524d\u70b9\u503c\u7684\u4e0a\u4e00\u4e2a\u5230\u5f53\u524d\u70b9-1\u533a\u95f4-1\uff0c\u518d\u4e00\u4e2a\u662f\u5f53\u524d\u70b9\u7684\u524dk\u4e2a\u591a\u4e86\u4e00\u4e2a\uff0c\u6240\u4ee5\u4ecek-1\u5230k\u533a\u95f4+1\uff0c\u7136\u540e\u627e\u6700\u5de6\u8fb9\u503c\u4e3ac\u7684\u70b9\u4e0e\u5f53\u524d\u70b9\u4f5c\u5dee\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5e38\u7528\u4e8e\u7ebf\u6bb5\u6811\uff0c\u5b9e\u9645\u4e0a\u548c\u5355\u70b9\u67e5\u8be2\u4e00\u4e2a\u590d\u6742\u5ea6\u3002\u5c31\u662f\u4f18\u5148\u5de6\u513f\u5b50\uff0c\u5982\u679c\u5de6\u513f\u5b50\u6709\u89e3\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\uff0c\u5426\u5219\u8fd4\u56de\u53f3\u513f\u5b50\uff0c\u5b9e\u9645\u4e0a\u6211\u7ef4\u62a4\u6700\u5927\u503c\u4e4b\u540e\u5b83\u6709\u6ca1\u6709\u89e3\u5f88\u5bb9\u6613\u3002\u8fd9\u4e2a\u9898\u6700\u597d\u662f\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u5728\u54ea\u51fa\u73b0\uff0c\u7136\u540e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u5730\u65b9\u76f4\u63a5\u8bbe\u4e3a0\uff0c\u5426\u5219\u6709\u70b9\u96be\u4ee5\u5904\u7406\u8fb9\u754c\uff0c\u6211re\u4e86\u4e00\u9762\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1012.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-24 * ================================================================*/ #include <bits/stdc++.h> #pragma comment(linker, \"/STACK:102400000,102400000\") #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll val [ maxn << 2 ], lazy [ maxn << 2 ]; int le , re ; vector < int > pos [ maxn ]; ll k ; int n , m , C ; inline void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } inline void build ( int rt , int l , int r ) { val [ rt ] = lazy [ rt ] = 0 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } inline void update ( int rt , int l , int r ) { if ( re < le || le <= 0 ) return ; if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } pushdown ( rt ); int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline int query ( int rt , int l , int r ) { if ( val [ rt ] < C ) return - 1 ; if ( l == r ) { return l ; } pushdown ( rt ); int mid = l + r >> 1 ; int res = query ( rt << 1 , l , mid ); if ( res != - 1 ) return res ; return query ( rt << 1 | 1 , mid + 1 , r ); } int main () { while ( scanf ( \"%d%d%d\" , & n , & C , & m ) != EOF ) { for ( int i = 1 ; i <= C ; ++ i ) { pos [ i ]. clear (); } build ( 1 , 1 , n ); int res = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) { scanf ( \"%d\" , & x ); le = re = i ; k = C - 1 ; update ( 1 , 1 , n ); if ( pos [ x ]. size ()) le = pos [ x ]. back () + 1 ; else le = 1 ; re = i - 1 ; k = - 1 ; if ( le <= re ) update ( 1 , 1 , n ); pos [ x ]. push_back ( i ); int p = pos [ x ]. size () - m - 1 ; if ( p >= 0 ) { le = pos [ x ][ p ] + 1 ; re = pos [ x ][ p + 1 ]; k = 1 ; update ( 1 , 1 , n ); } else if ( p == - 1 && ! pos [ x ]. empty ()) { le = 1 ; re = pos [ x ][ 0 ]; k = 1 ; update ( 1 , 1 , n ); } int tmp = query ( 1 , 1 , n ); if ( tmp != - 1 ) res = max ( res , i - tmp + 1 ); } printf ( \"%d \\n \" , res ); } return 0 ; }","title":"2019 Multi-University Training Contest 2"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#2019-multi-university-training-contest-2","text":"Date Solved A B C D E F G H I J K L 2019/7/24 6/12 . . . . O . . \u00d8 \u00d8 O \u00d8 \u00d8","title":"2019 Multi-University Training Contest 2"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#e-everything-is-generated-in-equal-probability","text":"\u66b4\u529b\u8dd1\u51fa\u524d\u4e24\u9879\uff0c\u6309\u9898\u610f\u6a21\u62df\u9898\u76ee\u7ed9\u7684\u968f\u673a\u7b97\u6cd5\u7b97\u51fa\u7b2c3,4\u9879\uff0c\u4e22\u8fdbOEIS\u627e\u89c4\u5f8b\u5f97\u5230\u901a\u9879\u3002 \u524d5\u9879\u5206\u522b\u662f0,\u2153,8/9,5/3,8/3\uff0c\u628a\u5206\u6bcd\u901a\u5206\u62109\u4e4b\u540e\u7684\u5206\u5b50\u5e8f\u5217\u662f0,3,8,15,24\uff0c\u90a3\u4e48\u901a\u9879\u5c31\u662f F(i)=\\frac{(i+1)(i-1)}{9} F(i)=\\frac{(i+1)(i-1)}{9} <span><span class=\"MathJax_Preview\">F(i)=\\frac{(i+1)(i-1)}{9}</span><script type=\"math/tex\">F(i)=\\frac{(i+1)(i-1)}{9}","title":"E. Everything Is Generated In Equal Probability"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#code","text":"","title":"Code"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#random","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include <bits/stdc++.h> #define random(a,b) ((a)+rand()%((b)-(a)+1)) using namespace std ; int ip ( int a [], int len ) { int cnt = 0 ; for ( int i = 0 ; i < len ; i ++ ) for ( int j = i + 1 ; j < len ; j ++ ) if ( a [ i ] > a [ j ]) cnt ++ ; return cnt ; } int cal ( int a [], int len ) { int cnt = 0 ; if ( len > 0 ) { cnt = ip ( a , len ); int x = random ( 0 , ( 1 << ( len + 1 )) - 1 ); int tmp [ 10 ], len1 = 0 ; for ( int i = 0 ; i < len ; i ++ ) if (( x >> i ) & 1 ) tmp [ len1 ++ ] = a [ i ]; cnt += cal ( tmp , len1 ); } return cnt ; } int a [ 10 ], b [ 10 ]; int main () { int tm = 90000 ; int n = 5 ; for ( int i = 0 ; i < 10 ; i ++ ) a [ i ] = i + 1 ; long long cnt = 0 ; for ( int i = 0 ; i < tm ; i ++ ) { int len = random ( 1 , n ); for ( int j = 0 ; j < len ; j ++ ) b [ j ] = a [ j ]; random_shuffle ( b , b + len ); cnt += cal ( b , len ); } printf ( \"%lld \\n \" , cnt ); return 0 ; }","title":"Random"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int mod = 998244353 ; ll inv ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int main () { long long n ; while ( scanf ( \"%lld\" , & n ) != EOF ) printf ( \"%lld \\n \" , ( n + 1 ) * ( n - 1 ) % mod * inv ( 9 ) % mod ); return 0 ; }","title":"Solution"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#h-harmonious-army","text":"\u51fa\u4e86\u4e00\u4e07\u904d\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff0c\u7136\u800c\u6bd4\u8d5b\u7684\u65f6\u5019\u770b\u90fd\u6ca1\u770b\u8fd9\u9898\u3002 \u5927\u6982BZOJ2127\uff0cBZOJ2132\uff0cBZOJ3894\u90fd\u662f\u8fd9\u4e2a\u6a21\u578b\u7684\u9898\u3002 \u5bf9\u8fd9\u4e2a\u6a21\u578b\u5efa\u50cf\u4e0a\u56fe\u8fd9\u6837\u7684\u7f51\u7edc\u6d41\uff0c\u6211\u4eec\u4ee4 S=A+B+C S=A+B+C \u8868\u793a\u4e09\u79cd\u6536\u76ca\u7684\u548c\uff0c\u56fe\u4e0a\u6bcf\u4e00\u79cd\u5272\u6cd5\u8868\u793a\u51cf\u53bb\u4e00\u90e8\u5206\u7684\u6536\u76ca\uff0c\u5047\u8bbe\u5f53\u524d\u5272\u96c6\u4e4b\u548c\u4e3a X X \uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u7f51\u7edc\u4f7fS-\u5272\u96c6=\u5f53\u524d\u9009\u6cd5\u7684\u6536\u76ca\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u5272\u96c6\u4e3a{a,b}\u65f6\u8868\u793a\u4e24\u4eba\u9009\u7684\u90fd\u662fMages\uff0c\u6536\u76ca\u4e3aC\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-C=A+B S-C=A+B \uff0c\u6709 a+b=A+B a+b=A+B \u5272\u96c6\u4e3a{c,d}\u65f6\u8868\u793a\u4e24\u4eba\u9009\u7684\u90fd\u662fWarriors\uff0c\u6536\u76ca\u4e3aA\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-A=B+C S-A=B+C \uff0c\u6709 c+d=B+C c+d=B+C \u5272\u96c6\u4e3a{a,e,d}\u6216\u8005{b,e,c}\u65f6\u8868\u793a\u4e00\u4e2a\u4eba\u9009Mage\uff0c\u53e6\u4e00\u4e2a\u4eba\u9009Warrior\uff0c\u6536\u76ca\u4e3aB\uff0c\u9700\u8981\u51cf\u53bb\u7684\u6536\u76ca\u4e3a S-B=A+C S-B=A+C \uff0c\u6709 a+e+d=A+C a+e+d=A+C , b+e+c=A+C b+e+c=A+C \u4e0d\u59a8\u4ee4a=b,c=d,\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4\u89e3 a=b=(A+B)/2 a=b=(A+B)/2 \uff0c c=d=(C+D)/2 c=d=(C+D)/2 \uff0c e=-B+(A+C)/2 e=-B+(A+C)/2 \u5bf9\u4e8e\u6bcf\u4e00\u7ec4(x,y)\u5efa\u8fd9\u6837\u7684\u7f51\u7edc\u8dd1\u6700\u5c0f\u5272\uff0c\u7528\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u5373\u4e3a\u6240\u6c42\u89e3\u3002 \u4e3a\u4e86\u907f\u514d\u5efa\u56fe\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5c0f\u6570\u53ef\u4ee5\u628a\u6240\u6709\u6743\u503cx2\uff0c\u8f93\u51fa\u65f6\u518d/2","title":"H. Harmonious Army"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#code_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 #include <bits/stdc++.h> #define int long long using namespace std ; const int MAX_V = 1000 + 10 ; const int INF = 0x3f3f3f3f3f3f3f3f ; struct Dinic { //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void init ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } } ans ; int w1 [ 510 ], w2 [ 510 ]; signed main () { int n , m , u , v , a , b , c ; while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF ) { int S = 0 , T = n + 1 ; ans . init ( T ); for ( int i = 0 ; i <= T ; i ++ ) w1 [ i ] = w2 [ i ] = 0 ; int res = 0 ; while ( m -- ) { scanf ( \"%lld%lld%lld%lld%lld\" , & u , & v , & a , & b , & c ); res += 2 * ( a + b + c ); w1 [ u ] += a + b ; w1 [ v ] += a + b ; w2 [ u ] += b + c ; w2 [ v ] += b + c ; ans . add ( u , v , a + c - 2 * b ); ans . add ( v , u , a + c - 2 * b ); } for ( int i = 1 ; i <= n ; i ++ ) { ans . add ( S , i , w1 [ i ]); ans . add ( i , T , w2 [ i ]); } res -= ans . max_flow ( S , T ); res /= 2 ; printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"Code"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#i-i-love-palindrome-string","text":"\u9898\u610f\uff1a\u6c42\u6240\u6709\u957f\u5ea6\u4e3a1\uff5en\u7684\u5b50\u4e32\u6ee1\u8db3 S_i^j S_i^j \u548c S_i^{(i+j)/2} S_i^{(i+j)/2} \u4e3a\u56de\u6587\u4e32\u7684\u4e2a\u6570 \u9898\u89e3\uff1a\u5bf9\u6240\u6709\u56de\u6587\u4e32\u6765\u8bf4\uff0c\u5b83\u524d\u534a\u6bb5\u662f\u5426\u662f\u56de\u6587\u4e32\u90fd\u662f\u786e\u5b9a\u662f\uff0c\u6240\u4ee5\u56de\u6587\u6811\u7ef4\u62a4\u6240\u6709\u672c\u8d28\u4e0d\u540c\u4e32\uff0c\u6bcf\u589e\u52a0\u4e00\u4e2a\u8282\u70b9\u5c31\u8ba1\u7b97\u8fd9\u4e2a\u8282\u70b9\u7684\u524d\u534a\u6bb5\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0a\u4e00\u624bhash\u5feb\u901f\u5224\u65ad\uff0c\u7136\u540e\u5982\u679c\u662f\uff0c\u8be5\u672c\u8d28\u4e32\u7684\u957f\u5ea6\u5c31\u8981\u52a0\u4e2a\u5b83\u4e2a\u6570\u7684\u6743\u503c\uff0c\u6700\u540e\u6574\u5408\u8d77\u6765\u5373\u53ef\uff0c\u590d\u6742\u5ea6 O(n) O(n) \u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1009.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 3e5 + 5 ; const int mod = 51123987 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} typedef unsigned long long ull ; struct mhash { ull base [ maxn ]; ull hash_index [ maxn ]; ull seed ; //31, 131 void inithash ( ull seedt = 31 ) { base [ 0 ] = 1 ; seed = seedt ; for ( int i = 1 ; i < maxn ; ++ i ) base [ i ] = base [ i - 1 ] * seed ; } void hash ( char * p , int n ) { // from 1 to n hash_index [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) hash_index [ i ] = hash_index [ i - 1 ] * seed + p [ i ] - 'a' ; } ull gethash ( int s , int e ) { return hash_index [ e ] - hash_index [ s - 1 ] * base [ e - s + 1 ]; } } pre , last ; int n ; char s [ maxn ]; char s1 [ maxn ]; bool check ( int l , int r ) { return pre . gethash ( l , r ) == last . gethash ( n - r + 1 , n - l + 1 ) && pre . gethash ( l , ( l + r ) / 2 ) == last . gethash ( n - ( l + r ) / 2 + 1 , n - l + 1 ); } const int N = 26 ; struct Palindromic_Tree { // vector<pair<int, int> > next[maxn]; int ok [ maxn ]; int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6784\u6210 int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int cnt [ maxn ]{}; //\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u7684\u4e2a\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0c\u6700\u540ecount()\u51fd\u6570\u8dd1\u4e00\u904d\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 // next[p].clear(); for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; cnt [ p ] = 0 ; num [ p ] = 0 ; len [ p ] = l ; return p ++ ; } void init () { //\u521d\u59cb\u5316 n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; } int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } int add ( int c , int pos ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e // int x = find(cur, c); // if (!x) { if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 // x = now; // fail[now] = find(get_fail(fail[cur]), c); // next[cur].emplace_back(make_pair(c, now)); fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u4fbf\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; ok [ now ] = check ( pos - len [ now ] + 1 , pos ); } // last = x; last = next [ cur ][ c ]; cnt [ last ] ++ ; return num [ last ]; } void count () { for ( int i = p - 1 ; i >= 0 ; -- i ) cnt [ fail [ i ]] += cnt [ i ]; //\u7236\u4eb2\u7d2f\u52a0\u513f\u5b50\u7684cnt\uff0c\u56e0\u4e3a\u5982\u679cfail[v]=u\uff0c\u5219u\u4e00\u5b9a\u662fv\u7684\u5b50\u56de\u6587\u4e32\uff01 } } solve ; int ttans [ maxn ]; int main ( int argc , char * argv []) { pre . inithash (); last . inithash (); while ( scanf ( \"%s\" , s + 1 ) != EOF ) { n = strlen ( s + 1 ); for ( int i = 1 ; i <= n ; ++ i ) s1 [ n - i + 1 ] = s [ i ]; pre . hash ( s , n ); last . hash ( s1 , n ); solve . init (); for ( int i = 1 ; i <= n ; ++ i ) solve . add ( s [ i ] - 'a' , i ); solve . count (); for ( int i = 1 ; i <= n ; ++ i ) ttans [ i ] = 0 ; for ( int i = 2 ; i <= solve . p ; ++ i ) { ttans [ solve . len [ i ]] += solve . cnt [ i ] * solve . ok [ i ]; } for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d%c\" , ttans [ i ], i == n ? '\\n' : ' ' ); } return 0 ; }","title":"I. I Love Palindrome String"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#j-just-skip-the-problem","text":"\u9898\u610f\uff1a\u8981\u786e\u5b9a\u4e00\u4e2a2\u8fdb\u5236\u4f4d\u4e3an\u7684\u6570x\uff0c\u6c42\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u53ef\u4ee5\u56de\u7b54\u5b83&x\u662f\u5426\u4e3a0\u3002\u95ee\u6240\u6709\u7684\u6700\u5c11\u6b21\u6570\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3\uff1a\u63a8\u4e00\u63a8\u663e\u7136\u6bcf\u6b21\u95ee\u5b83\u67d0\u4e2a2\u8fdb\u5236\u4f4d\u5c31\u884c\uff0c\u6700\u5c11n\u6b21\uff0c\u7136\u540e\u5c31\u662fn\u4e2a\u6570\u7684\u5168\u6392\u5217\uff0c\u7531\u4e8e\u6a21\u6570\u53ea\u6709 1e6+3 \uff0c\u76f4\u63a5\u63a8\u524d 1e6+3 \u9879\u7684\u9636\u4e58\uff0c\u540e\u9762\u5168\u662f0\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 4 ; const int mod = 1e6 + 3 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll jie [ maxn ] = { 1 }; int main ( int argc , char * argv []) { for ( int i = 1 ; i < maxn ; ++ i ) jie [ i ] = jie [ i - 1 ] * i % mod ; int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { printf ( \"%lld \\n \" , n < maxn ? jie [ n ] : 0ll ); } return 0 ; }","title":"J. Just Skip The Problem"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#k-keen-on-everything-but-triangle","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u6c42l\u5230r\u4e2d\u4f7f\u7528\u4e09\u4e2a\u6570\u5b57\u80fd\u7ec4\u6210\u7684\u4e09\u89d2\u5f62\u4e2d\u7684\u6700\u957f\u5468\u957f\u3002 \u9898\u89e3\uff1a\u9996\u5148\u4e86\u89e3\u5230\u8fd9\u4e09\u6761\u8fb9\u5fc5\u7136\u662f\uff08\u6570\u503c\u5927\u5c0f\u4e0a\uff09\u76f8\u90bb\u7684\u4e09\u4e2a\u3002\u53cd\u8bc1\u6cd5\u6613\u8bc1\uff0c\u5c31\u76f4\u63a5\u662f\u4e00\u5b9a\u6709\u66f4\u76f8\u90bb\u7684\u6570\u53ef\u4ee5\u4f7f\u5f97\u7b54\u6848\u66f4\u5927\uff0c\u7136\u540e\u8003\u8651\u4ece\u5c0f\u5230\u5927\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u663e\u7136 1 1 2 3 5 8 ... \u8fd9\u4e2a\u5e8f\u5217\u662f\u6700\u5c0f\u7684\u80fd\u6784\u4e0d\u6210\u4e09\u89d2\u5f62\u7684\u5e8f\u5217\uff0c\u800c\u6211\u4eec\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\u9012\u589e\u5de8\u5feb\uff0c\u63a8\u51fa\u6765\u5927\u698244\u9879\u5c31\u8d85\u8fc71e9\u4e86\uff0c\u7136\u540e\u5c31\u7ef4\u62a4\u533a\u95f4\u524d44\u9879\u5927\u503c\u5373\u53ef\u3002\u672c\u6765\u5199\u4e86\u4e00\u6ce2\u5de8\u4f18\u7f8e\u7684\u7ebf\u6bb5\u6811+\u83ab\u961f\uff0c\u7136\u540e\u5c31\u66b4\u6bd9\u5728\u83ab\u961f\u7684\u6839\u53f7\u590d\u6742\u5ea6\u4e0b\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1011.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-24 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int val [ maxn << 2 ][ 45 ]; int a [ maxn ]; int res [ 45 ], tp [ 45 ]; int le , re , k ; int n , m ; inline void pushup ( int * a , int * b ) { int i = 0 , j = 0 , now = 0 ; while ( now < 45 ) { if ( a [ i ] > b [ j ]) { res [ now ++ ] = a [ i ++ ]; } else res [ now ++ ] = b [ j ++ ]; } } inline void build ( int rt , int l , int r ) { if ( l == r ) { val [ rt ][ 0 ] = a [ l ]; for ( int i = 1 ; i < 45 ; ++ i ) val [ rt ][ i ] = 0 ; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); pushup ( val [ rt << 1 ], val [ rt << 1 | 1 ]); for ( int i = 0 ; i < 45 ; ++ i ) val [ rt ][ i ] = res [ i ]; } inline void query ( int rt , int l , int r ) { if ( le <= l && r <= re ) { pushup ( tp , val [ rt ]); for ( int i = 0 ; i < 45 ; ++ i ) tp [ i ] = res [ i ]; return ; } int mid = l + r >> 1 ; if ( le <= mid ) query ( rt << 1 , l , mid ); if ( re > mid ) query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { // freopen(\"data1.in\", \"r\", stdin); while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } build ( 1 , 1 , n ); while ( m -- ) { scanf ( \"%d%d\" , & le , & re ); for ( int i = 0 ; i < 45 ; ++ i ) tp [ i ] = 0 ; query ( 1 , 1 , n ); ll tt = - 1 ; for ( int i = 0 ; i < 43 ; ++ i ) { if ( tp [ i + 2 ] == 0 ) break ; if ( tp [ i + 1 ] + tp [ i + 2 ] > tp [ i ]) { tt = ( ll ) tp [ i ] + tp [ i + 1 ] + tp [ i + 2 ]; break ; } } printf ( \"%lld \\n \" , tt ); // fflush(stdout); } } return 0 ; }","title":"K. Keen On Everything But Triangle"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 2/#l-longest-subarray","text":"\u9898\u610f\uff1a\u7ed9nck\uff0c\u8868\u793a\u5e8f\u5217\u957f\u5ea6\u4e3an\uff0c\u5e8f\u5217\u4e2d\u5143\u7d20\u96c6\u4e3ac\uff0c\u8981\u6c42\u6700\u957f\u7684\u5b50\u5e8f\u5217\u4f7f\u5f97\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u5143\u7d20\u4e2a\u6570\u8981\u4e48\u662f0\u8981\u4e48\u4e0d\u5c0f\u4e8ek\u3002 \u9898\u89e3\uff1a\u8fd9\u4e5f\u592a\u5bb9\u6613\u53bb\u60f3dp\u89e3\u6cd5\u4e86\u5427\uff0c\u7136\u540e\u53d1\u73b0\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0cc\u7ef4dp\u3002\u7136\u540e\u8003\u8651\u7ef4\u62a4\u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\u6bcf\u4e2a\u6570\u7684\u80fd\u7528\u7684\u533a\u95f4\uff0c\u663e\u7136\u9664\u4e86\u53f3\u7aef\u70b9\u5f53\u524d\u7684\u503c\uff0c\u5176\u4ed6\u503c\u7684\u533a\u95f4\u4e0e\u4e0a\u4e00\u4e2a\u53f3\u7aef\u70b9\u76f8\u540c\uff0c\u591a\u4e00\u4e2a\u5728\u5f53\u524d\u533a\u95f4\u80fd\u53d6\uff0c\u6240\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u80fd\u53d6\u591a\u5c11\u4e2a\u503c\uff0c\u5f53\u524d\u70b9\u9996\u5148\u52a0\u4e0ac-1\u4e2a\u503c\uff0c\u7136\u540e\u8003\u8651\u5f53\u524d\u503c\u7684\u533a\u95f4\u53d8\u5316\uff0c\u4e00\u4e2a\u662f0\u533a\u95f4\u88ab\u53bb\u6389\u4e86\uff0c\u6240\u4ee5\u4ece\u5f53\u524d\u70b9\u503c\u7684\u4e0a\u4e00\u4e2a\u5230\u5f53\u524d\u70b9-1\u533a\u95f4-1\uff0c\u518d\u4e00\u4e2a\u662f\u5f53\u524d\u70b9\u7684\u524dk\u4e2a\u591a\u4e86\u4e00\u4e2a\uff0c\u6240\u4ee5\u4ecek-1\u5230k\u533a\u95f4+1\uff0c\u7136\u540e\u627e\u6700\u5de6\u8fb9\u503c\u4e3ac\u7684\u70b9\u4e0e\u5f53\u524d\u70b9\u4f5c\u5dee\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5e38\u7528\u4e8e\u7ebf\u6bb5\u6811\uff0c\u5b9e\u9645\u4e0a\u548c\u5355\u70b9\u67e5\u8be2\u4e00\u4e2a\u590d\u6742\u5ea6\u3002\u5c31\u662f\u4f18\u5148\u5de6\u513f\u5b50\uff0c\u5982\u679c\u5de6\u513f\u5b50\u6709\u89e3\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\uff0c\u5426\u5219\u8fd4\u56de\u53f3\u513f\u5b50\uff0c\u5b9e\u9645\u4e0a\u6211\u7ef4\u62a4\u6700\u5927\u503c\u4e4b\u540e\u5b83\u6709\u6ca1\u6709\u89e3\u5f88\u5bb9\u6613\u3002\u8fd9\u4e2a\u9898\u6700\u597d\u662f\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u5728\u54ea\u51fa\u73b0\uff0c\u7136\u540e\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u5730\u65b9\u76f4\u63a5\u8bbe\u4e3a0\uff0c\u5426\u5219\u6709\u70b9\u96be\u4ee5\u5904\u7406\u8fb9\u754c\uff0c\u6211re\u4e86\u4e00\u9762\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1012.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-24 * ================================================================*/ #include <bits/stdc++.h> #pragma comment(linker, \"/STACK:102400000,102400000\") #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll val [ maxn << 2 ], lazy [ maxn << 2 ]; int le , re ; vector < int > pos [ maxn ]; ll k ; int n , m , C ; inline void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } inline void build ( int rt , int l , int r ) { val [ rt ] = lazy [ rt ] = 0 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } inline void update ( int rt , int l , int r ) { if ( re < le || le <= 0 ) return ; if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } pushdown ( rt ); int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline int query ( int rt , int l , int r ) { if ( val [ rt ] < C ) return - 1 ; if ( l == r ) { return l ; } pushdown ( rt ); int mid = l + r >> 1 ; int res = query ( rt << 1 , l , mid ); if ( res != - 1 ) return res ; return query ( rt << 1 | 1 , mid + 1 , r ); } int main () { while ( scanf ( \"%d%d%d\" , & n , & C , & m ) != EOF ) { for ( int i = 1 ; i <= C ; ++ i ) { pos [ i ]. clear (); } build ( 1 , 1 , n ); int res = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) { scanf ( \"%d\" , & x ); le = re = i ; k = C - 1 ; update ( 1 , 1 , n ); if ( pos [ x ]. size ()) le = pos [ x ]. back () + 1 ; else le = 1 ; re = i - 1 ; k = - 1 ; if ( le <= re ) update ( 1 , 1 , n ); pos [ x ]. push_back ( i ); int p = pos [ x ]. size () - m - 1 ; if ( p >= 0 ) { le = pos [ x ][ p ] + 1 ; re = pos [ x ][ p + 1 ]; k = 1 ; update ( 1 , 1 , n ); } else if ( p == - 1 && ! pos [ x ]. empty ()) { le = 1 ; re = pos [ x ][ 0 ]; k = 1 ; update ( 1 , 1 , n ); } int tmp = query ( 1 , 1 , n ); if ( tmp != - 1 ) res = max ( res , i - tmp + 1 ); } printf ( \"%d \\n \" , res ); } return 0 ; }","title":"L. Longest Subarray"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 3/","text":"Date Solved A B C D E F G H I J K 2019/7/29 6/12 . \u00d8 . \u00d8 . O O . \u00d8 . . D - Distribution of books Link \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4ece\u524d\u5f80\u540e\u8fde\u7eed\u9009m\u5757\uff0c\u6bcf\u5757\u81f3\u5c11\u4e00\u4e2a\u6570\uff0c\u4f7f\u5f97\u9009\u53d6\u5757\u7684\u548c\u6700\u5927\u503c\u6700\u5c0f\u3002 \u9996\u5148\u80af\u5b9a\u662f\u8003\u8651\u4e8c\u5206\u7684\uff0c\u76f4\u63a5\u4e8c\u5206\u7b54\u6848\u5c31\u662f\u80fd\u5426\u9009\u5230m\u4e2a\u4e0d\u5927\u4e8e\u5f53\u524d\u503c\u7684\u5757\u5373\u53ef\u3002\u7136\u540e\u8003\u8651\u600e\u4e48check\uff0c\u4e00\u4e2a\u663e\u7136\u7684 O(n^2) O(n^2) \u7684check\u662f dp[i] = max(dp[j]) + 1 (\\sum_{k=j}^i a[k] <= mid) dp[i] = max(dp[j]) + 1 (\\sum_{k=j}^i a[k] <= mid) \uff0c\u5176\u5b9e\u5c31\u5df2\u7ecf\u5f88\u663e\u7136\u4e86\uff0c\u5bf9\u6bcf\u4e2adp\u503c\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00dp\u6743\u503c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1004.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/29 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll n , k ; ll a [ maxn ]; ll pre [ maxn ]; int val [ maxn << 2 ]; vector < ll > xpos ; int sz ; void build ( int rt , int l , int r ) { val [ rt ] = - 1000000000 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } int le , re , kvalnow ; void update ( int rt , int l , int r ) { if ( l == r ) { val [ rt ] = max ( val [ rt ], kvalnow ); return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } int query ( int rt , int l , int r ) { if ( le <= 0 || re < le ) return - 1000000000 ; if ( le <= l && r <= re ) { return val [ rt ]; } int mid = l + r >> 1 ; int res = - 1000000000 ; if ( le <= mid ) res = max ( res , query ( rt << 1 , l , mid )); if ( re > mid ) res = max ( res , query ( rt << 1 | 1 , mid + 1 , r )); return res ; } int dp [ maxn ]; inline bool check ( ll mid ) { build ( 1 , 1 , sz ); le = lower_bound ( xpos . begin (), xpos . end (), 0 ) - xpos . begin (); kvalnow = 0 ; update ( 1 , 1 , sz ); for ( int i = 1 ; i <= n ; ++ i ) { re = sz ; le = lower_bound ( xpos . begin (), xpos . end (), pre [ i ] - mid ) - xpos . begin (); int pos = lower_bound ( xpos . begin (), xpos . end (), pre [ i ]) - xpos . begin (); // if (xpos[re] != pre[i] - mid) re --; dp [ i ] = query ( 1 , 1 , sz ) + 1 ; le = pos , kvalnow = dp [ i ]; // cerr << le << \" \" << kvalnow << endl; update ( 1 , 1 , sz ); } le = 1 , re = sz ; return query ( 1 , 1 , sz ) >= k ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); int T ; // scan(T); scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { // scan(n), scan(k); scanf ( \"%lld%lld\" , & n , & k ); xpos . clear (); xpos . push_back (( ll ) - 2e14 - 100 ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%lld\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + a [ i ]; xpos . push_back ( pre [ i ]); // scan(a[i]); // scanf(\"%d\", &a[i]); } sort ( xpos . begin (), xpos . end ()); xpos . resize ( unique ( xpos . begin (), xpos . end ()) - xpos . begin ()); xpos . push_back (( ll ) 2e14 + 100 ); sz = xpos . size (); check ( 2 ); ll mx = - 1e9 - 100 ; for ( int i = 1 ; i <= k ; ++ i ) { mx = max ( mx , a [ i ]); } ll l = - 2e14 - 100 , r = mx , res = r ; while ( l <= r ) { ll mid = l + r >> 1 ; // cout << l << \" \" << r << \" \" << mid << endl; if ( check ( mid )) { res = mid ; r = mid - 1 ; } else { l = mid + 1 ; } } printf ( \"%lld \\n \" , res ); } return 0 ; } F - Fansblog Link \u6c42 q! % p q! % p \uff0c\u5176\u4e2dpq\u90fd\u662f\u7d20\u6570\u4e14q\u662fp\u7684\u524d\u4e00\u4e2a\u7d20\u6570\uff0c\u7ed9p\u6c42\u503c\u3002 \u90a3\u4e48\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba (q-1)!%q=1 (q-1)!%q=1 \uff0c\u7136\u540e\u5c31\u662f\u76f8\u5f53\u4e8e\u628a p+1~q-1 \u8fd9\u6bb5\u9006\u5143\u4e58\u56de\u53bb\u5373\u53ef\uff0c\u51fa\u4e8e\u67d0\u79cd\u795e\u5947\u7684\u6027\u8d28\uff0c 1e14 \u8303\u56f4\u5185\u7d20\u6570\u4e4b\u95f4\u8ddd\u79bb\u6ca1\u90a3\u4e48\u5927\uff0c\u7136\u540e\u5c31\u53ef\u4ee5 sqrt(n) \u7684\u5904\u7406\u6bcf\u4e2a\u6570\u662f\u4e0d\u662f\u7d20\u6570\u76f4\u5230\u679a\u4e3e\u5230\u524d\u4e00\u4e2a\u7d20\u6570\u5373\u53ef\u3002\u8fd8\u9700\u8981\u5feb\u901f\u4e58\u9632\u6b62\u7206longlong\u6709\u70b9\u6076\u5fc3\u4eba\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1000 ; const int mod = 1e9 + 7 ; inline ll multi ( ll a , ll n , ll p ) { ll re = 0 ; while ( n ) { if ( n & 1 ) re = ( re + a ) % p ; //\u505a\u52a0\u6cd5 a = ( a << 1 ) % p ; n >>= 1 ; } return re ; } ll qp ( ll a , ll n , ll m ) { a %= m ; ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = multi ( res , a , m ); a = multi ( a , a , m ); n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} bool pan ( ll x ) { for ( ll i = 2 ; i * i <= x ; ++ i ) { if ( x % i == 0 ) return false ; } return true ; } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { ll q ; scanf ( \"%lld\" , & q ); ll p = q - 1 ; while ( ! pan ( p )) p -- ; // cerr << q << endl; ll res = q - 1 ; for ( ll i = p + 1 ; i < q ; ++ i ) { res = multi ( res , qp ( i , q - 2 , q ), q ); } printf ( \"%lld \\n \" , res ); } return 0 ; } G - Find the answer Link \u7ed9\u4e00\u4e2a\u5e8f\u5217\u548c\u4e00\u4e2am\u503c\uff0c\u6c42\u6bcf\u4e2a\u70b9\u5fc5\u53d6\u7684\u60c5\u51b5\u4e0b\uff0c\u524d\u9762\u81f3\u5c11\u9700\u8981\u5220\u6389\u591a\u5c11\u4e2a\u70b9\u624d\u80fd\u8ba9\u524d\u7f00\u548c\u4e0d\u8d85\u8fc7m\u3002 \u76f4\u63a5cf\u539f\u9898\uff0c\u6570\u5b57\u7684\u8303\u56f4\u8c03\u5927\u4e86\u70b9\uff0c\u6211\u76f4\u63a5\u4e0a\u4e86\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d\u7f00\uff0c\u7136\u540e\u6811\u4e0a\u4e8c\u5206\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u4ecd\u7136\u662f\u666e\u901a\u67e5\u627e\uff0c\u6c42\u51fa\u6743\u503c\u7ebf\u6bb5\u6811\u53f3\u65b9\u9700\u8981\u51cf\u6389\u591a\u5c11\u4e2a\u70b9\u80fd\u8ba9\u524d\u7f00\u548c\u53d8\u5230m\u4ee5\u5185\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1007.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/29 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct node { int sum ; ll valt ; ll val ; } p [ maxn << 2 ]; vector < int > xpos ; int le , k ; void build ( int rt , int l , int r ) { p [ rt ]. sum = p [ rt ]. val = 0 ; if ( l == r ) { p [ rt ]. valt = xpos [ l ]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. valt = min ( p [ rt << 1 ]. valt , p [ rt << 1 | 1 ]. valt ); } void update ( int rt , int l , int r ) { if ( l == r ) { p [ rt ]. val += p [ rt ]. valt ; p [ rt ]. sum ++ ; return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = p [ rt << 1 ]. val + p [ rt << 1 | 1 ]. val ; p [ rt ]. sum = p [ rt << 1 ]. sum + p [ rt << 1 | 1 ]. sum ; } int n , m ; int x [ maxn ]; ll need , gt ; void query ( int rt , int l , int r ) { if ( p [ rt ]. valt > need ) return ; if ( p [ rt ]. val <= need ) { need -= p [ rt ]. val ; gt += p [ rt ]. sum ; return ; } if ( l == r ) { if ( need >= p [ rt ]. val ) need -= p [ rt ]. val , gt += p [ rt ]. sum ; else { gt += need / p [ rt ]. valt ; need -= need / p [ rt ]. valt * p [ rt ]. valt ; } return ; } int mid = l + r >> 1 ; query ( rt << 1 , l , mid ); query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { xpos . clear (); scanf ( \"%d%d\" , & n , & m ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & x [ i ]); xpos . push_back ( x [ i ]); } sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); int sz = xpos . size (); build ( 1 , 1 , sz ); for ( int i = 1 ; i <= n ; ++ i ) { need = m - x [ i ]; gt = 0 ; query ( 1 , 1 , sz ); printf ( \"%lld \" , i - gt - 1 ); le = lower_bound ( xpos . begin (), xpos . end (), x [ i ]) - xpos . begin (); update ( 1 , 1 , sz ); } printf ( \" \\n \" ); } return 0 ; }","title":"2019 Multi University Training Contest 3"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 3/#d-distribution-of-books","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4ece\u524d\u5f80\u540e\u8fde\u7eed\u9009m\u5757\uff0c\u6bcf\u5757\u81f3\u5c11\u4e00\u4e2a\u6570\uff0c\u4f7f\u5f97\u9009\u53d6\u5757\u7684\u548c\u6700\u5927\u503c\u6700\u5c0f\u3002 \u9996\u5148\u80af\u5b9a\u662f\u8003\u8651\u4e8c\u5206\u7684\uff0c\u76f4\u63a5\u4e8c\u5206\u7b54\u6848\u5c31\u662f\u80fd\u5426\u9009\u5230m\u4e2a\u4e0d\u5927\u4e8e\u5f53\u524d\u503c\u7684\u5757\u5373\u53ef\u3002\u7136\u540e\u8003\u8651\u600e\u4e48check\uff0c\u4e00\u4e2a\u663e\u7136\u7684 O(n^2) O(n^2) \u7684check\u662f dp[i] = max(dp[j]) + 1 (\\sum_{k=j}^i a[k] <= mid) dp[i] = max(dp[j]) + 1 (\\sum_{k=j}^i a[k] <= mid) \uff0c\u5176\u5b9e\u5c31\u5df2\u7ecf\u5f88\u663e\u7136\u4e86\uff0c\u5bf9\u6bcf\u4e2adp\u503c\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00dp\u6743\u503c\u7ebf\u6bb5\u6811\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1004.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/29 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll n , k ; ll a [ maxn ]; ll pre [ maxn ]; int val [ maxn << 2 ]; vector < ll > xpos ; int sz ; void build ( int rt , int l , int r ) { val [ rt ] = - 1000000000 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } int le , re , kvalnow ; void update ( int rt , int l , int r ) { if ( l == r ) { val [ rt ] = max ( val [ rt ], kvalnow ); return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } int query ( int rt , int l , int r ) { if ( le <= 0 || re < le ) return - 1000000000 ; if ( le <= l && r <= re ) { return val [ rt ]; } int mid = l + r >> 1 ; int res = - 1000000000 ; if ( le <= mid ) res = max ( res , query ( rt << 1 , l , mid )); if ( re > mid ) res = max ( res , query ( rt << 1 | 1 , mid + 1 , r )); return res ; } int dp [ maxn ]; inline bool check ( ll mid ) { build ( 1 , 1 , sz ); le = lower_bound ( xpos . begin (), xpos . end (), 0 ) - xpos . begin (); kvalnow = 0 ; update ( 1 , 1 , sz ); for ( int i = 1 ; i <= n ; ++ i ) { re = sz ; le = lower_bound ( xpos . begin (), xpos . end (), pre [ i ] - mid ) - xpos . begin (); int pos = lower_bound ( xpos . begin (), xpos . end (), pre [ i ]) - xpos . begin (); // if (xpos[re] != pre[i] - mid) re --; dp [ i ] = query ( 1 , 1 , sz ) + 1 ; le = pos , kvalnow = dp [ i ]; // cerr << le << \" \" << kvalnow << endl; update ( 1 , 1 , sz ); } le = 1 , re = sz ; return query ( 1 , 1 , sz ) >= k ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); int T ; // scan(T); scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { // scan(n), scan(k); scanf ( \"%lld%lld\" , & n , & k ); xpos . clear (); xpos . push_back (( ll ) - 2e14 - 100 ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%lld\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + a [ i ]; xpos . push_back ( pre [ i ]); // scan(a[i]); // scanf(\"%d\", &a[i]); } sort ( xpos . begin (), xpos . end ()); xpos . resize ( unique ( xpos . begin (), xpos . end ()) - xpos . begin ()); xpos . push_back (( ll ) 2e14 + 100 ); sz = xpos . size (); check ( 2 ); ll mx = - 1e9 - 100 ; for ( int i = 1 ; i <= k ; ++ i ) { mx = max ( mx , a [ i ]); } ll l = - 2e14 - 100 , r = mx , res = r ; while ( l <= r ) { ll mid = l + r >> 1 ; // cout << l << \" \" << r << \" \" << mid << endl; if ( check ( mid )) { res = mid ; r = mid - 1 ; } else { l = mid + 1 ; } } printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"D - Distribution of books"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 3/#f-fansblog","text":"\u6c42 q! % p q! % p \uff0c\u5176\u4e2dpq\u90fd\u662f\u7d20\u6570\u4e14q\u662fp\u7684\u524d\u4e00\u4e2a\u7d20\u6570\uff0c\u7ed9p\u6c42\u503c\u3002 \u90a3\u4e48\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba (q-1)!%q=1 (q-1)!%q=1 \uff0c\u7136\u540e\u5c31\u662f\u76f8\u5f53\u4e8e\u628a p+1~q-1 \u8fd9\u6bb5\u9006\u5143\u4e58\u56de\u53bb\u5373\u53ef\uff0c\u51fa\u4e8e\u67d0\u79cd\u795e\u5947\u7684\u6027\u8d28\uff0c 1e14 \u8303\u56f4\u5185\u7d20\u6570\u4e4b\u95f4\u8ddd\u79bb\u6ca1\u90a3\u4e48\u5927\uff0c\u7136\u540e\u5c31\u53ef\u4ee5 sqrt(n) \u7684\u5904\u7406\u6bcf\u4e2a\u6570\u662f\u4e0d\u662f\u7d20\u6570\u76f4\u5230\u679a\u4e3e\u5230\u524d\u4e00\u4e2a\u7d20\u6570\u5373\u53ef\u3002\u8fd8\u9700\u8981\u5feb\u901f\u4e58\u9632\u6b62\u7206longlong\u6709\u70b9\u6076\u5fc3\u4eba\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1000 ; const int mod = 1e9 + 7 ; inline ll multi ( ll a , ll n , ll p ) { ll re = 0 ; while ( n ) { if ( n & 1 ) re = ( re + a ) % p ; //\u505a\u52a0\u6cd5 a = ( a << 1 ) % p ; n >>= 1 ; } return re ; } ll qp ( ll a , ll n , ll m ) { a %= m ; ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = multi ( res , a , m ); a = multi ( a , a , m ); n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} bool pan ( ll x ) { for ( ll i = 2 ; i * i <= x ; ++ i ) { if ( x % i == 0 ) return false ; } return true ; } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { ll q ; scanf ( \"%lld\" , & q ); ll p = q - 1 ; while ( ! pan ( p )) p -- ; // cerr << q << endl; ll res = q - 1 ; for ( ll i = p + 1 ; i < q ; ++ i ) { res = multi ( res , qp ( i , q - 2 , q ), q ); } printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"F - Fansblog"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 3/#g-find-the-answer","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217\u548c\u4e00\u4e2am\u503c\uff0c\u6c42\u6bcf\u4e2a\u70b9\u5fc5\u53d6\u7684\u60c5\u51b5\u4e0b\uff0c\u524d\u9762\u81f3\u5c11\u9700\u8981\u5220\u6389\u591a\u5c11\u4e2a\u70b9\u624d\u80fd\u8ba9\u524d\u7f00\u548c\u4e0d\u8d85\u8fc7m\u3002 \u76f4\u63a5cf\u539f\u9898\uff0c\u6570\u5b57\u7684\u8303\u56f4\u8c03\u5927\u4e86\u70b9\uff0c\u6211\u76f4\u63a5\u4e0a\u4e86\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d\u7f00\uff0c\u7136\u540e\u6811\u4e0a\u4e8c\u5206\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u4ecd\u7136\u662f\u666e\u901a\u67e5\u627e\uff0c\u6c42\u51fa\u6743\u503c\u7ebf\u6bb5\u6811\u53f3\u65b9\u9700\u8981\u51cf\u6389\u591a\u5c11\u4e2a\u70b9\u80fd\u8ba9\u524d\u7f00\u548c\u53d8\u5230m\u4ee5\u5185\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1a1007.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/29 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct node { int sum ; ll valt ; ll val ; } p [ maxn << 2 ]; vector < int > xpos ; int le , k ; void build ( int rt , int l , int r ) { p [ rt ]. sum = p [ rt ]. val = 0 ; if ( l == r ) { p [ rt ]. valt = xpos [ l ]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. valt = min ( p [ rt << 1 ]. valt , p [ rt << 1 | 1 ]. valt ); } void update ( int rt , int l , int r ) { if ( l == r ) { p [ rt ]. val += p [ rt ]. valt ; p [ rt ]. sum ++ ; return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = p [ rt << 1 ]. val + p [ rt << 1 | 1 ]. val ; p [ rt ]. sum = p [ rt << 1 ]. sum + p [ rt << 1 | 1 ]. sum ; } int n , m ; int x [ maxn ]; ll need , gt ; void query ( int rt , int l , int r ) { if ( p [ rt ]. valt > need ) return ; if ( p [ rt ]. val <= need ) { need -= p [ rt ]. val ; gt += p [ rt ]. sum ; return ; } if ( l == r ) { if ( need >= p [ rt ]. val ) need -= p [ rt ]. val , gt += p [ rt ]. sum ; else { gt += need / p [ rt ]. valt ; need -= need / p [ rt ]. valt * p [ rt ]. valt ; } return ; } int mid = l + r >> 1 ; query ( rt << 1 , l , mid ); query ( rt << 1 | 1 , mid + 1 , r ); } int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { xpos . clear (); scanf ( \"%d%d\" , & n , & m ); xpos . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & x [ i ]); xpos . push_back ( x [ i ]); } sort ( xpos . begin (), xpos . end ()); xpos . erase ( unique ( xpos . begin (), xpos . end ()), xpos . end ()); int sz = xpos . size (); build ( 1 , 1 , sz ); for ( int i = 1 ; i <= n ; ++ i ) { need = m - x [ i ]; gt = 0 ; query ( 1 , 1 , sz ); printf ( \"%lld \" , i - gt - 1 ); le = lower_bound ( xpos . begin (), xpos . end (), x [ i ]) - xpos . begin (); update ( 1 , 1 , sz ); } printf ( \" \\n \" ); } return 0 ; }","title":"G - Find the answer"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/2019 China Collegiate Programming Contest Qinhuangdao Onsite/","text":"Name Date Solved A B C D E F G H I J K L 2019 China Collegiate Programming Contest Qinhuangdao Onsite 2019/9/28 7/12 O . . O O O . . O O O . A\u3001Angle Beats Link D\u3001Decimal Link \u9898\u610f\uff1a\u6c42 1/x \u662f\u5426\u4e3a\u6709\u9650\u5faa\u73af\u5c0f\u6570\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5982\u679c x \u662f 10^n \u7684\u56e0\u5b50\u5b83\u624d\u662f\u6709\u9650\u5faa\u73af\u5c0f\u6570\uff0c\u5373 x \u53ea\u67092\u548c5\u4e24\u79cd\u56e0\u5b50 E\u3001Escape Link \u9898\u610f\uff1a\u6709a\u4e2a\u673a\u5668\u4eba\u4ece\u7f51\u683c\u56fe\u6700\u4e0a\u65b9\u51fa\u53d1\uff0c\u6709b\u4e2a\u51fa\u53e3\u5728\u7f51\u683c\u56fe\u6700\u4e0b\u65b9\uff0c\u673a\u5668\u4eba\u53ea\u80fd\u76f4\u8d70\u6216\u901a\u8fc7\u88c5\u7f6e\u8f6c\u5f2f\uff0c\u4e00\u4e2a\u65b9\u683c\u53ea\u80fd\u653e\u4e00\u4e2a\u88c5\u7f6e\uff1b\u673a\u5668\u4eba\u65e0\u6cd5\u4ece\u88c5\u7f6e\u4ee5\u5916\u7684\u65b9\u5411\u8fdb\u5165\u88c5\u7f6e\u6240\u5728\u7684\u65b9\u683c\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u969c\u788d\u7269\uff0c\u95ee\u6240\u6709\u673a\u5668\u4eba\u662f\u5426\u90fd\u80fd\u5230\u8fbe\u4e0b\u65b9\u51fa\u53e3\u3002 \u9898\u89e3\uff1a\u7a7a\u65b9\u683c\u6700\u591a\u4ece\u6a2a\u5411/\u7eb5\u5411\u5404\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6709\u969c\u788d\u7269\u7684\u65b9\u683c\u6a2a\u5411+\u7eb5\u5411\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\uff1b\u62c6\u70b9\u5efa\u56fe\uff0c\u4e00\u5f20\u56fe\u4e3a\u7eb5\u5411\u8def\u5f84\uff0c\u53e6\u4e00\u5f20\u56fe\u4e3a\u6a2a\u5411\u8def\u5f84\uff0c\u7eb5\u5411\u70b9\u4e0e\u6a2a\u5411\u70b9\u8fde\u8fb9\uff0c\u6240\u6709\u6d41\u91cf\u5747\u4e3a1\uff0c\u8dd1\u7f51\u7edc\u6d41\u5224\u65admax_flow\u662f\u5426\u7b49\u4e8ea\u3002 F\u3001Forest Program Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4ed9\u4eba\u638c\u7fa4\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u5220\u8fb9\u65b9\u6848\u53ef\u4ee5\u5c06\u5176\u53d8\u6210\u68ee\u6797 \u9898\u89e3\uff1a\u663e\u7136\u5bf9\u6bcf\u4e2a\u73af\uff0c\u81f3\u5c11\u8981\u5220\u6389\u4e00\u6761\u8fb9\u5373\u53ef\uff0c\u5176\u4ed6\u7684\u8fb9\u4efb\u610f\u5220\u3002\u6240\u4ee5\u5bf9\u6bcf\u68f5\u4ed9\u4eba\u638cdfs\u6c42\u51fa\u6bcf\u4e2a\u73af\u7684\u5927\u5c0fx\uff0c\u6c42\u51fa 2^x-1 \u7684\u79ef\uff0c\u7136\u540e\u4e58\u4e0a\u4e0d\u5728\u73af\u4e0a\u7684\u8fb9\u7684\u6761\u6570p, 2^p \uff0c\u4e24\u8005\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002 I\u3001Invoker Link \u9898\u610f\uff1a\u7ed9\u51fa\u5361\u5c14\u768410\u79cd\u6280\u80fd\uff0c\u7ec4\u6210\u6280\u80fd\u7684\u7ec4\u5408\u53ef\u4ee5\u662f\u65e0\u5e8f\u7684\u4f46\u662f\u91ca\u653e\u672c\u8eab\u662f\u6709\u5e8f\u7684\uff0c\u6c42\u51fa\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u6309\u952e\uff08\u542bR\u952e\uff09\u3002 \u9898\u89e3\uff1a\u4e0d\u542bR\u952e\u8fdb\u884c\u4e09\u8fdb\u5236\u7f16\u7801\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\u76f4\u63a5\u66b4\u529b\u641c\u51fa27\u79cd\u7f16\u7801\u4e92\u76f8\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6bd4\u5982 QQQ \u548c QEE \uff0c\u4ed6\u4eec\u6700\u957f\u7684\u540e\u7f00-\u524d\u7f00\u5339\u914d\u4e3a1\uff08\u5373 Q \uff09\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5b9e\u5728\u592a\u5c0f\u76f4\u63a5\u5e73\u65b9\u5904\u7406\u5373\u53ef\uff0c\u5f53\u7136exkmp\u4e13\u95e8\u89e3\u8fd9\u4e2a\u7684\u3002\u7136\u540edp\uff0c dp[i][j] \u8868\u793a\u5230\u7b2ci\u4e2a\u6280\u80fd\uff0c\u73b0\u5728\u961f\u5217\u4e2d\u7684\u72b6\u6001\u4e3aj\u7684\u6700\u5c11\u6b65\u6570\u3002 dp[i][j] = min(dp[i - 1][k] + mp[j][k]) \u5373\u53ef\uff0c\u4e0d\u5408\u6cd5\u7684\u76f4\u63a5\u53bb\u6389\uff0c\u8fd9\u91cc\u7531\u4e8e\u6570\u636e\u8fc7\u5c0f\u76f4\u63a5\u66b4\u529bcmp\u5373\u53ef\u3002\u7136\u540e\u4ee3\u7801\u5199\u4e86\u633a\u957f\u7684\u3002 J\u3001MUV LUV EXTRA Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u5c0f\u6570\u7684\u524dn\u4f4d\u5e76\u731c\u6d4b\u5faa\u73af\u8282\uff0c\u6c42 a*\u5f53\u524d\u5df2\u7ecf\u51fa\u73b0\u7684\u5faa\u73af\u603b\u957f\u5ea6-b*\u5faa\u73af\u8282\u957f\u5ea6 \u7684\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5bf9\u4e8e\u540c\u4e00\u540e\u7f00\u663e\u7136\u53d6\u5176\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u7ffb\u8f6c\u4e32\u8dd1KMP\uff0c\u904d\u5386\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u6c42\u6700\u5927\u503c\u5373\u53ef\uff08res\u521d\u503c\u5e94\u8be5\u8bbe\u8d1f\u6570\u800c\u4e0d\u662f0\u56e0\u4e3ab\u53ef\u80fd\u6bd4a\u5927\uff0cwa\u4e86\u4e00\u53d1\uff09\u3002 K\u3001MUV LUV UNLIMITED Link \u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u6709\u6839\u6811\uff0c\u4e24\u4e2a\u4eba\u535a\u5f08\uff0ca\u5148\u624b\uff0c\u6bcf\u6b21\u6bcf\u4e2a\u4eba\u5fc5\u987b\u81f3\u5c11\u5220\u6389\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u4e5f\u53ea\u80fd\u5220\u6389\u53f6\u5b50\u8282\u70b9\uff0c\u6c42\u8c01\u6700\u5148\u628a\u6811\u5220\u7a7a\u3002 \u9898\u89e3\uff1a\u601d\u8003\u535a\u5f08\u4e86\u5f88\u4e45\u53d1\u73b0\u7684\u4e00\u4e2a\u7ed3\u8bba\u662f\uff1a\u5982\u679c\u662f\u591a\u6761\u94fe\u7ec4\u6210\u7684\u6811\uff08\u5373\u53ea\u6709\u6839\u8282\u70b9\u6709\u51fa\u5ea6\u5927\u4e8e1\uff09\u65f6\uff0c\u53ea\u6709 - 1\u3001\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u94fe\u4e3a\u5947\u6570\u957f\u5ea6 - 2\u3001\u5927\u4e8e1\u6761\u94fe\u4e14\u6240\u6709\u94fe\u4e3a\u5947\u6570\u957f\u5ea6 1 \u662f\u540e\u624b\u5fc5\u80dc\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53d1\u73b0\u5176\u4ed6\u60c5\u51b5\u5148\u624b\u53ef\u4ee5\u5c06\u72b6\u6001\u8f6c\u79fb\u4e3a\u5168\u5947\u6570\u7684\u60c5\u51b5\uff0c\u7136\u540e\u540e\u624b\u5c31\u6ca1\u4e86\uff0c\u56e0\u4e3a\u6700\u540e\u53ea\u5269\u4e00\u4e2a\uff08\u957f\u5ea6\u4e3a0\u5076\u6570\uff09\u7684\u65f6\u5019\u662f\u5148\u624b\u8d62\u3002 \u7136\u540e\u8003\u8651\u4e00\u4e0b\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7236\u8282\u70b9\u6709\u591a\u4f591\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u5148\u624b\u5fc5\u80dc\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a\u8ba1\u6ee1\u8db3\u5148\u624b\u5fc5\u80dc\u7684\u53f6\u5b50\u8282\u70b9\u4e3ax\uff0c\u5176\u4ed6\u6240\u6709\u53f6\u5b50\u8282\u70b9\u96c6\u5408\u4e3aS - 1\u3001\u5982\u679c\u5220\u6389x\u540e\u4e3a\u5148\u624b\u8d25\u72b6\u6001\uff0c\u90a3\u4e48\u5f53\u524d\u5220\u6389x\u5b83\u5c31\u662f\u5fc5\u80dc\u6001 - 2\u3001\u5982\u679c\u5220\u6389x\u540e\u4e3a\u5148\u624b\u80dc\u72b6\u6001\uff0c\u90a3\u4e48\u9996\u5148S\u5728\u8fd9\u79cd\u72b6\u6001\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u540e\u624b\u5fc5\u7136\u4f1a\u9009\u62e9\u4e00\u4e2a S\u2018 \\in S \u4f7f\u5f97\u4e0b\u4e2a\u72b6\u6001\u4e3a\u5148\u624b\u8d25\u72b6\u6001\uff0c\u7531\u4e8eS\u2019\u662fS\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u5148\u624b\u5982\u679c\u53d6 S' \\and x \u5fc5\u7136\u8fdb\u5165\u5148\u624b\u8d25\u72b6\u6001\uff0c\u4e3a\u5148\u624b\u5fc5\u80dc\u6001\u3002 \u4e24\u8005\u7ed3\u5408\u5373\u662f\uff1a\u5982\u679c\u63091\u7f29\u70b9\u5230\u67d0\u4e2a\u5ea6\u6570\u5927\u4e8e1\u7684\u70b9\uff0c\u5b83\u5b58\u5728\u5148\u624b\u5fc5\u80dc\u6001\u5373\u662f\u5148\u624b\u5fc5\u80dc\uff0c\u5426\u5219\u540e\u624b\u80dc\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5ea6\u6570\u5927\u4e8e1\u7684\u70b9\u5373\u662f\u4e00\u6761\u94fe\u6309\u5947\u5076\u8f93\u51fa\u5373\u53ef\u3002 \u7136\u540e\u5c31\u76f4\u63a5\u6309\u4e24\u79cd\u60c5\u51b5\u8ba1\u7b97\u5373\u53ef\uff0c\u5efa\u6811\u4f1a\u7206\u5185\u5b58\uff0c\u76f4\u63a5\u6309topsort\u5e8f\u6a21\u62df\u5373\u53ef\u3002","title":"2019 China Collegiate Programming Contest Qinhuangdao Onsite"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/2019 China Collegiate Programming Contest Qinhuangdao Onsite/#aangle-beats","text":"","title":"A\u3001Angle Beats"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/2019 China Collegiate Programming Contest Qinhuangdao Onsite/#ddecimal","text":"\u9898\u610f\uff1a\u6c42 1/x \u662f\u5426\u4e3a\u6709\u9650\u5faa\u73af\u5c0f\u6570\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5982\u679c x \u662f 10^n \u7684\u56e0\u5b50\u5b83\u624d\u662f\u6709\u9650\u5faa\u73af\u5c0f\u6570\uff0c\u5373 x \u53ea\u67092\u548c5\u4e24\u79cd\u56e0\u5b50","title":"D\u3001Decimal"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/2019 China Collegiate Programming Contest Qinhuangdao Onsite/#eescape","text":"\u9898\u610f\uff1a\u6709a\u4e2a\u673a\u5668\u4eba\u4ece\u7f51\u683c\u56fe\u6700\u4e0a\u65b9\u51fa\u53d1\uff0c\u6709b\u4e2a\u51fa\u53e3\u5728\u7f51\u683c\u56fe\u6700\u4e0b\u65b9\uff0c\u673a\u5668\u4eba\u53ea\u80fd\u76f4\u8d70\u6216\u901a\u8fc7\u88c5\u7f6e\u8f6c\u5f2f\uff0c\u4e00\u4e2a\u65b9\u683c\u53ea\u80fd\u653e\u4e00\u4e2a\u88c5\u7f6e\uff1b\u673a\u5668\u4eba\u65e0\u6cd5\u4ece\u88c5\u7f6e\u4ee5\u5916\u7684\u65b9\u5411\u8fdb\u5165\u88c5\u7f6e\u6240\u5728\u7684\u65b9\u683c\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u969c\u788d\u7269\uff0c\u95ee\u6240\u6709\u673a\u5668\u4eba\u662f\u5426\u90fd\u80fd\u5230\u8fbe\u4e0b\u65b9\u51fa\u53e3\u3002 \u9898\u89e3\uff1a\u7a7a\u65b9\u683c\u6700\u591a\u4ece\u6a2a\u5411/\u7eb5\u5411\u5404\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6709\u969c\u788d\u7269\u7684\u65b9\u683c\u6a2a\u5411+\u7eb5\u5411\u6700\u591a\u7ecf\u8fc7\u4e00\u6b21\uff1b\u62c6\u70b9\u5efa\u56fe\uff0c\u4e00\u5f20\u56fe\u4e3a\u7eb5\u5411\u8def\u5f84\uff0c\u53e6\u4e00\u5f20\u56fe\u4e3a\u6a2a\u5411\u8def\u5f84\uff0c\u7eb5\u5411\u70b9\u4e0e\u6a2a\u5411\u70b9\u8fde\u8fb9\uff0c\u6240\u6709\u6d41\u91cf\u5747\u4e3a1\uff0c\u8dd1\u7f51\u7edc\u6d41\u5224\u65admax_flow\u662f\u5426\u7b49\u4e8ea\u3002","title":"E\u3001Escape"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/2019 China Collegiate Programming Contest Qinhuangdao Onsite/#fforest-program","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4ed9\u4eba\u638c\u7fa4\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u5220\u8fb9\u65b9\u6848\u53ef\u4ee5\u5c06\u5176\u53d8\u6210\u68ee\u6797 \u9898\u89e3\uff1a\u663e\u7136\u5bf9\u6bcf\u4e2a\u73af\uff0c\u81f3\u5c11\u8981\u5220\u6389\u4e00\u6761\u8fb9\u5373\u53ef\uff0c\u5176\u4ed6\u7684\u8fb9\u4efb\u610f\u5220\u3002\u6240\u4ee5\u5bf9\u6bcf\u68f5\u4ed9\u4eba\u638cdfs\u6c42\u51fa\u6bcf\u4e2a\u73af\u7684\u5927\u5c0fx\uff0c\u6c42\u51fa 2^x-1 \u7684\u79ef\uff0c\u7136\u540e\u4e58\u4e0a\u4e0d\u5728\u73af\u4e0a\u7684\u8fb9\u7684\u6761\u6570p, 2^p \uff0c\u4e24\u8005\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002","title":"F\u3001Forest Program"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/2019 China Collegiate Programming Contest Qinhuangdao Onsite/#iinvoker","text":"\u9898\u610f\uff1a\u7ed9\u51fa\u5361\u5c14\u768410\u79cd\u6280\u80fd\uff0c\u7ec4\u6210\u6280\u80fd\u7684\u7ec4\u5408\u53ef\u4ee5\u662f\u65e0\u5e8f\u7684\u4f46\u662f\u91ca\u653e\u672c\u8eab\u662f\u6709\u5e8f\u7684\uff0c\u6c42\u51fa\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u6309\u952e\uff08\u542bR\u952e\uff09\u3002 \u9898\u89e3\uff1a\u4e0d\u542bR\u952e\u8fdb\u884c\u4e09\u8fdb\u5236\u7f16\u7801\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\u76f4\u63a5\u66b4\u529b\u641c\u51fa27\u79cd\u7f16\u7801\u4e92\u76f8\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6bd4\u5982 QQQ \u548c QEE \uff0c\u4ed6\u4eec\u6700\u957f\u7684\u540e\u7f00-\u524d\u7f00\u5339\u914d\u4e3a1\uff08\u5373 Q \uff09\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5b9e\u5728\u592a\u5c0f\u76f4\u63a5\u5e73\u65b9\u5904\u7406\u5373\u53ef\uff0c\u5f53\u7136exkmp\u4e13\u95e8\u89e3\u8fd9\u4e2a\u7684\u3002\u7136\u540edp\uff0c dp[i][j] \u8868\u793a\u5230\u7b2ci\u4e2a\u6280\u80fd\uff0c\u73b0\u5728\u961f\u5217\u4e2d\u7684\u72b6\u6001\u4e3aj\u7684\u6700\u5c11\u6b65\u6570\u3002 dp[i][j] = min(dp[i - 1][k] + mp[j][k]) \u5373\u53ef\uff0c\u4e0d\u5408\u6cd5\u7684\u76f4\u63a5\u53bb\u6389\uff0c\u8fd9\u91cc\u7531\u4e8e\u6570\u636e\u8fc7\u5c0f\u76f4\u63a5\u66b4\u529bcmp\u5373\u53ef\u3002\u7136\u540e\u4ee3\u7801\u5199\u4e86\u633a\u957f\u7684\u3002","title":"I\u3001Invoker"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/2019 China Collegiate Programming Contest Qinhuangdao Onsite/#jmuv-luv-extra","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u5c0f\u6570\u7684\u524dn\u4f4d\u5e76\u731c\u6d4b\u5faa\u73af\u8282\uff0c\u6c42 a*\u5f53\u524d\u5df2\u7ecf\u51fa\u73b0\u7684\u5faa\u73af\u603b\u957f\u5ea6-b*\u5faa\u73af\u8282\u957f\u5ea6 \u7684\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5bf9\u4e8e\u540c\u4e00\u540e\u7f00\u663e\u7136\u53d6\u5176\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u7ffb\u8f6c\u4e32\u8dd1KMP\uff0c\u904d\u5386\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u6c42\u6700\u5927\u503c\u5373\u53ef\uff08res\u521d\u503c\u5e94\u8be5\u8bbe\u8d1f\u6570\u800c\u4e0d\u662f0\u56e0\u4e3ab\u53ef\u80fd\u6bd4a\u5927\uff0cwa\u4e86\u4e00\u53d1\uff09\u3002","title":"J\u3001MUV LUV EXTRA"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/2019 China Collegiate Programming Contest Qinhuangdao Onsite/#kmuv-luv-unlimited","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u6709\u6839\u6811\uff0c\u4e24\u4e2a\u4eba\u535a\u5f08\uff0ca\u5148\u624b\uff0c\u6bcf\u6b21\u6bcf\u4e2a\u4eba\u5fc5\u987b\u81f3\u5c11\u5220\u6389\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u4e5f\u53ea\u80fd\u5220\u6389\u53f6\u5b50\u8282\u70b9\uff0c\u6c42\u8c01\u6700\u5148\u628a\u6811\u5220\u7a7a\u3002 \u9898\u89e3\uff1a\u601d\u8003\u535a\u5f08\u4e86\u5f88\u4e45\u53d1\u73b0\u7684\u4e00\u4e2a\u7ed3\u8bba\u662f\uff1a\u5982\u679c\u662f\u591a\u6761\u94fe\u7ec4\u6210\u7684\u6811\uff08\u5373\u53ea\u6709\u6839\u8282\u70b9\u6709\u51fa\u5ea6\u5927\u4e8e1\uff09\u65f6\uff0c\u53ea\u6709 - 1\u3001\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u94fe\u4e3a\u5947\u6570\u957f\u5ea6 - 2\u3001\u5927\u4e8e1\u6761\u94fe\u4e14\u6240\u6709\u94fe\u4e3a\u5947\u6570\u957f\u5ea6 1 \u662f\u540e\u624b\u5fc5\u80dc\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53d1\u73b0\u5176\u4ed6\u60c5\u51b5\u5148\u624b\u53ef\u4ee5\u5c06\u72b6\u6001\u8f6c\u79fb\u4e3a\u5168\u5947\u6570\u7684\u60c5\u51b5\uff0c\u7136\u540e\u540e\u624b\u5c31\u6ca1\u4e86\uff0c\u56e0\u4e3a\u6700\u540e\u53ea\u5269\u4e00\u4e2a\uff08\u957f\u5ea6\u4e3a0\u5076\u6570\uff09\u7684\u65f6\u5019\u662f\u5148\u624b\u8d62\u3002 \u7136\u540e\u8003\u8651\u4e00\u4e0b\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7236\u8282\u70b9\u6709\u591a\u4f591\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u5148\u624b\u5fc5\u80dc\u3002 \u8bc1\u660e\u5982\u4e0b\uff1a\u8ba1\u6ee1\u8db3\u5148\u624b\u5fc5\u80dc\u7684\u53f6\u5b50\u8282\u70b9\u4e3ax\uff0c\u5176\u4ed6\u6240\u6709\u53f6\u5b50\u8282\u70b9\u96c6\u5408\u4e3aS - 1\u3001\u5982\u679c\u5220\u6389x\u540e\u4e3a\u5148\u624b\u8d25\u72b6\u6001\uff0c\u90a3\u4e48\u5f53\u524d\u5220\u6389x\u5b83\u5c31\u662f\u5fc5\u80dc\u6001 - 2\u3001\u5982\u679c\u5220\u6389x\u540e\u4e3a\u5148\u624b\u80dc\u72b6\u6001\uff0c\u90a3\u4e48\u9996\u5148S\u5728\u8fd9\u79cd\u72b6\u6001\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u6240\u4ee5\u540e\u624b\u5fc5\u7136\u4f1a\u9009\u62e9\u4e00\u4e2a S\u2018 \\in S \u4f7f\u5f97\u4e0b\u4e2a\u72b6\u6001\u4e3a\u5148\u624b\u8d25\u72b6\u6001\uff0c\u7531\u4e8eS\u2019\u662fS\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u5148\u624b\u5982\u679c\u53d6 S' \\and x \u5fc5\u7136\u8fdb\u5165\u5148\u624b\u8d25\u72b6\u6001\uff0c\u4e3a\u5148\u624b\u5fc5\u80dc\u6001\u3002 \u4e24\u8005\u7ed3\u5408\u5373\u662f\uff1a\u5982\u679c\u63091\u7f29\u70b9\u5230\u67d0\u4e2a\u5ea6\u6570\u5927\u4e8e1\u7684\u70b9\uff0c\u5b83\u5b58\u5728\u5148\u624b\u5fc5\u80dc\u6001\u5373\u662f\u5148\u624b\u5fc5\u80dc\uff0c\u5426\u5219\u540e\u624b\u80dc\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5ea6\u6570\u5927\u4e8e1\u7684\u70b9\u5373\u662f\u4e00\u6761\u94fe\u6309\u5947\u5076\u8f93\u51fa\u5373\u53ef\u3002 \u7136\u540e\u5c31\u76f4\u63a5\u6309\u4e24\u79cd\u60c5\u51b5\u8ba1\u7b97\u5373\u53ef\uff0c\u5efa\u6811\u4f1a\u7206\u5185\u5b58\uff0c\u76f4\u63a5\u6309topsort\u5e8f\u6a21\u62df\u5373\u53ef\u3002","title":"K\u3001MUV LUV UNLIMITED"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/The 2019 China Collegiate Programming Contest Harbin Site/","text":"Name Date Solved A B C D E F G H I J K L The 2019 China Collegiate Programming Contest Harbin Site 2019/11/2 7/12 O . . . O O . . O O O \u00d8 A. Artful Paintings Link \u7ed9\u4e00\u52171-n\u7684\u5757\u67d3\u8272\uff0c\u5e76\u7ed9\u51fa\u4e00\u7cfb\u5217\u9650\u5236\u6761\u4ef6(l, r, k)\uff0c \u7b2c\u4e00\u7c7b\u9650\u5236\u6761\u4ef6\u4e3al-r\u4e4b\u95f4\u7684\u67d3\u8272\u6570\u91cf\u4e0d\u5c0f\u4e8ek\uff0c\u7b2c\u4e8c\u7c7b\u4e3al-r\u4e4b\u5916\u7684\u5757\u67d3\u8272\u6570\u91cf\u4e0d\u5c0f\u4e8ek\uff0c\u6c42\u6700\u5c0f\u7684\u603b\u67d3\u8272\u6570\u3002 \u4ee4 f_i f_i \u8868\u793a\u524d i i \u4f4d\u88ab\u67d3\u8272\u7684\u6570\u91cf\uff0c\u5047\u8bbe\u603b\u67d3\u8272\u6570\u4e3a x x \u8003\u8651\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709\u5982\u4e0b\u5efa\u56fe\uff1a f_i-f_{i-1}\u22641 f_i-f_{i-1}\u22641 f_{i-1}-f_i\u22640 f_{i-1}-f_i\u22640 \u5bf9\u7b2c\u4e00\u7c7b\u9650\u5236\uff0c\u6709 f_{l-1}-f_r\u2264-k f_{l-1}-f_r\u2264-k \u5bf9\u7b2c\u4e8c\u7c7b\u9650\u5236\uff0c\u6709 f_r-f_{l-1}\u2264x-k f_r-f_{l-1}\u2264x-k f_n-f_0\u2264x f_n-f_0\u2264x f_0-f_n\u2264-x f_0-f_n\u2264-x \u4e8c\u5206x\u5224\u5b9a\u7b54\u6848\uff0c\u5f53\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e0d\u5b58\u5728\u8d1f\u73af\u4e14dis[n]=x\u65f6\u8868\u793a\u5f53\u524d\u4e3a\u4e00\u7ec4\u5408\u6cd5\u89e3\u3002 E. Exchanging Gifts Link F. Fixing Banners Link \u5224\u65ad\u7ed9\u51fa\u76846\u4e2a\u5355\u8bcd\u80fd\u5426\u5404\u53d6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5176\u7ec4\u6210Harbin. \u679a\u4e3e\u6392\u5217\u5373\u53ef\u3002 I. Interesting Permutation Link \u5bf9\u4e8e\u67d0\u4e2a\u6392\u5217 P P \uff0c\u5e8f\u5217 h_i h_i \u8868\u793a\u6392\u5217P\u4e2d\u7b2c1-i\u4e2a\u6570\u7684\u6781\u5dee\u3002\u73b0\u5728\u7ed9\u4f60\u5e8f\u5217h\uff0c\u6c42\u80fd\u7ec4\u6210h\u7684\u6392\u5217\u4e2a\u6570\u3002 \u9996\u5148\u6392\u9664\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff08 h_0!=0, h_n!=n-2, h_i < i - 1, h_i\uff1ch_{i-1} h_0!=0, h_n!=n-2, h_i < i - 1, h_i\uff1ch_{i-1} \uff09\uff0c\u7edf\u8ba1\u6570\u5217h\u53d8\u5316\u4e86\u51e0\u6b21\uff0c\u8bb0\u4e3ax\uff0c\u7b54\u6848\u7684\u603b\u503c\u5373\u4e58\u4e0a 2^x 2^x \uff1b\u8bb0\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u957f\u5ea6\u4e3alen\uff0c\u5f00\u59cb\u7684\u5b57\u7b26\u4f4d\u7f6e\u4e3ay\uff0c\u90a3\u4e48\u8fd9\u6bb5\u8fde\u7eed\u5e8f\u5217\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a A_{len}^{p[y] - y + 1} A_{len}^{p[y] - y + 1} \u3002\u5bf9\u4e8e\u6bcf\u6bb5\u8fde\u7eed\u533a\u95f4\u6c42\u51fa\u8fd9\u4e2a\u503c\uff0c\u76f8\u4e58\u540e\u518d\u4e58\u4e0a 2^x 2^x \u5373\u4e3a\u7b54\u6848\u3002 J. Justifying the Conjecture Link \u7b7e\u5230 H. Keeping Rabbits Link L. LRU Algorithm Link \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2aLRU\u8bbf\u95ee\u5e8f\u5217\u3002\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u5bc4\u5b58\u5668\u5927\u5c0f\u548c\u4e00\u6bb5\u67e5\u8be2\u5e8f\u5217\uff0c\u8be2\u95ee\u7ed9\u5b9a\u7684LRU\u8bbf\u95ee\u5e8f\u5217\u5728\u8fd9\u4e2a\u5927\u5c0f\u7684\u5bc4\u5b58\u5668\u4e2d\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u662f\u5426\u4f1a\u51fa\u73b0\u8fd9\u4e00\u67e5\u8be2\u5e8f\u5217\u3002 \u5c06\u6240\u6709\u67e5\u8be2\u5e8f\u5217\u63d2\u5165\u5b57\u5178\u6811\uff0c\u6a21\u62dfLRU\u8bbf\u95ee\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540e\u5728\u5b57\u5178\u6811\u4e0a\u67e5\u8be2\u5e76\u6807\u8bb0\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9\uff0c\u8f93\u51fa\u7b54\u6848\u65f6\u53ea\u8981\u67e5\u8be2\u67d0\u4e2a\u67e5\u8be2\u5e8f\u5217\u7684\u5c3e\u90e8\u8282\u70b9\u662f\u5426\u88ab\u6807\u8bb0\u5373\u53ef\uff08\u5904\u7406\u4e00\u4e0b\u540e\u7f00\u5747\u4e3a0\u7684\u67e5\u8be2\uff09\u3002","title":"The 2019 China Collegiate Programming Contest Harbin Site"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/The 2019 China Collegiate Programming Contest Harbin Site/#a-artful-paintings","text":"\u7ed9\u4e00\u52171-n\u7684\u5757\u67d3\u8272\uff0c\u5e76\u7ed9\u51fa\u4e00\u7cfb\u5217\u9650\u5236\u6761\u4ef6(l, r, k)\uff0c \u7b2c\u4e00\u7c7b\u9650\u5236\u6761\u4ef6\u4e3al-r\u4e4b\u95f4\u7684\u67d3\u8272\u6570\u91cf\u4e0d\u5c0f\u4e8ek\uff0c\u7b2c\u4e8c\u7c7b\u4e3al-r\u4e4b\u5916\u7684\u5757\u67d3\u8272\u6570\u91cf\u4e0d\u5c0f\u4e8ek\uff0c\u6c42\u6700\u5c0f\u7684\u603b\u67d3\u8272\u6570\u3002 \u4ee4 f_i f_i \u8868\u793a\u524d i i \u4f4d\u88ab\u67d3\u8272\u7684\u6570\u91cf\uff0c\u5047\u8bbe\u603b\u67d3\u8272\u6570\u4e3a x x \u8003\u8651\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709\u5982\u4e0b\u5efa\u56fe\uff1a f_i-f_{i-1}\u22641 f_i-f_{i-1}\u22641 f_{i-1}-f_i\u22640 f_{i-1}-f_i\u22640 \u5bf9\u7b2c\u4e00\u7c7b\u9650\u5236\uff0c\u6709 f_{l-1}-f_r\u2264-k f_{l-1}-f_r\u2264-k \u5bf9\u7b2c\u4e8c\u7c7b\u9650\u5236\uff0c\u6709 f_r-f_{l-1}\u2264x-k f_r-f_{l-1}\u2264x-k f_n-f_0\u2264x f_n-f_0\u2264x f_0-f_n\u2264-x f_0-f_n\u2264-x \u4e8c\u5206x\u5224\u5b9a\u7b54\u6848\uff0c\u5f53\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e0d\u5b58\u5728\u8d1f\u73af\u4e14dis[n]=x\u65f6\u8868\u793a\u5f53\u524d\u4e3a\u4e00\u7ec4\u5408\u6cd5\u89e3\u3002","title":"A. Artful Paintings"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/The 2019 China Collegiate Programming Contest Harbin Site/#e-exchanging-gifts","text":"","title":"E. Exchanging Gifts"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/The 2019 China Collegiate Programming Contest Harbin Site/#f-fixing-banners","text":"\u5224\u65ad\u7ed9\u51fa\u76846\u4e2a\u5355\u8bcd\u80fd\u5426\u5404\u53d6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5176\u7ec4\u6210Harbin. \u679a\u4e3e\u6392\u5217\u5373\u53ef\u3002","title":"F. Fixing Banners"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/The 2019 China Collegiate Programming Contest Harbin Site/#i-interesting-permutation","text":"\u5bf9\u4e8e\u67d0\u4e2a\u6392\u5217 P P \uff0c\u5e8f\u5217 h_i h_i \u8868\u793a\u6392\u5217P\u4e2d\u7b2c1-i\u4e2a\u6570\u7684\u6781\u5dee\u3002\u73b0\u5728\u7ed9\u4f60\u5e8f\u5217h\uff0c\u6c42\u80fd\u7ec4\u6210h\u7684\u6392\u5217\u4e2a\u6570\u3002 \u9996\u5148\u6392\u9664\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff08 h_0!=0, h_n!=n-2, h_i < i - 1, h_i\uff1ch_{i-1} h_0!=0, h_n!=n-2, h_i < i - 1, h_i\uff1ch_{i-1} \uff09\uff0c\u7edf\u8ba1\u6570\u5217h\u53d8\u5316\u4e86\u51e0\u6b21\uff0c\u8bb0\u4e3ax\uff0c\u7b54\u6848\u7684\u603b\u503c\u5373\u4e58\u4e0a 2^x 2^x \uff1b\u8bb0\u4e00\u6bb5\u8fde\u7eed\u7684\u5e8f\u5217\u957f\u5ea6\u4e3alen\uff0c\u5f00\u59cb\u7684\u5b57\u7b26\u4f4d\u7f6e\u4e3ay\uff0c\u90a3\u4e48\u8fd9\u6bb5\u8fde\u7eed\u5e8f\u5217\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a A_{len}^{p[y] - y + 1} A_{len}^{p[y] - y + 1} \u3002\u5bf9\u4e8e\u6bcf\u6bb5\u8fde\u7eed\u533a\u95f4\u6c42\u51fa\u8fd9\u4e2a\u503c\uff0c\u76f8\u4e58\u540e\u518d\u4e58\u4e0a 2^x 2^x \u5373\u4e3a\u7b54\u6848\u3002","title":"I. Interesting Permutation"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/The 2019 China Collegiate Programming Contest Harbin Site/#j-justifying-the-conjecture","text":"\u7b7e\u5230","title":"J. Justifying the Conjecture"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/The 2019 China Collegiate Programming Contest Harbin Site/#h-keeping-rabbits","text":"","title":"H. Keeping Rabbits"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/The 2019 China Collegiate Programming Contest Harbin Site/#l-lru-algorithm","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2aLRU\u8bbf\u95ee\u5e8f\u5217\u3002\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u5bc4\u5b58\u5668\u5927\u5c0f\u548c\u4e00\u6bb5\u67e5\u8be2\u5e8f\u5217\uff0c\u8be2\u95ee\u7ed9\u5b9a\u7684LRU\u8bbf\u95ee\u5e8f\u5217\u5728\u8fd9\u4e2a\u5927\u5c0f\u7684\u5bc4\u5b58\u5668\u4e2d\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u662f\u5426\u4f1a\u51fa\u73b0\u8fd9\u4e00\u67e5\u8be2\u5e8f\u5217\u3002 \u5c06\u6240\u6709\u67e5\u8be2\u5e8f\u5217\u63d2\u5165\u5b57\u5178\u6811\uff0c\u6a21\u62dfLRU\u8bbf\u95ee\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540e\u5728\u5b57\u5178\u6811\u4e0a\u67e5\u8be2\u5e76\u6807\u8bb0\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9\uff0c\u8f93\u51fa\u7b54\u6848\u65f6\u53ea\u8981\u67e5\u8be2\u67d0\u4e2a\u67e5\u8be2\u5e8f\u5217\u7684\u5c3e\u90e8\u8282\u70b9\u662f\u5426\u88ab\u6807\u8bb0\u5373\u53ef\uff08\u5904\u7406\u4e00\u4e0b\u540e\u7f00\u5747\u4e3a0\u7684\u67e5\u8be2\uff09\u3002","title":"L. LRU Algorithm"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/\u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b/","text":"Name Date Rank Solved A B C D E F G H I J K L \u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b 2019/11/17 Iron(Rank:76) 3/12 O . . . . . . . . . O O \u8d5b\u540e\u603b\u7ed3 Link \u9996\u5148wxh\u6740\u75af\u4e86\uff0c10\u9898\u78be\u538b\u7b2c\u4e8c3\u9898\uff0c\u56db\u4e2a\u4e00\u8840\uff0c\u6c26\u6c14\u7403\u8fde\u8d77\u6765\u53ef\u4ee5\u4e0a\u5929\u3002 \u53c2\u89c2\u4e86\u65f7\u89c6\uff08\u8fd8\u770b\u5230\u4e86\u67d0\u4e9bioi\u91d1\u724c\u4f6c\uff09\u3001Conflux\u3001\u5feb\u624b\uff08\u78b0\u5230\u4e86\u6b63\u5728\u7b7e\u4e09\u65b9\u7684wx\uff09\u3001\u817e\u8baf\u3002\u7ed9\u6211\u7559\u4e0b\u6700\u6df1\u5370\u8c61\u7684\u662f\u5317\u4eac\u817e\u8baf\u603b\u90e8\u65b0\u697c\uff0c\u771f\u7684\u592a\u724c\u9762\u4e86\u3002\u62ff\u4e86\u4e00\u8f66\u7eaa\u5ff5\u54c1\u5dee\u70b9\u53bb\u4e0d\u4e86\u4e2d\u4f20\u3002 \u996d\u7968\u4e0d\u592a\u6ee1\u610f\uff0c\u7279\u522b\u662f\u90a3\u4e2a\u5976\u8336\u5e97\u5c5e\u5b9e\u4e0d\u884c\uff0c\u4e2d\u4f20\u98df\u5802\u7684\u5bb9\u91cf \u611f\u89c9\u8fbe\u4e0d\u5230\u8fd9\u79cd\u5927\u578b\u6bd4\u8d5b\u7684\u6807\u51c6\u3002 \u548c\u674e\u603b\u8fd8\u6709WUSTACM\u5317\u4eac\u5206\u90e8\u5403\u4e86\u4e00\u987f\uff0c\u5927\u6982\u4e5f\u4e86\u89e3\u5230\u4e86\u4ed6\u4eec\u7684\u73b0\u72b6\u548c\u4ee5\u524d\u7684\u4ff1\u4e50\u90e8\u60c5\u51b5\u3002 \u522b\u7684\u4e0d\u8bf4\uff0c\u6bd4\u8d5b\u4e3e\u529e\u7684\u8fd8\u662f\u724c\u9762\u7684\uff0c\u9898\u76ee\u6b63\u89c4\uff0c\u9898\u518c\u5f88\u597d\uff0c\u961f\u540d\u724c\u5f88\u70ab\u9177\u73b0\u5728\u5e26\u56de\u6765\u6446\u5230\u4e86\u57fa\u5730\u7684\u684c\u4e0a\u3002\u6c14\u7403\u7b2c\u4e00\u6b21\u89c1\u6c26\u6c14\u7403\u3002 \u552f\u4e00\u6076\u5fc3\u4e86\u4e00\u70b9\u662f\u9898\u76ee\u3002\u771f\u56db\u9898\u4ece\u91d1\u5230\u94c1\uff0c\u7136\u540e\u6211\u4e09\u9898\u3002\u5176\u5b9e\u4e0a\u6765\u79d2\u5207\u4e86A\u5927\u6982\u8fdb\u4e86\u524d\u5341\uff0c\u7136\u540eL\u6709\u70b9\u70b8\uff0c\u7136\u540e\u5f88\u5feb\u5207\u6389\u4e86K\uff0c\u7ed3\u679c\u4e00\u76f4\u5230\u7ed3\u675f\u90fd\u4e0d\u4f1a\u90a3\u4e2a\u4e09\u7ef4\u6784\u9020\u9898\u3002\u90a3\u4e2aK\u8fd8\u662f\u7b2c\u4e00\u6b21\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u8fd8\u597d\u4e00\u53d1A\u4e86\u3002\u548c\u534e\u79d1\u597d\u5144\u5f1f\u9ed1\u5207\u53c8\u662f\u540c\u6837\u7684\u724c\u724c\uff08\u00d7\uff09\uff0c\u6e56\u5317\u597d\u50cf\u53ea\u6709\u6b66\u5927\u62ff\u5230\u4e86\u724c\u724c\u3002\u67d0\u51fa\u7ebf\u961f\u4e5f\u548c\u6211\u4e00\u8d77\u94c1\uff0c\u5f88\u5f00\u5fc3\uff08\u00d7\uff09\u3002\u7136\u540e\u8d5b\u540e\u7fa4\u540d\u6539\u6210\u4e86\u201c\u4e2d\u4f20ccpc-final\u56db\u9898\u7fa4\u201d\uff0c\u6211\u4e0d\u914d\u5728\u7fa4\u91cc\u3002\u90a3\u4e2a\u8001\u5e08\u6740\u75af\u4e86\uff0c\u6eda\u699c\u5bf9\u7740\u522b\u4eba\u961f\u540d\u75af\u72c2\u8f93\u51fa\uff0c\u201c\u770b\u6765\u8fd8\u8981\u591a\u5199\u70b9\u4ee3\u7801\uff0c\u4e0d\u591f\u79c3\u201d\u3002\u542c\u8bf4\u8fd8\u6709\u4e38\u5b50\u5934\u5973\u88c5\u76f4\u64ad\uff0c\u53c8\u53cc\u53d2\u53d5\u770b\u4e0d\u6210\u3002 \u5bbe\u9986\u5f88\u5c0f\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5317\u4eac\u5730\u592a\u8d35\u4e86\u3002\u6ca1\u4e86\u5427\uff0c\u53ef\u60dc\u8fd8\u662f\u6ca1\u80fd\u7ed9\u4ff1\u4e50\u90e8\u5949\u732e\u7b2c\u4e00\u4e2aCCPCF\u7684\u724c\u724c\uff0c\u786e\u5b9e\u6709\u70b9\u53ef\u60dc\uff0c\u8fd9\u573a\u7684\u624b\u901f\u8fd8\u633a\u5feb\uff0c\u5176\u5b9eA\u548cK\u9898\u51e0\u4e4e\u5df2\u7ecf\u662f\u573a\u4e0a\u7684\u6781\u9650\u901f\u5ea6\u4e86\uff0c\u5982\u679cL\u5feb\u4e00\u70b9\uff0cI\u80fd\u8fc7\u751a\u81f3\u53ef\u80fd\u62ff\u5230\u91d1\uff08\u505a\u68a6\u5462\u522b\u5435\uff09\u3002 CCPCF\u786e\u5b9e\u6bd4\u5176\u4ed6\u7684\u96be\u4e0a\u4e00\u4e22\u4e22\u611f\u89c9\uff0c\u53c2\u8d5b\u961f\u4f0d\u5b9e\u529b\u786e\u5b9e\u6bd4\u4e00\u822c\u533a\u57df\u8d5b\u5f3a\u4e0d\u5c11\u3002 \uff1f\uff1f\u4ed6\u4eec\u98df\u5802\u70e4\u9762\u7b4b\u660e\u660e\u6709\u90a3\u4e48\u9999 A Link \u7b7e\u5230\uff0c\u7ed9\u4e00\u4e2aschedule\uff0c\u8be2\u95ee\u7b2c\u4e00\u4e2a\u5728\u5f53\u524d\u8be2\u95ee\u65e5\u671f\u4e4b\u540e\u7684\u65e5\u671f\u3002\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002 K Link L Link","title":"\u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/\u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b/#_1","text":"\u9996\u5148wxh\u6740\u75af\u4e86\uff0c10\u9898\u78be\u538b\u7b2c\u4e8c3\u9898\uff0c\u56db\u4e2a\u4e00\u8840\uff0c\u6c26\u6c14\u7403\u8fde\u8d77\u6765\u53ef\u4ee5\u4e0a\u5929\u3002 \u53c2\u89c2\u4e86\u65f7\u89c6\uff08\u8fd8\u770b\u5230\u4e86\u67d0\u4e9bioi\u91d1\u724c\u4f6c\uff09\u3001Conflux\u3001\u5feb\u624b\uff08\u78b0\u5230\u4e86\u6b63\u5728\u7b7e\u4e09\u65b9\u7684wx\uff09\u3001\u817e\u8baf\u3002\u7ed9\u6211\u7559\u4e0b\u6700\u6df1\u5370\u8c61\u7684\u662f\u5317\u4eac\u817e\u8baf\u603b\u90e8\u65b0\u697c\uff0c\u771f\u7684\u592a\u724c\u9762\u4e86\u3002\u62ff\u4e86\u4e00\u8f66\u7eaa\u5ff5\u54c1\u5dee\u70b9\u53bb\u4e0d\u4e86\u4e2d\u4f20\u3002 \u996d\u7968\u4e0d\u592a\u6ee1\u610f\uff0c\u7279\u522b\u662f\u90a3\u4e2a\u5976\u8336\u5e97\u5c5e\u5b9e\u4e0d\u884c\uff0c\u4e2d\u4f20\u98df\u5802\u7684\u5bb9\u91cf \u611f\u89c9\u8fbe\u4e0d\u5230\u8fd9\u79cd\u5927\u578b\u6bd4\u8d5b\u7684\u6807\u51c6\u3002 \u548c\u674e\u603b\u8fd8\u6709WUSTACM\u5317\u4eac\u5206\u90e8\u5403\u4e86\u4e00\u987f\uff0c\u5927\u6982\u4e5f\u4e86\u89e3\u5230\u4e86\u4ed6\u4eec\u7684\u73b0\u72b6\u548c\u4ee5\u524d\u7684\u4ff1\u4e50\u90e8\u60c5\u51b5\u3002 \u522b\u7684\u4e0d\u8bf4\uff0c\u6bd4\u8d5b\u4e3e\u529e\u7684\u8fd8\u662f\u724c\u9762\u7684\uff0c\u9898\u76ee\u6b63\u89c4\uff0c\u9898\u518c\u5f88\u597d\uff0c\u961f\u540d\u724c\u5f88\u70ab\u9177\u73b0\u5728\u5e26\u56de\u6765\u6446\u5230\u4e86\u57fa\u5730\u7684\u684c\u4e0a\u3002\u6c14\u7403\u7b2c\u4e00\u6b21\u89c1\u6c26\u6c14\u7403\u3002 \u552f\u4e00\u6076\u5fc3\u4e86\u4e00\u70b9\u662f\u9898\u76ee\u3002\u771f\u56db\u9898\u4ece\u91d1\u5230\u94c1\uff0c\u7136\u540e\u6211\u4e09\u9898\u3002\u5176\u5b9e\u4e0a\u6765\u79d2\u5207\u4e86A\u5927\u6982\u8fdb\u4e86\u524d\u5341\uff0c\u7136\u540eL\u6709\u70b9\u70b8\uff0c\u7136\u540e\u5f88\u5feb\u5207\u6389\u4e86K\uff0c\u7ed3\u679c\u4e00\u76f4\u5230\u7ed3\u675f\u90fd\u4e0d\u4f1a\u90a3\u4e2a\u4e09\u7ef4\u6784\u9020\u9898\u3002\u90a3\u4e2aK\u8fd8\u662f\u7b2c\u4e00\u6b21\u5199\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u8fd8\u597d\u4e00\u53d1A\u4e86\u3002\u548c\u534e\u79d1\u597d\u5144\u5f1f\u9ed1\u5207\u53c8\u662f\u540c\u6837\u7684\u724c\u724c\uff08\u00d7\uff09\uff0c\u6e56\u5317\u597d\u50cf\u53ea\u6709\u6b66\u5927\u62ff\u5230\u4e86\u724c\u724c\u3002\u67d0\u51fa\u7ebf\u961f\u4e5f\u548c\u6211\u4e00\u8d77\u94c1\uff0c\u5f88\u5f00\u5fc3\uff08\u00d7\uff09\u3002\u7136\u540e\u8d5b\u540e\u7fa4\u540d\u6539\u6210\u4e86\u201c\u4e2d\u4f20ccpc-final\u56db\u9898\u7fa4\u201d\uff0c\u6211\u4e0d\u914d\u5728\u7fa4\u91cc\u3002\u90a3\u4e2a\u8001\u5e08\u6740\u75af\u4e86\uff0c\u6eda\u699c\u5bf9\u7740\u522b\u4eba\u961f\u540d\u75af\u72c2\u8f93\u51fa\uff0c\u201c\u770b\u6765\u8fd8\u8981\u591a\u5199\u70b9\u4ee3\u7801\uff0c\u4e0d\u591f\u79c3\u201d\u3002\u542c\u8bf4\u8fd8\u6709\u4e38\u5b50\u5934\u5973\u88c5\u76f4\u64ad\uff0c\u53c8\u53cc\u53d2\u53d5\u770b\u4e0d\u6210\u3002 \u5bbe\u9986\u5f88\u5c0f\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5317\u4eac\u5730\u592a\u8d35\u4e86\u3002\u6ca1\u4e86\u5427\uff0c\u53ef\u60dc\u8fd8\u662f\u6ca1\u80fd\u7ed9\u4ff1\u4e50\u90e8\u5949\u732e\u7b2c\u4e00\u4e2aCCPCF\u7684\u724c\u724c\uff0c\u786e\u5b9e\u6709\u70b9\u53ef\u60dc\uff0c\u8fd9\u573a\u7684\u624b\u901f\u8fd8\u633a\u5feb\uff0c\u5176\u5b9eA\u548cK\u9898\u51e0\u4e4e\u5df2\u7ecf\u662f\u573a\u4e0a\u7684\u6781\u9650\u901f\u5ea6\u4e86\uff0c\u5982\u679cL\u5feb\u4e00\u70b9\uff0cI\u80fd\u8fc7\u751a\u81f3\u53ef\u80fd\u62ff\u5230\u91d1\uff08\u505a\u68a6\u5462\u522b\u5435\uff09\u3002 CCPCF\u786e\u5b9e\u6bd4\u5176\u4ed6\u7684\u96be\u4e0a\u4e00\u4e22\u4e22\u611f\u89c9\uff0c\u53c2\u8d5b\u961f\u4f0d\u5b9e\u529b\u786e\u5b9e\u6bd4\u4e00\u822c\u533a\u57df\u8d5b\u5f3a\u4e0d\u5c11\u3002 \uff1f\uff1f\u4ed6\u4eec\u98df\u5802\u70e4\u9762\u7b4b\u660e\u660e\u6709\u90a3\u4e48\u9999","title":"\u8d5b\u540e\u603b\u7ed3"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/\u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b/#a","text":"\u7b7e\u5230\uff0c\u7ed9\u4e00\u4e2aschedule\uff0c\u8be2\u95ee\u7b2c\u4e00\u4e2a\u5728\u5f53\u524d\u8be2\u95ee\u65e5\u671f\u4e4b\u540e\u7684\u65e5\u671f\u3002\u6309\u9898\u610f\u6a21\u62df\u5373\u53ef\u3002","title":"A"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/\u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b/#k","text":"","title":"K"},{"location":"Training Logs/2019CCPC\u5206\u7ad9\u8d5b/\u7b2c\u4e94\u5c4a\u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u603b\u51b3\u8d5b/#l","text":"","title":"L"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/","text":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 Link Date Solved A B C D E F G H I J 2019/7/18 8/10 O \u00d8 \u00d8 . \u00d8 O . \u00d8 \u00d8 O \u6bd4\u8d5b\u5730\u5740 A\u3001 Equivalent Prefixes Link \u9898\u610f\uff1a\u5b9a\u4e49\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\u800c\u4e14\u6240\u6709\u7684 (l,r) \u5bf9\u90fd\u6709\u5f53\u524d\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u76f8\u540c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u4e24\u4e2a\u6700\u957f\u7684\u76f8\u5f53\u524d\u7f00\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u8003\u8651\u4e8c\u5206\u524d\u7f00\u957f\u5ea6\uff0c\u9996\u5148\u663e\u7136\u53ef\u77e5\u7684\u662f\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u90a3\u4e48\u4ed6\u4eec\u6240\u6709\u7684\u76f8\u540c\u4f4d\u7f6e\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u4e5f\u76f8\u5f53\u3002\u6240\u4ee5\u6700\u957f\u7684\u524d\u7f00\u5e8f\u5217\u7684\u524d\u7f00\u5e8f\u5217\u4e5f\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4efb\u4f55\u5c0f\u4e8e\u7b49\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5927\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u4e0d\u60f3\u5f53\u7684\u3002\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u7b1b\u5361\u5c14\u6811\u7684\u6a21\u5f0f\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u53e6\u5916\u4e00\u79cd\u505a\u6cd5\uff08\u590d\u6742\u5ea6 O(nlogn) \u6bd4\u5b98\u65b9\u9898\u89e3\u591a\u4e00\u4e9b\uff09\uff0c\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u4e3a x \uff0c\u90a3\u4e48 l \\in [1,x], r \\in [x,n] l \\in [1,x], r \\in [x,n] \u8fd9\u90e8\u5206\u7684\u6240\u6709\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u90fd\u662f x \uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u6cbb (1,x-1)(x+1,n) \uff0c\u4e0d\u65ad\u8fdb\u884c\u4e0b\u53bb\uff0c\u6bcf\u6b21\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u6700\u5c0f\u503c\u4f4d\u7f6e\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; int n ; vector < int > a , b ; inline bool check ( int l , int r ) { if ( r - l <= 1 ) return 1 ; int mnposa = 0 , mn = 0x3f3f3f3f ; int mnposb = 0 , mn2 = 0x3f3f3f3f ; for ( int i = l ; i < r ; ++ i ) { if ( mn > a [ i ]) { mn = a [ i ]; mnposa = i ; } if ( mn2 > b [ i ]) { mn2 = b [ i ]; mnposb = i ; } } return mnposb == mnposa && check ( l , mnposa ) && check ( mnposa + 1 , r ); } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { a . resize ( n ), b . resize ( n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & b [ i ]); } int l = 1 , r = n , res = 1 ; while ( l <= r ) { int mid = l + r >> 1 ; if ( check ( 0 , mid )) { l = mid + 1 ; res = mid ; } else r = mid - 1 ; } printf ( \"%d \\n \" , res ); } return 0 ; } B\u3001 Integration Link \u9898\u610f\uff1a\u7ed9\u5b9a\u5e8f\u5217 a \uff0c\u6c42 \\frac{1}{\\pi} \\int_0^\\infty \\frac{1}{\\prod_{i=1}^n(a_i^2+x^2)} dx \u4eba\u5c3d\u7686\u77e5\u591a\u6b21\u9879\u5728\u5206\u6bcd\u7684\u51fd\u6570\u6c42\u79ef\u5206\u5f02\u5e38\u96be\u7b97\uff0c\u4f46\u662f \\int_0^\\infty \\frac{1}{t^2+x^2}dx=\\frac{\\pi}{2t} \u7136\u540e\u8003\u8651\u62c6\u9879 \\prod_{i=1}^n\\frac{1}{a_i^2+x^2}=\\sum_{i=1}^n\\frac{c_i}{a_i^2+x^2} \u5de6\u8fb9\u5206\u6bcd\u628a\u67d0\u4e00\u9879 a_t a_t \u63d0\u53d6\u51fa\u6765 \\frac{1}{a_t^2+x^2}\\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}+\\frac{c_t}{a_t^2+x^2} \u5c06\u5206\u6bcd\u4e58\u8fc7\u53bb \\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}(a_t^2+x^2)+c_t \u7531\u4e8e\u5bf9\u4efb\u610f x \u90fd\u8981\u4f7f\u7b49\u5f0f\u6210\u7acb\uff0c\u53d6 x=a_t \\dot i x=a_t \\dot i \u5f97\u5230 x^2=-a_t^2 x^2=-a_t^2 \u7136\u540e\u7b49\u5f0f\u5c31\u53d8\u6210 \\prod_{i \\neq t}\\frac{1}{a_i^2-a_t^2}=c_t \u89e3\u51fa\u6240\u6709c\u540e\u5373\u53ef\u79ef\u5206\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include <bits/stdc++.h> using namespace std ; const int mod = 1e9 + 7 ; typedef long long ll ; ll inv ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int main () { int n ; ll a [ 1000 + 10 ]; while ( ~ scanf ( \"%d\" , & n )) { ll ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ]); for ( int i = 0 ; i < n ; i ++ ) { ll c = 1 ; for ( int j = 0 ; j < n ; j ++ ) if ( j != i ) ( c *= ( a [ j ] * a [ j ] % mod - a [ i ] * a [ i ] % mod + mod ) % mod ) %= mod ; ( ans += inv ( a [ i ]) * inv ( c ) % mod * inv ( 2 ) % mod ) %= mod ; } printf ( \"%lld \\n \" , ans ); } return 0 ; } C\u3001 Euclidean Distance Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2am\u7ef4\u5411\u91cf\uff0c\u6c42\u53e6\u4e00\u4e2am\u7ef4\u5411\u91cf (p_1,p_2,...p_n) (p_1,p_2,...p_n) \u4f7f\u5f97 p_i \\ge 0 \\sum p_i = 1 p_i \\ge 0 \\sum p_i = 1 \u4e14\u4e24\u5411\u91cf\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u6700\u77ed\u3002 \u9898\u89e3\uff1a\u5b98\u65b9\u9898\u89e3\u7528\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\u4e0d\u662f\u5f88\u4f1a\uff0c\u7b80\u5355\u6765\u8bb2\u662f\u9996\u5148\u4f7f\u6700\u9ad8\u7684\u53d8\u77ee\uff0c\u7136\u540e\u603b\u548c\u4e3a1\u7684\u60c5\u51b5\u4e0b\u8981\u600e\u4e48\u4f7f\u6700\u5927\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u7136\u8d1f\u6570\u90a3\u8fb9\u662f\u53cd\u8fc7\u6765\u7684\uff0c\u8981\u4f7f\u5f97\u603b\u8ddd\u79bb\u66f4\u63a5\u8fd10\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; ll a [ maxn ], sum [ maxn ]; bool cmp ( const int & a , const int & b ) { return a > b ; } int main () { int n , m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { ll res1 , res2 , pos = n ; for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & a [ i ]); sort ( a + 1 , a + n + 1 , cmp ); sum [ 0 ] = - m ; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + a [ i ]; for ( int i = 1 ; i < n ; i ++ ) if ( sum [ i ] > a [ i + 1 ] * i ) { pos = i ; break ; } res1 = sum [ pos ] * sum [ pos ] * pos ; res2 = pos * pos ; for ( int i = pos + 1 ; i <= n ; i ++ ) res1 += a [ i ] * a [ i ] * res2 ; res2 *= m * m ; ll g = __gcd ( res1 , res2 ); res1 /= g , res2 /= g ; if (( res1 == 0 ) || res2 == 1 ) printf ( \"%lld \\n \" , res1 ); else printf ( \"%lld/%lld \\n \" , res1 , res2 ); } return 0 ; } E\u3001 ABBA Link \u9898\u610f\uff1a\u6c42\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a 2*(n+m) 2*(n+m) \u7684ab\u4e32\u4f7f\u5f97\u6709n\u5bf9 ab \u548cm\u5bf9 ba \uff0c\u4f7f\u7528\u8fc7\u7684\u4e32\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u3002 \u9898\u89e3\uff1a\u5176\u5b9e\u662f\u5e26\u9650\u5236\u7684\u5361\u7279\u5170\u6570\uff0c\u4e0e\u5361\u7279\u5170\u6570\u552f\u4e00\u7684\u533a\u522b\u662f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76840\u7684\u4e2a\u6570\u6bd41\u7684\u4e2a\u6570\u591an\u4ee5\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76841\u7684\u4e2a\u6570\u6bd40\u591am\u4ee5\u4e0a\uff0c\u7136\u540e\u5c31\u5199\u4e2a\u5361\u7279\u5170\u6570\u7684\u9012\u63a8\u628a\u4e0d\u5408\u6cd5\u72b6\u6001\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e3 + 5 ; const int mod = 1e9 + 7 ; int n , m ; int main () { while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { vector < vector < int > > dp (( n + m ) * 2 + 1 ); for ( int i = 0 ; i <= ( n + m ) * 2 ; ++ i ) dp [ i ]. resize ( 2005 ); dp [ 0 ][ 1002 ] = 1 ; for ( int i = 0 ; i < ( n + m ) * 2 ; ++ i ) { for ( int j = 1002 - m ; j <= 1002 + n ; ++ j ) { dp [ i + 1 ][ j + 1 ] = ( dp [ i + 1 ][ j + 1 ] + dp [ i ][ j ]) % mod ; dp [ i + 1 ][ j - 1 ] = ( dp [ i + 1 ][ j - 1 ] + dp [ i ][ j ]) % mod ; } } printf ( \"%d \\n \" , dp [( n + m ) * 2 ][ 1002 ]); } return 0 ; } F\u3001 Random Point in Triangle Link \u9898\u610f\uff1a\u6c42\u4e09\u89d2\u5f62\u5185\u70b9\u4e0e\u4e09\u4e2a\u9876\u70b9\u6784\u6210\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6700\u5927\u503c\u7684\u671f\u671b\u3002 \u9898\u89e3\uff1apython\u968f\u673a\u53d6\u70b9\uff0c\u63a8\u6d4b\u4e0e\u4e09\u89d2\u5f62\u9762\u79ef\u76f8\u5173\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u9762\u79ef0.5\u65f6\u671f\u671b\u4e3a11/36\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u9898\u9762\u4e2d\u63d0\u793a\u4e86\u671f\u671b\u00d736\u662f\u6574\u6570\u6240\u4ee5\u76f4\u63a5\u628a\u968f\u673a\u7ed3\u679c\u00d736\u5f88\u5bb9\u6613\u770b\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # \u968f\u673a\u53d6\u70b9 import random res = 0 times = 20000000 tx = 0 for i in range ( times ): x = random . random () y = random . random () if y > x : continue # print(str(x) + \" \" + str(y)) tx += 1 t = 0.5 * y t2 = 0.5 * ( 1 - x ) t3 = 0.5 - t - t2 res += max ( t , max ( t2 , t3 )) print ( res * 36 / tx ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e2 + 5 ; pair < ll , ll > pos [ 3 ]; ll myabs ( ll x ) { return x < 0 ? - x : x ; } int main () { while ( scanf ( \"%lld%lld\" , & pos [ 0 ]. first , & pos [ 0 ]. second ) != EOF ) { for ( int i = 1 ; i < 3 ; ++ i ) { scanf ( \"%lld%lld\" , & pos [ i ]. first , & pos [ i ]. second ); } ll res = ( pos [ 0 ]. first * pos [ 1 ]. second ) + ( pos [ 1 ]. first * pos [ 2 ]. second ) + ( pos [ 2 ]. first * pos [ 0 ]. second ) - ( pos [ 0 ]. first * pos [ 2 ]. second ) - ( pos [ 1 ]. first * pos [ 0 ]. second ) - ( pos [ 2 ]. first * pos [ 1 ]. second ); if ( res < 0 ) res = - res ; printf ( \"%lld \\n \" , res * 11 ); } } H\u3001 XOR Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u96c6\u5408\uff0c\u6c42\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u7684\u5b50\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u663e\u7136\u5c31\u662f\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u8003\u8651\u5bf9\u6240\u6709\u6570\u6c42\u4e00\u6b21\u7ebf\u6027\u57fa\uff0c\u57fa\u5916\u6240\u6709\u6570\u4efb\u610f\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7ec4\u62100\u7684\u6240\u4ee5\u57fa\u5916\u6240\u6709\u70b9\uff08\u8bbe\u4e2a\u6570\u4e3ax\uff09\u90fd\u6709 2^(x-1) \u7684\u6743\uff0c\u56e0\u4e3a\u5355\u70b9\u8981\u53d6\u4e4b\u5916\u5176\u4ed6\u6240\u6709\u70b9\u53ef\u53d6\u53ef\u4e0d\u53d6\uff0c\u5bf9\u4e8e\u57fa\u5185\u7684\u70b9\u5982\u679c\u53ef\u4ee5\u66ff\u6362\u67d0\u4e2a\u57fa\u5916\u70b9\u5b83\u7684\u6743\u4e5f\u662f\u8fd9\u4e2a\uff0c\u5176\u4ed6\u70b9\u662f\u6ca1\u6709\u6743\u7684\uff0c\u6240\u6709\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002\u56e0\u4e3a\u57fa\u5185\u6700\u591a\u5c31 log \u4e2a\u6570\uff0c\u53ef\u4ee5insert\u7684\u65f6\u5019\u7ef4\u62a4\u5982\u679cinsert\u5931\u8d25\u5b83\u5305\u542b\u7684\u57fa\u90fd\u662f\u53ef\u66ff\u6362\u7684\uff0c\u7528\u72b6\u538b\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u53ef\u66ff\u6362\u7684\u57fa\u5e95\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <bits/stdc++.h> using namespace std ; const int mod = 1e9 + 7 ; typedef long long ll ; ll qp ( ll a , ll n ) { if ( n < 0 ) return 0 ; ll ans = 1 ; for (; n ; ( a *= a ) %= mod , n >>= 1 ) if ( n & 1 ) ( ans *= a ) %= mod ; return ans ; } ll v ; struct LinearBasis { ll d [ 63 ], o [ 63 ]; void init () { for ( int i = 0 ; i < 64 ; i ++ ) d [ i ] = o [ i ] = 0 ; v = 0 ; } bool ins ( ll x ) { ll tmp = 0 ; bool flag = false ; for ( int i = 62 ; i >= 0 ; i -- ) { if (( x >> i ) & 1 ) { if ( ! d [ i ]) d [ i ] = x , o [ i ] = tmp | ( 1ll << i ), flag = true ; x ^= d [ i ]; tmp |= o [ i ]; if ( ! x ) break ; } } if ( ! flag ) v |= tmp ; return flag ; } } L ; int main () { int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { L . init (); ll x , ans = 0 , cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & x ); if ( ! L . ins ( x )) ans ++ ; } for ( int i = 0 ; i < 63 ; i ++ ) { if ( L . d [ i ]) cnt ++ ; if (( 1ll << i ) & v ) ans ++ ; } printf ( \"%lld \\n \" , ans * qp ( 2 , n - cnt - 1 ) % mod ); } return 0 ; } I\u3001 Points Division Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e8c\u7ef4\u70b9\u96c6\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u70b9\u6743 a,b \uff0c\u8981\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f97A\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u548cB\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u6ee1\u8db3 if(i\\in A \\and j\\in B \\and x_i\\ge x_j) y_i\\gt y_j \u4f7f\u5f97\u65b9\u6848\u4e2d \\sum a_i + \\sum b_j \\sum a_i + \\sum b_j \u6700\u5927\u3002 \u9898\u89e3\uff1a\u76f8\u5f53\u4e8e\u6c42\u659c\u7387\u59cb\u7ec8\u4e3a\u6b63\u7684\u6298\u7ebf\uff0c\u4e14\u6298\u7ebf\u7684\u6240\u6709\u7aef\u70b9\u662f\u7ed9\u5b9a\u70b9\uff08\u6298\u7ebf\u4ee5\u4e0a\u90e8\u5206\u4e3aA\u96c6\u5408\uff0c\u5176\u4f59\u4e3aB\u96c6\u5408\uff09\u3002\u53ef\u4ee5\u679a\u4e3eA\u96c6\u5408\u4e2d\u70b9\u7684\u6298\u7ebf\u7aef\u70b9\u3002\u90a3\u4e48\u8003\u8651\u5982\u679c\u70b9\u7684\u6a2a\u5750\u6807\u5747\u4e0d\u76f8\u540c\u4e14\u540e\u9762\u7684\u7eb5\u5750\u6807\u603b\u5927\u4e8e\u524d\u8005\uff0c\u90a3\u4e48\u6298\u7ebf\u662f\u786e\u5b9a\u7684\uff0c\u7684\u6700\u5927\u6743\u503c\u8981\u6c42\u7684\u8bdd\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u79bb\u6563\u5316\u7684\u7eb5\u5750\u6807\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u628a\u5927\u4e8e\u7eb5\u5750\u6807\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6700\u5927\u503c\u3002\u73b0\u5728\u7eb5\u5750\u6807\u53ef\u80fd\u4e0d\u5355\u589e\u7684\u8bdd\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u628a\u5c0f\u4e8e\u5b83\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u5927\u4e8e\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u7b49\u4e8e\u7684\u90e8\u5206\u4fee\u6539\u6210\u73b0\u5728\u53ef\u80fd\u53d6\u5230\u7684\u6700\u5927\u6743\u503c\uff0c\u5373\u67e5\u8be2 [1,y_i-1] [1,y_i-1] \u7684\u6700\u503c\uff0c\u52a0\u4e0aa\u6743\uff0c\u7136\u540e\u518d\u8003\u8651\u6709\u53ef\u80fd\u6709\u5171\u6a2a\u5750\u6807\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u8003\u8651\u52a0\u70b9\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f53\u524d\u70b9\u52a0\u5165\u65f6\u53ef\u4ee5\u53d6\u5230\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f18\u5148\u53f3\u5230\u5de6\uff0c\u6b21\u6392\u4e0b\u5230\u4e0a\u5373\u53ef\uff0c\u56e0\u4e3a\u679a\u4e3e\u7684\u662fA\u96c6\u5408\u4e0a\u7684\u70b9\uff0c\u662f\u53ef\u4ee5\u53d6\u7b49\u7684\uff0c\u540c\u4e00\u6a2a\u5750\u6807\u4e0b\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u89e3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 10 ; int n ; ll val [ maxn << 2 ], lazy [ maxn << 2 ]; int le , re ; ll k ; void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } void build ( int rt , int l , int r ) { val [ rt ] = lazy [ rt ] = 0 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } void update ( int rt , int l , int r ) { if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } int mid = l + r >> 1 ; pushdown ( rt ); if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } ll query ( int rt , int l , int r ) { if ( le <= l && r <= re ) { return val [ rt ]; } int mid = l + r >> 1 ; pushdown ( rt ); ll res = 0 ; if ( le <= mid ) res = max ( res , query ( rt << 1 , l , mid )); if ( re > mid ) res = max ( res , query ( rt << 1 | 1 , mid + 1 , r )); return res ; } vector < int > ypos ; struct po { int x , y , a , b ; bool operator < ( const po & oth ) const { if ( x != oth . x ) return x > oth . x ; return y < oth . y ; } }; void up ( int l , int r , ll kt , int sz ) { // cout << \"update from \" << l << \" to \" << r << \" val \"<< kt << endl; le = l , re = r , k = kt ; update ( 1 , 1 , sz ); } ll qu ( int l , int r , int sz ) { le = l , re = r ; // cout << \"query from \" << l << \" to \" << r << \" ans \" << query(1, 1, sz) << endl; return query ( 1 , 1 , sz ); } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { vector < po > pi ( n ); ypos . clear (); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d%d%d%d\" , & pi [ i ]. x , & pi [ i ]. y , & pi [ i ]. a , & pi [ i ]. b ); ypos . push_back ( pi [ i ]. y ); } sort ( ypos . begin (), ypos . end ()); sort ( pi . begin (), pi . end ()); ypos . erase ( unique ( ypos . begin (), ypos . end ()), ypos . end ()); int sz = pi . size () + 5 ; build ( 1 , 1 , sz ); for ( int i = 0 ; i < n ; ++ i ) pi [ i ]. y = lower_bound ( ypos . begin (), ypos . end (), pi [ i ]. y ) - ypos . begin () + 2 ; for ( int i = 0 ; i < n ; ++ i ) { ll mx = qu ( pi [ i ]. y , sz , sz ); up ( pi [ i ]. y , pi [ i ]. y , mx + pi [ i ]. a - qu ( pi [ i ]. y , pi [ i ]. y , sz ), sz ); up ( pi [ i ]. y + 1 , sz , pi [ i ]. b , sz ); up ( 1 , pi [ i ]. y - 1 , pi [ i ]. a , sz ); } printf ( \"%lld \\n \" , qu ( 1 , sz , sz )); } return 0 ; } \u672c\u9898\u5f88\u96be\u8c03\uff0c\u5176\u5b9e\u6700\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u53d6\u7b49\u7684\u6761\u4ef6\uff0c\u8003\u8651\u4ece\u53f3\u5f80\u5de6\u548c\u53d6A\u96c6\u5408\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u53d6\u7b49\u56f0\u96be\u3002 J\u3001 Fraction Comparision Link \u9898\u610f\uff1a\u5224\u65ad \\frac{x}{a} \\frac{x}{a} \u4e0e \\frac{y}{b} \\frac{y}{b} \u7684\u5927\u5c0f \u9898\u89e3\uff1a\u6700\u7b80\u5355\u6ca1\u6709\u601d\u7ef4\u96be\u5ea6\u7684\u5f53\u7136\u662f\u6539\u6210\u4e58\u6cd5\u4e0a\u5927\u6570\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u53d6\u4f59\u6570\u548c\u5546\u4e24\u90e8\u5206\u5206\u522b\u6bd4\u8f83\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import java.io.OutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.PrintWriter ; import java.util.Scanner ; import java.math.BigInteger ; /** * Built using CHelper plug-in * Actual solution is at the top * * @author badcw */ public class Main { public static void main ( String [] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ); PrintWriter out = new PrintWriter ( outputStream ); Task solver = new Task (); solver . solve ( 1 , in , out ); out . close (); } static class Task { public void solve ( int testNumber , Scanner in , PrintWriter out ) { while ( in . hasNext ()) { BigInteger x = in . nextBigInteger (); BigInteger y = in . nextBigInteger (); BigInteger a = in . nextBigInteger (); BigInteger b = in . nextBigInteger (); BigInteger tt = x . multiply ( b ); BigInteger tt2 = y . multiply ( a ); if ( tt . compareTo ( tt2 ) == 0 ) out . println ( \"=\" ); else if ( tt . compareTo ( tt2 ) < 0 ) out . println ( \"<\" ); else out . println ( \">\" ); } } } }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#2019","text":"Date Solved A B C D E F G H I J 2019/7/18 8/10 O \u00d8 \u00d8 . \u00d8 O . \u00d8 \u00d8 O \u6bd4\u8d5b\u5730\u5740","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#aequivalent-prefixes","text":"\u9898\u610f\uff1a\u5b9a\u4e49\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\u800c\u4e14\u6240\u6709\u7684 (l,r) \u5bf9\u90fd\u6709\u5f53\u524d\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u76f8\u540c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u4e24\u4e2a\u6700\u957f\u7684\u76f8\u5f53\u524d\u7f00\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u8003\u8651\u4e8c\u5206\u524d\u7f00\u957f\u5ea6\uff0c\u9996\u5148\u663e\u7136\u53ef\u77e5\u7684\u662f\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u90a3\u4e48\u4ed6\u4eec\u6240\u6709\u7684\u76f8\u540c\u4f4d\u7f6e\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u4e5f\u76f8\u5f53\u3002\u6240\u4ee5\u6700\u957f\u7684\u524d\u7f00\u5e8f\u5217\u7684\u524d\u7f00\u5e8f\u5217\u4e5f\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4efb\u4f55\u5c0f\u4e8e\u7b49\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5927\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u4e0d\u60f3\u5f53\u7684\u3002\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u7b1b\u5361\u5c14\u6811\u7684\u6a21\u5f0f\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u53e6\u5916\u4e00\u79cd\u505a\u6cd5\uff08\u590d\u6742\u5ea6 O(nlogn) \u6bd4\u5b98\u65b9\u9898\u89e3\u591a\u4e00\u4e9b\uff09\uff0c\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u4e3a x \uff0c\u90a3\u4e48 l \\in [1,x], r \\in [x,n] l \\in [1,x], r \\in [x,n] \u8fd9\u90e8\u5206\u7684\u6240\u6709\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u90fd\u662f x \uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u6cbb (1,x-1)(x+1,n) \uff0c\u4e0d\u65ad\u8fdb\u884c\u4e0b\u53bb\uff0c\u6bcf\u6b21\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u6700\u5c0f\u503c\u4f4d\u7f6e\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; int n ; vector < int > a , b ; inline bool check ( int l , int r ) { if ( r - l <= 1 ) return 1 ; int mnposa = 0 , mn = 0x3f3f3f3f ; int mnposb = 0 , mn2 = 0x3f3f3f3f ; for ( int i = l ; i < r ; ++ i ) { if ( mn > a [ i ]) { mn = a [ i ]; mnposa = i ; } if ( mn2 > b [ i ]) { mn2 = b [ i ]; mnposb = i ; } } return mnposb == mnposa && check ( l , mnposa ) && check ( mnposa + 1 , r ); } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { a . resize ( n ), b . resize ( n ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & b [ i ]); } int l = 1 , r = n , res = 1 ; while ( l <= r ) { int mid = l + r >> 1 ; if ( check ( 0 , mid )) { l = mid + 1 ; res = mid ; } else r = mid - 1 ; } printf ( \"%d \\n \" , res ); } return 0 ; }","title":"A\u3001Equivalent Prefixes"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#bintegration","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u5e8f\u5217 a \uff0c\u6c42 \\frac{1}{\\pi} \\int_0^\\infty \\frac{1}{\\prod_{i=1}^n(a_i^2+x^2)} dx \u4eba\u5c3d\u7686\u77e5\u591a\u6b21\u9879\u5728\u5206\u6bcd\u7684\u51fd\u6570\u6c42\u79ef\u5206\u5f02\u5e38\u96be\u7b97\uff0c\u4f46\u662f \\int_0^\\infty \\frac{1}{t^2+x^2}dx=\\frac{\\pi}{2t} \u7136\u540e\u8003\u8651\u62c6\u9879 \\prod_{i=1}^n\\frac{1}{a_i^2+x^2}=\\sum_{i=1}^n\\frac{c_i}{a_i^2+x^2} \u5de6\u8fb9\u5206\u6bcd\u628a\u67d0\u4e00\u9879 a_t a_t \u63d0\u53d6\u51fa\u6765 \\frac{1}{a_t^2+x^2}\\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}+\\frac{c_t}{a_t^2+x^2} \u5c06\u5206\u6bcd\u4e58\u8fc7\u53bb \\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}(a_t^2+x^2)+c_t \u7531\u4e8e\u5bf9\u4efb\u610f x \u90fd\u8981\u4f7f\u7b49\u5f0f\u6210\u7acb\uff0c\u53d6 x=a_t \\dot i x=a_t \\dot i \u5f97\u5230 x^2=-a_t^2 x^2=-a_t^2 \u7136\u540e\u7b49\u5f0f\u5c31\u53d8\u6210 \\prod_{i \\neq t}\\frac{1}{a_i^2-a_t^2}=c_t \u89e3\u51fa\u6240\u6709c\u540e\u5373\u53ef\u79ef\u5206\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include <bits/stdc++.h> using namespace std ; const int mod = 1e9 + 7 ; typedef long long ll ; ll inv ( ll a , ll n = mod - 2 ) { ll ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int main () { int n ; ll a [ 1000 + 10 ]; while ( ~ scanf ( \"%d\" , & n )) { ll ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & a [ i ]); for ( int i = 0 ; i < n ; i ++ ) { ll c = 1 ; for ( int j = 0 ; j < n ; j ++ ) if ( j != i ) ( c *= ( a [ j ] * a [ j ] % mod - a [ i ] * a [ i ] % mod + mod ) % mod ) %= mod ; ( ans += inv ( a [ i ]) * inv ( c ) % mod * inv ( 2 ) % mod ) %= mod ; } printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"B\u3001Integration"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#ceuclidean-distance","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2am\u7ef4\u5411\u91cf\uff0c\u6c42\u53e6\u4e00\u4e2am\u7ef4\u5411\u91cf (p_1,p_2,...p_n) (p_1,p_2,...p_n) \u4f7f\u5f97 p_i \\ge 0 \\sum p_i = 1 p_i \\ge 0 \\sum p_i = 1 \u4e14\u4e24\u5411\u91cf\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u6700\u77ed\u3002 \u9898\u89e3\uff1a\u5b98\u65b9\u9898\u89e3\u7528\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\u4e0d\u662f\u5f88\u4f1a\uff0c\u7b80\u5355\u6765\u8bb2\u662f\u9996\u5148\u4f7f\u6700\u9ad8\u7684\u53d8\u77ee\uff0c\u7136\u540e\u603b\u548c\u4e3a1\u7684\u60c5\u51b5\u4e0b\u8981\u600e\u4e48\u4f7f\u6700\u5927\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u7136\u8d1f\u6570\u90a3\u8fb9\u662f\u53cd\u8fc7\u6765\u7684\uff0c\u8981\u4f7f\u5f97\u603b\u8ddd\u79bb\u66f4\u63a5\u8fd10\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 1e5 + 10 ; ll a [ maxn ], sum [ maxn ]; bool cmp ( const int & a , const int & b ) { return a > b ; } int main () { int n , m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { ll res1 , res2 , pos = n ; for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%lld\" , & a [ i ]); sort ( a + 1 , a + n + 1 , cmp ); sum [ 0 ] = - m ; for ( int i = 1 ; i <= n ; i ++ ) sum [ i ] = sum [ i - 1 ] + a [ i ]; for ( int i = 1 ; i < n ; i ++ ) if ( sum [ i ] > a [ i + 1 ] * i ) { pos = i ; break ; } res1 = sum [ pos ] * sum [ pos ] * pos ; res2 = pos * pos ; for ( int i = pos + 1 ; i <= n ; i ++ ) res1 += a [ i ] * a [ i ] * res2 ; res2 *= m * m ; ll g = __gcd ( res1 , res2 ); res1 /= g , res2 /= g ; if (( res1 == 0 ) || res2 == 1 ) printf ( \"%lld \\n \" , res1 ); else printf ( \"%lld/%lld \\n \" , res1 , res2 ); } return 0 ; }","title":"C\u3001Euclidean Distance"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#eabba","text":"\u9898\u610f\uff1a\u6c42\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a 2*(n+m) 2*(n+m) \u7684ab\u4e32\u4f7f\u5f97\u6709n\u5bf9 ab \u548cm\u5bf9 ba \uff0c\u4f7f\u7528\u8fc7\u7684\u4e32\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u3002 \u9898\u89e3\uff1a\u5176\u5b9e\u662f\u5e26\u9650\u5236\u7684\u5361\u7279\u5170\u6570\uff0c\u4e0e\u5361\u7279\u5170\u6570\u552f\u4e00\u7684\u533a\u522b\u662f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76840\u7684\u4e2a\u6570\u6bd41\u7684\u4e2a\u6570\u591an\u4ee5\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76841\u7684\u4e2a\u6570\u6bd40\u591am\u4ee5\u4e0a\uff0c\u7136\u540e\u5c31\u5199\u4e2a\u5361\u7279\u5170\u6570\u7684\u9012\u63a8\u628a\u4e0d\u5408\u6cd5\u72b6\u6001\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 2e3 + 5 ; const int mod = 1e9 + 7 ; int n , m ; int main () { while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { vector < vector < int > > dp (( n + m ) * 2 + 1 ); for ( int i = 0 ; i <= ( n + m ) * 2 ; ++ i ) dp [ i ]. resize ( 2005 ); dp [ 0 ][ 1002 ] = 1 ; for ( int i = 0 ; i < ( n + m ) * 2 ; ++ i ) { for ( int j = 1002 - m ; j <= 1002 + n ; ++ j ) { dp [ i + 1 ][ j + 1 ] = ( dp [ i + 1 ][ j + 1 ] + dp [ i ][ j ]) % mod ; dp [ i + 1 ][ j - 1 ] = ( dp [ i + 1 ][ j - 1 ] + dp [ i ][ j ]) % mod ; } } printf ( \"%d \\n \" , dp [( n + m ) * 2 ][ 1002 ]); } return 0 ; }","title":"E\u3001ABBA"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#frandom-point-in-triangle","text":"\u9898\u610f\uff1a\u6c42\u4e09\u89d2\u5f62\u5185\u70b9\u4e0e\u4e09\u4e2a\u9876\u70b9\u6784\u6210\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6700\u5927\u503c\u7684\u671f\u671b\u3002 \u9898\u89e3\uff1apython\u968f\u673a\u53d6\u70b9\uff0c\u63a8\u6d4b\u4e0e\u4e09\u89d2\u5f62\u9762\u79ef\u76f8\u5173\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u9762\u79ef0.5\u65f6\u671f\u671b\u4e3a11/36\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u9898\u9762\u4e2d\u63d0\u793a\u4e86\u671f\u671b\u00d736\u662f\u6574\u6570\u6240\u4ee5\u76f4\u63a5\u628a\u968f\u673a\u7ed3\u679c\u00d736\u5f88\u5bb9\u6613\u770b\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # \u968f\u673a\u53d6\u70b9 import random res = 0 times = 20000000 tx = 0 for i in range ( times ): x = random . random () y = random . random () if y > x : continue # print(str(x) + \" \" + str(y)) tx += 1 t = 0.5 * y t2 = 0.5 * ( 1 - x ) t3 = 0.5 - t - t2 res += max ( t , max ( t2 , t3 )) print ( res * 36 / tx ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e2 + 5 ; pair < ll , ll > pos [ 3 ]; ll myabs ( ll x ) { return x < 0 ? - x : x ; } int main () { while ( scanf ( \"%lld%lld\" , & pos [ 0 ]. first , & pos [ 0 ]. second ) != EOF ) { for ( int i = 1 ; i < 3 ; ++ i ) { scanf ( \"%lld%lld\" , & pos [ i ]. first , & pos [ i ]. second ); } ll res = ( pos [ 0 ]. first * pos [ 1 ]. second ) + ( pos [ 1 ]. first * pos [ 2 ]. second ) + ( pos [ 2 ]. first * pos [ 0 ]. second ) - ( pos [ 0 ]. first * pos [ 2 ]. second ) - ( pos [ 1 ]. first * pos [ 0 ]. second ) - ( pos [ 2 ]. first * pos [ 1 ]. second ); if ( res < 0 ) res = - res ; printf ( \"%lld \\n \" , res * 11 ); } }","title":"F\u3001Random Point in Triangle"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#hxor","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u96c6\u5408\uff0c\u6c42\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u7684\u5b50\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u663e\u7136\u5c31\u662f\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u8003\u8651\u5bf9\u6240\u6709\u6570\u6c42\u4e00\u6b21\u7ebf\u6027\u57fa\uff0c\u57fa\u5916\u6240\u6709\u6570\u4efb\u610f\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7ec4\u62100\u7684\u6240\u4ee5\u57fa\u5916\u6240\u6709\u70b9\uff08\u8bbe\u4e2a\u6570\u4e3ax\uff09\u90fd\u6709 2^(x-1) \u7684\u6743\uff0c\u56e0\u4e3a\u5355\u70b9\u8981\u53d6\u4e4b\u5916\u5176\u4ed6\u6240\u6709\u70b9\u53ef\u53d6\u53ef\u4e0d\u53d6\uff0c\u5bf9\u4e8e\u57fa\u5185\u7684\u70b9\u5982\u679c\u53ef\u4ee5\u66ff\u6362\u67d0\u4e2a\u57fa\u5916\u70b9\u5b83\u7684\u6743\u4e5f\u662f\u8fd9\u4e2a\uff0c\u5176\u4ed6\u70b9\u662f\u6ca1\u6709\u6743\u7684\uff0c\u6240\u6709\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002\u56e0\u4e3a\u57fa\u5185\u6700\u591a\u5c31 log \u4e2a\u6570\uff0c\u53ef\u4ee5insert\u7684\u65f6\u5019\u7ef4\u62a4\u5982\u679cinsert\u5931\u8d25\u5b83\u5305\u542b\u7684\u57fa\u90fd\u662f\u53ef\u66ff\u6362\u7684\uff0c\u7528\u72b6\u538b\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u53ef\u66ff\u6362\u7684\u57fa\u5e95\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <bits/stdc++.h> using namespace std ; const int mod = 1e9 + 7 ; typedef long long ll ; ll qp ( ll a , ll n ) { if ( n < 0 ) return 0 ; ll ans = 1 ; for (; n ; ( a *= a ) %= mod , n >>= 1 ) if ( n & 1 ) ( ans *= a ) %= mod ; return ans ; } ll v ; struct LinearBasis { ll d [ 63 ], o [ 63 ]; void init () { for ( int i = 0 ; i < 64 ; i ++ ) d [ i ] = o [ i ] = 0 ; v = 0 ; } bool ins ( ll x ) { ll tmp = 0 ; bool flag = false ; for ( int i = 62 ; i >= 0 ; i -- ) { if (( x >> i ) & 1 ) { if ( ! d [ i ]) d [ i ] = x , o [ i ] = tmp | ( 1ll << i ), flag = true ; x ^= d [ i ]; tmp |= o [ i ]; if ( ! x ) break ; } } if ( ! flag ) v |= tmp ; return flag ; } } L ; int main () { int n ; while ( scanf ( \"%d\" , & n ) != EOF ) { L . init (); ll x , ans = 0 , cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%lld\" , & x ); if ( ! L . ins ( x )) ans ++ ; } for ( int i = 0 ; i < 63 ; i ++ ) { if ( L . d [ i ]) cnt ++ ; if (( 1ll << i ) & v ) ans ++ ; } printf ( \"%lld \\n \" , ans * qp ( 2 , n - cnt - 1 ) % mod ); } return 0 ; }","title":"H\u3001XOR"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#ipoints-division","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e8c\u7ef4\u70b9\u96c6\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u70b9\u6743 a,b \uff0c\u8981\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f97A\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u548cB\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u6ee1\u8db3 if(i\\in A \\and j\\in B \\and x_i\\ge x_j) y_i\\gt y_j \u4f7f\u5f97\u65b9\u6848\u4e2d \\sum a_i + \\sum b_j \\sum a_i + \\sum b_j \u6700\u5927\u3002 \u9898\u89e3\uff1a\u76f8\u5f53\u4e8e\u6c42\u659c\u7387\u59cb\u7ec8\u4e3a\u6b63\u7684\u6298\u7ebf\uff0c\u4e14\u6298\u7ebf\u7684\u6240\u6709\u7aef\u70b9\u662f\u7ed9\u5b9a\u70b9\uff08\u6298\u7ebf\u4ee5\u4e0a\u90e8\u5206\u4e3aA\u96c6\u5408\uff0c\u5176\u4f59\u4e3aB\u96c6\u5408\uff09\u3002\u53ef\u4ee5\u679a\u4e3eA\u96c6\u5408\u4e2d\u70b9\u7684\u6298\u7ebf\u7aef\u70b9\u3002\u90a3\u4e48\u8003\u8651\u5982\u679c\u70b9\u7684\u6a2a\u5750\u6807\u5747\u4e0d\u76f8\u540c\u4e14\u540e\u9762\u7684\u7eb5\u5750\u6807\u603b\u5927\u4e8e\u524d\u8005\uff0c\u90a3\u4e48\u6298\u7ebf\u662f\u786e\u5b9a\u7684\uff0c\u7684\u6700\u5927\u6743\u503c\u8981\u6c42\u7684\u8bdd\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u79bb\u6563\u5316\u7684\u7eb5\u5750\u6807\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u628a\u5927\u4e8e\u7eb5\u5750\u6807\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6700\u5927\u503c\u3002\u73b0\u5728\u7eb5\u5750\u6807\u53ef\u80fd\u4e0d\u5355\u589e\u7684\u8bdd\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u628a\u5c0f\u4e8e\u5b83\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u5927\u4e8e\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u7b49\u4e8e\u7684\u90e8\u5206\u4fee\u6539\u6210\u73b0\u5728\u53ef\u80fd\u53d6\u5230\u7684\u6700\u5927\u6743\u503c\uff0c\u5373\u67e5\u8be2 [1,y_i-1] [1,y_i-1] \u7684\u6700\u503c\uff0c\u52a0\u4e0aa\u6743\uff0c\u7136\u540e\u518d\u8003\u8651\u6709\u53ef\u80fd\u6709\u5171\u6a2a\u5750\u6807\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u8003\u8651\u52a0\u70b9\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f53\u524d\u70b9\u52a0\u5165\u65f6\u53ef\u4ee5\u53d6\u5230\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f18\u5148\u53f3\u5230\u5de6\uff0c\u6b21\u6392\u4e0b\u5230\u4e0a\u5373\u53ef\uff0c\u56e0\u4e3a\u679a\u4e3e\u7684\u662fA\u96c6\u5408\u4e0a\u7684\u70b9\uff0c\u662f\u53ef\u4ee5\u53d6\u7b49\u7684\uff0c\u540c\u4e00\u6a2a\u5750\u6807\u4e0b\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u89e3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 10 ; int n ; ll val [ maxn << 2 ], lazy [ maxn << 2 ]; int le , re ; ll k ; void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } void build ( int rt , int l , int r ) { val [ rt ] = lazy [ rt ] = 0 ; if ( l == r ) return ; int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); } void update ( int rt , int l , int r ) { if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } int mid = l + r >> 1 ; pushdown ( rt ); if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } ll query ( int rt , int l , int r ) { if ( le <= l && r <= re ) { return val [ rt ]; } int mid = l + r >> 1 ; pushdown ( rt ); ll res = 0 ; if ( le <= mid ) res = max ( res , query ( rt << 1 , l , mid )); if ( re > mid ) res = max ( res , query ( rt << 1 | 1 , mid + 1 , r )); return res ; } vector < int > ypos ; struct po { int x , y , a , b ; bool operator < ( const po & oth ) const { if ( x != oth . x ) return x > oth . x ; return y < oth . y ; } }; void up ( int l , int r , ll kt , int sz ) { // cout << \"update from \" << l << \" to \" << r << \" val \"<< kt << endl; le = l , re = r , k = kt ; update ( 1 , 1 , sz ); } ll qu ( int l , int r , int sz ) { le = l , re = r ; // cout << \"query from \" << l << \" to \" << r << \" ans \" << query(1, 1, sz) << endl; return query ( 1 , 1 , sz ); } int main () { while ( scanf ( \"%d\" , & n ) != EOF ) { vector < po > pi ( n ); ypos . clear (); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%d%d%d%d\" , & pi [ i ]. x , & pi [ i ]. y , & pi [ i ]. a , & pi [ i ]. b ); ypos . push_back ( pi [ i ]. y ); } sort ( ypos . begin (), ypos . end ()); sort ( pi . begin (), pi . end ()); ypos . erase ( unique ( ypos . begin (), ypos . end ()), ypos . end ()); int sz = pi . size () + 5 ; build ( 1 , 1 , sz ); for ( int i = 0 ; i < n ; ++ i ) pi [ i ]. y = lower_bound ( ypos . begin (), ypos . end (), pi [ i ]. y ) - ypos . begin () + 2 ; for ( int i = 0 ; i < n ; ++ i ) { ll mx = qu ( pi [ i ]. y , sz , sz ); up ( pi [ i ]. y , pi [ i ]. y , mx + pi [ i ]. a - qu ( pi [ i ]. y , pi [ i ]. y , sz ), sz ); up ( pi [ i ]. y + 1 , sz , pi [ i ]. b , sz ); up ( 1 , pi [ i ]. y - 1 , pi [ i ]. a , sz ); } printf ( \"%lld \\n \" , qu ( 1 , sz , sz )); } return 0 ; } \u672c\u9898\u5f88\u96be\u8c03\uff0c\u5176\u5b9e\u6700\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u53d6\u7b49\u7684\u6761\u4ef6\uff0c\u8003\u8651\u4ece\u53f3\u5f80\u5de6\u548c\u53d6A\u96c6\u5408\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u53d6\u7b49\u56f0\u96be\u3002","title":"I\u3001Points Division"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#jfraction-comparision","text":"\u9898\u610f\uff1a\u5224\u65ad \\frac{x}{a} \\frac{x}{a} \u4e0e \\frac{y}{b} \\frac{y}{b} \u7684\u5927\u5c0f \u9898\u89e3\uff1a\u6700\u7b80\u5355\u6ca1\u6709\u601d\u7ef4\u96be\u5ea6\u7684\u5f53\u7136\u662f\u6539\u6210\u4e58\u6cd5\u4e0a\u5927\u6570\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u53d6\u4f59\u6570\u548c\u5546\u4e24\u90e8\u5206\u5206\u522b\u6bd4\u8f83\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import java.io.OutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.PrintWriter ; import java.util.Scanner ; import java.math.BigInteger ; /** * Built using CHelper plug-in * Actual solution is at the top * * @author badcw */ public class Main { public static void main ( String [] args ) { InputStream inputStream = System . in ; OutputStream outputStream = System . out ; Scanner in = new Scanner ( inputStream ); PrintWriter out = new PrintWriter ( outputStream ); Task solver = new Task (); solver . solve ( 1 , in , out ); out . close (); } static class Task { public void solve ( int testNumber , Scanner in , PrintWriter out ) { while ( in . hasNext ()) { BigInteger x = in . nextBigInteger (); BigInteger y = in . nextBigInteger (); BigInteger a = in . nextBigInteger (); BigInteger b = in . nextBigInteger (); BigInteger tt = x . multiply ( b ); BigInteger tt2 = y . multiply ( a ); if ( tt . compareTo ( tt2 ) == 0 ) out . println ( \"=\" ); else if ( tt . compareTo ( tt2 ) < 0 ) out . println ( \"<\" ); else out . println ( \">\" ); } } } }","title":"J\u3001Fraction Comparision"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09/","text":"Name Date Solved A B C D E F G H I J K 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09 2019/8/8 9/11 O O O O \u00d8 \u00d8 . \u00d8 \u00d8 O . tag Link a \u6700\u5c0f\u8868\u793a\u6cd5 b \u591a\u9879\u5f0f\u89c4\u7ea6 c \u778e\u641e d \u778e\u641e e \u7ebf\u6bb5\u6811 f \u79bb\u7ebf\u778e\u641e h \u6570\u4f4ddp i\u8ba1\u6570 A. String Link \u5c06\u4e00\u4e2a\u4e32\u5206\u5272\u6210\u591a\u4e2a\u6700\u5c0f\u8868\u793a\u4e32\uff0c\u6c42\u62c6\u5206\u65b9\u6848 \u7ebf\u6027\u63a8\u6700\u5c0f\u8868\u793a\u6cd5\u5373\u53ef B. Irreducible Polynomial Link \u6c42\u591a\u9879\u5f0f\u662f\u5426\u80fd\u5728\u5b9e\u6570\u57df\u4e0a\u89c4\u7ea6 \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u5224\u522b\u5f0f\u4e3a\u8d1f\u6570\u7684\u4e8c\u6b21\u591a\u9879\u5f0f\u65e0\u6cd5\u89c4\u7ea6\uff0c\u5176\u4ed6\u90fd\u53ef\u4ee5\u3002\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u3002\u8c8c\u4f3c\u662f\u6709\u5171\u8f6d\u8d1f\u6570\u6839\u3002 C. Governing sand Link \u6709\u4e00\u4e9b\u6743\u503c\uff0c\u5220\u9664\u4e00\u79cd\u6743\u503c\u9700\u8981\u4ee3\u4ef7\uff0c\u6c42\u4f7f\u6700\u5927\u6743\u503c\u4e2a\u6570\u8d85\u8fc7\u603b\u6570\u4e00\u534a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u8f93\u5165\u4e3an\u79cd\u6743\u503c\uff0c\u6bcf\u79cdPHC\uff0c\u8868\u793a\u6709P\u4e2aH\uff0c\u5220\u9664\u4ee3\u4ef7\u4e3aC\u3002 \u5bf9\u4e8e\u6bcf\u79cd\u6743\u503c\uff0c\u679a\u4e3e\u5b83\u4e3a\u6700\u503c\u65f6\u4ed8\u51fa\u7684\u4ee3\u4ef7\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\u9700\u8981\u5220\u9664\u7684\u662f\u5927\u4e8e\u5b83\u7684\u6743\u503c\u548c\u5927\u4e8e\u5b83\u6570\u91cf\u4e00\u534a\u7684\u6700\u5c0f\u6743\u503c\uff0c\u7ef4\u62a4\u4e00\u4e0b\u524d\u7f00\u5e8f\u5217\u5373\u53ef\u3002\u7531\u4e8eC\u8303\u56f4\u8f83\u5c0f\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e2aC\u7684\u524d\u7f00\u3002 D. Number Link \u7ed9n\u548cp\uff0c\u6c42\u4efb\u610f\u4e00\u4e2an\u4f4d\u6570\u80fd\u88abp\u6574\u9664\uff08p\u662f\u7d20\u6570\uff09 \u672b\u5c3e\u52a00\u5373\u53ef E. Find the median Link \u7ed9\u4e00\u4e2a\u7a7a\u5e8f\u5217\uff0c\u6bcf\u6b21\u5f80\u91cc\u9762\u6dfb\u52a0 [l, r] \uff0c\u6bcf\u6b21\u8f93\u51fa\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\uff08n\u4e2a\u6570\u8f93\u51fa x[n/2] \uff09 \u9996\u5148\u5bf9\u8be2\u95ee\u79bb\u7ebf\uff0c\u5c06\u8be2\u95ee\u7684\u7aef\u70b9\u79bb\u6563\u5316\u5e76\u5efa\u7acb\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u5373\u53ef\u3002 \u67e5\u8be2\u65f6\u7c7b\u4f3c\u4e3b\u5e2d\u6811\u67e5\u8be2k\u5927\uff0c\u4f18\u5148\u5de6\u5b50\u6811\u5373\u53ef\uff0c\u5355\u4e2a\u533a\u95f4\u5185\u9700\u8981\u4ed4\u7ec6\u8ba8\u8bba\u7b54\u6848\u3002","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09/#tag","text":"a \u6700\u5c0f\u8868\u793a\u6cd5 b \u591a\u9879\u5f0f\u89c4\u7ea6 c \u778e\u641e d \u778e\u641e e \u7ebf\u6bb5\u6811 f \u79bb\u7ebf\u778e\u641e h \u6570\u4f4ddp i\u8ba1\u6570","title":"tag"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09/#a-string","text":"\u5c06\u4e00\u4e2a\u4e32\u5206\u5272\u6210\u591a\u4e2a\u6700\u5c0f\u8868\u793a\u4e32\uff0c\u6c42\u62c6\u5206\u65b9\u6848 \u7ebf\u6027\u63a8\u6700\u5c0f\u8868\u793a\u6cd5\u5373\u53ef","title":"A. String"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09/#b-irreducible-polynomial","text":"\u6c42\u591a\u9879\u5f0f\u662f\u5426\u80fd\u5728\u5b9e\u6570\u57df\u4e0a\u89c4\u7ea6 \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u5224\u522b\u5f0f\u4e3a\u8d1f\u6570\u7684\u4e8c\u6b21\u591a\u9879\u5f0f\u65e0\u6cd5\u89c4\u7ea6\uff0c\u5176\u4ed6\u90fd\u53ef\u4ee5\u3002\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u3002\u8c8c\u4f3c\u662f\u6709\u5171\u8f6d\u8d1f\u6570\u6839\u3002","title":"B. Irreducible Polynomial"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09/#c-governing-sand","text":"\u6709\u4e00\u4e9b\u6743\u503c\uff0c\u5220\u9664\u4e00\u79cd\u6743\u503c\u9700\u8981\u4ee3\u4ef7\uff0c\u6c42\u4f7f\u6700\u5927\u6743\u503c\u4e2a\u6570\u8d85\u8fc7\u603b\u6570\u4e00\u534a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u8f93\u5165\u4e3an\u79cd\u6743\u503c\uff0c\u6bcf\u79cdPHC\uff0c\u8868\u793a\u6709P\u4e2aH\uff0c\u5220\u9664\u4ee3\u4ef7\u4e3aC\u3002 \u5bf9\u4e8e\u6bcf\u79cd\u6743\u503c\uff0c\u679a\u4e3e\u5b83\u4e3a\u6700\u503c\u65f6\u4ed8\u51fa\u7684\u4ee3\u4ef7\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\u9700\u8981\u5220\u9664\u7684\u662f\u5927\u4e8e\u5b83\u7684\u6743\u503c\u548c\u5927\u4e8e\u5b83\u6570\u91cf\u4e00\u534a\u7684\u6700\u5c0f\u6743\u503c\uff0c\u7ef4\u62a4\u4e00\u4e0b\u524d\u7f00\u5e8f\u5217\u5373\u53ef\u3002\u7531\u4e8eC\u8303\u56f4\u8f83\u5c0f\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e2aC\u7684\u524d\u7f00\u3002","title":"C.  Governing sand"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09/#d-number","text":"\u7ed9n\u548cp\uff0c\u6c42\u4efb\u610f\u4e00\u4e2an\u4f4d\u6570\u80fd\u88abp\u6574\u9664\uff08p\u662f\u7d20\u6570\uff09 \u672b\u5c3e\u52a00\u5373\u53ef","title":"D. Number"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e03\u573a\uff09/#e-find-the-median","text":"\u7ed9\u4e00\u4e2a\u7a7a\u5e8f\u5217\uff0c\u6bcf\u6b21\u5f80\u91cc\u9762\u6dfb\u52a0 [l, r] \uff0c\u6bcf\u6b21\u8f93\u51fa\u5f53\u524d\u7684\u4e2d\u4f4d\u6570\uff08n\u4e2a\u6570\u8f93\u51fa x[n/2] \uff09 \u9996\u5148\u5bf9\u8be2\u95ee\u79bb\u7ebf\uff0c\u5c06\u8be2\u95ee\u7684\u7aef\u70b9\u79bb\u6563\u5316\u5e76\u5efa\u7acb\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u5373\u53ef\u3002 \u67e5\u8be2\u65f6\u7c7b\u4f3c\u4e3b\u5e2d\u6811\u67e5\u8be2k\u5927\uff0c\u4f18\u5148\u5de6\u5b50\u6811\u5373\u53ef\uff0c\u5355\u4e2a\u533a\u95f4\u5185\u9700\u8981\u4ed4\u7ec6\u8ba8\u8bba\u7b54\u6848\u3002","title":"E.  Find the median"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09/","text":"Name Date Solved A B C D E F G H I J 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09 2019/7/25 6/10 . O . \u00d8 . \u00d8 \u00d8 O . \u00d8 B. Crazy Binary String Link \u7ed9\u4e00\u4e2a01\u4e32\u6c42\u6700\u957f\u768401\u76f8\u7b49\u7684\u5b50\u4e32\u548c\u5b50\u5e8f\u5217\u957f\u5ea6 \u5b50\u4e32\u80af\u5b9a\u662f max(num(0),num(1)) max(num(0),num(1)) \uff0c\u5b50\u5e8f\u5217\u76f4\u63a5\u8bb0\u5f55\u524d\u7f0001\u4e2a\u6570\u5dee\uff0c\u51fa\u73b0\u8fc7\u8bf4\u660e\u8be5\u5b50\u5e8f\u5217\u662f01\u5e73\u8861\u7684\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int a [ maxn ]; int pre [ maxn ]; int pre1 [ maxn ]; map < int , int > pos ; int main ( int argc , char * argv []) { int n ; scanf ( \"%d\" , & n ); int tt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%01d\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + ( a [ i ] == 0 ); pre1 [ i ] = pre1 [ i - 1 ] + ( a [ i ] == 1 ); if ( pre [ i ] == pre1 [ i ]) tt = max ( tt , i ); else { if ( pos [ pre [ i ] - pre1 [ i ]]) tt = max ( tt , i - pos [ pre [ i ] - pre1 [ i ]]); else pos [ pre [ i ] - pre1 [ i ]] = i ; } } printf ( \"%d %d \\n \" , tt , min ( pre [ n ], pre1 [ n ]) * 2 ); return 0 ; } D. Big Integer Link 111...111={10^n-1 \\over 9}\u22610\\ mod\\ p 111...111={10^n-1 \\over 9}\u22610\\ mod\\ p \u6709 10^n\u22611 \\ mod\\ 9p 10^n\u22611 \\ mod\\ 9p \uff0c\u5176\u4e2d n n \u662f 1 \\over p 1 \\over p \u7684\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u4e00\u4e2a\u6700\u5c0f\u7684 A(n) A(n) \u80fd\u88abp\u6574\u9664\uff0cBSGS\u6c42\u51fan\u7684\u503c\u3002(\u8fd9\u91cc\u6211\u6c42\u7684\u662f 10^n\u22611 \\ mod\\ p 10^n\u22611 \\ mod\\ p \u7136\u540e\u7279\u5224\u4e863\uff0c\u56e0\u4e3a3\u548c9\u4e0d\u4e92\u8d28\u6240\u4ee5\u7b97\u51fa\u6765\u7684n\u4e0d\u5bf9)\uff0c\u6240\u6709\u7684\u8d28\u6570\u4e2d\u53ea\u67092,5\u65e0\u89e3\uff0c\u5176\u4f59\u5747\u6709\u89e3\u3002 \u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u6709\u4e00\u4e2a\u6700\u5c0f\u7684\u6574\u6570x(\u4e0a\u4e00\u6bb5\u7684n)\u6ee1\u8db3 A(x)\u22610 \\ mod \\ p A(x)\u22610 \\ mod \\ p \uff0c\u6c42 1\u2264i\u2264n, 1\u2264j\u2264m, A(i^j)\u22610(mod\\ p) 1\u2264i\u2264n, 1\u2264j\u2264m, A(i^j)\u22610(mod\\ p) \u7684\u6570\u91cf\uff0c\u663e\u7136 i^j i^j \u9700\u8981\u662fx\u7684\u500d\u6570\u3002 \u5bf9x\u505a\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u6709 x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} <span><span class=\"MathJax_Preview\">x=p_1^{r_1}p_2^{r_2}...p_n^{r_n}</span><script type=\"math/tex\">x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} \u5bf9\u4e8e\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684 i i \uff0c\u5b83\u5fc5\u987b\u5305\u542bx\u7684\u6bcf\u4e00\u4e2a\u8d28\u56e0\u6570\u81f3\u5c11\u4e00\u6b21\u3002j\u56fa\u5b9a\u7684\u65f6\u5019\uff0ci\u5fc5\u987b\u662f g=p_1^{\\lceil {k_1 \\over j}\\rceil}p_2^{\\lceil {k_2 \\over j}\\rceil}p_n^{\\lceil {k_n \\over j}\\rceil} g=p_1^{\\lceil {k_1 \\over j}\\rceil}p_2^{\\lceil {k_2 \\over j}\\rceil}p_n^{\\lceil {k_n \\over j}\\rceil} \u7684\u500d\u6570\uff0c\u5171\u6709n/g\u4e2a\u5408\u6cd5\u7684i\uff0c\u5e76\u4e14j\u679a\u4e3e\u4e0d\u8d85\u8fc730 \u8d5b\u4e2d\u6ca1A\u6b7b\u4e8e\u5c11\u6253\u4e00\u4e2a\u62ec\u53f7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; int qp ( int a , int n , int mod ) { long long ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int BSGS ( int a , int b , int p ) { map < int , int > hash ; b %= p ; int t = ( int ) sqrt ( p ) + 1 ; for ( int j = 0 ; j < t ; j ++ ) { int val = 1ll * b * qp ( a , j , p ) % p ; hash [ val ] = j ; } a = qp ( a , t , p ); if ( a == 0 ) return b == 0 ? 1 : - 1 ; for ( int i = 0 ; i <= t ; i ++ ) { int val = qp ( a , i , p ); int j = hash . find ( val ) == hash . end () ? - 1 : hash [ val ]; if ( j >= 0 && i * t - j > 0 ) return i * t - j ; } return - 1 ; } int p , n , m , a [ 40 ], b [ 40 ]; ll ans ; vector < int > ve ; void dec_factor ( int x ) { ve . clear (); for ( int i = 2 ; i * i <= x ; i ++ ) if ( x % i == 0 ) { int cnt = 0 ; while ( x % i == 0 ) { x /= i ; cnt ++ ; } a [ ve . size ()] = cnt ; ve . push_back ( i ); } if ( x > 1 ) { a [ ve . size ()] = 1 ; ve . push_back ( x ); } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d%d\" , & p , & n , & m ); int x = BSGS ( 10 , 1 , p ); if ( p == 2 || p == 5 ) { printf ( \"0 \\n \" ); continue ; } if ( p == 3 ) x = 3 ; dec_factor ( x ); ans = 0 ; int now = x ; for ( int i = 0 ; i < ve . size (); i ++ ) b [ i ] = a [ i ]; for ( int i = 1 ; i <= m ; i ++ ) { bool flag = true ; for ( int j = 0 ; j < ve . size (); j ++ ) { while ( b [ j ] * i >= a [ j ]) { b [ j ] -- ; now /= ve [ j ]; } b [ j ] ++ ; now *= ve [ j ]; if ( b [ j ] > 1 ) flag = false ; } if ( flag ) { int cnt = ( m - i + 1 ); ans += 1ll * cnt * ( n / now ); break ; } ans += n / now ; } printf ( \"%lld \\n \" , ans ); } return 0 ; } F. Planting Trees Link \u7ed9\u4e00\u77e9\u9635\uff0c\u6c42\u6700\u5927\u7684\u6781\u5dee\u4e0d\u8d85\u8fc7m\u7684\u77e9\u9635\u5927\u5c0f\u3002 \u6697\u793a n^3 n^3 \u590d\u6742\u5ea6\uff0c\u76f4\u63a5\u679a\u4e3e\u4e0a\u4e0b\u7aef\u7684\u540c\u65f6\u7ef4\u62a4\u6240\u6709\u5217\u7684\u6700\u5927\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5355\u8c03\u961f\u5217\u8dd1\u5bf9\u4e8e\u6bcf\u4e2a l l \u7684\u6700\u53f3\u7aef r r \u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aF.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-26 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 505 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; int mat [ maxn ][ maxn ]; int mn [ maxn ], mx [ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { scanf ( \"%d\" , & mat [ i ][ j ]); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { mn [ j ] = 0x3f3f3f3f ; mx [ j ] = 0 ; } for ( int j = i ; j <= n ; ++ j ) { for ( int k = 1 ; k <= n ; ++ k ) { mn [ k ] = min ( mn [ k ], mat [ j ][ k ]); mx [ k ] = max ( mx [ k ], mat [ j ][ k ]); } int r = 1 ; deque < int > mxdq , mndq ; for ( int l = 1 ; l <= n ; ++ l ) { if ( res >= ( n - l + 1 ) * ( j - i + 1 )) break ; if ( r < l ) r = l ; while ( mxdq . size () && mxdq . front () < l ) mxdq . pop_front (); while ( mndq . size () && mndq . front () < l ) mndq . pop_front (); int mxtmp = - 1 , mntmp = 0x3f3f3f3f ; if ( mxdq . size ()) mxtmp = mx [ mxdq . front ()]; if ( mndq . size ()) mntmp = mn [ mndq . front ()]; while ( r <= n && max ( mx [ r ], mxtmp ) - min ( mn [ r ], mntmp ) <= m ) { while ( mxdq . size () && mx [ mxdq . back ()] < mx [ r ]) mxdq . pop_back (); mxdq . push_back ( r ); mxtmp = mx [ mxdq . front ()]; while ( mndq . size () && mn [ mndq . back ()] > mn [ r ]) mndq . pop_back (); mndq . push_back ( r ); mntmp = mn [ mndq . front ()]; r ++ ; } res = max ( res , ( r - l ) * ( j - i + 1 )); } } } printf ( \"%d \\n \" , res ); } return 0 ; } H. Magic Line Link \u7ed9n\u4e2a\u4e8c\u7ef4\u70b9\uff0c\u6c42\u4e00\u6761\u76f4\u7ebf\u628a\u8fd9\u4e9b\u70b9\u5206\u6210\u76f8\u7b49\u7684\u4e24\u90e8\u5206\u3002\u6ce8\u610f\u76f4\u7ebf\u4e0d\u80fd\u7a7f\u8fc7\u7ed9\u5b9a\u70b9\u3002 \u8003\u8651\u6309\u6a2a\u5750\u6807\u6392\u5e8f\u540e\uff0c\u6570\u91cf\u4e2d\u70b9\u7684\u6a2a\u5750\u6807\u5982\u679c\u4e0d\u91cd\u53e0\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\u4e00\u6761\u5782\u76f4\u4e8ex\u7684\u76f4\u7ebf\u5206\u5272\uff0c\u5426\u5219\u53ef\u4ee5\u505a\u4e00\u6761\u5728\u4e2d\u95f4\u70b9\u7a0d\u5fae\u503e\u659c\u4e00\u70b9\u7684\u76f4\u7ebf\u5373\u53ef\u3002\u6ce8\u91ca\u4ee3\u7801\u662fcheck\u90e8\u5206\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #include <bits/stdc++.h> using namespace std ; typedef double db ; const db EPS = 1e-9 ; inline int sign ( db a ) { return a <- EPS ?- 1 : a > EPS ; } inline int cmp ( db a , db b ) { return sign ( a - b ); } struct P { db x , y ; P (){} P ( db _x , db _y ) : x ( _x ), y ( _y ){} P operator + ( P p ) { return { x + p . x , y + p . y }; } P operator - ( P p ) { return { x - p . x , y - p . y }; } P operator * ( db d ) { return { x * d , y * d }; } P operator / ( db d ) { return { x / d , y / d }; } db abs2 () { return x * x + y * y ; } db abs () { return sqrt ( abs2 ()); } db distTo ( P p ) { return ( * this - p ). abs (); } P unit () { return * this / abs (); } P rot90 () { return P ( - y , x ); } }; //#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y)) //#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3)) //P x[1005]; //P p,q; const int maxn = 1005 ; int n ; pair < int , int > a [ maxn ]; int main () { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & a [ i ]. first , & a [ i ]. second ); // x[i].x = a[i].first; // x[i].y = a[i].second; } sort ( a + 1 , a + 1 + n ); if ( a [ n / 2 ]. first != a [ n / 2 + 1 ]. first ) { printf ( \"%d 1000000000 %d -1000000000 \\n \" , a [ n / 2 ]. first , a [ n / 2 ]. first + 1 ); // p.x = a[n / 2].first, p.y = 1000000000; // q.x = a[n / 2].first + 1, q.y = -1000000000; } else { int t = a [ n / 2 ]. second + a [ n / 2 + 1 ]. second ; printf ( \"%d %d %d -500000000 \\n \" , a [ n / 2 ]. first - 1 , 500000000 + t , a [ n / 2 ]. first + 1 ); // p.x = a[n / 2].first - 1, p.y = 500000000 + t; // q.x = a[n / 2].first + 1, q.y = -500000000; } // int cnt1=0,cnt2=0; // for(int i=1;i<=n;i++) // { // if(crossOp(x[i],p,q)==-1) // cnt1++; // else // cnt2++; // } // printf(\"%d %d\\n\",cnt1,cnt2); // int res = a[n / 2].first; } return 0 ; } /* 10 8 0 0 0 -1 -1 0 -1 1 -1 2 -1 3 -1 -1 -2 0 4 0 0 1 0 0 1 0 -1 4 0 1 -1 0 1 0 0 -1 */ J. LRU management Link \u6309\u9898\u610f\u6a21\u62df\u4e00\u4e2a\u94fe\u8868\uff0c\u8d5b\u4e2d\u7684splay\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5199\u6302\u4e86\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0amap+list\u3002\u5177\u4f53\u6765\u8bf4\u6709\uff1a \u5f80\u94fe\u8868\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u952e\u503c\u5bf9 \u5220\u9664\u94fe\u8868\u4e2d\u4e00\u4e2a\u952e\u503c\u5bf9 \u67e5\u8be2\u94fe\u8868\u4e2d\u67d0\u4e2a\u952e\u7684\u503c \u67e5\u8be2\u4e00\u4e2a\u952e\u7684\u4e0b\u4e00\u4e2a\u6216\u8005\u4e0a\u4e00\u4e2a\u952e\u7684\u503c \u5220\u9664\u94fe\u8868\u9996\u90e8\u952e\u503c\u5bf9 \u8fd9\u51e0\u79cd\u64cd\u4f5c\uff0c\u6a21\u62df\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } unordered_map < ll , pair < list < ll >:: iterator , int > > mp ; list < ll > ls ; int sz ; int T ; int main ( int argc , char * argv []) { // ios::sync_with_stdio(0); // cin.tie(0); // cout.tie(0); scan ( T ); int n , m ; while ( T -- ) { scan ( m ), scan ( n ); // cin >> m >> n; ls . clear (); mp . clear (); sz = 0 ; int tp , val , s ; // string s; for ( int i = 1 ; i <= m ; ++ i ) { scan ( tp ), scan ( s ), scan ( val ); // cin >> tp >> s >> val; if ( tp == 0 ) { if ( mp . count ( s )) { val = mp [ s ]. second ; ls . erase ( mp [ s ]. first ); mp . erase ( s ); sz -- ; } if ( sz == n ) { mp . erase ( * ls . begin ()); ls . pop_front (); sz -- ; } ls . push_back ( s ); mp [ s ] = make_pair ( prev ( ls . end ()), val ); sz ++ ; out ( val ); putchar ( '\\n' ); // cout << val << endl; } else { if ( mp . count ( s ) == 0 ) { puts ( \"Invalid\" ); // cout << \"Invalid\" << endl; } else { if ( val == 0 ) { out ( mp [ s ]. second ); putchar ( '\\n' ); // cout << mp[s].second << endl; } else if ( val == 1 ) { if ( next ( mp [ s ]. first ) != ls . end ()) { out ( mp [ * next ( mp [ s ]. first )]. second ); putchar ( '\\n' ); } // cout << mp[*next(mp[s].first)].second << endl; else puts ( \"Invalid\" ); } else { if ( prev ( mp [ s ]. first ) != ls . end ()) { out ( mp [ * prev ( mp [ s ]. first )]. second ); putchar ( '\\n' ); } // cout << mp[*prev(mp[s].first)].second << endl; else puts ( \"Invalid\" ); } } } } } return 0 ; }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09/#b-crazy-binary-string","text":"\u7ed9\u4e00\u4e2a01\u4e32\u6c42\u6700\u957f\u768401\u76f8\u7b49\u7684\u5b50\u4e32\u548c\u5b50\u5e8f\u5217\u957f\u5ea6 \u5b50\u4e32\u80af\u5b9a\u662f max(num(0),num(1)) max(num(0),num(1)) \uff0c\u5b50\u5e8f\u5217\u76f4\u63a5\u8bb0\u5f55\u524d\u7f0001\u4e2a\u6570\u5dee\uff0c\u51fa\u73b0\u8fc7\u8bf4\u660e\u8be5\u5b50\u5e8f\u5217\u662f01\u5e73\u8861\u7684\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int a [ maxn ]; int pre [ maxn ]; int pre1 [ maxn ]; map < int , int > pos ; int main ( int argc , char * argv []) { int n ; scanf ( \"%d\" , & n ); int tt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%01d\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + ( a [ i ] == 0 ); pre1 [ i ] = pre1 [ i - 1 ] + ( a [ i ] == 1 ); if ( pre [ i ] == pre1 [ i ]) tt = max ( tt , i ); else { if ( pos [ pre [ i ] - pre1 [ i ]]) tt = max ( tt , i - pos [ pre [ i ] - pre1 [ i ]]); else pos [ pre [ i ] - pre1 [ i ]] = i ; } } printf ( \"%d %d \\n \" , tt , min ( pre [ n ], pre1 [ n ]) * 2 ); return 0 ; }","title":"B. Crazy Binary String"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09/#d-big-integer","text":"111...111={10^n-1 \\over 9}\u22610\\ mod\\ p 111...111={10^n-1 \\over 9}\u22610\\ mod\\ p \u6709 10^n\u22611 \\ mod\\ 9p 10^n\u22611 \\ mod\\ 9p \uff0c\u5176\u4e2d n n \u662f 1 \\over p 1 \\over p \u7684\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u4e00\u4e2a\u6700\u5c0f\u7684 A(n) A(n) \u80fd\u88abp\u6574\u9664\uff0cBSGS\u6c42\u51fan\u7684\u503c\u3002(\u8fd9\u91cc\u6211\u6c42\u7684\u662f 10^n\u22611 \\ mod\\ p 10^n\u22611 \\ mod\\ p \u7136\u540e\u7279\u5224\u4e863\uff0c\u56e0\u4e3a3\u548c9\u4e0d\u4e92\u8d28\u6240\u4ee5\u7b97\u51fa\u6765\u7684n\u4e0d\u5bf9)\uff0c\u6240\u6709\u7684\u8d28\u6570\u4e2d\u53ea\u67092,5\u65e0\u89e3\uff0c\u5176\u4f59\u5747\u6709\u89e3\u3002 \u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u6709\u4e00\u4e2a\u6700\u5c0f\u7684\u6574\u6570x(\u4e0a\u4e00\u6bb5\u7684n)\u6ee1\u8db3 A(x)\u22610 \\ mod \\ p A(x)\u22610 \\ mod \\ p \uff0c\u6c42 1\u2264i\u2264n, 1\u2264j\u2264m, A(i^j)\u22610(mod\\ p) 1\u2264i\u2264n, 1\u2264j\u2264m, A(i^j)\u22610(mod\\ p) \u7684\u6570\u91cf\uff0c\u663e\u7136 i^j i^j \u9700\u8981\u662fx\u7684\u500d\u6570\u3002 \u5bf9x\u505a\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u6709 x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} <span><span class=\"MathJax_Preview\">x=p_1^{r_1}p_2^{r_2}...p_n^{r_n}</span><script type=\"math/tex\">x=p_1^{r_1}p_2^{r_2}...p_n^{r_n} \u5bf9\u4e8e\u80fd\u6ee1\u8db3\u6761\u4ef6\u7684 i i \uff0c\u5b83\u5fc5\u987b\u5305\u542bx\u7684\u6bcf\u4e00\u4e2a\u8d28\u56e0\u6570\u81f3\u5c11\u4e00\u6b21\u3002j\u56fa\u5b9a\u7684\u65f6\u5019\uff0ci\u5fc5\u987b\u662f g=p_1^{\\lceil {k_1 \\over j}\\rceil}p_2^{\\lceil {k_2 \\over j}\\rceil}p_n^{\\lceil {k_n \\over j}\\rceil} g=p_1^{\\lceil {k_1 \\over j}\\rceil}p_2^{\\lceil {k_2 \\over j}\\rceil}p_n^{\\lceil {k_n \\over j}\\rceil} \u7684\u500d\u6570\uff0c\u5171\u6709n/g\u4e2a\u5408\u6cd5\u7684i\uff0c\u5e76\u4e14j\u679a\u4e3e\u4e0d\u8d85\u8fc730 \u8d5b\u4e2d\u6ca1A\u6b7b\u4e8e\u5c11\u6253\u4e00\u4e2a\u62ec\u53f7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; int qp ( int a , int n , int mod ) { long long ans = 1 , base = a ; while ( n ) { if ( n & 1 ) ( ans *= base ) %= mod ; ( base *= base ) %= mod ; n >>= 1 ; } return ans ; } int BSGS ( int a , int b , int p ) { map < int , int > hash ; b %= p ; int t = ( int ) sqrt ( p ) + 1 ; for ( int j = 0 ; j < t ; j ++ ) { int val = 1ll * b * qp ( a , j , p ) % p ; hash [ val ] = j ; } a = qp ( a , t , p ); if ( a == 0 ) return b == 0 ? 1 : - 1 ; for ( int i = 0 ; i <= t ; i ++ ) { int val = qp ( a , i , p ); int j = hash . find ( val ) == hash . end () ? - 1 : hash [ val ]; if ( j >= 0 && i * t - j > 0 ) return i * t - j ; } return - 1 ; } int p , n , m , a [ 40 ], b [ 40 ]; ll ans ; vector < int > ve ; void dec_factor ( int x ) { ve . clear (); for ( int i = 2 ; i * i <= x ; i ++ ) if ( x % i == 0 ) { int cnt = 0 ; while ( x % i == 0 ) { x /= i ; cnt ++ ; } a [ ve . size ()] = cnt ; ve . push_back ( i ); } if ( x > 1 ) { a [ ve . size ()] = 1 ; ve . push_back ( x ); } } int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d%d\" , & p , & n , & m ); int x = BSGS ( 10 , 1 , p ); if ( p == 2 || p == 5 ) { printf ( \"0 \\n \" ); continue ; } if ( p == 3 ) x = 3 ; dec_factor ( x ); ans = 0 ; int now = x ; for ( int i = 0 ; i < ve . size (); i ++ ) b [ i ] = a [ i ]; for ( int i = 1 ; i <= m ; i ++ ) { bool flag = true ; for ( int j = 0 ; j < ve . size (); j ++ ) { while ( b [ j ] * i >= a [ j ]) { b [ j ] -- ; now /= ve [ j ]; } b [ j ] ++ ; now *= ve [ j ]; if ( b [ j ] > 1 ) flag = false ; } if ( flag ) { int cnt = ( m - i + 1 ); ans += 1ll * cnt * ( n / now ); break ; } ans += n / now ; } printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"D. Big Integer"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09/#f-planting-trees","text":"\u7ed9\u4e00\u77e9\u9635\uff0c\u6c42\u6700\u5927\u7684\u6781\u5dee\u4e0d\u8d85\u8fc7m\u7684\u77e9\u9635\u5927\u5c0f\u3002 \u6697\u793a n^3 n^3 \u590d\u6742\u5ea6\uff0c\u76f4\u63a5\u679a\u4e3e\u4e0a\u4e0b\u7aef\u7684\u540c\u65f6\u7ef4\u62a4\u6240\u6709\u5217\u7684\u6700\u5927\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5355\u8c03\u961f\u5217\u8dd1\u5bf9\u4e8e\u6bcf\u4e2a l l \u7684\u6700\u53f3\u7aef r r \u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aF.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-26 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 505 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; int mat [ maxn ][ maxn ]; int mn [ maxn ], mx [ maxn ]; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { scanf ( \"%d\" , & mat [ i ][ j ]); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { mn [ j ] = 0x3f3f3f3f ; mx [ j ] = 0 ; } for ( int j = i ; j <= n ; ++ j ) { for ( int k = 1 ; k <= n ; ++ k ) { mn [ k ] = min ( mn [ k ], mat [ j ][ k ]); mx [ k ] = max ( mx [ k ], mat [ j ][ k ]); } int r = 1 ; deque < int > mxdq , mndq ; for ( int l = 1 ; l <= n ; ++ l ) { if ( res >= ( n - l + 1 ) * ( j - i + 1 )) break ; if ( r < l ) r = l ; while ( mxdq . size () && mxdq . front () < l ) mxdq . pop_front (); while ( mndq . size () && mndq . front () < l ) mndq . pop_front (); int mxtmp = - 1 , mntmp = 0x3f3f3f3f ; if ( mxdq . size ()) mxtmp = mx [ mxdq . front ()]; if ( mndq . size ()) mntmp = mn [ mndq . front ()]; while ( r <= n && max ( mx [ r ], mxtmp ) - min ( mn [ r ], mntmp ) <= m ) { while ( mxdq . size () && mx [ mxdq . back ()] < mx [ r ]) mxdq . pop_back (); mxdq . push_back ( r ); mxtmp = mx [ mxdq . front ()]; while ( mndq . size () && mn [ mndq . back ()] > mn [ r ]) mndq . pop_back (); mndq . push_back ( r ); mntmp = mn [ mndq . front ()]; r ++ ; } res = max ( res , ( r - l ) * ( j - i + 1 )); } } } printf ( \"%d \\n \" , res ); } return 0 ; }","title":"F. Planting Trees"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09/#h-magic-line","text":"\u7ed9n\u4e2a\u4e8c\u7ef4\u70b9\uff0c\u6c42\u4e00\u6761\u76f4\u7ebf\u628a\u8fd9\u4e9b\u70b9\u5206\u6210\u76f8\u7b49\u7684\u4e24\u90e8\u5206\u3002\u6ce8\u610f\u76f4\u7ebf\u4e0d\u80fd\u7a7f\u8fc7\u7ed9\u5b9a\u70b9\u3002 \u8003\u8651\u6309\u6a2a\u5750\u6807\u6392\u5e8f\u540e\uff0c\u6570\u91cf\u4e2d\u70b9\u7684\u6a2a\u5750\u6807\u5982\u679c\u4e0d\u91cd\u53e0\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\u4e00\u6761\u5782\u76f4\u4e8ex\u7684\u76f4\u7ebf\u5206\u5272\uff0c\u5426\u5219\u53ef\u4ee5\u505a\u4e00\u6761\u5728\u4e2d\u95f4\u70b9\u7a0d\u5fae\u503e\u659c\u4e00\u70b9\u7684\u76f4\u7ebf\u5373\u53ef\u3002\u6ce8\u91ca\u4ee3\u7801\u662fcheck\u90e8\u5206\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #include <bits/stdc++.h> using namespace std ; typedef double db ; const db EPS = 1e-9 ; inline int sign ( db a ) { return a <- EPS ?- 1 : a > EPS ; } inline int cmp ( db a , db b ) { return sign ( a - b ); } struct P { db x , y ; P (){} P ( db _x , db _y ) : x ( _x ), y ( _y ){} P operator + ( P p ) { return { x + p . x , y + p . y }; } P operator - ( P p ) { return { x - p . x , y - p . y }; } P operator * ( db d ) { return { x * d , y * d }; } P operator / ( db d ) { return { x / d , y / d }; } db abs2 () { return x * x + y * y ; } db abs () { return sqrt ( abs2 ()); } db distTo ( P p ) { return ( * this - p ). abs (); } P unit () { return * this / abs (); } P rot90 () { return P ( - y , x ); } }; //#define cross(p1,p2,p3) ((p2.x-p1.x)*(p3.y-p1.y)-(p3.x-p1.x)*(p2.y-p1.y)) //#define crossOp(p1,p2,p3) sign(cross(p1,p2,p3)) //P x[1005]; //P p,q; const int maxn = 1005 ; int n ; pair < int , int > a [ maxn ]; int main () { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & a [ i ]. first , & a [ i ]. second ); // x[i].x = a[i].first; // x[i].y = a[i].second; } sort ( a + 1 , a + 1 + n ); if ( a [ n / 2 ]. first != a [ n / 2 + 1 ]. first ) { printf ( \"%d 1000000000 %d -1000000000 \\n \" , a [ n / 2 ]. first , a [ n / 2 ]. first + 1 ); // p.x = a[n / 2].first, p.y = 1000000000; // q.x = a[n / 2].first + 1, q.y = -1000000000; } else { int t = a [ n / 2 ]. second + a [ n / 2 + 1 ]. second ; printf ( \"%d %d %d -500000000 \\n \" , a [ n / 2 ]. first - 1 , 500000000 + t , a [ n / 2 ]. first + 1 ); // p.x = a[n / 2].first - 1, p.y = 500000000 + t; // q.x = a[n / 2].first + 1, q.y = -500000000; } // int cnt1=0,cnt2=0; // for(int i=1;i<=n;i++) // { // if(crossOp(x[i],p,q)==-1) // cnt1++; // else // cnt2++; // } // printf(\"%d %d\\n\",cnt1,cnt2); // int res = a[n / 2].first; } return 0 ; } /* 10 8 0 0 0 -1 -1 0 -1 1 -1 2 -1 3 -1 -1 -2 0 4 0 0 1 0 0 1 0 -1 4 0 1 -1 0 1 0 0 -1 */","title":"H. Magic Line"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e09\u573a\uff09/#j-lru-management","text":"\u6309\u9898\u610f\u6a21\u62df\u4e00\u4e2a\u94fe\u8868\uff0c\u8d5b\u4e2d\u7684splay\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5199\u6302\u4e86\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0amap+list\u3002\u5177\u4f53\u6765\u8bf4\u6709\uff1a \u5f80\u94fe\u8868\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u952e\u503c\u5bf9 \u5220\u9664\u94fe\u8868\u4e2d\u4e00\u4e2a\u952e\u503c\u5bf9 \u67e5\u8be2\u94fe\u8868\u4e2d\u67d0\u4e2a\u952e\u7684\u503c \u67e5\u8be2\u4e00\u4e2a\u952e\u7684\u4e0b\u4e00\u4e2a\u6216\u8005\u4e0a\u4e00\u4e2a\u952e\u7684\u503c \u5220\u9664\u94fe\u8868\u9996\u90e8\u952e\u503c\u5bf9 \u8fd9\u51e0\u79cd\u64cd\u4f5c\uff0c\u6a21\u62df\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-25 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } unordered_map < ll , pair < list < ll >:: iterator , int > > mp ; list < ll > ls ; int sz ; int T ; int main ( int argc , char * argv []) { // ios::sync_with_stdio(0); // cin.tie(0); // cout.tie(0); scan ( T ); int n , m ; while ( T -- ) { scan ( m ), scan ( n ); // cin >> m >> n; ls . clear (); mp . clear (); sz = 0 ; int tp , val , s ; // string s; for ( int i = 1 ; i <= m ; ++ i ) { scan ( tp ), scan ( s ), scan ( val ); // cin >> tp >> s >> val; if ( tp == 0 ) { if ( mp . count ( s )) { val = mp [ s ]. second ; ls . erase ( mp [ s ]. first ); mp . erase ( s ); sz -- ; } if ( sz == n ) { mp . erase ( * ls . begin ()); ls . pop_front (); sz -- ; } ls . push_back ( s ); mp [ s ] = make_pair ( prev ( ls . end ()), val ); sz ++ ; out ( val ); putchar ( '\\n' ); // cout << val << endl; } else { if ( mp . count ( s ) == 0 ) { puts ( \"Invalid\" ); // cout << \"Invalid\" << endl; } else { if ( val == 0 ) { out ( mp [ s ]. second ); putchar ( '\\n' ); // cout << mp[s].second << endl; } else if ( val == 1 ) { if ( next ( mp [ s ]. first ) != ls . end ()) { out ( mp [ * next ( mp [ s ]. first )]. second ); putchar ( '\\n' ); } // cout << mp[*next(mp[s].first)].second << endl; else puts ( \"Invalid\" ); } else { if ( prev ( mp [ s ]. first ) != ls . end ()) { out ( mp [ * prev ( mp [ s ]. first )]. second ); putchar ( '\\n' ); } // cout << mp[*prev(mp[s].first)].second << endl; else puts ( \"Invalid\" ); } } } } } return 0 ; }","title":"J. LRU management"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/","text":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 Link Date Solved A B C D E F G H I J 2019/7/20 6/10 \u00d8 \u00d8 . \u00d8 \u00d8 \u00d8 . O . \u00d8 A\u3001 Eddy Walker Link \u9898\u610f\uff1a\u6709T\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9700\u8981\u5728n\u6b21\u5185\u5728m\u4f4d\u7f6e\u7ed3\u675f\uff0c\u6bcf\u6b21\u90fd\u662f\u4ece0\u51fa\u53d1\u5f80\u524d\u5f80\u540e\u90fd\u662f\u7b49\u6982\u7387\uff0c\u7136\u540e\u6210\u73af\u6240\u4ee50\u5f80\u524d\u662fn-1\uff0c\u6c42\u53d1\u751f\u7684\u603b\u6982\u7387\uff08\u6bcf\u6b21\u4e0e\u4e4b\u524d\u7684\u53d1\u751f\u6982\u7387\u662f\u6709\u5173\u7684\uff09 \u9898\u89e3\uff1a\u9996\u5148\u9664\u975en\u4e3a1\uff0c\u5426\u52190\u8fd9\u4e2a\u70b9\u5fc5\u4e0d\u53ef\u80fd\u662f\u7ec8\u70b9\uff0c\u56e0\u4e3a\u5b83\u6bcf\u6b21\u90fd\u4ece0\u5f00\u59cb\uff0c\u7136\u540e\u5f80\u524d\u5f80\u540e\u6982\u7387\u76f8\u7b49\u4e14\u6210\u73af\u6240\u4ee5\u662f\u7b49\u6982\u7387\u4e8b\u4ef6\uff0c\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u5c31\u662f \\frac{1}{n-1} \\frac{1}{n-1} \uff0c\u7136\u540e\u628a\u524d\u7f00\u4e58\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a2019\u5e7405\u670801\u65e5 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 500 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int n , m ; ll res = 1 ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); if ( n == 1 ) printf ( \"%lld \\n \" , res ); else { if ( m == 0 ) { printf ( \"0 \\n \" ); res = 0 ; } else { res = res * qp ( n - 1 , mod - 2 ) % mod ; printf ( \"%lld \\n \" , res ); } } } return 0 ; } B\u3001 Eddy Walker 2 Link \u9898\u610f\uff1a\u4ece0\u70b9\u5f00\u59cb\u5f80\u540e\u8df3\uff0c\u6bcf\u6b21\u8df31\uff5ek\u683c\uff0c\u6982\u7387\u90fd\u662f \\frac{1}{k} \\frac{1}{k} \uff0c\u7136\u540e\u6c42\u5230\u8fben\u70b9\u7684\u6982\u7387\u662f\u591a\u5c11\u3002 \u9898\u89e3\uff1a\u663e\u7136\u6709\u4e00\u4e2a\u6e05\u6670\u7684dp\uff1a dp[i] = \\sum_{j=i-k}^{i-1} \\frac{dp[j]}{k} = \\frac{\\sum_{j=i-k}^{i-1} dp[j]}{k} \u7136\u540e\u5c31\u662f\u7ebf\u6027\u9012\u63a8\u5f0f\u6c42\u7b2cn\u9879\uff0c\u7531\u4e8ek\u67091021\u90a3\u4e48\u5927\u65e0\u6cd5\u6784\u9020\u77e9\u9635\uff0c\u6240\u4ee5\u76f4\u63a5\u4e0a\u4e00\u624bbm\uff0c\u7531\u4e8e\u9012\u63a8\u5f0f\u6709k\u9879\uff0c\u4e00\u822c\u6765\u8bb2\u662f\u63a82*k\u9879\u8fdbbm\u8dd1\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u9898\u8fd8\u8981\u6c42\u65e0\u7a77\u8fdc\u5904\u7684\u6982\u7387\uff0c\u8003\u8651\u65e0\u7a77\u8fdc\u5904\u7684\u6982\u7387\u5904\u5904\u76f8\u7b49\uff0c\u7136\u540e\u6bcf\u6b65\u5f80\u524d\u524d\u8fdb\u6b65\u6570\u7684\u671f\u671b\u662f \\frac{k+1}{2} \\frac{k+1}{2} \uff0c\u5219\u65e0\u7a77\u8fdc\u5904\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u5c31\u662f \\frac{2}{k+1} \\frac{2}{k+1} \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 #include <bits/stdc++.h> #define ll long long using namespace std ; using VI = vector < int > ; const int mod = 1e9 + 7 ; const int maxn = 1 << 14 ; ll res [ maxn ], base [ maxn ], _c [ maxn ], _md [ maxn ]; ll Pow ( ll a , ll n ) { a %= mod ; ll tmp = 1 ; while ( n > 0 ) { if ( n & 1 ) tmp = tmp * a % mod ; a = a * a % mod ; n >>= 1 ; } return tmp ; } vector < ll > Md ; void mul ( ll * a , ll * b , int k ) { for ( int i = 0 ; i < k + k ; i ++ ) _c [ i ] = 0 ; for ( int i = 0 ; i < k ; i ++ ) if ( a [ i ]) for ( int j = 0 ; j < k ; j ++ ) _c [ i + j ] = ( _c [ i + j ] + a [ i ] * b [ j ]) % mod ; for ( int i = k + k - 1 ; i >= k ; i -- ) if ( _c [ i ]) for ( int j = 0 ; j < Md . size (); j ++ ) _c [ i - k + Md [ j ]] = ( _c [ i - k + Md [ j ]] - _c [ i ] * _md [ Md [ j ]]) % mod ; for ( int i = 0 ; i < k ; i ++ ) a [ i ] = _c [ i ]; } int solve ( ll n , VI a , VI b ) { ll ans = 0 , pnt = 0 ; int k = a . size (); assert ( a . size () == b . size ()); for ( int i = 0 ; i < k ; i ++ ) _md [ k - 1 - i ] = - a [ i ]; _md [ k ] = 1 ; Md . clear (); for ( int i = 0 ; i < k ; i ++ ) if ( _md [ i ] != 0 ) Md . push_back ( i ); for ( int i = 0 ; i < k ; i ++ ) res [ i ] = base [ i ] = 0 ; res [ 0 ] = 1 ; while (( 1LL << pnt ) <= n ) pnt ++ ; for ( int p = pnt ; p >= 0 ; p -- ) { mul ( res , res , k ); if (( n >> p ) & 1 ) { for ( int i = k - 1 ; i >= 0 ; i -- ) res [ i + 1 ] = res [ i ]; res [ 0 ] = 0 ; for ( int j = 0 ; j < Md . size (); j ++ ) res [ Md [ j ]] = ( res [ Md [ j ]] - res [ k ] * _md [ Md [ j ]]) % mod ; } } for ( int i = 0 ; i < k ; i ++ ) ans = ( ans + res [ i ] * b [ i ]) % mod ; if ( ans < 0 ) ans += mod ; return ans ; } VI BM ( VI s ) { VI C ( 1 , 1 ), B ( 1 , 1 ); int L = 0 , m = 1 , b = 1 ; for ( int n = 0 ; n < s . size (); n ++ ) { ll d = 0 ; for ( int i = 0 ; i <= L ; i ++ ) d = ( d + ( ll ) C [ i ] * s [ n - i ]) % mod ; if ( d == 0 ) ++ m ; else if ( 2 * L <= n ) { VI T = C ; ll c = mod - d * Pow ( b , mod - 2 ) % mod ; while ( C . size () < B . size () + m ) C . push_back ( 0 ); for ( int i = 0 ; i < B . size (); i ++ ) C [ i + m ] = ( C [ i + m ] + c * B [ i ]) % mod ; L = n + 1 - L , B = T , b = d , m = 1 ; } else { ll c = mod - d * Pow ( b , mod - 2 ) % mod ; while ( C . size () < B . size () + m ) C . push_back ( 0 ); for ( int i = 0 ; i < B . size (); i ++ ) C [ i + m ] = ( C [ i + m ] + c * B [ i ]) % mod ; ++ m ; } } return C ; } int gao ( VI a , ll n ) { VI c = BM ( a ); c . erase ( c . begin ()); for ( int i = 0 ; i < c . size (); i ++ ) c [ i ] = ( mod - c [ i ]) % mod ; return solve ( n , c , VI ( a . begin (), a . begin () + c . size ())); } int main () { int T ; scanf ( \"%d\" , & T ); int k ; ll n ; while ( T -- ) { scanf ( \"%d%lld\" , & k , & n ); if ( n == - 1 ) printf ( \"%lld \\n \" , 2 * Pow ( k + 1 , mod - 2 ) % mod ); else { VI tmp ; tmp . push_back ( 1 ); ll invk = Pow ( k , mod - 2 ); for ( int i = 1 ; i < 2 * k ; ++ i ) { ll tt = 0 ; for ( int j = max ( 0 , i - k ); j < i ; ++ j ) { tt = ( tt + tmp [ j ] * invk % mod ) % mod ; } tmp . push_back ( tt ); } printf ( \"%d \\n \" , gao ( tmp , n )); } } } D\u3001 Kth Minimum Clique Link \u7ef4\u62a4\u4e00\u4e2a\u6240\u6709\u70b9\u4e4b\u95f4\u4e24\u4e24\u6709\u8fb9\u76f8\u8fde\u7684\u96c6\u5408\uff0c\u521d\u59cb\u65f6\u4e3a\u7a7a\u3002BFS\u6c42\u89e3\u7b2ck\u5927\u70b9\u6743\u548c\u3002 \u6bcf\u6b21\u53d6\u70b9\u6743\u548c\u6700\u5c0f\u7684\u70b9\u96c6\uff0c\u68c0\u67e5\u65b0\u52a0\u5165\u7684\u70b9\u662f\u5426\u4e0e\u70b9\u96c6\u5185\u7684\u6240\u6709\u70b9\u76f8\u8fde\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06\u8be5\u70b9\u52a0\u5165\u70b9\u96c6\uff0c\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <bits/stdc++.h> using namespace std ; const int N = 100 + 10 ; typedef long long ll ; int n , k ; ll w [ N ]; bitset < N > mp [ N ]; struct node { ll val ; bitset < N > Set ; bool operator < ( const node & x ) const { return val > x . val ; } }; ll bfs () { priority_queue < node > que ; bitset < N > x ; x . reset (); que . push ({ 0 , x }); while ( ! que . empty ()) { node f = que . top (); que . pop (); k -- ; if ( ! k ) return f . val ; int pos = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( f . Set [ i ]) pos = i + 1 ; for ( int u = pos ; u < n ; u ++ ) { if (( mp [ u ] & f . Set ) == f . Set ) { f . Set [ u ] = 1 ; que . push ({ f . val + w [ u ], f . Set }); f . Set [ u ] = 0 ; } } } return - 1 ; } int main () { char s [ N ]; scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & w [ i ]); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%s\" , s ); for ( int j = 0 ; j < n ; j ++ ) if ( s [ j ] == '1' ) mp [ i ][ j ] = 1 ; } printf ( \"%lld \\n \" , bfs ()); return 0 ; } E\u3001 MAZE Link \u9898\u610f\uff1a\u6700\u591a50000\u884c10\u5217\u768401\u77e9\u9635\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5355\u70b9\u53d6\u53cd\uff0c\u6bcf\u6b21\u8be2\u95ee\u6c42\u7b2c\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u5230\u6700\u540e\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff08\u53ef\u4ee5\u5411\u5de6\u5411\u53f3\u5411\u4e0b\u8d70\uff09\u3002 \u9898\u89e3\uff1a\u663e\u7136\u8003\u8651\u4e00\u4e2adp dp[i][j] = \\sum dp[i - 1][k], \u7b2ci\u884c\u4ecek\u5230j\u7684\u8def\u5f84\u53ef\u8d70 \u7136\u540e\u56e0\u4e3a\u5e26\u4fee\u6539\u9898\u76ee\u663e\u5f97\u4e0d\u592a\u53ef\u505a\uff0c\u5b9e\u9645\u4e0a\u6765\u8bb2\u7b2ci\u884c\u4e0e\u7b2cj\u884c\u6709\u5173\uff0c\u5217\u6570\u975e\u5e38\u5c11\uff0c\u53ef\u4ee5\u8003\u8651\u77e9\u9635\u8f6c\u79fb\u3002 \u6bcf\u6b21\u7ef4\u62a4\u7b2ci\u884c\u7684\u8f6c\u79fb\u77e9\u9635\u5373\uff0c\u7b2c i_ \u884c\u7b2c j_ \u5217\u8868\u793a\u7b2ci\u884c\u53ef\u4ee5\u4ece i_ \u5230 j_ \uff0c\u6240\u4ee5\u4e0a\u4e00\u884c\u7684\u503c\u4e0e\u8be5\u77e9\u9635\u76f8\u4e58\u5373\u53ef\uff0c\u8981\u6c42\u7b2c\u4e00\u884c\u67d0\u70b9\u51fa\u53d1\u5c31\u628a\u521d\u59cb\u77e9\u9635\u7684\u7b2cx\u9879\u8bbe\u4e3a1\uff0c\u5176\u4f59\u51680\uff0c\u8f6c\u79fb\u5230\u6700\u540e\u5c31\u662f\u89e3\uff0c\u56e0\u4e3a\u5e26\u4fee\u6539\u8fd9\u4e2a\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635\u5c31\u7406\u6240\u5f53\u7136\u4e86\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539\u6240\u4ee5\u53ea\u7528\u6539\u4e00\u884c\u7684\u77e9\u9635\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aE.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct Matrix { int sz ; // int n, m; ll a [ 11 ][ 11 ]; Matrix ( int sz_ = 10 ) : sz ( sz_ ) { memset ( a , 0 , sizeof a ); } void pr () { printf ( \"* \\n \" ); for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = 0 ; j < sz ; ++ j ) { printf ( \"%lld \" , a [ i ][ j ]); } printf ( \" \\n \" ); } } void tr () { for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = i + 1 ; j < sz ; ++ j ) { swap ( a [ i ][ j ], a [ j ][ i ]); } } } } res , t1 ; Matrix mul ( Matrix a , Matrix b ) { Matrix res ( a . sz ); // if (a.m != b.n) return res; for ( int i = 0 ; i < res . sz ; i ++ ) // a.n for ( int j = 0 ; j < res . sz ; j ++ ) // b.m for ( int k = 0 ; k < res . sz ; k ++ ) // a.m, b.n ( res . a [ i ][ j ] += a . a [ i ][ k ] * b . a [ k ][ j ] % mod ) %= mod ; return res ; } Matrix pow ( ll n ) { //for(int i = 0; i < cur; i++) res.a[i][i] = 1; while ( n > 0 ) { if ( n & 1 ) res = mul ( res , t1 ); t1 = mul ( t1 , t1 ); n >>= 1 ; } return res ; } struct node { Matrix val ; } p [ maxn << 2 ]; int n , m ; int le , re ; int q ; char mp [ maxn ][ 11 ]; void init ( int pos ) { res . sz = m ; for ( int i = 0 ; i < m ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) res . a [ i ][ j ] = 0 ; } res . a [ 0 ][ pos - 1 ] = 1 ; } void cal ( int rt , int pos ) { for ( int i = 0 ; i < m ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) p [ rt ]. val . a [ i ][ j ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( mp [ pos ][ i ] == '1' ) continue ; for ( int j = i ; j <= m ; ++ j ) { if ( mp [ pos ][ j ] == '1' ) break ; p [ rt ]. val . a [ j - 1 ][ i - 1 ] = p [ rt ]. val . a [ i - 1 ][ j - 1 ] = 1 ; } } } void build ( int rt , int l , int r ) { if ( l == r ) { p [ rt ]. val . sz = m ; cal ( rt , l ); return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = mul ( p [ rt << 1 ]. val , p [ rt << 1 | 1 ]. val ); } void update ( int rt , int l , int r ) { if ( l == r ) { cal ( rt , l ); return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = mul ( p [ rt << 1 ]. val , p [ rt << 1 | 1 ]. val ); } int main ( int argc , char * argv []) { scanf ( \"%d%d%d\" , & n , & m , & q ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%s\" , mp [ i ] + 1 ); } // n --; build ( 1 , 1 , n ); int op , a , b ; for ( int i = 1 ; i <= q ; ++ i ) { scanf ( \"%d%d%d\" , & op , & a , & b ); if ( op == 1 ) { mp [ a ][ b ] = ( mp [ a ][ b ] == '0' ? '1' : '0' ); // if (a != n) { le = re = a ; update ( 1 , 1 , n ); // } } else { if ( mp [ 1 ][ a ] == '1' || mp [ n ][ b ] == '1' ) printf ( \"0 \\n \" ); else { init ( a ); printf ( \"%lld \\n \" , mul ( res , p [ 1 ]. val ). a [ 0 ][ b - 1 ]); } } } return 0 ; } F\u3001 Partition problem Link \u9898\u610f\uff1a\u7ed9\u6700\u591a28\u4e2a\u70b9\u7ec4\u6210\u5b8c\u5168\u56fe\uff0c\u6c42\u8f6c\u6210\u7b49\u70b9\u6570\u7684\u4e8c\u5206\u56fe\u540e\u8fb9\u6743\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u7206\u641c\uff0c\u641c\u7206\uff0c\u6bcf\u6b21\u8f6c\u79fb\u53ea\u7528\u628a\u5c5e\u4e8e\u5f53\u524d\u96c6\u5408\u4e2d\u7684\u70b9\u8fb9\u6743\u52a0\u4e0a\uff0c\u628a\u4e0d\u5c5e\u4e8e\u7684\u51cf\u53bb\u5c31\u662f\u65b0\u7684\u72b6\u6001\uff0c\u7136\u540e\u7ef4\u62a4\u4e0b\u6bcf\u4e2a\u70b9\u8fb9\u6743\u548c\u514d\u5f97\u6bcf\u6b21\u90fd\u7b97\u6ee1n\u4e2a\u70b9\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aF.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a2019\u5e7405\u670801\u65e5 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 30 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } int mp [ maxn ][ maxn ]; ll pre [ maxn ]; vector < int > vis ; int n ; ll res = 0 ; ll resnow = 0 ; inline void dfs ( int pos , int dep ) { if ( dep == n ) { if ( res > resnow ) { resnow = res ; } return ; } for ( int i = pos + 1 ; i <= 2 * n ; ++ i ) { ll tt = pre [ i ]; ll rest = res ; for ( auto j : vis ) { tt -= mp [ i ][ j ] * 2 ; } res += tt ; vis . push_back ( i ); dfs ( i , dep + 1 ); vis . pop_back (); res = rest ; } } int main () { scan ( n ); for ( int i = 1 ; i <= 2 * n ; ++ i ) { for ( int j = 1 ; j <= 2 * n ; ++ j ) { scan ( mp [ i ][ j ]); pre [ i ] += mp [ i ][ j ]; } } dfs ( 0 , 0 ); printf ( \"%lld \\n \" , resnow ); return 0 ; } H\u3001 Second Large Rectangle Link \u9898\u610f\uff1a\u6c42\u6b21\u5927\u7684\u51681\u77e9\u9635\u5927\u5c0f \u9898\u89e3\uff1a\u5355\u8c03\u6808\u5bf9\u6bcf\u4e00\u884c\u679a\u4e3e\uff0c\u6c42\u51fa\u5f53\u524d\u6700\u5927\u77e9\u9635\u7684\u540c\u65f6\u66f4\u65b0\u6b21\u5927\u77e9\u9635\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include <bits/stdc++.h> using namespace std ; #define rep(i, a, b) for( i = (a); i <= (b); i++) #define reps(i, a, b) for( i = (a); i < (b); i++) #define pb push_back #define ps push #define CLR(x,t) memset(x,t,sizeof x) #define LEN(X) strlen(X) #define F first #define S second #define Debug(x) cout<<#x<<\"=\"<<x<<endl; typedef long long LL ; int a [ 1005 ][ 1005 ], l [ 1005 ], r [ 1005 ], h [ 1005 ]; int main () { int n , m , i , j , k , ans , t ; string s ; cin >> n >> m ; for ( i = 1 ; i <= n ; i ++ ) { cin >> s ; for ( j = 1 ; j <= m ; j ++ ) a [ i ][ j ] = s [ j - 1 ] - '0' ; } ans = 0 ; int anst = 0 ; rep ( i , 1 , m ) h [ i ] = 0 ; map < pair < int , int > , int > mp ; rep ( i , 1 , n ) { mp . clear (); h [ 0 ] = h [ m + 1 ] = - 1 ; for ( k = 1 ; k <= m ; k ++ ) { if ( a [ i ][ k ]) h [ k ] ++ ; else h [ k ] = 0 ; } for ( j = 1 ; j <= m ; j ++ ) { t = j ; while ( h [ t - 1 ] >= h [ j ]) t = l [ t - 1 ]; l [ j ] = t ; } for ( j = m ; j >= 1 ; j -- ) { t = j ; while ( h [ t + 1 ] >= h [ j ]) t = r [ t + 1 ]; r [ j ] = t ; } for ( j = 1 ; j <= m ; j ++ ) { auto tt = make_pair ( h [ j ], l [ j ]); if ( mp [ tt ]) continue ; mp [ tt ] = 1 ; if ( ans < h [ j ] * ( r [ j ] - l [ j ] + 1 )) { anst = ans ; ans = h [ j ] * ( r [ j ] - l [ j ] + 1 ); } else if ( anst < h [ j ] * ( r [ j ] - l [ j ] + 1 )) { anst = h [ j ] * ( r [ j ] - l [ j ] + 1 ); } if ( anst < h [ j ] * ( r [ j ] - l [ j ])) { anst = h [ j ] * ( r [ j ] - l [ j ]); } // ans = max(ans, h[j] * (r[j] - l[j] + 1)); } } cout << anst << endl ; return 0 ; } J\u3001 Subarray Link","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/#2019","text":"Date Solved A B C D E F G H I J 2019/7/20 6/10 \u00d8 \u00d8 . \u00d8 \u00d8 \u00d8 . O . \u00d8","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/#aeddy-walker","text":"\u9898\u610f\uff1a\u6709T\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9700\u8981\u5728n\u6b21\u5185\u5728m\u4f4d\u7f6e\u7ed3\u675f\uff0c\u6bcf\u6b21\u90fd\u662f\u4ece0\u51fa\u53d1\u5f80\u524d\u5f80\u540e\u90fd\u662f\u7b49\u6982\u7387\uff0c\u7136\u540e\u6210\u73af\u6240\u4ee50\u5f80\u524d\u662fn-1\uff0c\u6c42\u53d1\u751f\u7684\u603b\u6982\u7387\uff08\u6bcf\u6b21\u4e0e\u4e4b\u524d\u7684\u53d1\u751f\u6982\u7387\u662f\u6709\u5173\u7684\uff09 \u9898\u89e3\uff1a\u9996\u5148\u9664\u975en\u4e3a1\uff0c\u5426\u52190\u8fd9\u4e2a\u70b9\u5fc5\u4e0d\u53ef\u80fd\u662f\u7ec8\u70b9\uff0c\u56e0\u4e3a\u5b83\u6bcf\u6b21\u90fd\u4ece0\u5f00\u59cb\uff0c\u7136\u540e\u5f80\u524d\u5f80\u540e\u6982\u7387\u76f8\u7b49\u4e14\u6210\u73af\u6240\u4ee5\u662f\u7b49\u6982\u7387\u4e8b\u4ef6\uff0c\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u5c31\u662f \\frac{1}{n-1} \\frac{1}{n-1} \uff0c\u7136\u540e\u628a\u524d\u7f00\u4e58\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a2019\u5e7405\u670801\u65e5 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 500 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } int n , m ; ll res = 1 ; int main () { int t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & n , & m ); if ( n == 1 ) printf ( \"%lld \\n \" , res ); else { if ( m == 0 ) { printf ( \"0 \\n \" ); res = 0 ; } else { res = res * qp ( n - 1 , mod - 2 ) % mod ; printf ( \"%lld \\n \" , res ); } } } return 0 ; }","title":"A\u3001Eddy Walker"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/#beddy-walker-2","text":"\u9898\u610f\uff1a\u4ece0\u70b9\u5f00\u59cb\u5f80\u540e\u8df3\uff0c\u6bcf\u6b21\u8df31\uff5ek\u683c\uff0c\u6982\u7387\u90fd\u662f \\frac{1}{k} \\frac{1}{k} \uff0c\u7136\u540e\u6c42\u5230\u8fben\u70b9\u7684\u6982\u7387\u662f\u591a\u5c11\u3002 \u9898\u89e3\uff1a\u663e\u7136\u6709\u4e00\u4e2a\u6e05\u6670\u7684dp\uff1a dp[i] = \\sum_{j=i-k}^{i-1} \\frac{dp[j]}{k} = \\frac{\\sum_{j=i-k}^{i-1} dp[j]}{k} \u7136\u540e\u5c31\u662f\u7ebf\u6027\u9012\u63a8\u5f0f\u6c42\u7b2cn\u9879\uff0c\u7531\u4e8ek\u67091021\u90a3\u4e48\u5927\u65e0\u6cd5\u6784\u9020\u77e9\u9635\uff0c\u6240\u4ee5\u76f4\u63a5\u4e0a\u4e00\u624bbm\uff0c\u7531\u4e8e\u9012\u63a8\u5f0f\u6709k\u9879\uff0c\u4e00\u822c\u6765\u8bb2\u662f\u63a82*k\u9879\u8fdbbm\u8dd1\u5c31\u53ef\u4ee5\u4e86\u3002\u6b64\u9898\u8fd8\u8981\u6c42\u65e0\u7a77\u8fdc\u5904\u7684\u6982\u7387\uff0c\u8003\u8651\u65e0\u7a77\u8fdc\u5904\u7684\u6982\u7387\u5904\u5904\u76f8\u7b49\uff0c\u7136\u540e\u6bcf\u6b65\u5f80\u524d\u524d\u8fdb\u6b65\u6570\u7684\u671f\u671b\u662f \\frac{k+1}{2} \\frac{k+1}{2} \uff0c\u5219\u65e0\u7a77\u8fdc\u5904\u6bcf\u4e2a\u70b9\u7684\u6982\u7387\u5c31\u662f \\frac{2}{k+1} \\frac{2}{k+1} \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 #include <bits/stdc++.h> #define ll long long using namespace std ; using VI = vector < int > ; const int mod = 1e9 + 7 ; const int maxn = 1 << 14 ; ll res [ maxn ], base [ maxn ], _c [ maxn ], _md [ maxn ]; ll Pow ( ll a , ll n ) { a %= mod ; ll tmp = 1 ; while ( n > 0 ) { if ( n & 1 ) tmp = tmp * a % mod ; a = a * a % mod ; n >>= 1 ; } return tmp ; } vector < ll > Md ; void mul ( ll * a , ll * b , int k ) { for ( int i = 0 ; i < k + k ; i ++ ) _c [ i ] = 0 ; for ( int i = 0 ; i < k ; i ++ ) if ( a [ i ]) for ( int j = 0 ; j < k ; j ++ ) _c [ i + j ] = ( _c [ i + j ] + a [ i ] * b [ j ]) % mod ; for ( int i = k + k - 1 ; i >= k ; i -- ) if ( _c [ i ]) for ( int j = 0 ; j < Md . size (); j ++ ) _c [ i - k + Md [ j ]] = ( _c [ i - k + Md [ j ]] - _c [ i ] * _md [ Md [ j ]]) % mod ; for ( int i = 0 ; i < k ; i ++ ) a [ i ] = _c [ i ]; } int solve ( ll n , VI a , VI b ) { ll ans = 0 , pnt = 0 ; int k = a . size (); assert ( a . size () == b . size ()); for ( int i = 0 ; i < k ; i ++ ) _md [ k - 1 - i ] = - a [ i ]; _md [ k ] = 1 ; Md . clear (); for ( int i = 0 ; i < k ; i ++ ) if ( _md [ i ] != 0 ) Md . push_back ( i ); for ( int i = 0 ; i < k ; i ++ ) res [ i ] = base [ i ] = 0 ; res [ 0 ] = 1 ; while (( 1LL << pnt ) <= n ) pnt ++ ; for ( int p = pnt ; p >= 0 ; p -- ) { mul ( res , res , k ); if (( n >> p ) & 1 ) { for ( int i = k - 1 ; i >= 0 ; i -- ) res [ i + 1 ] = res [ i ]; res [ 0 ] = 0 ; for ( int j = 0 ; j < Md . size (); j ++ ) res [ Md [ j ]] = ( res [ Md [ j ]] - res [ k ] * _md [ Md [ j ]]) % mod ; } } for ( int i = 0 ; i < k ; i ++ ) ans = ( ans + res [ i ] * b [ i ]) % mod ; if ( ans < 0 ) ans += mod ; return ans ; } VI BM ( VI s ) { VI C ( 1 , 1 ), B ( 1 , 1 ); int L = 0 , m = 1 , b = 1 ; for ( int n = 0 ; n < s . size (); n ++ ) { ll d = 0 ; for ( int i = 0 ; i <= L ; i ++ ) d = ( d + ( ll ) C [ i ] * s [ n - i ]) % mod ; if ( d == 0 ) ++ m ; else if ( 2 * L <= n ) { VI T = C ; ll c = mod - d * Pow ( b , mod - 2 ) % mod ; while ( C . size () < B . size () + m ) C . push_back ( 0 ); for ( int i = 0 ; i < B . size (); i ++ ) C [ i + m ] = ( C [ i + m ] + c * B [ i ]) % mod ; L = n + 1 - L , B = T , b = d , m = 1 ; } else { ll c = mod - d * Pow ( b , mod - 2 ) % mod ; while ( C . size () < B . size () + m ) C . push_back ( 0 ); for ( int i = 0 ; i < B . size (); i ++ ) C [ i + m ] = ( C [ i + m ] + c * B [ i ]) % mod ; ++ m ; } } return C ; } int gao ( VI a , ll n ) { VI c = BM ( a ); c . erase ( c . begin ()); for ( int i = 0 ; i < c . size (); i ++ ) c [ i ] = ( mod - c [ i ]) % mod ; return solve ( n , c , VI ( a . begin (), a . begin () + c . size ())); } int main () { int T ; scanf ( \"%d\" , & T ); int k ; ll n ; while ( T -- ) { scanf ( \"%d%lld\" , & k , & n ); if ( n == - 1 ) printf ( \"%lld \\n \" , 2 * Pow ( k + 1 , mod - 2 ) % mod ); else { VI tmp ; tmp . push_back ( 1 ); ll invk = Pow ( k , mod - 2 ); for ( int i = 1 ; i < 2 * k ; ++ i ) { ll tt = 0 ; for ( int j = max ( 0 , i - k ); j < i ; ++ j ) { tt = ( tt + tmp [ j ] * invk % mod ) % mod ; } tmp . push_back ( tt ); } printf ( \"%d \\n \" , gao ( tmp , n )); } } }","title":"B\u3001Eddy Walker 2"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/#dkth-minimum-clique","text":"\u7ef4\u62a4\u4e00\u4e2a\u6240\u6709\u70b9\u4e4b\u95f4\u4e24\u4e24\u6709\u8fb9\u76f8\u8fde\u7684\u96c6\u5408\uff0c\u521d\u59cb\u65f6\u4e3a\u7a7a\u3002BFS\u6c42\u89e3\u7b2ck\u5927\u70b9\u6743\u548c\u3002 \u6bcf\u6b21\u53d6\u70b9\u6743\u548c\u6700\u5c0f\u7684\u70b9\u96c6\uff0c\u68c0\u67e5\u65b0\u52a0\u5165\u7684\u70b9\u662f\u5426\u4e0e\u70b9\u96c6\u5185\u7684\u6240\u6709\u70b9\u76f8\u8fde\uff0c\u5982\u679c\u662f\uff0c\u5219\u5c06\u8be5\u70b9\u52a0\u5165\u70b9\u96c6\uff0c\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <bits/stdc++.h> using namespace std ; const int N = 100 + 10 ; typedef long long ll ; int n , k ; ll w [ N ]; bitset < N > mp [ N ]; struct node { ll val ; bitset < N > Set ; bool operator < ( const node & x ) const { return val > x . val ; } }; ll bfs () { priority_queue < node > que ; bitset < N > x ; x . reset (); que . push ({ 0 , x }); while ( ! que . empty ()) { node f = que . top (); que . pop (); k -- ; if ( ! k ) return f . val ; int pos = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( f . Set [ i ]) pos = i + 1 ; for ( int u = pos ; u < n ; u ++ ) { if (( mp [ u ] & f . Set ) == f . Set ) { f . Set [ u ] = 1 ; que . push ({ f . val + w [ u ], f . Set }); f . Set [ u ] = 0 ; } } } return - 1 ; } int main () { char s [ N ]; scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; i ++ ) scanf ( \"%lld\" , & w [ i ]); for ( int i = 0 ; i < n ; i ++ ) { scanf ( \"%s\" , s ); for ( int j = 0 ; j < n ; j ++ ) if ( s [ j ] == '1' ) mp [ i ][ j ] = 1 ; } printf ( \"%lld \\n \" , bfs ()); return 0 ; }","title":"D\u3001Kth Minimum Clique"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/#emaze","text":"\u9898\u610f\uff1a\u6700\u591a50000\u884c10\u5217\u768401\u77e9\u9635\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5bf9\u5355\u70b9\u53d6\u53cd\uff0c\u6bcf\u6b21\u8be2\u95ee\u6c42\u7b2c\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u5230\u6700\u540e\u4e00\u884c\u7684\u67d0\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff08\u53ef\u4ee5\u5411\u5de6\u5411\u53f3\u5411\u4e0b\u8d70\uff09\u3002 \u9898\u89e3\uff1a\u663e\u7136\u8003\u8651\u4e00\u4e2adp dp[i][j] = \\sum dp[i - 1][k], \u7b2ci\u884c\u4ecek\u5230j\u7684\u8def\u5f84\u53ef\u8d70 \u7136\u540e\u56e0\u4e3a\u5e26\u4fee\u6539\u9898\u76ee\u663e\u5f97\u4e0d\u592a\u53ef\u505a\uff0c\u5b9e\u9645\u4e0a\u6765\u8bb2\u7b2ci\u884c\u4e0e\u7b2cj\u884c\u6709\u5173\uff0c\u5217\u6570\u975e\u5e38\u5c11\uff0c\u53ef\u4ee5\u8003\u8651\u77e9\u9635\u8f6c\u79fb\u3002 \u6bcf\u6b21\u7ef4\u62a4\u7b2ci\u884c\u7684\u8f6c\u79fb\u77e9\u9635\u5373\uff0c\u7b2c i_ \u884c\u7b2c j_ \u5217\u8868\u793a\u7b2ci\u884c\u53ef\u4ee5\u4ece i_ \u5230 j_ \uff0c\u6240\u4ee5\u4e0a\u4e00\u884c\u7684\u503c\u4e0e\u8be5\u77e9\u9635\u76f8\u4e58\u5373\u53ef\uff0c\u8981\u6c42\u7b2c\u4e00\u884c\u67d0\u70b9\u51fa\u53d1\u5c31\u628a\u521d\u59cb\u77e9\u9635\u7684\u7b2cx\u9879\u8bbe\u4e3a1\uff0c\u5176\u4f59\u51680\uff0c\u8f6c\u79fb\u5230\u6700\u540e\u5c31\u662f\u89e3\uff0c\u56e0\u4e3a\u5e26\u4fee\u6539\u8fd9\u4e2a\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635\u5c31\u7406\u6240\u5f53\u7136\u4e86\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539\u6240\u4ee5\u53ea\u7528\u6539\u4e00\u884c\u7684\u77e9\u9635\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aE.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 19-7-23 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 5e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} struct Matrix { int sz ; // int n, m; ll a [ 11 ][ 11 ]; Matrix ( int sz_ = 10 ) : sz ( sz_ ) { memset ( a , 0 , sizeof a ); } void pr () { printf ( \"* \\n \" ); for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = 0 ; j < sz ; ++ j ) { printf ( \"%lld \" , a [ i ][ j ]); } printf ( \" \\n \" ); } } void tr () { for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = i + 1 ; j < sz ; ++ j ) { swap ( a [ i ][ j ], a [ j ][ i ]); } } } } res , t1 ; Matrix mul ( Matrix a , Matrix b ) { Matrix res ( a . sz ); // if (a.m != b.n) return res; for ( int i = 0 ; i < res . sz ; i ++ ) // a.n for ( int j = 0 ; j < res . sz ; j ++ ) // b.m for ( int k = 0 ; k < res . sz ; k ++ ) // a.m, b.n ( res . a [ i ][ j ] += a . a [ i ][ k ] * b . a [ k ][ j ] % mod ) %= mod ; return res ; } Matrix pow ( ll n ) { //for(int i = 0; i < cur; i++) res.a[i][i] = 1; while ( n > 0 ) { if ( n & 1 ) res = mul ( res , t1 ); t1 = mul ( t1 , t1 ); n >>= 1 ; } return res ; } struct node { Matrix val ; } p [ maxn << 2 ]; int n , m ; int le , re ; int q ; char mp [ maxn ][ 11 ]; void init ( int pos ) { res . sz = m ; for ( int i = 0 ; i < m ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) res . a [ i ][ j ] = 0 ; } res . a [ 0 ][ pos - 1 ] = 1 ; } void cal ( int rt , int pos ) { for ( int i = 0 ; i < m ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) p [ rt ]. val . a [ i ][ j ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( mp [ pos ][ i ] == '1' ) continue ; for ( int j = i ; j <= m ; ++ j ) { if ( mp [ pos ][ j ] == '1' ) break ; p [ rt ]. val . a [ j - 1 ][ i - 1 ] = p [ rt ]. val . a [ i - 1 ][ j - 1 ] = 1 ; } } } void build ( int rt , int l , int r ) { if ( l == r ) { p [ rt ]. val . sz = m ; cal ( rt , l ); return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = mul ( p [ rt << 1 ]. val , p [ rt << 1 | 1 ]. val ); } void update ( int rt , int l , int r ) { if ( l == r ) { cal ( rt , l ); return ; } int mid = l + r >> 1 ; if ( le <= mid ) update ( rt << 1 , l , mid ); else update ( rt << 1 | 1 , mid + 1 , r ); p [ rt ]. val = mul ( p [ rt << 1 ]. val , p [ rt << 1 | 1 ]. val ); } int main ( int argc , char * argv []) { scanf ( \"%d%d%d\" , & n , & m , & q ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%s\" , mp [ i ] + 1 ); } // n --; build ( 1 , 1 , n ); int op , a , b ; for ( int i = 1 ; i <= q ; ++ i ) { scanf ( \"%d%d%d\" , & op , & a , & b ); if ( op == 1 ) { mp [ a ][ b ] = ( mp [ a ][ b ] == '0' ? '1' : '0' ); // if (a != n) { le = re = a ; update ( 1 , 1 , n ); // } } else { if ( mp [ 1 ][ a ] == '1' || mp [ n ][ b ] == '1' ) printf ( \"0 \\n \" ); else { init ( a ); printf ( \"%lld \\n \" , mul ( res , p [ 1 ]. val ). a [ 0 ][ b - 1 ]); } } } return 0 ; }","title":"E\u3001MAZE"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/#fpartition-problem","text":"\u9898\u610f\uff1a\u7ed9\u6700\u591a28\u4e2a\u70b9\u7ec4\u6210\u5b8c\u5168\u56fe\uff0c\u6c42\u8f6c\u6210\u7b49\u70b9\u6570\u7684\u4e8c\u5206\u56fe\u540e\u8fb9\u6743\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u7206\u641c\uff0c\u641c\u7206\uff0c\u6bcf\u6b21\u8f6c\u79fb\u53ea\u7528\u628a\u5c5e\u4e8e\u5f53\u524d\u96c6\u5408\u4e2d\u7684\u70b9\u8fb9\u6743\u52a0\u4e0a\uff0c\u628a\u4e0d\u5c5e\u4e8e\u7684\u51cf\u53bb\u5c31\u662f\u65b0\u7684\u72b6\u6001\uff0c\u7136\u540e\u7ef4\u62a4\u4e0b\u6bcf\u4e2a\u70b9\u8fb9\u6743\u548c\u514d\u5f97\u6bcf\u6b21\u90fd\u7b97\u6ee1n\u4e2a\u70b9\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aF.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a2019\u5e7405\u670801\u65e5 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 30 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } int mp [ maxn ][ maxn ]; ll pre [ maxn ]; vector < int > vis ; int n ; ll res = 0 ; ll resnow = 0 ; inline void dfs ( int pos , int dep ) { if ( dep == n ) { if ( res > resnow ) { resnow = res ; } return ; } for ( int i = pos + 1 ; i <= 2 * n ; ++ i ) { ll tt = pre [ i ]; ll rest = res ; for ( auto j : vis ) { tt -= mp [ i ][ j ] * 2 ; } res += tt ; vis . push_back ( i ); dfs ( i , dep + 1 ); vis . pop_back (); res = rest ; } } int main () { scan ( n ); for ( int i = 1 ; i <= 2 * n ; ++ i ) { for ( int j = 1 ; j <= 2 * n ; ++ j ) { scan ( mp [ i ][ j ]); pre [ i ] += mp [ i ][ j ]; } } dfs ( 0 , 0 ); printf ( \"%lld \\n \" , resnow ); return 0 ; }","title":"F\u3001Partition problem"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/#hsecond-large-rectangle","text":"\u9898\u610f\uff1a\u6c42\u6b21\u5927\u7684\u51681\u77e9\u9635\u5927\u5c0f \u9898\u89e3\uff1a\u5355\u8c03\u6808\u5bf9\u6bcf\u4e00\u884c\u679a\u4e3e\uff0c\u6c42\u51fa\u5f53\u524d\u6700\u5927\u77e9\u9635\u7684\u540c\u65f6\u66f4\u65b0\u6b21\u5927\u77e9\u9635\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include <bits/stdc++.h> using namespace std ; #define rep(i, a, b) for( i = (a); i <= (b); i++) #define reps(i, a, b) for( i = (a); i < (b); i++) #define pb push_back #define ps push #define CLR(x,t) memset(x,t,sizeof x) #define LEN(X) strlen(X) #define F first #define S second #define Debug(x) cout<<#x<<\"=\"<<x<<endl; typedef long long LL ; int a [ 1005 ][ 1005 ], l [ 1005 ], r [ 1005 ], h [ 1005 ]; int main () { int n , m , i , j , k , ans , t ; string s ; cin >> n >> m ; for ( i = 1 ; i <= n ; i ++ ) { cin >> s ; for ( j = 1 ; j <= m ; j ++ ) a [ i ][ j ] = s [ j - 1 ] - '0' ; } ans = 0 ; int anst = 0 ; rep ( i , 1 , m ) h [ i ] = 0 ; map < pair < int , int > , int > mp ; rep ( i , 1 , n ) { mp . clear (); h [ 0 ] = h [ m + 1 ] = - 1 ; for ( k = 1 ; k <= m ; k ++ ) { if ( a [ i ][ k ]) h [ k ] ++ ; else h [ k ] = 0 ; } for ( j = 1 ; j <= m ; j ++ ) { t = j ; while ( h [ t - 1 ] >= h [ j ]) t = l [ t - 1 ]; l [ j ] = t ; } for ( j = m ; j >= 1 ; j -- ) { t = j ; while ( h [ t + 1 ] >= h [ j ]) t = r [ t + 1 ]; r [ j ] = t ; } for ( j = 1 ; j <= m ; j ++ ) { auto tt = make_pair ( h [ j ], l [ j ]); if ( mp [ tt ]) continue ; mp [ tt ] = 1 ; if ( ans < h [ j ] * ( r [ j ] - l [ j ] + 1 )) { anst = ans ; ans = h [ j ] * ( r [ j ] - l [ j ] + 1 ); } else if ( anst < h [ j ] * ( r [ j ] - l [ j ] + 1 )) { anst = h [ j ] * ( r [ j ] - l [ j ] + 1 ); } if ( anst < h [ j ] * ( r [ j ] - l [ j ])) { anst = h [ j ] * ( r [ j ] - l [ j ]); } // ans = max(ans, h[j] * (r[j] - l[j] + 1)); } } cout << anst << endl ; return 0 ; }","title":"H\u3001Second Large Rectangle"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/#jsubarray","text":"","title":"J\u3001Subarray"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09/","text":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09 Link Date Solved A B C D E F G H I J 2019/8/1 8/10 O O \u00d8 . \u00d8 \u00d8 O O \u00d8 . A\u3001 digits 2 Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2an\u6c42\u4e00\u4e2a\u6570\u4f7f\u5f97\u8fd9\u4e2a\u6570\u7684\u6240\u6709\u6570\u4f4d\u548c\u80fd\u88abn\u6574\u9664\u4e14\u8fd9\u4e2a\u6570\u672c\u8eab\u4e5f\u80fd\u88abn\u6574\u9664\u3002 \u9898\u89e3\uff1a\u4e0d\u8981\u6c42\u6c42\u51fa\u6700\u5c0f\u89e3\uff0c\u6240\u4ee5\u5c31\u8f93\u51fan\u6b21n\u5fc5\u7136\u6b63\u786e\u5373\u53ef \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <cstdio> int n ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; ++ i ) { printf ( \"%d\" , n ); } printf ( \" \\n \" ); } return 0 ; } B\u3001 generator 1 Link \u9898\u610f\uff1a\u6c42\u975e\u7d20\u6a21\u6570\u5927\u6570\u7ea7fib\u6570 \u9898\u89e3\uff1a\u5feb\u901f\u5e42\uff0cn\u6709 10^{(10^10)} 10^{(10^10)} \u590d\u6742\u5ea6\u5c31\u662f O(2*2*log(n)) O(2*2*log(n)) \u3002\u7531\u4e8en\u8fc7\u5927\u53f3\u79fb\u5bfc\u81f4\u590d\u6742\u5ea6\u7206\u70b8\u6240\u4ee5\u91c7\u7528\u5341\u8fdb\u5236\u5feb\u901f\u5e42\uff0c\u6bcf\u6b21\u53ea\u628a\u4f4d\u6570\u5f80\u53f3\u79fb\u52a8\uff0c\u4ee5\u51cf\u5c0f\u590d\u6742\u5ea6\uff0c\u8fd8\u53ef\u4ee5\u5957\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5feb\u901f\u5e42\u6765\u89e3\u51b310\u4ee5\u5185\u7684\u77e9\u9635\u4e58\u6cd5\u3002\u590d\u6742\u5ea6\u5927\u6982\u5728 O(1e6*log(10)*4) O(1e6*log(10)*4) \uff0c\u8d5b\u4e2d\u6ca1\u5957\u90a3\u4e2a\u4e8c\u8fdb\u5236\u5feb\u901f\u5e42\u4e5f\u901a\u8fc7\u4e86\u6b64\u9898\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/8/1 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; char s [ maxn ]; ll mod ; int len ; struct Matrix { ll a [ 2 ][ 2 ]; void show () { printf ( \"* \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) printf ( \"%lld \" , a [ i ][ j ]); printf ( \" \\n \" ); } } } x ; inline Matrix mul ( const Matrix & a , const Matrix & b ) { for ( int i = 0 ; i < 2 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) { x . a [ i ][ j ] = a . a [ i ][ 0 ] * b . a [ 0 ][ j ] % mod + a . a [ i ][ 1 ] * b . a [ 1 ][ j ] % mod ; if ( x . a [ i ][ j ] >= mod ) x . a [ i ][ j ] -= mod ; } return x ; } Matrix ans , base ; Matrix pow2 ( Matrix tg , Matrix t , int n ) { Matrix res = tg ; while ( n > 0 ) { if ( n & 1 ) { res = mul ( res , t ); } t = mul ( t , t ); n >>= 1 ; } return res ; } Matrix pow () { while ( len >= 0 ) { ans = pow2 ( ans , base , s [ len ]); base = pow2 ( base , base , 9 ); len -- ; } return ans ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); scanf ( \"%lld%lld\" , & ans . a [ 0 ][ 0 ], & ans . a [ 0 ][ 1 ]); scanf ( \"%lld%lld\" , & base . a [ 1 ][ 1 ], & base . a [ 0 ][ 1 ]); scanf ( \"%s%lld\" , s , & mod ); for ( int i = 0 ; s [ i ]; ++ i ) { len ++ ; s [ i ] -= '0' ; } len -- ; base . a [ 1 ][ 0 ] = 1 ; pow (); printf ( \"%lld \\n \" , ans . a [ 0 ][ 0 ]); return 0 ; } E\u3001 independent set 1 Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u4e0d\u8d85\u8fc726\u4e2a\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u6c42 2^n \u79cd\u70b9\u96c6\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u5f3a\u70c8\u53cd\u5e941<<26\u4e3a6.7e7\u5de6\u53f3\uff0c\u53ef\u4ee5\u5728 2^26 \u5185\u89e3\u51b3\u95ee\u9898\u800c\u4e14\u4e0d\u80fd\u5e26\u4e00\u4e2a n \u7684\u4e8c\u7ef4\uff0c\u90a3\u4e48\u76f4\u63a5\u8003\u8651\u679a\u4e3e\u6240\u6709\u70b9\u96c6\u72b6\u538bdp\uff0c\u7136\u540e\u8003\u8651\u600e\u4e48\u6c42\u51fa\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u8003\u8651\u679a\u4e3e\u5230stat\u65f6\u4efb\u610f\u5728stat\u4e2d\u7684\u70b9x\uff0c\u663e\u7136 dp[stat] = max(dp[prestat], dp[otherstat] + 1) \u5176\u4e2dprestat\u8868\u793astat\u53bb\u6389x\uff0cotherstat\u8868\u793astat\u53bb\u6389\u4e0ex\u76f8\u90bb\u7684\u70b9\u3002 \u7136\u540e\u53bb\u6389\u76f8\u90bb\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u5728\u8bfb\u5165\u65f6\u5c06\u76f4\u8fde\u8fb9\u9884\u5904\u7406\u4e00\u4e2a\u4f4d\u8fd0\u7b97\u5373\u53ef\u3002\u6b64\u9898\u552f\u4e00\u7684\u5361\u4eba\u70b9\u5728\u4e8e\u5b83\u9700\u8981\u7528char\u4fdd\u5b58dp\u6570\u7ec4\u4e0d\u7136\u4f1a\u70b8\u5185\u5b58\u3002\u8bf4\u5b9e\u8bdd\u771f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u5361\u8fd9\u4e2a\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aE.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/8/1 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 26 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} char dp [ 1 << maxn ]; int n , m ; int c [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 , u , v ; i < m ; ++ i ) { scanf ( \"%d%d\" , & u , & v ); c [ u ] |= 1 << v ; c [ v ] |= 1 << u ; } for ( int i = 0 ; i < n ; ++ i ) c [ i ] |= 1 << i ; dp [ 0 ] = 0 ; int res = 0 ; for ( int stat = 1 ; stat < ( 1 << n ); ++ stat ) { int prestat = stat ^ ( stat & - stat ); int prestat2 = stat & ( ~ c [ __builtin_ctz ( stat &- stat )]); if ( dp [ prestat ] > dp [ prestat2 ] + 1 ) { dp [ stat ] = dp [ prestat ]; } else { dp [ stat ] = dp [ prestat2 ] + 1 ; } // printf(\"%d %d\\n\", stat, dp[stat]); // dp[stat] = max(dp[prestat], dp[prestat2] + 1); res += dp [ stat ]; } printf ( \"%d \\n \" , res ); return 0 ; } F\u3001 maximum clique 1 Link \u9898\u610f\uff1an\u4e2a\u6570\u7684\u975e\u91cd\u96c6\u5408\uff0c\u6c42\u6700\u5927\u7684\u96c6\u5408\u4f7f\u5f97\u96c6\u5408\u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u4e0d\u540c\u4f4d\u81f3\u5c11\u4e24\u4e2a\uff0c\u8981\u6c42\u8f93\u51fa\u96c6\u5408\u4e2d\u7684\u6570\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u662f\u975e\u91cd\u96c6\u5408\uff0c\u5982\u679ca\u548cb\u4e8c\u8fdb\u5236\u4e0d\u540c\u4f4d\u53ea\u6709\u4e00\u4e2a\uff0ca\u548cc\u4e5f\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48b\u548cc\u81f3\u5c11\u6709\u4e24\u4e2a\u4f4d\u4e0d\u540c\uff0c\u6545\u6784\u5efa\u4e8c\u5206\u56fe\uff0c\u5c06\u76f8\u5dee\u4e00\u4f4d\u7684\u8fde\u8fb9\uff0c\u6c42\u7684\u5c31\u662f\u8be5\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 5000 + 10 ; const int INF = 0x3f3f3f3f ; int a [ MAX_V ]; bool vis [ MAX_V ]; struct Dinic { //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void init ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } void solve ( int S , int T , int n ) { queue < int > que ; que . push ( S ); vis [ S ] = true ; while ( ! que . empty ()) { auto u = que . front (); que . pop (); for ( auto e : G [ u ]) if ( ! vis [ e . to ] && e . cap != 0 ) que . push ( e . to ), vis [ e . to ] = true ; } set < int > ans ; for ( int i = 1 ; i <= n ; i ++ ) ans . insert ( i ); for ( int i = S ; i <= T ; i ++ ) if ( vis [ i ]) { for ( auto e : G [ i ]) if ( ! vis [ e . to ]) { if ( i == S ) ans . erase ( e . to ); if ( e . to == T ) ans . erase ( i ); } } bool flag = 0 ; for ( auto x : ans ) { if ( flag ) printf ( \" \" ); printf ( \"%d\" , a [ x ]); flag = 1 ; } } } ans ; int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); int S = 0 , T = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( __builtin_parity ( a [ i ])) { ans . add ( i , T , 1 ); continue ; } ans . add ( S , i , 1 ); for ( int j = 1 ; j <= n ; j ++ ) if ( __builtin_popcount ( a [ i ] ^ a [ j ]) == 1 ) ans . add ( i , j , 1 ); } printf ( \"%d \\n \" , n - ans . max_flow ( S , T )); ans . solve ( S , T , n ); return 0 ; } G\u3001 subsequence 1 Link \u9898\u610f\uff1a\u6c42s\u4e2d\u5b50\u5e8f\u5217\u5927\u4e8et\u7684\u4e2a\u6570 \u9898\u89e3\uff1a dp[i][j] \u8868\u793as\u524di\u4f4d\uff0ct\u524dj\u4f4d\u76f8\u7b49\u957f\u5ea6\u7684\u7b54\u6848\u3002\u7136\u540e\u8fd8\u6709s\u6bd4t\u957f\u7684\u7ec4\u5408\u6570\u6c42\u4e00\u4e0b\u89e3\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 3000 + 10 ; const int mod = 998244353 ; char a [ maxn ], b [ maxn ]; ll dp [ maxn ][ maxn ]; ll fac [ maxn ], inv [ maxn ], facinv [ maxn ]; void init () { fac [ 0 ] = inv [ 0 ] = facinv [ 0 ] = 1 ; fac [ 1 ] = inv [ 1 ] = facinv [ 1 ] = 1 ; for ( int i = 2 ; i < maxn ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i % mod ; inv [ i ] = mod - mod / i * inv [ mod % i ] % mod ; facinv [ i ] = facinv [ i - 1 ] * inv [ i ] % mod ; } } ll C ( int n , int k ) { if ( k > n || k < 0 ) return 0 ; return fac [ n ] * facinv [ k ] % mod * facinv [ n - k ] % mod ; } int main () { int _ , n , m ; init (); scanf ( \"%d\" , & _ ); while ( _ -- ) { ll ans = 0 ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= m ; j ++ ) dp [ i ][ j ] = 0 ; scanf ( \"%s%s\" , a + 1 , b + 1 ); dp [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ][ 0 ] = 1 ; for ( int j = 1 ; j <= m ; j ++ ) { ( dp [ i ][ j ] += dp [ i - 1 ][ j ]) %= mod ; if ( a [ i ] > b [ j ]) ( ans += dp [ i - 1 ][ j - 1 ] * C ( n - i , m - j ) % mod ) %= mod ; else if ( a [ i ] == b [ j ]) ( dp [ i ][ j ] += dp [ i - 1 ][ j - 1 ]) %= mod ; } } for ( int i = 1 ; i <= n ; i ++ ) if ( a [ i ] != '0' ) for ( int j = m ; j <= n ; j ++ ) ( ans += C ( n - i , j )) %= mod ; printf ( \"%lld \\n \" , ans ); } return 0 ; } H\u3001 subsequence 2 Link \u9898\u610f\uff1a\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f7f\u5f97\u6ee1\u8db3m\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u7ed9\u51fa\u4e24\u4e2a\u5b57\u7b26\uff0c\u7ed9\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u8fd9\u4e24\u4e2a\u5b57\u7b26\u7684\u6700\u5927\u5b50\u5e8f\u5217\uff0c\u4fdd\u8bc1\u7ed9\u51fa\u7684\u6761\u4ef6\u4e0d\u91cd\u590d\u800c\u4e14\u662f\u524dm\u5c0f\u4e2a\u5b57\u7b26\u6784\u6210\u3002 \u9898\u89e3\uff1a\u5bf9m\u4e2a\u5b57\u7b26\u6784\u9020n\u4e2a\u70b9\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u662f\u4ec0\u4e48\u5b57\u7b26\uff0c\u7136\u540e\u5bf9\u5148\u540e\u987a\u5e8f\u5efa\u7acb\u6709\u5411\u56fe\uff0c\u8dd1\u51fatop\u5e8f\u5c31\u662f\u7b54\u6848\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; int n , m ; bool vis [ maxn ]; int pt ( int num , int i ) { vis [ num * n + i ] = true ; return num * n + i ; } char s [ maxn ], a [ 15 ]; int point [ maxn ], out [ maxn ]; vector < int > edge [ maxn ]; int indegree [ maxn ]; void add ( int u , int v ) { edge [ u ]. push_back ( v ); indegree [ v ] ++ ; out [ u ] ++ ; } int getpoint ( int x ) { return x / n ; } vector < int > ans ; bool Toposort () { queue < int > que ; for ( int i = 0 ; i <= n * m ; i ++ ) if ( ! indegree [ i ] && vis [ i ]) que . push ( i ); //\u5c06\u56fe\u4e2d\u6ca1\u6709\u524d\u9a71\uff0c\u5373\u5165\u5ea6\u4e3a0\u7684\u70b9\u52a0\u5165\u961f\u5217 int cnt = 0 ; while ( ! que . empty ()) { int u = que . front (); que . pop (); ans . push_back ( getpoint ( u )); indegree [ u ] =- 1 ; //\u4ece\u56fe\u4e2d\u5220\u53bb\u6b64\u9876\u70b9 cnt ++ ; for ( int i = 0 ; i < edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]; indegree [ v ] -- ; //\u5220\u53bb\u56fe\u4e2d\u4ee5u\u4e3a\u5c3e\u7684\u5f27 if ( ! indegree [ v ]) que . push ( v ); //\u5c06\u65b0\u589e\u7684\u5f53\u524d\u5165\u5ea6\u4e3a0\u7684\u70b9\u538b\u5165\u961f\u5217\u4e2d } } return cnt == n ; } int main () { int t ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m * ( m - 1 ) / 2 ; i ++ ) { scanf ( \"%s%d\" , a , & t ); if ( t == 0 ) continue ; scanf ( \"%s\" , s ); int pos1 = 0 , pos2 = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( s [ i ] == a [ 0 ]) point [ i ] = pt ( a [ 0 ] - 'a' , pos1 ++ ); else if ( s [ i ] == a [ 1 ]) point [ i ] = pt ( a [ 1 ] - 'a' , pos2 ++ ); } for ( int i = 0 ; i < t - 1 ; i ++ ) add ( point [ i ], point [ i + 1 ]); } int cnt = 0 ; for ( int i = 0 ; i <= n * m ; i ++ ) if ( vis [ i ] && ! out [ i ]) cnt ++ ; if ( cnt > 1 ) return 0 * puts ( \"-1\" ); if ( ! Toposort ()) return 0 * puts ( \"-1\" ); if ( ans . size () != n ) return 0 * puts ( \"-1\" ); for ( int x : ans ) printf ( \"%c\" , x + 'a' ); printf ( \" \\n \" ); return 0 ; }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09/#2019","text":"Date Solved A B C D E F G H I J 2019/8/1 8/10 O O \u00d8 . \u00d8 \u00d8 O O \u00d8 .","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09/#adigits-2","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2an\u6c42\u4e00\u4e2a\u6570\u4f7f\u5f97\u8fd9\u4e2a\u6570\u7684\u6240\u6709\u6570\u4f4d\u548c\u80fd\u88abn\u6574\u9664\u4e14\u8fd9\u4e2a\u6570\u672c\u8eab\u4e5f\u80fd\u88abn\u6574\u9664\u3002 \u9898\u89e3\uff1a\u4e0d\u8981\u6c42\u6c42\u51fa\u6700\u5c0f\u89e3\uff0c\u6240\u4ee5\u5c31\u8f93\u51fan\u6b21n\u5fc5\u7136\u6b63\u786e\u5373\u53ef \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <cstdio> int n ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; ++ i ) { printf ( \"%d\" , n ); } printf ( \" \\n \" ); } return 0 ; }","title":"A\u3001digits 2"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09/#bgenerator-1","text":"\u9898\u610f\uff1a\u6c42\u975e\u7d20\u6a21\u6570\u5927\u6570\u7ea7fib\u6570 \u9898\u89e3\uff1a\u5feb\u901f\u5e42\uff0cn\u6709 10^{(10^10)} 10^{(10^10)} \u590d\u6742\u5ea6\u5c31\u662f O(2*2*log(n)) O(2*2*log(n)) \u3002\u7531\u4e8en\u8fc7\u5927\u53f3\u79fb\u5bfc\u81f4\u590d\u6742\u5ea6\u7206\u70b8\u6240\u4ee5\u91c7\u7528\u5341\u8fdb\u5236\u5feb\u901f\u5e42\uff0c\u6bcf\u6b21\u53ea\u628a\u4f4d\u6570\u5f80\u53f3\u79fb\u52a8\uff0c\u4ee5\u51cf\u5c0f\u590d\u6742\u5ea6\uff0c\u8fd8\u53ef\u4ee5\u5957\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5feb\u901f\u5e42\u6765\u89e3\u51b310\u4ee5\u5185\u7684\u77e9\u9635\u4e58\u6cd5\u3002\u590d\u6742\u5ea6\u5927\u6982\u5728 O(1e6*log(10)*4) O(1e6*log(10)*4) \uff0c\u8d5b\u4e2d\u6ca1\u5957\u90a3\u4e2a\u4e8c\u8fdb\u5236\u5feb\u901f\u5e42\u4e5f\u901a\u8fc7\u4e86\u6b64\u9898\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/8/1 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; char s [ maxn ]; ll mod ; int len ; struct Matrix { ll a [ 2 ][ 2 ]; void show () { printf ( \"* \\n \" ); for ( int i = 0 ; i < 2 ; ++ i ) { for ( int j = 0 ; j < 2 ; ++ j ) printf ( \"%lld \" , a [ i ][ j ]); printf ( \" \\n \" ); } } } x ; inline Matrix mul ( const Matrix & a , const Matrix & b ) { for ( int i = 0 ; i < 2 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) { x . a [ i ][ j ] = a . a [ i ][ 0 ] * b . a [ 0 ][ j ] % mod + a . a [ i ][ 1 ] * b . a [ 1 ][ j ] % mod ; if ( x . a [ i ][ j ] >= mod ) x . a [ i ][ j ] -= mod ; } return x ; } Matrix ans , base ; Matrix pow2 ( Matrix tg , Matrix t , int n ) { Matrix res = tg ; while ( n > 0 ) { if ( n & 1 ) { res = mul ( res , t ); } t = mul ( t , t ); n >>= 1 ; } return res ; } Matrix pow () { while ( len >= 0 ) { ans = pow2 ( ans , base , s [ len ]); base = pow2 ( base , base , 9 ); len -- ; } return ans ; } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); scanf ( \"%lld%lld\" , & ans . a [ 0 ][ 0 ], & ans . a [ 0 ][ 1 ]); scanf ( \"%lld%lld\" , & base . a [ 1 ][ 1 ], & base . a [ 0 ][ 1 ]); scanf ( \"%s%lld\" , s , & mod ); for ( int i = 0 ; s [ i ]; ++ i ) { len ++ ; s [ i ] -= '0' ; } len -- ; base . a [ 1 ][ 0 ] = 1 ; pow (); printf ( \"%lld \\n \" , ans . a [ 0 ][ 0 ]); return 0 ; }","title":"B\u3001generator 1"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09/#eindependent-set-1","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u4e0d\u8d85\u8fc726\u4e2a\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u6c42 2^n \u79cd\u70b9\u96c6\u7684\u6700\u5927\u72ec\u7acb\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u9996\u5148\u5f3a\u70c8\u53cd\u5e941<<26\u4e3a6.7e7\u5de6\u53f3\uff0c\u53ef\u4ee5\u5728 2^26 \u5185\u89e3\u51b3\u95ee\u9898\u800c\u4e14\u4e0d\u80fd\u5e26\u4e00\u4e2a n \u7684\u4e8c\u7ef4\uff0c\u90a3\u4e48\u76f4\u63a5\u8003\u8651\u679a\u4e3e\u6240\u6709\u70b9\u96c6\u72b6\u538bdp\uff0c\u7136\u540e\u8003\u8651\u600e\u4e48\u6c42\u51fa\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u8003\u8651\u679a\u4e3e\u5230stat\u65f6\u4efb\u610f\u5728stat\u4e2d\u7684\u70b9x\uff0c\u663e\u7136 dp[stat] = max(dp[prestat], dp[otherstat] + 1) \u5176\u4e2dprestat\u8868\u793astat\u53bb\u6389x\uff0cotherstat\u8868\u793astat\u53bb\u6389\u4e0ex\u76f8\u90bb\u7684\u70b9\u3002 \u7136\u540e\u53bb\u6389\u76f8\u90bb\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u5728\u8bfb\u5165\u65f6\u5c06\u76f4\u8fde\u8fb9\u9884\u5904\u7406\u4e00\u4e2a\u4f4d\u8fd0\u7b97\u5373\u53ef\u3002\u6b64\u9898\u552f\u4e00\u7684\u5361\u4eba\u70b9\u5728\u4e8e\u5b83\u9700\u8981\u7528char\u4fdd\u5b58dp\u6570\u7ec4\u4e0d\u7136\u4f1a\u70b8\u5185\u5b58\u3002\u8bf4\u5b9e\u8bdd\u771f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u5361\u8fd9\u4e2a\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aE.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/8/1 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 26 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} char dp [ 1 << maxn ]; int n , m ; int c [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 , u , v ; i < m ; ++ i ) { scanf ( \"%d%d\" , & u , & v ); c [ u ] |= 1 << v ; c [ v ] |= 1 << u ; } for ( int i = 0 ; i < n ; ++ i ) c [ i ] |= 1 << i ; dp [ 0 ] = 0 ; int res = 0 ; for ( int stat = 1 ; stat < ( 1 << n ); ++ stat ) { int prestat = stat ^ ( stat & - stat ); int prestat2 = stat & ( ~ c [ __builtin_ctz ( stat &- stat )]); if ( dp [ prestat ] > dp [ prestat2 ] + 1 ) { dp [ stat ] = dp [ prestat ]; } else { dp [ stat ] = dp [ prestat2 ] + 1 ; } // printf(\"%d %d\\n\", stat, dp[stat]); // dp[stat] = max(dp[prestat], dp[prestat2] + 1); res += dp [ stat ]; } printf ( \"%d \\n \" , res ); return 0 ; }","title":"E\u3001independent set 1"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09/#fmaximum-clique-1","text":"\u9898\u610f\uff1an\u4e2a\u6570\u7684\u975e\u91cd\u96c6\u5408\uff0c\u6c42\u6700\u5927\u7684\u96c6\u5408\u4f7f\u5f97\u96c6\u5408\u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u4e0d\u540c\u4f4d\u81f3\u5c11\u4e24\u4e2a\uff0c\u8981\u6c42\u8f93\u51fa\u96c6\u5408\u4e2d\u7684\u6570\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u662f\u975e\u91cd\u96c6\u5408\uff0c\u5982\u679ca\u548cb\u4e8c\u8fdb\u5236\u4e0d\u540c\u4f4d\u53ea\u6709\u4e00\u4e2a\uff0ca\u548cc\u4e5f\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48b\u548cc\u81f3\u5c11\u6709\u4e24\u4e2a\u4f4d\u4e0d\u540c\uff0c\u6545\u6784\u5efa\u4e8c\u5206\u56fe\uff0c\u5c06\u76f8\u5dee\u4e00\u4f4d\u7684\u8fde\u8fb9\uff0c\u6c42\u7684\u5c31\u662f\u8be5\u4e8c\u5206\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 #include <bits/stdc++.h> using namespace std ; const int MAX_V = 5000 + 10 ; const int INF = 0x3f3f3f3f ; int a [ MAX_V ]; bool vis [ MAX_V ]; struct Dinic { //\u7528\u4e8e\u8868\u793a\u8fb9\u7684\u7ed3\u6784\u4f53\uff08\u7ec8\u70b9\uff0c\u6d41\u91cf\uff0c\u53cd\u5411\u8fb9\uff09 struct edge { int to , cap , rev ;}; vector < edge > G [ MAX_V ]; //\u56fe\u7684\u90bb\u63a5\u8868\u8868\u793a int level [ MAX_V ]; //\u9876\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6807\u53f7 int iter [ MAX_V ]; //\u5f53\u524d\u5f27 void init ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) G [ i ]. clear (); } void add ( int from , int to , int cap ) { G [ from ]. push_back (( edge ){ to , cap , G [ to ]. size ()}); G [ to ]. push_back (( edge ){ from , 0 , G [ from ]. size () - 1 }); } //\u8ba1\u7b97\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u8ddd\u79bb\u6807\u53f7 void bfs ( int s ) { memset ( level , - 1 , sizeof ( level )); queue < int > que ; level [ s ] = 0 ; que . push ( s ); while ( ! que . empty ()) { int v = que . front (); que . pop (); for ( int i = 0 ; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ e . to ] < 0 ) { level [ e . to ] = level [ v ] + 1 ; que . push ( e . to ); } } } } //\u901a\u8fc7DFS\u5bfb\u627e\u589e\u5e7f\u8def int dfs ( int v , int t , int f ) { if ( v == t ) return f ; for ( int & i = iter [ v ]; i < G [ v ]. size (); i ++ ) { edge & e = G [ v ][ i ]; if ( e . cap > 0 && level [ v ] < level [ e . to ]) { int d = dfs ( e . to , t , min ( f , e . cap )); if ( d > 0 ) { e . cap -= d ; G [ e . to ][ e . rev ]. cap += d ; return d ; } } } return 0 ; } //\u6c42\u89e3\u4eces\u5230t\u7684\u6700\u5927\u6d41 int max_flow ( int s , int t ) { int flow = 0 ; for (;;) { bfs ( s ); if ( level [ t ] < 0 ) return flow ; memset ( iter , 0 , sizeof ( iter )); int f ; while (( f = dfs ( s , t , INF )) > 0 ) flow += f ; } } void solve ( int S , int T , int n ) { queue < int > que ; que . push ( S ); vis [ S ] = true ; while ( ! que . empty ()) { auto u = que . front (); que . pop (); for ( auto e : G [ u ]) if ( ! vis [ e . to ] && e . cap != 0 ) que . push ( e . to ), vis [ e . to ] = true ; } set < int > ans ; for ( int i = 1 ; i <= n ; i ++ ) ans . insert ( i ); for ( int i = S ; i <= T ; i ++ ) if ( vis [ i ]) { for ( auto e : G [ i ]) if ( ! vis [ e . to ]) { if ( i == S ) ans . erase ( e . to ); if ( e . to == T ) ans . erase ( i ); } } bool flag = 0 ; for ( auto x : ans ) { if ( flag ) printf ( \" \" ); printf ( \"%d\" , a [ x ]); flag = 1 ; } } } ans ; int main () { int n ; scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); int S = 0 , T = n + 1 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( __builtin_parity ( a [ i ])) { ans . add ( i , T , 1 ); continue ; } ans . add ( S , i , 1 ); for ( int j = 1 ; j <= n ; j ++ ) if ( __builtin_popcount ( a [ i ] ^ a [ j ]) == 1 ) ans . add ( i , j , 1 ); } printf ( \"%d \\n \" , n - ans . max_flow ( S , T )); ans . solve ( S , T , n ); return 0 ; }","title":"F\u3001maximum clique 1"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09/#gsubsequence-1","text":"\u9898\u610f\uff1a\u6c42s\u4e2d\u5b50\u5e8f\u5217\u5927\u4e8et\u7684\u4e2a\u6570 \u9898\u89e3\uff1a dp[i][j] \u8868\u793as\u524di\u4f4d\uff0ct\u524dj\u4f4d\u76f8\u7b49\u957f\u5ea6\u7684\u7b54\u6848\u3002\u7136\u540e\u8fd8\u6709s\u6bd4t\u957f\u7684\u7ec4\u5408\u6570\u6c42\u4e00\u4e0b\u89e3\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int maxn = 3000 + 10 ; const int mod = 998244353 ; char a [ maxn ], b [ maxn ]; ll dp [ maxn ][ maxn ]; ll fac [ maxn ], inv [ maxn ], facinv [ maxn ]; void init () { fac [ 0 ] = inv [ 0 ] = facinv [ 0 ] = 1 ; fac [ 1 ] = inv [ 1 ] = facinv [ 1 ] = 1 ; for ( int i = 2 ; i < maxn ; i ++ ) { fac [ i ] = fac [ i - 1 ] * i % mod ; inv [ i ] = mod - mod / i * inv [ mod % i ] % mod ; facinv [ i ] = facinv [ i - 1 ] * inv [ i ] % mod ; } } ll C ( int n , int k ) { if ( k > n || k < 0 ) return 0 ; return fac [ n ] * facinv [ k ] % mod * facinv [ n - k ] % mod ; } int main () { int _ , n , m ; init (); scanf ( \"%d\" , & _ ); while ( _ -- ) { ll ans = 0 ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i <= n ; i ++ ) for ( int j = 0 ; j <= m ; j ++ ) dp [ i ][ j ] = 0 ; scanf ( \"%s%s\" , a + 1 , b + 1 ); dp [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ][ 0 ] = 1 ; for ( int j = 1 ; j <= m ; j ++ ) { ( dp [ i ][ j ] += dp [ i - 1 ][ j ]) %= mod ; if ( a [ i ] > b [ j ]) ( ans += dp [ i - 1 ][ j - 1 ] * C ( n - i , m - j ) % mod ) %= mod ; else if ( a [ i ] == b [ j ]) ( dp [ i ][ j ] += dp [ i - 1 ][ j - 1 ]) %= mod ; } } for ( int i = 1 ; i <= n ; i ++ ) if ( a [ i ] != '0' ) for ( int j = m ; j <= n ; j ++ ) ( ans += C ( n - i , j )) %= mod ; printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"G\u3001subsequence 1"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e94\u573a\uff09/#hsubsequence-2","text":"\u9898\u610f\uff1a\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f7f\u5f97\u6ee1\u8db3m\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u7ed9\u51fa\u4e24\u4e2a\u5b57\u7b26\uff0c\u7ed9\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5305\u542b\u8fd9\u4e24\u4e2a\u5b57\u7b26\u7684\u6700\u5927\u5b50\u5e8f\u5217\uff0c\u4fdd\u8bc1\u7ed9\u51fa\u7684\u6761\u4ef6\u4e0d\u91cd\u590d\u800c\u4e14\u662f\u524dm\u5c0f\u4e2a\u5b57\u7b26\u6784\u6210\u3002 \u9898\u89e3\uff1a\u5bf9m\u4e2a\u5b57\u7b26\u6784\u9020n\u4e2a\u70b9\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u662f\u4ec0\u4e48\u5b57\u7b26\uff0c\u7136\u540e\u5bf9\u5148\u540e\u987a\u5e8f\u5efa\u7acb\u6709\u5411\u56fe\uff0c\u8dd1\u51fatop\u5e8f\u5c31\u662f\u7b54\u6848\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 #include <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; int n , m ; bool vis [ maxn ]; int pt ( int num , int i ) { vis [ num * n + i ] = true ; return num * n + i ; } char s [ maxn ], a [ 15 ]; int point [ maxn ], out [ maxn ]; vector < int > edge [ maxn ]; int indegree [ maxn ]; void add ( int u , int v ) { edge [ u ]. push_back ( v ); indegree [ v ] ++ ; out [ u ] ++ ; } int getpoint ( int x ) { return x / n ; } vector < int > ans ; bool Toposort () { queue < int > que ; for ( int i = 0 ; i <= n * m ; i ++ ) if ( ! indegree [ i ] && vis [ i ]) que . push ( i ); //\u5c06\u56fe\u4e2d\u6ca1\u6709\u524d\u9a71\uff0c\u5373\u5165\u5ea6\u4e3a0\u7684\u70b9\u52a0\u5165\u961f\u5217 int cnt = 0 ; while ( ! que . empty ()) { int u = que . front (); que . pop (); ans . push_back ( getpoint ( u )); indegree [ u ] =- 1 ; //\u4ece\u56fe\u4e2d\u5220\u53bb\u6b64\u9876\u70b9 cnt ++ ; for ( int i = 0 ; i < edge [ u ]. size (); i ++ ) { int v = edge [ u ][ i ]; indegree [ v ] -- ; //\u5220\u53bb\u56fe\u4e2d\u4ee5u\u4e3a\u5c3e\u7684\u5f27 if ( ! indegree [ v ]) que . push ( v ); //\u5c06\u65b0\u589e\u7684\u5f53\u524d\u5165\u5ea6\u4e3a0\u7684\u70b9\u538b\u5165\u961f\u5217\u4e2d } } return cnt == n ; } int main () { int t ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m * ( m - 1 ) / 2 ; i ++ ) { scanf ( \"%s%d\" , a , & t ); if ( t == 0 ) continue ; scanf ( \"%s\" , s ); int pos1 = 0 , pos2 = 0 ; for ( int i = 0 ; i < t ; i ++ ) { if ( s [ i ] == a [ 0 ]) point [ i ] = pt ( a [ 0 ] - 'a' , pos1 ++ ); else if ( s [ i ] == a [ 1 ]) point [ i ] = pt ( a [ 1 ] - 'a' , pos2 ++ ); } for ( int i = 0 ; i < t - 1 ; i ++ ) add ( point [ i ], point [ i + 1 ]); } int cnt = 0 ; for ( int i = 0 ; i <= n * m ; i ++ ) if ( vis [ i ] && ! out [ i ]) cnt ++ ; if ( cnt > 1 ) return 0 * puts ( \"-1\" ); if ( ! Toposort ()) return 0 * puts ( \"-1\" ); if ( ans . size () != n ) return 0 * puts ( \"-1\" ); for ( int x : ans ) printf ( \"%c\" , x + 'a' ); printf ( \" \\n \" ); return 0 ; }","title":"H\u3001subsequence 2"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09/","text":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09 Link Date Solved A B C D E F G H I J K 2019/7/27 7/11 O \u00d8 O O . . . . \u00d8 O O A\u3001 meeting Link \u6c42\u4e00\u68f5\u6811\u4e0a\u5230\u6240\u6709\u5173\u952e\u70b9\u8ddd\u79bb\u6700\u5927\u503c\u6700\u5c0f\u7684\u70b9\u8ddd\u79bb\u3002 \u6211\u7684\u505a\u6cd5\u76f4\u63a5\u4e0adfs\u5e8f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u6811\u7684\u8ddd\u79bb\u6700\u503c\uff0c\u6bcf\u6b21dfs\u65f6\u603b\u628a\u5b50\u6811\u5916\u7684\u5173\u952e\u70b9\u8ddd\u79bb+1\uff0c\u5b50\u6811\u5185-1\uff0c\u679a\u4e3e\u51fa\u6700\u5c0f\u503c\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/27 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; vector < int > edge [ maxn ]; int a [ maxn ]; int val [ maxn << 2 ], lazy [ maxn << 2 ]; int idx [ maxn ], tot , res , sz [ maxn ]; int st [ maxn ]; int le , re , k ; inline void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } inline void build ( int rt , int l , int r ) { val [ rt ] = 0 ; if ( l == r ) { val [ rt ] = st [ l ]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline void update ( int rt , int l , int r ) { if ( re < le || le <= 0 || re > n ) return ; if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } int mid = l + r >> 1 ; pushdown ( rt ); if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline void dfs ( int u , int pre , int dep ) { idx [ u ] = ++ tot ; if ( a [ u ]) { st [ tot ] = dep ; // printf(\"%d: %d\\n\", tot, dep); // le = tot, re = tot; // k = dep; // update(1, 1, n); } sz [ u ] = 1 ; for ( auto v : edge [ u ]) { if ( v == pre ) continue ; dfs ( v , u , dep + 1 ); sz [ u ] += sz [ v ]; } } inline void dfs2 ( int u , int pre ) { for ( auto v : edge [ u ]) { if ( v == pre ) continue ; le = 1 , re = idx [ v ] - 1 ; k = 1 ; update ( 1 , 1 , n ); le = idx [ v ], re = idx [ v ] + sz [ v ] - 1 ; k = - 1 ; update ( 1 , 1 , n ); le = re + 1 ; re = n ; k = 1 ; update ( 1 , 1 , n ); res = min ( res , val [ 1 ]); dfs2 ( v , u ); le = 1 , re = idx [ v ] - 1 ; k = - 1 ; update ( 1 , 1 , n ); le = idx [ v ], re = idx [ v ] + sz [ v ] - 1 ; k = 1 ; update ( 1 , 1 , n ); le = re + 1 ; re = n ; k = - 1 ; update ( 1 , 1 , n ); } } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , v ; i < n ; ++ i ) { scanf ( \"%d%d\" , & u , & v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } for ( int i = 1 , x ; i <= m ; ++ i ) { scanf ( \"%d\" , & x ); a [ x ] = 1 ; } dfs ( 1 , 0 , 0 ); build ( 1 , 1 , n ); // printf(\"%d\\n\", val[1]); res = val [ 1 ]; dfs2 ( 1 , 0 ); printf ( \"%d \\n \" , res ); return 0 ; } I\u3001 string Link \u7ed9\u4e00\u4e2a\u4e32\u6c42\u5012\u5e8f\u4e0d\u540c\u5b50\u4e32\u7684\u6700\u5927\u96c6\u5408\u5927\u5c0f\u3002\u6307\u96c6\u5408\u5185\u6ca1\u6709\u53e6\u4e00\u4e2a\u4e32\u4e0e\u73b0\u5728\u8fd9\u4e2a\u4e32\u5012\u5e8f\u76f8\u540c\u3002 \u9996\u5148\u56de\u6587\u4e32\u662f\u5012\u5e8f\u4e0e\u672c\u8eab\u76f8\u540c\u4f46\u662f\u662f\u7b26\u5408\u9898\u610f\u7684\u4e32\uff0c\u7136\u540e\u8003\u8651\u6240\u6709\u5b50\u4e32\uff0c\u76f4\u63a5\u6784\u9020\u4e00\u4e2a s#s' \u7684\u4e32\uff0c s' \u8868\u793a s \u7684\u5012\u5e8f\u4e32\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u5c31\u662f s \u4e2d\u7684\u5012\u5e8f\u4e0d\u540c\u4e32\u00d72+ s \u4e2d\u7684\u5012\u5e8f\u76f8\u540c\u4e32\u5bf9\u6570\u00d72+\u56de\u6587\u4e32\uff0c\u7136\u540e\u8981\u6c42\u7684\u662f s \u4e2d\u7684\u5012\u5e8f\u4e0d\u540c\u4e32+ s \u4e2d\u7684\u5012\u5e8f\u76f8\u540c\u4e32\u5bf9\u6570+\u56de\u6587\u4e32\u3002\u6240\u4ee5\u518d\u8dd1\u4e2a\u56de\u6587\u4e32\u6570\u91cf\u76f8\u52a0\u9664\u4e8c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 #include <bits/stdc++.h> using namespace std ; const int maxn = 4e5 + 10 ; char s [ maxn ]; struct SuffixAutomation { int last , cnt ; int ch [ maxn << 1 ][ 27 ], fa [ maxn << 1 ], len [ maxn << 1 ]; long long ans = 0 ; void init () { last = cnt = 1 ; memset ( ch [ 1 ], 0 , sizeof ch [ 1 ]); fa [ 1 ] = len [ 1 ] = 0 ; } void ins ( int c ) { int p = last , np = ++ cnt ; last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = ++ cnt ; len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } ans += len [ np ] - len [ fa [ np ]]; } } sam ; const int N = 26 ; struct Palindromic_Tree { // vector<pair<int, int> > next[maxn]; int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6784\u6210 int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int cnt [ maxn ]{}; //\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u7684\u4e2a\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0c\u6700\u540ecount()\u51fd\u6570\u8dd1\u4e00\u904d\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 // next[p].clear(); for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; // cnt[p] = 0; // num[p] = 0; len [ p ] = l ; return p ++ ; } void init () { //\u521d\u59cb\u5316 n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; } int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } // int find(int u, int c) { // vector<pair<int, int> > & x = next[u]; // int sz = x.size(); // for(int i = 0; i < sz; ++i) { // if(x[i].first == c) return x[i].second; // } // return 0; // } int add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e // int x = find(cur, c); // if (!x) { if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 // x = now; // fail[now] = find(get_fail(fail[cur]), c); // next[cur].emplace_back(make_pair(c, now)); fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u4fbf\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } // last = x; last = next [ cur ][ c ]; // cnt[last]++; return num [ last ]; } void count () { for ( int i = p - 1 ; i >= 0 ; -- i ) cnt [ fail [ i ]] += cnt [ i ]; //\u7236\u4eb2\u7d2f\u52a0\u513f\u5b50\u7684cnt\uff0c\u56e0\u4e3a\u5982\u679cfail[v]=u\uff0c\u5219u\u4e00\u5b9a\u662fv\u7684\u5b50\u56de\u6587\u4e32\uff01 } } solve ; int main () { scanf ( \"%s\" , s ); sam . init (); int n = strlen ( s ); for ( int i = 0 ; i < n ; i ++ ) sam . ins ( s [ i ] - 'a' ); long long res = 0 ; sam . ins ( 26 ); for ( int i = n - 1 ; i >= 0 ; i -- ) sam . ins ( s [ i ] - 'a' ); res += sam . ans ; res -= 1ll * ( n + 1 ) * ( n + 1 ); solve . init (); for ( int i = 0 ; i < n ; i ++ ) solve . add ( s [ i ] - 'a' ); long long ans = solve . p - 2 ; printf ( \"%lld \\n \" , ( ans + res ) / 2 ); return 0 ; } K\u3001 number Link \u7ed9\u4e00\u4e2a\u6570\u5b57\u4e32\u6c42\u80fd\u88ab300\u6574\u9664\u7684\u6570\u5b57\u5b50\u4e32\u6570\u91cf\uff08\u53ef\u542b\u524d\u5bfc\u96f6\uff0c\u53ef\u542b\u76f8\u540c\u4e32\uff09 \u4f17\u6240\u5468\u77e5\u80fd\u88ab3\u6574\u9664\u7684\u6570\u6570\u4f4d\u548c\u4e3a3\u7684\u500d\u6570\uff0c\u6240\u4ee5\u8ba1\u4e00\u4e2a\u524d\u7f00\u6570\u4f4d\u548c\uff0c\u7136\u540e\u8ba1\u4e00\u4e2a\u540e\u7f00\u96f6\u4e2a\u6570\uff0c\u90a3\u4e48\u679a\u4e3e\u5f53\u524d\u4f4d\u4e3a\u975e0\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f pre[i][0] * (lst[i+1]-1) pre[i][0] * (lst[i+1]-1) \uff0c\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u628a\u51680\u7684\u65b9\u6848\u6570\u52a0\u4e0a\u53bb\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1ak.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/27 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} char s [ maxn ]; ll pre [ maxn ][ 3 ]; ll lst [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%s\" , s + 1 ); int len = 0 ; for ( int i = 1 ; s [ i ]; ++ i ) { // for (int j = 0; j < 3; ++j) // pre[i][j] = pre[i - 1][j]; int tmp = ( s [ i ] - '0' ) % 3 ; ll tt [ 3 ]; for ( int j = 0 ; j < 3 ; ++ j ) { tt [ j ] = pre [ i - 1 ][( j - tmp + 3 ) % 3 ]; } for ( int j = 0 ; j < 3 ; ++ j ) { pre [ i ][ j ] += tt [ j ]; } pre [ i ][ tmp ] ++ ; // pre[i][(s[i] - '0') % 3] ++; len ++ ; } ll tot = 0 ; for ( int i = len ; i >= 1 ; -- i ) { if ( s [ i ] == '0' ) lst [ i ] = lst [ i + 1 ] + 1 ; else { tot += ( lst [ i + 1 ] * ( lst [ i + 1 ] - 1 ) / 2 ) + lst [ i + 1 ]; lst [ i ] = 0 ; } } tot += lst [ 1 ] * ( lst [ 1 ] - 1 ) / 2 + lst [ 1 ]; ll res = 0 ; // printf(\"%lld\\n\", tot); for ( int i = 1 ; i < len ; ++ i ) { if ( lst [ i + 1 ] >= 1 && s [ i ] != '0' ) res += pre [ i ][ 0 ] * ( lst [ i + 1 ] - 1 ); // res += pre[i][0] * lst[i + 1]; } printf ( \"%lld \\n \" , res + tot ); return 0 ; }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09/#2019","text":"Date Solved A B C D E F G H I J K 2019/7/27 7/11 O \u00d8 O O . . . . \u00d8 O O","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09/#ameeting","text":"\u6c42\u4e00\u68f5\u6811\u4e0a\u5230\u6240\u6709\u5173\u952e\u70b9\u8ddd\u79bb\u6700\u5927\u503c\u6700\u5c0f\u7684\u70b9\u8ddd\u79bb\u3002 \u6211\u7684\u505a\u6cd5\u76f4\u63a5\u4e0adfs\u5e8f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u6811\u7684\u8ddd\u79bb\u6700\u503c\uff0c\u6bcf\u6b21dfs\u65f6\u603b\u628a\u5b50\u6811\u5916\u7684\u5173\u952e\u70b9\u8ddd\u79bb+1\uff0c\u5b50\u6811\u5185-1\uff0c\u679a\u4e3e\u51fa\u6700\u5c0f\u503c\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aA.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/27 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n , m ; vector < int > edge [ maxn ]; int a [ maxn ]; int val [ maxn << 2 ], lazy [ maxn << 2 ]; int idx [ maxn ], tot , res , sz [ maxn ]; int st [ maxn ]; int le , re , k ; inline void pushdown ( int rt ) { if ( lazy [ rt ]) { lazy [ rt << 1 ] += lazy [ rt ]; lazy [ rt << 1 | 1 ] += lazy [ rt ]; val [ rt << 1 ] += lazy [ rt ]; val [ rt << 1 | 1 ] += lazy [ rt ]; lazy [ rt ] = 0 ; } } inline void build ( int rt , int l , int r ) { val [ rt ] = 0 ; if ( l == r ) { val [ rt ] = st [ l ]; return ; } int mid = l + r >> 1 ; build ( rt << 1 , l , mid ); build ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline void update ( int rt , int l , int r ) { if ( re < le || le <= 0 || re > n ) return ; if ( le <= l && r <= re ) { val [ rt ] += k ; lazy [ rt ] += k ; return ; } int mid = l + r >> 1 ; pushdown ( rt ); if ( le <= mid ) update ( rt << 1 , l , mid ); if ( re > mid ) update ( rt << 1 | 1 , mid + 1 , r ); val [ rt ] = max ( val [ rt << 1 ], val [ rt << 1 | 1 ]); } inline void dfs ( int u , int pre , int dep ) { idx [ u ] = ++ tot ; if ( a [ u ]) { st [ tot ] = dep ; // printf(\"%d: %d\\n\", tot, dep); // le = tot, re = tot; // k = dep; // update(1, 1, n); } sz [ u ] = 1 ; for ( auto v : edge [ u ]) { if ( v == pre ) continue ; dfs ( v , u , dep + 1 ); sz [ u ] += sz [ v ]; } } inline void dfs2 ( int u , int pre ) { for ( auto v : edge [ u ]) { if ( v == pre ) continue ; le = 1 , re = idx [ v ] - 1 ; k = 1 ; update ( 1 , 1 , n ); le = idx [ v ], re = idx [ v ] + sz [ v ] - 1 ; k = - 1 ; update ( 1 , 1 , n ); le = re + 1 ; re = n ; k = 1 ; update ( 1 , 1 , n ); res = min ( res , val [ 1 ]); dfs2 ( v , u ); le = 1 , re = idx [ v ] - 1 ; k = - 1 ; update ( 1 , 1 , n ); le = idx [ v ], re = idx [ v ] + sz [ v ] - 1 ; k = 1 ; update ( 1 , 1 , n ); le = re + 1 ; re = n ; k = - 1 ; update ( 1 , 1 , n ); } } int main ( int argc , char * argv []) { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , v ; i < n ; ++ i ) { scanf ( \"%d%d\" , & u , & v ); edge [ u ]. push_back ( v ); edge [ v ]. push_back ( u ); } for ( int i = 1 , x ; i <= m ; ++ i ) { scanf ( \"%d\" , & x ); a [ x ] = 1 ; } dfs ( 1 , 0 , 0 ); build ( 1 , 1 , n ); // printf(\"%d\\n\", val[1]); res = val [ 1 ]; dfs2 ( 1 , 0 ); printf ( \"%d \\n \" , res ); return 0 ; }","title":"A\u3001meeting"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09/#istring","text":"\u7ed9\u4e00\u4e2a\u4e32\u6c42\u5012\u5e8f\u4e0d\u540c\u5b50\u4e32\u7684\u6700\u5927\u96c6\u5408\u5927\u5c0f\u3002\u6307\u96c6\u5408\u5185\u6ca1\u6709\u53e6\u4e00\u4e2a\u4e32\u4e0e\u73b0\u5728\u8fd9\u4e2a\u4e32\u5012\u5e8f\u76f8\u540c\u3002 \u9996\u5148\u56de\u6587\u4e32\u662f\u5012\u5e8f\u4e0e\u672c\u8eab\u76f8\u540c\u4f46\u662f\u662f\u7b26\u5408\u9898\u610f\u7684\u4e32\uff0c\u7136\u540e\u8003\u8651\u6240\u6709\u5b50\u4e32\uff0c\u76f4\u63a5\u6784\u9020\u4e00\u4e2a s#s' \u7684\u4e32\uff0c s' \u8868\u793a s \u7684\u5012\u5e8f\u4e32\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u5c31\u662f s \u4e2d\u7684\u5012\u5e8f\u4e0d\u540c\u4e32\u00d72+ s \u4e2d\u7684\u5012\u5e8f\u76f8\u540c\u4e32\u5bf9\u6570\u00d72+\u56de\u6587\u4e32\uff0c\u7136\u540e\u8981\u6c42\u7684\u662f s \u4e2d\u7684\u5012\u5e8f\u4e0d\u540c\u4e32+ s \u4e2d\u7684\u5012\u5e8f\u76f8\u540c\u4e32\u5bf9\u6570+\u56de\u6587\u4e32\u3002\u6240\u4ee5\u518d\u8dd1\u4e2a\u56de\u6587\u4e32\u6570\u91cf\u76f8\u52a0\u9664\u4e8c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 #include <bits/stdc++.h> using namespace std ; const int maxn = 4e5 + 10 ; char s [ maxn ]; struct SuffixAutomation { int last , cnt ; int ch [ maxn << 1 ][ 27 ], fa [ maxn << 1 ], len [ maxn << 1 ]; long long ans = 0 ; void init () { last = cnt = 1 ; memset ( ch [ 1 ], 0 , sizeof ch [ 1 ]); fa [ 1 ] = len [ 1 ] = 0 ; } void ins ( int c ) { int p = last , np = ++ cnt ; last = np , len [ np ] = len [ p ] + 1 ; for (; p && ! ch [ p ][ c ]; p = fa [ p ]) ch [ p ][ c ] = np ; if ( ! p ) fa [ np ] = 1 ; else { int q = ch [ p ][ c ]; if ( len [ p ] + 1 == len [ q ]) fa [ np ] = q ; else { int nq = ++ cnt ; len [ nq ] = len [ p ] + 1 ; memcpy ( ch [ nq ], ch [ q ], sizeof ch [ q ]); fa [ nq ] = fa [ q ], fa [ q ] = fa [ np ] = nq ; for (; ch [ p ][ c ] == q ; p = fa [ p ]) ch [ p ][ c ] = nq ; } } ans += len [ np ] - len [ fa [ np ]]; } } sam ; const int N = 26 ; struct Palindromic_Tree { // vector<pair<int, int> > next[maxn]; int next [ maxn ][ N ]; //next\u6307\u9488\uff0cnext\u6307\u9488\u548c\u5b57\u5178\u6811\u7c7b\u4f3c\uff0c\u6307\u5411\u7684\u4e32\u4e3a\u5f53\u524d\u4e32\u4e24\u7aef\u52a0\u4e0a\u540c\u4e00\u4e2a\u5b57\u7b26\u6784\u6210 int fail [ maxn ]{}; //fail\u6307\u9488\uff0c\u5931\u914d\u540e\u8df3\u8f6c\u5230fail\u6307\u9488\u6307\u5411\u7684\u8282\u70b9 int cnt [ maxn ]{}; //\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u672c\u8d28\u4e0d\u540c\u7684\u4e32\u7684\u4e2a\u6570\uff08\u5efa\u6811\u65f6\u6c42\u51fa\u7684\u4e0d\u662f\u5b8c\u5168\u7684\uff0c\u6700\u540ecount()\u51fd\u6570\u8dd1\u4e00\u904d\u4ee5\u540e\u624d\u662f\u6b63\u786e\u7684\uff09 int num [ maxn ]{}; //\u8868\u793a\u4ee5\u8282\u70b9i\u8868\u793a\u7684\u6700\u957f\u56de\u6587\u4e32\u7684\u6700\u53f3\u7aef\u70b9\u4e3a\u56de\u6587\u4e32\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570 int len [ maxn ]{}; //len[i]\u8868\u793a\u8282\u70b9i\u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff08\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u56de\u6587\u4e32\uff09 int S [ maxn ]{}; //\u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26 int last {}; //\u6307\u5411\u65b0\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u540e\u6240\u5f62\u6210\u7684\u6700\u957f\u56de\u6587\u4e32\u8868\u793a\u7684\u8282\u70b9\u3002 int n {}; //\u8868\u793a\u6dfb\u52a0\u7684\u5b57\u7b26\u4e2a\u6570\u3002 int p {}; //\u8868\u793a\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u3002 int newnode ( int l ) { //\u65b0\u5efa\u8282\u70b9 // next[p].clear(); for ( int i = 0 ; i < N ; ++ i ) next [ p ][ i ] = 0 ; // cnt[p] = 0; // num[p] = 0; len [ p ] = l ; return p ++ ; } void init () { //\u521d\u59cb\u5316 n = last = p = 0 ; newnode ( 0 ); newnode ( - 1 ); S [ n ] = - 1 ; //\u5f00\u5934\u653e\u4e00\u4e2a\u5b57\u7b26\u96c6\u4e2d\u6ca1\u6709\u7684\u5b57\u7b26\uff0c\u51cf\u5c11\u7279\u5224 fail [ 0 ] = 1 ; } int get_fail ( int x ) { //\u548cKMP\u4e00\u6837\uff0c\u5931\u914d\u540e\u627e\u4e00\u4e2a\u5c3d\u91cf\u6700\u957f\u7684 while ( S [ n - len [ x ] - 1 ] != S [ n ]) x = fail [ x ]; return x ; } // int find(int u, int c) { // vector<pair<int, int> > & x = next[u]; // int sz = x.size(); // for(int i = 0; i < sz; ++i) { // if(x[i].first == c) return x[i].second; // } // return 0; // } int add ( int c ) { S [ ++ n ] = c ; int cur = get_fail ( last ); //\u901a\u8fc7\u4e0a\u4e00\u4e2a\u56de\u6587\u4e32\u627e\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u5339\u914d\u4f4d\u7f6e // int x = find(cur, c); // if (!x) { if ( ! next [ cur ][ c ]) { //\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32 int now = newnode ( len [ cur ] + 2 ); //\u65b0\u5efa\u8282\u70b9 // x = now; // fail[now] = find(get_fail(fail[cur]), c); // next[cur].emplace_back(make_pair(c, now)); fail [ now ] = next [ get_fail ( fail [ cur ])][ c ]; //\u548cAC\u81ea\u52a8\u673a\u4e00\u6837\u5efa\u7acbfail\u6307\u9488\uff0c\u4ee5\u4fbf\u5931\u914d\u540e\u8df3\u8f6c next [ cur ][ c ] = now ; num [ now ] = num [ fail [ now ]] + 1 ; } // last = x; last = next [ cur ][ c ]; // cnt[last]++; return num [ last ]; } void count () { for ( int i = p - 1 ; i >= 0 ; -- i ) cnt [ fail [ i ]] += cnt [ i ]; //\u7236\u4eb2\u7d2f\u52a0\u513f\u5b50\u7684cnt\uff0c\u56e0\u4e3a\u5982\u679cfail[v]=u\uff0c\u5219u\u4e00\u5b9a\u662fv\u7684\u5b50\u56de\u6587\u4e32\uff01 } } solve ; int main () { scanf ( \"%s\" , s ); sam . init (); int n = strlen ( s ); for ( int i = 0 ; i < n ; i ++ ) sam . ins ( s [ i ] - 'a' ); long long res = 0 ; sam . ins ( 26 ); for ( int i = n - 1 ; i >= 0 ; i -- ) sam . ins ( s [ i ] - 'a' ); res += sam . ans ; res -= 1ll * ( n + 1 ) * ( n + 1 ); solve . init (); for ( int i = 0 ; i < n ; i ++ ) solve . add ( s [ i ] - 'a' ); long long ans = solve . p - 2 ; printf ( \"%lld \\n \" , ( ans + res ) / 2 ); return 0 ; }","title":"I\u3001string"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u56db\u573a\uff09/#knumber","text":"\u7ed9\u4e00\u4e2a\u6570\u5b57\u4e32\u6c42\u80fd\u88ab300\u6574\u9664\u7684\u6570\u5b57\u5b50\u4e32\u6570\u91cf\uff08\u53ef\u542b\u524d\u5bfc\u96f6\uff0c\u53ef\u542b\u76f8\u540c\u4e32\uff09 \u4f17\u6240\u5468\u77e5\u80fd\u88ab3\u6574\u9664\u7684\u6570\u6570\u4f4d\u548c\u4e3a3\u7684\u500d\u6570\uff0c\u6240\u4ee5\u8ba1\u4e00\u4e2a\u524d\u7f00\u6570\u4f4d\u548c\uff0c\u7136\u540e\u8ba1\u4e00\u4e2a\u540e\u7f00\u96f6\u4e2a\u6570\uff0c\u90a3\u4e48\u679a\u4e3e\u5f53\u524d\u4f4d\u4e3a\u975e0\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f pre[i][0] * (lst[i+1]-1) pre[i][0] * (lst[i+1]-1) \uff0c\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u628a\u51680\u7684\u65b9\u6848\u6570\u52a0\u4e0a\u53bb\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1ak.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 2019/7/27 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} char s [ maxn ]; ll pre [ maxn ][ 3 ]; ll lst [ maxn ]; int main ( int argc , char * argv []) { scanf ( \"%s\" , s + 1 ); int len = 0 ; for ( int i = 1 ; s [ i ]; ++ i ) { // for (int j = 0; j < 3; ++j) // pre[i][j] = pre[i - 1][j]; int tmp = ( s [ i ] - '0' ) % 3 ; ll tt [ 3 ]; for ( int j = 0 ; j < 3 ; ++ j ) { tt [ j ] = pre [ i - 1 ][( j - tmp + 3 ) % 3 ]; } for ( int j = 0 ; j < 3 ; ++ j ) { pre [ i ][ j ] += tt [ j ]; } pre [ i ][ tmp ] ++ ; // pre[i][(s[i] - '0') % 3] ++; len ++ ; } ll tot = 0 ; for ( int i = len ; i >= 1 ; -- i ) { if ( s [ i ] == '0' ) lst [ i ] = lst [ i + 1 ] + 1 ; else { tot += ( lst [ i + 1 ] * ( lst [ i + 1 ] - 1 ) / 2 ) + lst [ i + 1 ]; lst [ i ] = 0 ; } } tot += lst [ 1 ] * ( lst [ 1 ] - 1 ) / 2 + lst [ 1 ]; ll res = 0 ; // printf(\"%lld\\n\", tot); for ( int i = 1 ; i < len ; ++ i ) { if ( lst [ i + 1 ] >= 1 && s [ i ] != '0' ) res += pre [ i ][ 0 ] * ( lst [ i + 1 ] - 1 ); // res += pre[i][0] * lst[i + 1]; } printf ( \"%lld \\n \" , res + tot ); return 0 ; }","title":"K\u3001number"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shanghai 2019/","text":"Name Date Solved A B C D E F G H I J K L The Preliminary Contest for ICPC Asia Shanghai 2019 2019/9/15 7/12 . O . O \u00d8 \u00d8 \u00d8 . . O . O tag Link #B sort\uff08\u5047\u7ebf\u6bb5\u6811\uff09# D \u66b4\u529b #\u3000E \u751f\u6210\u51fd\u6570 #F dp # G\u66b4\u529b\uff08unordermap hash\uff09 #J \u80cc\u5305 #L\u66b4\u529b B. Light bulbs Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u521d\u59cb\u4e3a0\u7684\u5e8f\u5217\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u533a\u95f4\u7ffb\u8f6c\uff080\u53d81\uff0c1\u53d80\uff09\uff0c\u6c42\u6700\u7ec8\u6709\u591a\u5c11\u4e2a\u70b9\u7684\u503c\u4e3a1\u3002\u6570\u636e\u8303\u56f4\u7ec4\u6570 1000 \uff0c\u957f\u5ea6 1e6 \uff0c\u64cd\u4f5c 1000 \u6b21 \u9898\u89e3\uff1a\u521d\u770b\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4\u548c\u3001\u5355\u6b21\u67e5\u8be2\u6574\u4e2a\u5e8f\u5217\u7684\u88f8\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7ec4\u6570 1000 \u590d\u6742\u5ea6\u4f1a\u70b8\u6389\uff0c\u800c\u64cd\u4f5c\u6570\u8f83\u5c11\u6240\u4ee5\u76f4\u63a5\u5bf9\u64cd\u4f5c\u5dee\u5206\u6309\u5de6\u53f3\u6392\u5e8f\uff0c\u626b\u4e00\u904d\u6c42\u51fa\u7ed3\u679c\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(T*mlog(m)) \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/15/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} vector < pair < int , int > > query ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n , q ; scanf ( \"%d%d\" , & n , & q ); query . resize ( q * 2 ); for ( int i = 0 ; i < q ; ++ i ) { int x , y ; scanf ( \"%d%d\" , & x , & y ); query [ i ]. first = x ; query [ i ]. second = 0 ; query [ i + q ]. first = y + 1 ; query [ i + q ]. second = 1 ; } sort ( query . begin (), query . end ()); int now = 1 ; int pre = query [ 0 ]. first ; int res = 0 ; for ( int i = 1 ; i < query . size (); ++ i ) { res += ( now & 1 ) * ( query [ i ]. first - pre ); if ( query [ i ]. second == 1 ) { now -- ; } else now ++ ; pre = query [ i ]. first ; } printf ( \"Case #%d: %d \\n \" , kase , res ); } return 0 ; } D. Counting Sequences I Link \u9898\u610f\uff1a\u6c42n\u4e2a\u6b63\u6574\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u7b49\u4e8e\u4ed6\u4eec\u7684\u79ef\u7684\u65b9\u6848\u6570 n \\le 3000 n \\le 3000 \u9898\u89e3\uff1a\u8bba\u6587\u4e0a\u5199\u4e86\u5f88\u591a\u8f93\u51fa\u6240\u6709\u65b9\u6848\u7684\u505a\u6cd5\uff0coeis\u4e0a\u4e5f\u6709\u5982\u679c\u9650\u5b9a\u8fd9\u4e9b\u6b63\u6574\u6570\u4e3a1~9\u65f6\u7684\u65b9\u6848\u6570\u91cf\u7684\u8868\uff0c\u8fd8\u6709\u6240\u6709\u975e\u91cd\u96c6\u7684\u65b9\u6848\u6570\u7684\u8868\uff0c\u4f46\u662f\u8fd9\u9898\u8981\u6c42\u6240\u6709\u65b9\u6848\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7206\u641c\u51fa\u6240\u6709\u65b9\u6848\u3002\u5bf93000\u4e2a\u6570\u6253\u8868\uff0c\u6bcf\u4e2a\u6570k\u7206\u641c\u51fa \\prod a_i = k \\prod a_i = k \uff0c\u7136\u540e\u53ef\u4ee5\u6839\u636e k - \\sum a_i k - \\sum a_i \u6c42\u51fa1\u7684\u6570\u91cf\uff0c\u5bf9\u8fd9\u4e2a\u65b9\u6848\u8fdb\u884c\u975e\u91cd\u6392\u5217\u5373\u53ef\u5f97\u5230\u67d0\u4e2a\u6570\u7684\u89e3\u3002\u641c\u7d226000\u4e2a\u6570\u4ee5\u5185\u5c31\u53ef\u4ee5\u6253\u51fa3000\u7684\u8868\uff08\u8bba\u6587\u4e2d\u6709\u8bc1\u660e\u5bf9\u4e8en\u4e2a\u6570\uff0c\u8981\u7ec4\u6210\u548c\u4e0e\u79ef\u76f8\u7b49\u7684\u65b9\u6848\u5fc5\u4e0d\u5927\u4e8e 2\u00d7n \uff09\u8fd9\u8fb9\u76f4\u63a5\u628a\u8868\u6253\u597d\u8f93\u51fa\u5230\u6587\u4ef6\u5199\u7684\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\u3002 \u79d1\u666e\uff1a\u975e\u91cd\u6392\u5217\u7684\u89e3\u6cd5\u662f\uff1a\u4e00\u5171\u6709 n \u4e2a\u5143\u7d20\uff0c\u5176\u4e2d\u7b2c i \u79cd\u5143\u7d20\u6709 a_i \u4e2a\uff0c\u5219\u603b\u6392\u5217\u6570\u6709 \\frac{n!}{\\prod{a_i!}} \\frac{n!}{\\prod{a_i!}} \u4e2a\u3002 F. Rhyme scheme Link \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u7c7b\u5b57\u7b26\u4e32\u7684\u6784\u9020\u65b9\u6848\uff1a\u524di-1\u4f4d\u7684\u6700\u5927\u5b57\u7b26\u4e3a\u2019mx\u2019\uff0c\u5219\u7b2ci\u4f4d\u53ef\u4ee5\u53d6\u7684\u8303\u56f4\u4e3a[\u2018A\u2019,\u2019mx\u2019 + 1]\u3002\u6bcf\u7ec4\u8be2\u95ee\u8f93\u51fa\u957f\u5ea6\u4e3an\u7684\u4e32\u4e2d\u5b57\u5178\u5e8f\u7b2ck\u5927\u7684\u5b57\u7b26\u4e32\u3002 \u9898\u89e3\uff1a\u6784\u9020\u51fa\u7684\u5b57\u7b26\u4e32\u65b9\u6848\u6570\u5e94\u8be5\u4e3a\u8d1d\u5c14\u6570\u3002\u6839\u636e\u9898\u610f\uff0crhyme scheme\u53ef\u4ee5\u5f62\u6210\u4e00\u68f5\u5b57\u5178\u6811\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u53d6\u51b3\u4e8e\u5b57\u5178\u6811\u8def\u5f84\u4e0a\u7684\u6700\u5927\u5b57\u7b26\u3002\u8003\u8651dp\u6c42\u89e3\u67d0\u4e2a\u5b50\u6811\u5bf9\u5e94\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u4ee4 dp[i][j] dp[i][j] \u8868\u793a\u5728\u7b2ci\u5c42\uff0c\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u5b57\u7b26\u7684\u6700\u5927\u503c\u4e3aj\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u6709dp\u65b9\u7a0b dp[i][j]=j*dp[i-1][j]+dp[i][j+1] \u3002\u8be2\u95ee\u65f6\u5728\u5b57\u5178\u6811\u4e0a\u4ece\u4e0a\u5f80\u4e0b\u8d70\uff0c\u5047\u8bbe\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u4e3amx\uff0c\u90a3\u4e48\u524dmx\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a dp[n-dep][mx] \uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a dp[n-dep][mx+1] \uff0c\u4e0d\u65ad\u5f80\u4e0b\u8d70\u5373\u53ef\u6c42\u51fa\u89e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <bits/stdc++.h> using namespace std ; __int128 dp [ 30 ][ 30 ], k ; template < class T > inline bool scan ( T & ret ){ char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; //EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } int main () { int T , n ; scanf ( \"%d\" , & T ); for ( int i = 0 ; i < 30 ; i ++ ) dp [ 0 ][ i ] = 1 ; for ( int i = 1 ; i < 30 ; i ++ ) for ( int j = 0 ; j < 30 ; j ++ ) dp [ i ][ j ] = dp [ i - 1 ][ j ] * j + dp [ i - 1 ][ j + 1 ]; for ( int i = T - 1 ; i >= 0 ; i -- ) { for ( int j = 1 ; j <= T - i ; j ++ ) { out ( dp [ i ][ j ]); printf ( \" \" ); } puts ( \"\" ); } for ( int _ = 1 ; _ <= T ; _ ++ ) { scanf ( \"%d\" , & n ); scan ( k ); printf ( \"Case #%d: \" , _ ); int c = 0 , mx = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( c = 0 ; c < mx && k > dp [ n - i ][ mx ]; c ++ ) k -= dp [ n - i ][ mx ]; mx = max ( c + 1 , mx ); printf ( \"%c\" , 'A' + c ); } puts ( \"\" ); } } G. Substring Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2as\u4e32\uff0c\u7ed9m\u4e2at\u4e32\uff0c\u5206\u522b\u6c42s\u4e32\u4e0e\u6bcf\u4e2at\u4e32\u4e71\u5e8f\u5339\u914d\u7684\u5b50\u4e32\u6570\u91cf\uff0c\u4e71\u5e8f\u5339\u914d\u6307\u4e24\u4e32\u957f\u5ea6\u76f8\u7b49\uff0c\u9996\u5c3e\u5b57\u7b26\u76f8\u7b49\uff0c\u4e2d\u95f4\u91cd\u6392\u4e4b\u540e\u76f8\u7b49\u5373\u53ef\u3002 \u9898\u89e3\uff1a\u6570\u636e\u8303\u56f4\u4e2dt\u7684\u603b\u957f\u4e0d\u8d85\u8fc71e5\uff0c\u6240\u4ee5\u79bb\u7ebf\u67e5\u8be2\uff0c\u5bf9\u6bcf\u79cd\u957f\u5ea6\u6309\u7a97\u53e3\u5904\u7406\u4e00\u6b21s\uff0c\u590d\u6742\u5ea6O\uff08\u80fd\u8fc7\uff09\uff0c\u4e71\u5e8f\u5339\u914d\u7528\u52a0\u6cd5hash\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e2a\u8303\u56f4\u751a\u81f3\u4e0d\u4f1a\u6ea2\u51falonglong\u3002\u552f\u4e00\u6bd4\u8f83nb\u7684\u70b9\u5728\u4e8e\u5b83\u7684\u7ec6\u8282\u5361\u5185\u5b58\uff0cunordermap\u53ea\u9700\u8981\u7ba1\u90a3\u4e9bt\u4e32\u6ee1\u8db3\u7684\u89e3\uff0c\u6240\u4ee5count\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u9700\u8981\u8fd9\u4e2a\u89e3\uff0c\u7136\u540e\u518d\u52a0\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aG.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/17/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 50005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} #define ull ll struct node { int len ; int L , R , id ; ull hash ; bool operator < ( const node & oth ) const { return len < oth . len ; } } p [ maxn ]; string s , t ; int n ; int res [ maxn ]; unordered_map < ull , int > mp [ 26 ][ 26 ]; ull prime [] = { 34183 , 13513 , 152993 , 13591 , 19687 , 350869 , 111187 , 766091 , 769297 , 633469 , 752273 , 298651 , 617191 , 880421 , 136067 , 1408397 , 726899 , 458921 , 2133701 , 2599847 , 2730947 , 4696343 , 10267237 , 18941059 , 34078909 , 69208409 }; ull getHash () { ull tmp = 0 ; for ( auto i : t ) { tmp += prime [ i - 'a' ]; } return tmp ; } void cal ( int len ) { if ( len > s . length ()) return ; ull tmp = 0 ; for ( int i = 0 ; i < len ; ++ i ) { tmp += prime [ s [ i ] - 'a' ]; } if ( mp [ s [ 0 ] - 'a' ][ s [ len - 1 ] - 'a' ]. count ( tmp )) mp [ s [ 0 ] - 'a' ][ s [ len - 1 ] - 'a' ][ tmp ] ++ ; for ( int i = len ; i < s . length (); ++ i ) { tmp += prime [ s [ i ] - 'a' ] - prime [ s [ i - len ] - 'a' ]; if ( mp [ s [ i - len + 1 ] - 'a' ][ s [ i ] - 'a' ]. count ( tmp )) mp [ s [ i - len + 1 ] - 'a' ][ s [ i ] - 'a' ][ tmp ] ++ ; } } int main ( int argc , char * argv []) { int T ; cin >> T ; int q ; for ( int kase = 1 ; kase <= T ; ++ kase ) { cin >> s >> q ; for ( int i = 0 ; i < 26 ; ++ i ) { for ( int j = 0 ; j < 26 ; ++ j ) mp [ i ][ j ]. clear (); } for ( int i = 1 ; i <= q ; ++ i ) { cin >> t ; p [ i ]. hash = getHash (); p [ i ]. L = t [ 0 ] - 'a' ; p [ i ]. R = t . back () - 'a' ; p [ i ]. id = i ; p [ i ]. len = t . length (); mp [ p [ i ]. L ][ p [ i ]. R ][ p [ i ]. hash ] = 0 ; } sort ( p + 1 , p + 1 + q ); int pre = 0 ; for ( int i = 1 ; i <= q ; ++ i ) { if ( p [ i ]. len != pre ) cal ( p [ i ]. len ), pre = p [ i ]. len ; res [ p [ i ]. id ] = mp [ p [ i ]. L ][ p [ i ]. R ][ p [ i ]. hash ]; } for ( int i = 1 ; i <= q ; ++ i ) { printf ( \"%d \\n \" , res [ i ]); } } return 0 ; } J. Stone game Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u53ef\u91cd\u96c6 S \uff0c\u6c42\u5b83\u7684\u4e00\u4e2a\u5b50\u96c6 S\u2018 \uff0c\u6ee1\u8db3 (Sum(S\u2018)\u2265Sum(S\u2212S\u2019))\u2227(\u2200t\u2208S\u2018,Sum(S\u2019)\u2212t\u2264Sum(S\u2212S\u2018)) \u7684\u65b9\u6848\u6570\uff0c\u6ce8\u610f S\u2019 \u4e0d\u540c\u53ea\u8981\u5b83\u6240\u5305\u542b\u7684\u6570\u7684\u4e0b\u6807\u5b58\u5728\u4e0d\u540c\u7684\u5373\u53ef\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u52a0\u6cd5\u7684\u7279\u6b8a\u6027\uff0c\u5b83\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u53ef\u4ee5\u8f6c\u5316\u4e3a Sum(S\u2019)\u2212min(S\u2019)\u2264Sum(S\u2212S\u2018) \uff0c\u4e8e\u662f\u53ef\u4ee5\u679a\u4e3e\u51fa\u6bcf\u4e2a t \uff0c\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u76f4\u63a5\u80cc\u5305\u6c42\u51fa\u6240\u6709\u65b9\u6848\u6570\u5373\u53ef\u3002\u6ce8\u610f\u76f8\u540c t \u7684\u5904\u7406\u529e\u6cd5\uff0c\u7531\u4e8e t \u662f S\u2018 \u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\uff0c\u4e00\u4e2a\u4e2a\u679a\u4e3e\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u679a\u4e3e\u5230\u76f8\u540c\u7684\u5143\u7d20\uff0c\u53ea\u8981\u5c06\u6392\u5e8f\u540e\u5e8f\u53f7\u6bd4\u4ed6\u5c0f\u7684\u90fd\u653e\u5165 S \uff0c\u5b83\u672c\u8eab\u653e\u5165 S\u2018 \u5b9a\u7136\u4e0d\u4f1a\u4ea7\u751f\u91cd\u590d\u3002\u6ce8\u610f\u8fd9\u4e2a\u80cc\u5305\u65b9\u6848\u6570\u662f\u4e0d\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u7684\uff0c\u53ef\u4ee5\u5012\u7740\u5904\u7406\u7136\u540e\u5c31\u662f\u6bcf\u6b21\u5f80\u80cc\u5305\u91cc\u65b0\u589e\u4e00\u4e2a\u5143\u7d20\u3002 \u79d1\u666e\uff1a dp[j] += dp[j - a[i]] \u662f\u6c42\u80cc\u5305\u65b9\u6848\u6570\u7684\u5199\u6cd5\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/15/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 150005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll dp [ maxn ]; int n ; int a [ 505 ]; ll pre [ maxn ]; int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d\" , & n ); ll sum = 0 ; pre [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + a [ i ]; sum += a [ i ]; } sort ( a + 1 , a + 1 + n ); ll res = 0 ; memset ( dp , 0 , sizeof dp ); dp [ 0 ] = 1 ; for ( int i = n ; i >= 1 ; -- i ) { ll x = a [ i ]; for ( int j = 0 ; j <= sum ; ++ j ) { if ( dp [ j ] == 0 ) continue ; ll y = j + x ; ll z = sum - y ; if ( z <= y && z >= y - x ) { res = ( res + dp [ j ]) % mod ; } } for ( int j = sum ; j >= a [ i ]; -- j ) { dp [ j ] = ( dp [ j ] + dp [ j - a [ i ]]) % mod ; } } printf ( \"%lld \\n \" , res ); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"The Preliminary Contest for ICPC Asia Shanghai 2019"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shanghai 2019/#tag","text":"#B sort\uff08\u5047\u7ebf\u6bb5\u6811\uff09# D \u66b4\u529b #\u3000E \u751f\u6210\u51fd\u6570 #F dp # G\u66b4\u529b\uff08unordermap hash\uff09 #J \u80cc\u5305 #L\u66b4\u529b","title":"tag"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shanghai 2019/#b-light-bulbs","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u521d\u59cb\u4e3a0\u7684\u5e8f\u5217\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u533a\u95f4\u7ffb\u8f6c\uff080\u53d81\uff0c1\u53d80\uff09\uff0c\u6c42\u6700\u7ec8\u6709\u591a\u5c11\u4e2a\u70b9\u7684\u503c\u4e3a1\u3002\u6570\u636e\u8303\u56f4\u7ec4\u6570 1000 \uff0c\u957f\u5ea6 1e6 \uff0c\u64cd\u4f5c 1000 \u6b21 \u9898\u89e3\uff1a\u521d\u770b\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4\u548c\u3001\u5355\u6b21\u67e5\u8be2\u6574\u4e2a\u5e8f\u5217\u7684\u88f8\u9898\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7ec4\u6570 1000 \u590d\u6742\u5ea6\u4f1a\u70b8\u6389\uff0c\u800c\u64cd\u4f5c\u6570\u8f83\u5c11\u6240\u4ee5\u76f4\u63a5\u5bf9\u64cd\u4f5c\u5dee\u5206\u6309\u5de6\u53f3\u6392\u5e8f\uff0c\u626b\u4e00\u904d\u6c42\u51fa\u7ed3\u679c\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(T*mlog(m)) \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/15/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e6 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} vector < pair < int , int > > query ; int main ( int argc , char * argv []) { int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { int n , q ; scanf ( \"%d%d\" , & n , & q ); query . resize ( q * 2 ); for ( int i = 0 ; i < q ; ++ i ) { int x , y ; scanf ( \"%d%d\" , & x , & y ); query [ i ]. first = x ; query [ i ]. second = 0 ; query [ i + q ]. first = y + 1 ; query [ i + q ]. second = 1 ; } sort ( query . begin (), query . end ()); int now = 1 ; int pre = query [ 0 ]. first ; int res = 0 ; for ( int i = 1 ; i < query . size (); ++ i ) { res += ( now & 1 ) * ( query [ i ]. first - pre ); if ( query [ i ]. second == 1 ) { now -- ; } else now ++ ; pre = query [ i ]. first ; } printf ( \"Case #%d: %d \\n \" , kase , res ); } return 0 ; }","title":"B. Light bulbs"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shanghai 2019/#d-counting-sequences-i","text":"\u9898\u610f\uff1a\u6c42n\u4e2a\u6b63\u6574\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u7b49\u4e8e\u4ed6\u4eec\u7684\u79ef\u7684\u65b9\u6848\u6570 n \\le 3000 n \\le 3000 \u9898\u89e3\uff1a\u8bba\u6587\u4e0a\u5199\u4e86\u5f88\u591a\u8f93\u51fa\u6240\u6709\u65b9\u6848\u7684\u505a\u6cd5\uff0coeis\u4e0a\u4e5f\u6709\u5982\u679c\u9650\u5b9a\u8fd9\u4e9b\u6b63\u6574\u6570\u4e3a1~9\u65f6\u7684\u65b9\u6848\u6570\u91cf\u7684\u8868\uff0c\u8fd8\u6709\u6240\u6709\u975e\u91cd\u96c6\u7684\u65b9\u6848\u6570\u7684\u8868\uff0c\u4f46\u662f\u8fd9\u9898\u8981\u6c42\u6240\u6709\u65b9\u6848\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u7206\u641c\u51fa\u6240\u6709\u65b9\u6848\u3002\u5bf93000\u4e2a\u6570\u6253\u8868\uff0c\u6bcf\u4e2a\u6570k\u7206\u641c\u51fa \\prod a_i = k \\prod a_i = k \uff0c\u7136\u540e\u53ef\u4ee5\u6839\u636e k - \\sum a_i k - \\sum a_i \u6c42\u51fa1\u7684\u6570\u91cf\uff0c\u5bf9\u8fd9\u4e2a\u65b9\u6848\u8fdb\u884c\u975e\u91cd\u6392\u5217\u5373\u53ef\u5f97\u5230\u67d0\u4e2a\u6570\u7684\u89e3\u3002\u641c\u7d226000\u4e2a\u6570\u4ee5\u5185\u5c31\u53ef\u4ee5\u6253\u51fa3000\u7684\u8868\uff08\u8bba\u6587\u4e2d\u6709\u8bc1\u660e\u5bf9\u4e8en\u4e2a\u6570\uff0c\u8981\u7ec4\u6210\u548c\u4e0e\u79ef\u76f8\u7b49\u7684\u65b9\u6848\u5fc5\u4e0d\u5927\u4e8e 2\u00d7n \uff09\u8fd9\u8fb9\u76f4\u63a5\u628a\u8868\u6253\u597d\u8f93\u51fa\u5230\u6587\u4ef6\u5199\u7684\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86\u3002 \u79d1\u666e\uff1a\u975e\u91cd\u6392\u5217\u7684\u89e3\u6cd5\u662f\uff1a\u4e00\u5171\u6709 n \u4e2a\u5143\u7d20\uff0c\u5176\u4e2d\u7b2c i \u79cd\u5143\u7d20\u6709 a_i \u4e2a\uff0c\u5219\u603b\u6392\u5217\u6570\u6709 \\frac{n!}{\\prod{a_i!}} \\frac{n!}{\\prod{a_i!}} \u4e2a\u3002","title":"D. Counting Sequences I"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shanghai 2019/#f-rhyme-scheme","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u7c7b\u5b57\u7b26\u4e32\u7684\u6784\u9020\u65b9\u6848\uff1a\u524di-1\u4f4d\u7684\u6700\u5927\u5b57\u7b26\u4e3a\u2019mx\u2019\uff0c\u5219\u7b2ci\u4f4d\u53ef\u4ee5\u53d6\u7684\u8303\u56f4\u4e3a[\u2018A\u2019,\u2019mx\u2019 + 1]\u3002\u6bcf\u7ec4\u8be2\u95ee\u8f93\u51fa\u957f\u5ea6\u4e3an\u7684\u4e32\u4e2d\u5b57\u5178\u5e8f\u7b2ck\u5927\u7684\u5b57\u7b26\u4e32\u3002 \u9898\u89e3\uff1a\u6784\u9020\u51fa\u7684\u5b57\u7b26\u4e32\u65b9\u6848\u6570\u5e94\u8be5\u4e3a\u8d1d\u5c14\u6570\u3002\u6839\u636e\u9898\u610f\uff0crhyme scheme\u53ef\u4ee5\u5f62\u6210\u4e00\u68f5\u5b57\u5178\u6811\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u53d6\u51b3\u4e8e\u5b57\u5178\u6811\u8def\u5f84\u4e0a\u7684\u6700\u5927\u5b57\u7b26\u3002\u8003\u8651dp\u6c42\u89e3\u67d0\u4e2a\u5b50\u6811\u5bf9\u5e94\u7684\u5b57\u7b26\u4e2a\u6570\uff0c\u4ee4 dp[i][j] dp[i][j] \u8868\u793a\u5728\u7b2ci\u5c42\uff0c\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u5b57\u7b26\u7684\u6700\u5927\u503c\u4e3aj\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u6709dp\u65b9\u7a0b dp[i][j]=j*dp[i-1][j]+dp[i][j+1] \u3002\u8be2\u95ee\u65f6\u5728\u5b57\u5178\u6811\u4e0a\u4ece\u4e0a\u5f80\u4e0b\u8d70\uff0c\u5047\u8bbe\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u4e3amx\uff0c\u90a3\u4e48\u524dmx\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a dp[n-dep][mx] \uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u4e3a dp[n-dep][mx+1] \uff0c\u4e0d\u65ad\u5f80\u4e0b\u8d70\u5373\u53ef\u6c42\u51fa\u89e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <bits/stdc++.h> using namespace std ; __int128 dp [ 30 ][ 30 ], k ; template < class T > inline bool scan ( T & ret ){ char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; //EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } template < class T > inline void out ( T x ) { if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 + '0' ); } int main () { int T , n ; scanf ( \"%d\" , & T ); for ( int i = 0 ; i < 30 ; i ++ ) dp [ 0 ][ i ] = 1 ; for ( int i = 1 ; i < 30 ; i ++ ) for ( int j = 0 ; j < 30 ; j ++ ) dp [ i ][ j ] = dp [ i - 1 ][ j ] * j + dp [ i - 1 ][ j + 1 ]; for ( int i = T - 1 ; i >= 0 ; i -- ) { for ( int j = 1 ; j <= T - i ; j ++ ) { out ( dp [ i ][ j ]); printf ( \" \" ); } puts ( \"\" ); } for ( int _ = 1 ; _ <= T ; _ ++ ) { scanf ( \"%d\" , & n ); scan ( k ); printf ( \"Case #%d: \" , _ ); int c = 0 , mx = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( c = 0 ; c < mx && k > dp [ n - i ][ mx ]; c ++ ) k -= dp [ n - i ][ mx ]; mx = max ( c + 1 , mx ); printf ( \"%c\" , 'A' + c ); } puts ( \"\" ); } }","title":"F. Rhyme scheme"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shanghai 2019/#g-substring","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2as\u4e32\uff0c\u7ed9m\u4e2at\u4e32\uff0c\u5206\u522b\u6c42s\u4e32\u4e0e\u6bcf\u4e2at\u4e32\u4e71\u5e8f\u5339\u914d\u7684\u5b50\u4e32\u6570\u91cf\uff0c\u4e71\u5e8f\u5339\u914d\u6307\u4e24\u4e32\u957f\u5ea6\u76f8\u7b49\uff0c\u9996\u5c3e\u5b57\u7b26\u76f8\u7b49\uff0c\u4e2d\u95f4\u91cd\u6392\u4e4b\u540e\u76f8\u7b49\u5373\u53ef\u3002 \u9898\u89e3\uff1a\u6570\u636e\u8303\u56f4\u4e2dt\u7684\u603b\u957f\u4e0d\u8d85\u8fc71e5\uff0c\u6240\u4ee5\u79bb\u7ebf\u67e5\u8be2\uff0c\u5bf9\u6bcf\u79cd\u957f\u5ea6\u6309\u7a97\u53e3\u5904\u7406\u4e00\u6b21s\uff0c\u590d\u6742\u5ea6O\uff08\u80fd\u8fc7\uff09\uff0c\u4e71\u5e8f\u5339\u914d\u7528\u52a0\u6cd5hash\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e2a\u8303\u56f4\u751a\u81f3\u4e0d\u4f1a\u6ea2\u51falonglong\u3002\u552f\u4e00\u6bd4\u8f83nb\u7684\u70b9\u5728\u4e8e\u5b83\u7684\u7ec6\u8282\u5361\u5185\u5b58\uff0cunordermap\u53ea\u9700\u8981\u7ba1\u90a3\u4e9bt\u4e32\u6ee1\u8db3\u7684\u89e3\uff0c\u6240\u4ee5count\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u9700\u8981\u8fd9\u4e2a\u89e3\uff0c\u7136\u540e\u518d\u52a0\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aG.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/17/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 50005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} #define ull ll struct node { int len ; int L , R , id ; ull hash ; bool operator < ( const node & oth ) const { return len < oth . len ; } } p [ maxn ]; string s , t ; int n ; int res [ maxn ]; unordered_map < ull , int > mp [ 26 ][ 26 ]; ull prime [] = { 34183 , 13513 , 152993 , 13591 , 19687 , 350869 , 111187 , 766091 , 769297 , 633469 , 752273 , 298651 , 617191 , 880421 , 136067 , 1408397 , 726899 , 458921 , 2133701 , 2599847 , 2730947 , 4696343 , 10267237 , 18941059 , 34078909 , 69208409 }; ull getHash () { ull tmp = 0 ; for ( auto i : t ) { tmp += prime [ i - 'a' ]; } return tmp ; } void cal ( int len ) { if ( len > s . length ()) return ; ull tmp = 0 ; for ( int i = 0 ; i < len ; ++ i ) { tmp += prime [ s [ i ] - 'a' ]; } if ( mp [ s [ 0 ] - 'a' ][ s [ len - 1 ] - 'a' ]. count ( tmp )) mp [ s [ 0 ] - 'a' ][ s [ len - 1 ] - 'a' ][ tmp ] ++ ; for ( int i = len ; i < s . length (); ++ i ) { tmp += prime [ s [ i ] - 'a' ] - prime [ s [ i - len ] - 'a' ]; if ( mp [ s [ i - len + 1 ] - 'a' ][ s [ i ] - 'a' ]. count ( tmp )) mp [ s [ i - len + 1 ] - 'a' ][ s [ i ] - 'a' ][ tmp ] ++ ; } } int main ( int argc , char * argv []) { int T ; cin >> T ; int q ; for ( int kase = 1 ; kase <= T ; ++ kase ) { cin >> s >> q ; for ( int i = 0 ; i < 26 ; ++ i ) { for ( int j = 0 ; j < 26 ; ++ j ) mp [ i ][ j ]. clear (); } for ( int i = 1 ; i <= q ; ++ i ) { cin >> t ; p [ i ]. hash = getHash (); p [ i ]. L = t [ 0 ] - 'a' ; p [ i ]. R = t . back () - 'a' ; p [ i ]. id = i ; p [ i ]. len = t . length (); mp [ p [ i ]. L ][ p [ i ]. R ][ p [ i ]. hash ] = 0 ; } sort ( p + 1 , p + 1 + q ); int pre = 0 ; for ( int i = 1 ; i <= q ; ++ i ) { if ( p [ i ]. len != pre ) cal ( p [ i ]. len ), pre = p [ i ]. len ; res [ p [ i ]. id ] = mp [ p [ i ]. L ][ p [ i ]. R ][ p [ i ]. hash ]; } for ( int i = 1 ; i <= q ; ++ i ) { printf ( \"%d \\n \" , res [ i ]); } } return 0 ; }","title":"G. Substring"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shanghai 2019/#j-stone-game","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u53ef\u91cd\u96c6 S \uff0c\u6c42\u5b83\u7684\u4e00\u4e2a\u5b50\u96c6 S\u2018 \uff0c\u6ee1\u8db3 (Sum(S\u2018)\u2265Sum(S\u2212S\u2019))\u2227(\u2200t\u2208S\u2018,Sum(S\u2019)\u2212t\u2264Sum(S\u2212S\u2018)) \u7684\u65b9\u6848\u6570\uff0c\u6ce8\u610f S\u2019 \u4e0d\u540c\u53ea\u8981\u5b83\u6240\u5305\u542b\u7684\u6570\u7684\u4e0b\u6807\u5b58\u5728\u4e0d\u540c\u7684\u5373\u53ef\u3002 \u9898\u89e3\uff1a\u7531\u4e8e\u52a0\u6cd5\u7684\u7279\u6b8a\u6027\uff0c\u5b83\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u53ef\u4ee5\u8f6c\u5316\u4e3a Sum(S\u2019)\u2212min(S\u2019)\u2264Sum(S\u2212S\u2018) \uff0c\u4e8e\u662f\u53ef\u4ee5\u679a\u4e3e\u51fa\u6bcf\u4e2a t \uff0c\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u76f4\u63a5\u80cc\u5305\u6c42\u51fa\u6240\u6709\u65b9\u6848\u6570\u5373\u53ef\u3002\u6ce8\u610f\u76f8\u540c t \u7684\u5904\u7406\u529e\u6cd5\uff0c\u7531\u4e8e t \u662f S\u2018 \u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\uff0c\u4e00\u4e2a\u4e2a\u679a\u4e3e\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u679a\u4e3e\u5230\u76f8\u540c\u7684\u5143\u7d20\uff0c\u53ea\u8981\u5c06\u6392\u5e8f\u540e\u5e8f\u53f7\u6bd4\u4ed6\u5c0f\u7684\u90fd\u653e\u5165 S \uff0c\u5b83\u672c\u8eab\u653e\u5165 S\u2018 \u5b9a\u7136\u4e0d\u4f1a\u4ea7\u751f\u91cd\u590d\u3002\u6ce8\u610f\u8fd9\u4e2a\u80cc\u5305\u65b9\u6848\u6570\u662f\u4e0d\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u7684\uff0c\u53ef\u4ee5\u5012\u7740\u5904\u7406\u7136\u540e\u5c31\u662f\u6bcf\u6b21\u5f80\u80cc\u5305\u91cc\u65b0\u589e\u4e00\u4e2a\u5143\u7d20\u3002 \u79d1\u666e\uff1a dp[j] += dp[j - a[i]] \u662f\u6c42\u80cc\u5305\u65b9\u6848\u6570\u7684\u5199\u6cd5\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aJ.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/15/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 150005 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} ll dp [ maxn ]; int n ; int a [ 505 ]; ll pre [ maxn ]; int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d\" , & n ); ll sum = 0 ; pre [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); pre [ i ] = pre [ i - 1 ] + a [ i ]; sum += a [ i ]; } sort ( a + 1 , a + 1 + n ); ll res = 0 ; memset ( dp , 0 , sizeof dp ); dp [ 0 ] = 1 ; for ( int i = n ; i >= 1 ; -- i ) { ll x = a [ i ]; for ( int j = 0 ; j <= sum ; ++ j ) { if ( dp [ j ] == 0 ) continue ; ll y = j + x ; ll z = sum - y ; if ( z <= y && z >= y - x ) { res = ( res + dp [ j ]) % mod ; } } for ( int j = sum ; j >= a [ i ]; -- j ) { dp [ j ] = ( dp [ j ] + dp [ j - a [ i ]]) % mod ; } } printf ( \"%lld \\n \" , res ); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; }","title":"J. Stone game"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shenyang 2019/","text":"Name Date Solved A B C D E F G H I J K The Preliminary Contest for ICPC Asia Shenyang 2019 2019/9/14 6/11 . \u00d8 O O . O . O . . O tag Link #\u80cc\u5305\uff08c\uff09 #\u6362\u6839\u6811dp\uff08d\uff09 #\u70b9\u5206\u6cbb \uff08d\uff09 #\u5e76\u67e5\u96c6\uff08b\uff09 \uff03\u4e8c\u5206\uff08\uff46\uff09 #\u77e9\u9635\u5feb\u901f\u5e42\uff08g\uff09 #\u9ad8\u65af\u6d88\u5143\uff08g\uff09 B\u3001Dudu\u2019s maze Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u4e00\u4e9b\u5173\u952e\u70b9\uff0c\u5728\u5173\u952e\u70b9\u5916\u53ef\u4ee5\u968f\u610f\u8d70\u52a8\uff08\u8d77\u70b9\u4e3a1\u4e14\u4e0d\u662f\u5173\u952e\u70b9\uff09\uff0c\u7b2c\u4e00\u6b21\u5230\u8fbe\u5173\u952e\u70b9\u4f1a\u968f\u673a\u5411\u76f8\u90bb\u70b9\u8d70\u52a8\uff0c\u7b2c\u4e8c\u6b21\u5230\u8fbe\u5173\u952e\u70b9\u5c31\u505c\u6b62\uff0c\u6c42\u6700\u591a\u80fd\u5230\u7684\u975e\u5173\u952e\u70b9\u7684\u671f\u671b\u503c\uff08\u5c31\u662f\u8bf4\u4f1a\u4ee5\u6700\u4f18\u7684\u65b9\u5f0f\u8d70\u52a8\uff09\u3002 \u9898\u89e3\uff1a1\u7684\u8054\u901a\u5757\u90fd\u53ef\u4ee5\u8d70\u5b8c\uff0c\u4e0e1\u8fd9\u4e2a\u5757\u76f8\u8fde\u7684\u5173\u952e\u70b9\u4e2d\u53d6\u671f\u671b\u6700\u5927\u7684\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int pre [ maxn ]; int sz [ maxn ]; int u [ maxn * 2 ], v [ maxn * 2 ]; int vis [ maxn ]; int flag [ maxn ]; vector < int > edge [ maxn ]; int n , m , k ; double res ; int www ; inline int F ( int x ) { return x == pre [ x ] ? x : pre [ x ] = F ( pre [ x ]);} inline void dfs ( int u ) { vis [ u ] = 1 ; if ( ! flag [ u ]) { for ( auto v : edge [ u ]) { if ( vis [ v ]) continue ; dfs ( v ); } } else { www = 1 ; double tmp = 0 ; for ( auto v : edge [ u ]) { if ( F ( v ) != F ( 1 )) tmp += sz [ F ( v )]; } tmp /= edge [ u ]. size (); res = max ( res , tmp ); } } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d%d\" , & n , & m , & k ); www = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { pre [ i ] = i ; sz [ i ] = 1 ; vis [ i ] = 0 ; edge [ i ]. clear (); flag [ i ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { scanf ( \"%d%d\" , & u [ i ], & v [ i ]); edge [ u [ i ]]. push_back ( v [ i ]); edge [ v [ i ]]. push_back ( u [ i ]); } for ( int i = 1 , x ; i <= k ; ++ i ) { scanf ( \"%d\" , & x ); flag [ x ] = 1 ; sz [ x ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( flag [ u [ i ]] || flag [ v [ i ]]) continue ; int x = F ( u [ i ]), y = F ( v [ i ]); if ( x != y ) { sz [ y ] += sz [ x ]; pre [ x ] = y ; } } res = 0 ; dfs ( 1 ); if ( www == 0 ) { printf ( \"%.10f \\n \" , ( double ) sz [ F ( 1 )]); continue ; } printf ( \"%.10f \\n \" , res + sz [ F ( 1 )]); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; } \u8d5b\u4e2d\u5224\u8be5\u70b9\u662f\u4e0d\u662f1\u7684\u8054\u901a\u70b9\u5199\u4e86\u4e2a\u8822 F(v) != 1 \uff0c\u5b9e\u9645\u4e0a\u5e76\u67e5\u96c6\u4e5f\u6ca1\u6709\u7279\u6b8a\u5904\u7406\u8fc7\u3002\u3002\u3002\u540d\u989d\u6ca1\u4e86\u3002 C. Dawn-K\u2019s water Link \u9898\u610f\uff1an\u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4ef7\u503cp\u548c\u91cd\u91cfc\uff0c\u8be2\u95ee\u6c42\u6700\u5c11\u8981\u591a\u5c11\u94b1\u53ef\u4ee5\u4e70\u81f3\u5c11m\u91cd\u91cf\u7684\u7269\u54c1\u3002\u6c42\u51fa\u771f\u6b63\u4e70\u7684\u91cd\u91cf\u548c\u82b1\u8d39\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u7531\u4e8e\u6700\u7ec8\u4ef7\u503c\u4e0d\u5927\u4e8e1e4\uff0c\u76f4\u63a5\u5b8c\u5168\u80cc\u5305\u6c42\u52302e4\u80af\u5b9a\u6709\u89e3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aC.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e3 + 5 ; const int maxm = 2e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; struct node { int p , c ; } a [ maxn ]; ll dp [ maxm ]; int main ( int argc , char * argv []) { int m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & a [ i ]. p , & a [ i ]. c ); } memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = a [ i ]. c ; j < maxm ; ++ j ) { dp [ j ] = min ( dp [ j ], dp [ j - a [ i ]. c ] + a [ i ]. p ); } } ll INF = 0x3f3f3f3f3f3f3f3f ; ll mnp = INF , mnc = INF ; for ( int i = m ; i < maxm ; ++ i ) { if ( mnp >= dp [ i ]) { mnp = dp [ i ]; mnc = i ; } } printf ( \"%lld %lld \\n \" , mnp , mnc ); } return 0 ; } D\u3001Fish eating fruit Link \u9898\u610f\uff1a\u6c42\u4e00\u68f5\u6811\u4e0a\u8fb9\u6743\u6a213\u5206\u522b\u4e3a0\uff0c1\uff0c2\u7684\u8fb9\u6743\u548c\u662f\u591a\u5c11 \u9898\u89e3\uff1a\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u7206\u4e0a\u4e00\u4e2a\u70b9\u5206\u6cbb\u5373\u53ef\uff0c\u6bcf\u6b21\u7edf\u8ba1\u51fa\u8fc7rt\u6a213\u7684\u8fb9\u5206\u522b\u4e3a0,1,2\u7684\u8fb9\u4e2a\u6570\u548c\u603b\u548c\uff0c\u7ec4\u5408\u4e00\u4e0b\u5c31\u80fd\u6c42\u51fa\u89e3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aD.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; // \u6e05\u96f6 head \u548c tot const int maxm = 2e4 + 5 ; int ver [ maxm ], Next [ maxm ], head [ maxn ], edge [ maxm ]; int tot ; void addEdge ( int u , int v , int w ){ ver [ ++ tot ] = v ; Next [ tot ] = head [ u ]; head [ u ] = tot ; edge [ tot ] = w ; } int sz [ maxn ], vis [ maxn ]; int rt , mxsz , has ; inline void getrt ( int u , int pre ) { sz [ u ] = 1 ; int mxnow = 0 ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( v == pre || vis [ v ]) continue ; getrt ( v , u ); sz [ u ] += sz [ v ]; mxnow = max ( mxnow , sz [ v ]); } mxnow = max ( mxnow , has - sz [ u ]); if ( mxnow < mxsz ) { mxsz = mxnow , rt = u ; } } int dl [ 3 ], H [ 3 ]; int val [ maxn ]; inline void getdis ( int u , int pre ) { dl [ val [ u ] % 3 ] = ( dl [ val [ u ] % 3 ] + val [ u ]) % mod ; H [ val [ u ] % 3 ] ++ ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( v == pre || vis [ v ]) continue ; val [ v ] = val [ u ] + edge [ i ]; getdis ( v , u ); } } struct node { ll res [ 3 ]; node operator + ( const node & oth ) { for ( int i = 0 ; i < 3 ; ++ i ) { res [ i ] = ( res [ i ] + oth . res [ i ]) % mod ; } return * this ; } node operator - ( const node & oth ) { for ( int i = 0 ; i < 3 ; ++ i ) { res [ i ] = ( res [ i ] - oth . res [ i ]) % mod ; } return * this ; } void cl () { for ( int i = 0 ; i < 3 ; ++ i ) res [ i ] = 0 ; } }; inline node cal ( int u , int pre ) { for ( int i = 0 ; i < 3 ; ++ i ) dl [ i ] = 0 , H [ i ] = 0 ; val [ u ] = pre ; getdis ( u , 0 ); node sum ; sum . cl (); for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { sum . res [( i + j ) % 3 ] += (( ll )( H [ j ]) * dl [ i ] % mod + ( ll ) H [ i ] * dl [ j ] % mod ) % mod ; sum . res [( i + j ) % 3 ] %= mod ; } } return sum ; } node res ; inline void dfs ( int u ) { // printf(\"%d :%lld\\n\", u, cal(u, 0).res[0]); res = res + cal ( u , 0 ); vis [ u ] = 1 ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( vis [ v ]) continue ; // printf(\"%d :-%lld\\n\", v, cal(v, edge[i]).res[0]); res = res - cal ( v , edge [ i ]); has = sz [ v ]; mxsz = 0x3f3f3f3f ; getrt ( v , 0 ); dfs ( rt ); } } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { tot = 0 ; memset ( head , 0 , sizeof head ); res . cl (); memset ( vis , 0 , sizeof vis ); for ( int i = 1 , u , v , w ; i < n ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); u ++ ; v ++ ; addEdge ( u , v , w ); addEdge ( v , u , w ); // cout << u << \" \" << v << \" \" << w << endl; // assert(v > 10000); } mxsz = 0x3f3f3f3f ; has = n ; getrt ( 1 , 0 ); dfs ( rt ); printf ( \"%lld %lld %lld \\n \" , ( mod + res . res [ 0 ]) % mod , ( mod + res . res [ 1 ]) % mod , ( mod + res . res [ 2 ]) % mod ); } return 0 ; } \u9898\u89e32\uff1a\u6811\u5f62dp\u6362\u6839\u6c42\u89e3\u3002\u663e\u7136\u5bf9\u67d0\u4e2a\u70b9\u7684\u7b54\u6848\u53ef\u4ee5 O(n) \u6c42\u89e3\uff0c\u6362\u6839\u65f6\u540c\u6837\u8bb0\u5f55\u5b50\u6811\u4e2d0,1,2\u7684\u8def\u5f84\u4e2a\u6570\u548c\u603b\u548c\u5373\u53ef\u3002\u590d\u6742\u5ea6\u6bd4\u70b9\u5206\u6cbb\u4f4e\uff0c\u4e3a O(n) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aD.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/17/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; vector < pair < int , int > > edge [ maxn ]; ll dp [ maxn ][ 3 ]; // \u6bcf\u4e2a\u70b9\u7684\u7b54\u6848 ll num [ maxn ][ 3 ]; // \u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u6570\u91cf ll res [ 3 ]; inline void cal ( int u ) { for ( int i = 0 ; i < 3 ; ++ i ) { ( res [ i ] += dp [ u ][ i ]) %= mod ; } } inline void dfs1 ( int u , int pre , ll len ) { for ( auto i : edge [ u ]) { int v = i . first ; int w = i . second ; if ( v == pre ) continue ; dfs1 ( v , u , len + w ); num [ v ][ 0 ] ++ ; for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][( j + w ) % 3 ] += num [ v ][ j ] * w + dp [ v ][ j ]; num [ u ][( j + w ) % 3 ] += num [ v ][ j ]; } } } inline void dfs2 ( int u , int pre ) { cal ( u ); for ( auto i : edge [ u ]) { int v = i . first ; int w = i . second ; if ( v == pre ) continue ; ll dptmp [ 3 ], dptmp2 [ 3 ]; ll numtmp [ 3 ], numtmp2 [ 3 ]; for ( int j = 0 ; j < 3 ; ++ j ) { dptmp [ j ] = dp [ u ][ j ]; dptmp2 [ j ] = dp [ v ][ j ]; numtmp [ j ] = num [ u ][ j ]; numtmp2 [ j ] = num [ v ][ j ]; } for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][( j + w ) % 3 ] -= num [ v ][ j ] * w + dp [ v ][ j ]; num [ u ][( j + w ) % 3 ] -= num [ v ][ j ]; } num [ v ][ 0 ] -- ; num [ u ][ 0 ] ++ ; for ( int j = 0 ; j < 3 ; ++ j ) { dp [ v ][( j + w ) % 3 ] += num [ u ][ j ] * w + dp [ u ][ j ]; num [ v ][( j + w ) % 3 ] += num [ u ][ j ]; } dfs2 ( v , u ); for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][ j ] = dptmp [ j ]; dp [ v ][ j ] = dptmp2 [ j ]; num [ u ][ j ] = numtmp [ j ]; num [ v ][ j ] = numtmp2 [ j ]; } } } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { for ( int i = 0 ; i < 3 ; ++ i ) res [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { edge [ i ]. clear (); for ( int j = 0 ; j < 3 ; ++ j ) dp [ i ][ j ] = num [ i ][ j ] = 0 ; } for ( int i = 1 , u , v , w ; i < n ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); u ++ , v ++ ; edge [ u ]. push_back ( make_pair ( v , w )); edge [ v ]. push_back ( make_pair ( u , w )); } dfs1 ( 1 , 0 , 0 ); dfs2 ( 1 , 0 ); printf ( \"%lld %lld %lld \\n \" , res [ 0 ], res [ 1 ], res [ 2 ]); } return 0 ; } \uff26\u3001Honk\u2019s pool Link \uff28\u3001Texas hold\u2019em Poker Link \u9898\u610f\uff1a\u5fb7\u5dde\u6251\u514b\u6bd4\u5927\u5c0f \u9898\u89e3\uff1a\u6309\u9898\u610f\u6a21\u62dfinclude <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; struct player { char name [ 15 ]; int poker [ 5 ]; } p [ maxn ]; char card [ 15 ]; bool RoyalStraight ( player a ) { if ( a . poker [ 1 ] == 10 && a . poker [ 2 ] == 11 && a . poker [ 3 ] == 12 && a . poker [ 4 ] == 13 && a . poker [ 0 ] == 1 ) return true ; return false ; } bool Straight ( player a ) { for ( int i = 1 ; i < 5 ; i ++ ) { if ( a . poker [ i ] - a . poker [ i - 1 ] != 1 ) return false ; } return true ; } bool Pair ( player a ) { for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ]) return true ; } return false ; } bool TwoPairs ( player a ) { int tot = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ]) tot ++ ; } return tot == 2 ; } bool Three ( player a ) { for ( int i = 0 ; i < 3 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ] && a . poker [ i ] == a . poker [ i + 2 ]) return true ; } return false ; } bool Four ( player a ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ] && a . poker [ i ] == a . poker [ i + 2 ] && a . poker [ i ] == a . poker [ i + 3 ]) return true ; } return false ; } bool FullHouse ( player a ) { int cnt ; bool f1 = false , f2 = false ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; } if ( cnt == 3 ) f1 = true ; if ( cnt == 2 ) f2 = true ; } return f1 && f2 ; } bool cmp ( player a , player b ) { bool f1 = RoyalStraight ( a ), f2 = RoyalStraight ( b ); if ( f1 == true && f2 == true ) return strcmp ( a . name , b . name ) < 0 ; if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Straight ( a ); f2 = Straight ( b ); if ( f1 == true && f2 == true ) { if ( a . poker [ 4 ] == b . poker [ 4 ]) return strcmp ( a . name , b . name ) < 0 ; return a . poker [ 4 ] > b . poker [ 4 ]; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Four ( a ); f2 = Four ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; if ( a . poker [ 0 ] == a . poker [ 1 ]) { n1 = a . poker [ 0 ]; n2 = a . poker [ 4 ]; } else { n1 = a . poker [ 4 ]; n2 = a . poker [ 0 ]; } if ( b . poker [ 0 ] == b . poker [ 1 ]) { m1 = b . poker [ 0 ]; m2 = b . poker [ 4 ]; } else { m1 = b . poker [ 4 ]; m2 = b . poker [ 0 ]; } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = FullHouse ( a ); f2 = FullHouse ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; int cnt = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( a . poker [ i ] == a . poker [ 0 ]) cnt ++ ; } if ( cnt == 3 ) { n1 = a . poker [ 0 ]; n2 = a . poker [ 4 ]; } else { n1 = a . poker [ 4 ]; n2 = a . poker [ 0 ]; } cnt = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( b . poker [ i ] == b . poker [ 0 ]) cnt ++ ; } if ( cnt == 3 ) { m1 = b . poker [ 0 ]; m2 = b . poker [ 4 ]; } else { m1 = b . poker [ 4 ]; m2 = b . poker [ 0 ]; } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Three ( a ); f2 = Three ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; int cnt ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; n2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; else n2 += a . poker [ j ]; } if ( cnt == 3 ) { n1 = a . poker [ i ]; break ; } } for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; m2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( b . poker [ i ] == b . poker [ j ]) cnt ++ ; else m2 += b . poker [ j ]; } if ( cnt == 3 ) { m1 = b . poker [ i ]; break ; } } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = TwoPairs ( a ); f2 = TwoPairs ( b ); if ( f1 == true && f2 == true ) { int n1 =- 1 , n2 , n3 , m1 =- 1 , m2 , m3 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 4 ){ n3 = a . poker [ 4 ]; break ; } if ( a . poker [ i ] == a . poker [ i + 1 ]) { if ( n1 ==- 1 ) n1 = a . poker [ i ]; else n2 = a . poker [ i ]; i ++ ; } else n3 = a . poker [ i ]; } for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 4 ) { m3 = b . poker [ 4 ]; break ; } if ( b . poker [ i ] == b . poker [ i + 1 ]) { if ( m1 ==- 1 ) m1 = b . poker [ i ]; else m2 = b . poker [ i ]; i ++ ; } else m3 = b . poker [ i ]; } if ( n1 < n2 ) swap ( n1 , n2 ); if ( m1 < m2 ) swap ( m1 , m2 ); if ( n1 == m1 ) { if ( n2 == m2 ) { if ( n3 == m3 ) return strcmp ( a . name , b . name ) < 0 ; else return n3 > m3 ; } else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Pair ( a ); f2 = Pair ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 , cnt ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; n2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; else n2 += a . poker [ j ]; } if ( cnt == 2 ) { n1 = a . poker [ i ]; break ; } } for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; m2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( b . poker [ i ] == b . poker [ j ]) cnt ++ ; else m2 += b . poker [ j ]; } if ( cnt == 2 ) { m1 = b . poker [ i ]; break ; } } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { sum1 += a . poker [ i ]; sum2 += b . poker [ i ]; } if ( sum1 == sum2 ) return strcmp ( a . name , b . name ) < 0 ; else return sum1 > sum2 ; } int main () { int n ; while ( ~ scanf ( \"%d\" , & n )) { for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%s%s\" , & p [ i ]. name , & card ); int len = strlen ( card ); int now = 0 ; for ( int j = 0 ; j < len ; j ++ ) { if ( card [ j ] >= '2' && card [ j ] <= '9' ) { p [ i ]. poker [ now ++ ] = card [ j ] - '0' ; continue ; } if ( card [ j ] == 'A' ) { p [ i ]. poker [ now ++ ] = 1 ; continue ; } if ( card [ j ] == 'J' ) { p [ i ]. poker [ now ++ ] = 11 ; continue ; } if ( card [ j ] == 'Q' ) { p [ i ]. poker [ now ++ ] = 12 ; continue ; } if ( card [ j ] == 'K' ) { p [ i ]. poker [ now ++ ] = 13 ; continue ; } p [ i ]. poker [ now ++ ] = 10 ; j ++ ; } sort ( p [ i ]. poker , p [ i ]. poker + 5 ); } sort ( p + 1 , p + 1 + n , cmp ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%s \\n \" , p [ i ]. name ); } return 0 ; } K\u3001Guanguan\u2019s Happy water Link \u9898\u610f\uff1a\u5df2\u77e5\u524d2\u00d7k\u9879\uff0c\u5df2\u77e5\u6bcf\u4e00\u9879\u53ea\u4e0e\u524dk\u9879\u6709\u5173\u4e14\u662f\u56fa\u5b9a\u7cfb\u6570\u4e14\u4fdd\u8bc1\u7ed3\u679c\u4e3a\u6574\u6570\uff0c\u5373 f_i = \\sum_{j=1}^{k} a_j * f_{i-j} \u5176\u4e2d a[j] \u7684\u548c\u4e3a1 \u9898\u89e3\uff1a\u9ad8\u65af\u6d88\u5143\u6c42\u51faa\u6570\u7ec4\uff0c\u7136\u540e\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\uff0c\u7531\u4e8e\u7b54\u6848\u8981\u6c42 \\sum_{i=1}^n f_i \u7ed9\u5feb\u901f\u5e42\u52a0\u4e00\u7ef4\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 #include <bits/stdc++.h> using namespace std ; #define ll long long const int mod = 1e9 + 7 ; const double eps = 1e-10 ; const int maxn = 70 + 10 ; double a [ maxn ][ maxn ], x [ maxn ]; inline int sgn ( double x ) { return ( x > eps ) - ( x < - eps ); } int gauss ( int n , int m ) { int r = 0 , c = 0 ; while ( r < n && c < m ) { int m_r = r ; for ( int i = r + 1 ; i < n ; i ++ ) { if ( fabs ( a [ i ][ c ]) > fabs ( a [ m_r ][ c ])) m_r = i ; } if ( m_r != r ) { for ( int j = c ; j <= m ; j ++ ) swap ( a [ r ][ j ], a [ m_r ][ j ]); } if ( ! sgn ( a [ r ][ c ])) { a [ r ][ c ] = 0 ; ++ c ; continue ; } for ( int i = r + 1 ; i < n ; i ++ ) { if ( a [ i ][ c ]) { double t = a [ i ][ c ] / a [ r ][ c ]; for ( int j = c ; j < m + 1 ; j ++ ) a [ i ][ j ] -= a [ r ][ j ] * t ; } } ++ r ; ++ c ; } for ( int i = r ; i < n ; i ++ ) if ( sgn ( a [ i ][ m ])) return - 1 ; for ( int i = m - 1 ; i > - 1 ; i -- ) { double s = a [ i ][ m ]; for ( int j = i + 1 ; j < m ; j ++ ) s -= a [ i ][ j ] * x [ j ]; x [ i ] = s / a [ i ][ i ]; } return 0 ; } struct Matrix { int sz ; // int n, m; ll a [ maxn ][ maxn ]; Matrix ( int sz_ = 0 ) : sz ( sz_ ) { memset ( a , 0 , sizeof a ); } void pr () { printf ( \"* \\n \" ); for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = 0 ; j < sz ; ++ j ) { printf ( \"%lld \" , a [ i ][ j ]); } printf ( \" \\n \" ); } } void tr () { for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = i + 1 ; j < sz ; ++ j ) { swap ( a [ i ][ j ], a [ j ][ i ]); } } } } res , t1 ; Matrix mul ( Matrix a , Matrix b ) { Matrix res ( a . sz ); // if (a.m != b.n) return res; for ( int i = 0 ; i < res . sz ; i ++ ) // a.n for ( int j = 0 ; j < res . sz ; j ++ ) // b.m for ( int k = 0 ; k < res . sz ; k ++ ) // a.m, b.n ( res . a [ i ][ j ] += a . a [ i ][ k ] * b . a [ k ][ j ] % mod ) %= mod ; return res ; } Matrix qp ( ll n ) { //for(int i = 0; i < cur; i++) res.a[i][i] = 1; while ( n > 0 ) { if ( n & 1 ) res = mul ( res , t1 ); t1 = mul ( t1 , t1 ); n >>= 1 ; } return res ; } ll A [ maxn * 2 ]; int main () { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { int k ; ll n ; double b ; scanf ( \"%d%lld\" , & k , & n ); ll sum = 0 ; for ( int i = 0 ; i < 2 * k ; i ++ ) { scanf ( \"%lld\" , & A [ i ]); if ( i < k ) sum = ( sum + A [ i ]) % mod ; b = A [ i ]; // scanf(\"%lf\", &b); for ( int j = max ( k , i + 1 ); j < 2 * k ; j ++ ) { if ( j - i > k ) break ; else a [ j - k ][ j - i - 1 ] = b ; } if ( i >= k ) a [ i - k ][ k ] = b ; } gauss ( k , k ); for ( int i = 0 ; i < k ; i ++ ) { if ( x [ i ] == - 0.0 ) x [ i ] = 0 ; } memset ( res . a , 0 , sizeof res . a ); res . sz = k + 1 ; for ( int i = 0 ; i < k ; ++ i ) res . a [ 0 ][ i ] = A [ i ]; res . a [ 0 ][ k ] = sum ; // res.pr(); t1 . sz = k + 1 ; memset ( t1 . a , 0 , sizeof t1 . a ); for ( int i = 0 ; i < k - 1 ; ++ i ) { t1 . a [ i + 1 ][ i ] = 1 ; } for ( int i = 0 ; i < k ; ++ i ) { t1 . a [ k - i - 1 ][ k ] = t1 . a [ k - i - 1 ][ k - 1 ] = ( ll ) x [ i ] % mod ; } t1 . a [ k ][ k ] = 1 ; // t1.pr(); // for (int i = k; i < n; ++i) { // res = mul(res, t1); // res.pr(); // } Matrix gg = qp ( n - k ); printf ( \"%lld \\n \" , gg . a [ 0 ][ k ]); } return 0 ; } bm\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u677f\u5b50\u8fc7\u4e0d\u4e86\u6837\u4f8b\u5c31\u6ca1\u5199 \u770b\u522b\u4eba\u9898\u89e3\u5199\u7684\u4e0d\u77e5\u9053\u5565\u73a9\u610f\uff1f\uff1f\u9898\u89e3\u5199\u4e86\u5206\u5757\u77e9\u9635\u53bb\u6c42\u548c\u6bd4\u6211\u590d\u6742\u5ea6\u8fd8\u5927\u4e2a8\u500d\u4e0d\u592a\u884c\u3002","title":"The Preliminary Contest for ICPC Asia Shenyang 2019"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shenyang 2019/#tag","text":"#\u80cc\u5305\uff08c\uff09 #\u6362\u6839\u6811dp\uff08d\uff09 #\u70b9\u5206\u6cbb \uff08d\uff09 #\u5e76\u67e5\u96c6\uff08b\uff09 \uff03\u4e8c\u5206\uff08\uff46\uff09 #\u77e9\u9635\u5feb\u901f\u5e42\uff08g\uff09 #\u9ad8\u65af\u6d88\u5143\uff08g\uff09","title":"tag"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shenyang 2019/#bdudus-maze","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u56fe\uff0c\u6709\u4e00\u4e9b\u5173\u952e\u70b9\uff0c\u5728\u5173\u952e\u70b9\u5916\u53ef\u4ee5\u968f\u610f\u8d70\u52a8\uff08\u8d77\u70b9\u4e3a1\u4e14\u4e0d\u662f\u5173\u952e\u70b9\uff09\uff0c\u7b2c\u4e00\u6b21\u5230\u8fbe\u5173\u952e\u70b9\u4f1a\u968f\u673a\u5411\u76f8\u90bb\u70b9\u8d70\u52a8\uff0c\u7b2c\u4e8c\u6b21\u5230\u8fbe\u5173\u952e\u70b9\u5c31\u505c\u6b62\uff0c\u6c42\u6700\u591a\u80fd\u5230\u7684\u975e\u5173\u952e\u70b9\u7684\u671f\u671b\u503c\uff08\u5c31\u662f\u8bf4\u4f1a\u4ee5\u6700\u4f18\u7684\u65b9\u5f0f\u8d70\u52a8\uff09\u3002 \u9898\u89e3\uff1a1\u7684\u8054\u901a\u5757\u90fd\u53ef\u4ee5\u8d70\u5b8c\uff0c\u4e0e1\u8fd9\u4e2a\u5757\u76f8\u8fde\u7684\u5173\u952e\u70b9\u4e2d\u53d6\u671f\u671b\u6700\u5927\u7684\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aB.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e5 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int pre [ maxn ]; int sz [ maxn ]; int u [ maxn * 2 ], v [ maxn * 2 ]; int vis [ maxn ]; int flag [ maxn ]; vector < int > edge [ maxn ]; int n , m , k ; double res ; int www ; inline int F ( int x ) { return x == pre [ x ] ? x : pre [ x ] = F ( pre [ x ]);} inline void dfs ( int u ) { vis [ u ] = 1 ; if ( ! flag [ u ]) { for ( auto v : edge [ u ]) { if ( vis [ v ]) continue ; dfs ( v ); } } else { www = 1 ; double tmp = 0 ; for ( auto v : edge [ u ]) { if ( F ( v ) != F ( 1 )) tmp += sz [ F ( v )]; } tmp /= edge [ u ]. size (); res = max ( res , tmp ); } } int main ( int argc , char * argv []) { // freopen(\"data.in\", \"r\", stdin); // freopen(\"data.out\", \"w\", stdout); // clock_t ST = clock(); int T ; scanf ( \"%d\" , & T ); for ( int kase = 1 ; kase <= T ; ++ kase ) { scanf ( \"%d%d%d\" , & n , & m , & k ); www = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { pre [ i ] = i ; sz [ i ] = 1 ; vis [ i ] = 0 ; edge [ i ]. clear (); flag [ i ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { scanf ( \"%d%d\" , & u [ i ], & v [ i ]); edge [ u [ i ]]. push_back ( v [ i ]); edge [ v [ i ]]. push_back ( u [ i ]); } for ( int i = 1 , x ; i <= k ; ++ i ) { scanf ( \"%d\" , & x ); flag [ x ] = 1 ; sz [ x ] = 0 ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( flag [ u [ i ]] || flag [ v [ i ]]) continue ; int x = F ( u [ i ]), y = F ( v [ i ]); if ( x != y ) { sz [ y ] += sz [ x ]; pre [ x ] = y ; } } res = 0 ; dfs ( 1 ); if ( www == 0 ) { printf ( \"%.10f \\n \" , ( double ) sz [ F ( 1 )]); continue ; } printf ( \"%.10f \\n \" , res + sz [ F ( 1 )]); } // cerr << \"time: \" << ((clock() - ST) * 1000.0 / CLOCKS_PER_SEC) << \"ms\" << endl; return 0 ; } \u8d5b\u4e2d\u5224\u8be5\u70b9\u662f\u4e0d\u662f1\u7684\u8054\u901a\u70b9\u5199\u4e86\u4e2a\u8822 F(v) != 1 \uff0c\u5b9e\u9645\u4e0a\u5e76\u67e5\u96c6\u4e5f\u6ca1\u6709\u7279\u6b8a\u5904\u7406\u8fc7\u3002\u3002\u3002\u540d\u989d\u6ca1\u4e86\u3002","title":"B\u3001Dudu's maze"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shenyang 2019/#c-dawn-ks-water","text":"\u9898\u610f\uff1an\u79cd\u7269\u54c1\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4ef7\u503cp\u548c\u91cd\u91cfc\uff0c\u8be2\u95ee\u6c42\u6700\u5c11\u8981\u591a\u5c11\u94b1\u53ef\u4ee5\u4e70\u81f3\u5c11m\u91cd\u91cf\u7684\u7269\u54c1\u3002\u6c42\u51fa\u771f\u6b63\u4e70\u7684\u91cd\u91cf\u548c\u82b1\u8d39\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff0c\u7531\u4e8e\u6700\u7ec8\u4ef7\u503c\u4e0d\u5927\u4e8e1e4\uff0c\u76f4\u63a5\u5b8c\u5168\u80cc\u5305\u6c42\u52302e4\u80af\u5b9a\u6709\u89e3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aC.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e3 + 5 ; const int maxm = 2e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; struct node { int p , c ; } a [ maxn ]; ll dp [ maxm ]; int main ( int argc , char * argv []) { int m ; while ( scanf ( \"%d%d\" , & n , & m ) != EOF ) { for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d%d\" , & a [ i ]. p , & a [ i ]. c ); } memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = a [ i ]. c ; j < maxm ; ++ j ) { dp [ j ] = min ( dp [ j ], dp [ j - a [ i ]. c ] + a [ i ]. p ); } } ll INF = 0x3f3f3f3f3f3f3f3f ; ll mnp = INF , mnc = INF ; for ( int i = m ; i < maxm ; ++ i ) { if ( mnp >= dp [ i ]) { mnp = dp [ i ]; mnc = i ; } } printf ( \"%lld %lld \\n \" , mnp , mnc ); } return 0 ; }","title":"C. Dawn-K's water"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shenyang 2019/#dfish-eating-fruit","text":"\u9898\u610f\uff1a\u6c42\u4e00\u68f5\u6811\u4e0a\u8fb9\u6743\u6a213\u5206\u522b\u4e3a0\uff0c1\uff0c2\u7684\u8fb9\u6743\u548c\u662f\u591a\u5c11 \u9898\u89e3\uff1a\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u7206\u4e0a\u4e00\u4e2a\u70b9\u5206\u6cbb\u5373\u53ef\uff0c\u6bcf\u6b21\u7edf\u8ba1\u51fa\u8fc7rt\u6a213\u7684\u8fb9\u5206\u522b\u4e3a0,1,2\u7684\u8fb9\u4e2a\u6570\u548c\u603b\u548c\uff0c\u7ec4\u5408\u4e00\u4e0b\u5c31\u80fd\u6c42\u51fa\u89e3\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aD.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/14/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; // \u6e05\u96f6 head \u548c tot const int maxm = 2e4 + 5 ; int ver [ maxm ], Next [ maxm ], head [ maxn ], edge [ maxm ]; int tot ; void addEdge ( int u , int v , int w ){ ver [ ++ tot ] = v ; Next [ tot ] = head [ u ]; head [ u ] = tot ; edge [ tot ] = w ; } int sz [ maxn ], vis [ maxn ]; int rt , mxsz , has ; inline void getrt ( int u , int pre ) { sz [ u ] = 1 ; int mxnow = 0 ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( v == pre || vis [ v ]) continue ; getrt ( v , u ); sz [ u ] += sz [ v ]; mxnow = max ( mxnow , sz [ v ]); } mxnow = max ( mxnow , has - sz [ u ]); if ( mxnow < mxsz ) { mxsz = mxnow , rt = u ; } } int dl [ 3 ], H [ 3 ]; int val [ maxn ]; inline void getdis ( int u , int pre ) { dl [ val [ u ] % 3 ] = ( dl [ val [ u ] % 3 ] + val [ u ]) % mod ; H [ val [ u ] % 3 ] ++ ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( v == pre || vis [ v ]) continue ; val [ v ] = val [ u ] + edge [ i ]; getdis ( v , u ); } } struct node { ll res [ 3 ]; node operator + ( const node & oth ) { for ( int i = 0 ; i < 3 ; ++ i ) { res [ i ] = ( res [ i ] + oth . res [ i ]) % mod ; } return * this ; } node operator - ( const node & oth ) { for ( int i = 0 ; i < 3 ; ++ i ) { res [ i ] = ( res [ i ] - oth . res [ i ]) % mod ; } return * this ; } void cl () { for ( int i = 0 ; i < 3 ; ++ i ) res [ i ] = 0 ; } }; inline node cal ( int u , int pre ) { for ( int i = 0 ; i < 3 ; ++ i ) dl [ i ] = 0 , H [ i ] = 0 ; val [ u ] = pre ; getdis ( u , 0 ); node sum ; sum . cl (); for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { sum . res [( i + j ) % 3 ] += (( ll )( H [ j ]) * dl [ i ] % mod + ( ll ) H [ i ] * dl [ j ] % mod ) % mod ; sum . res [( i + j ) % 3 ] %= mod ; } } return sum ; } node res ; inline void dfs ( int u ) { // printf(\"%d :%lld\\n\", u, cal(u, 0).res[0]); res = res + cal ( u , 0 ); vis [ u ] = 1 ; for ( int i = head [ u ]; i ; i = Next [ i ]) { int v = ver [ i ]; if ( vis [ v ]) continue ; // printf(\"%d :-%lld\\n\", v, cal(v, edge[i]).res[0]); res = res - cal ( v , edge [ i ]); has = sz [ v ]; mxsz = 0x3f3f3f3f ; getrt ( v , 0 ); dfs ( rt ); } } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { tot = 0 ; memset ( head , 0 , sizeof head ); res . cl (); memset ( vis , 0 , sizeof vis ); for ( int i = 1 , u , v , w ; i < n ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); u ++ ; v ++ ; addEdge ( u , v , w ); addEdge ( v , u , w ); // cout << u << \" \" << v << \" \" << w << endl; // assert(v > 10000); } mxsz = 0x3f3f3f3f ; has = n ; getrt ( 1 , 0 ); dfs ( rt ); printf ( \"%lld %lld %lld \\n \" , ( mod + res . res [ 0 ]) % mod , ( mod + res . res [ 1 ]) % mod , ( mod + res . res [ 2 ]) % mod ); } return 0 ; } \u9898\u89e32\uff1a\u6811\u5f62dp\u6362\u6839\u6c42\u89e3\u3002\u663e\u7136\u5bf9\u67d0\u4e2a\u70b9\u7684\u7b54\u6848\u53ef\u4ee5 O(n) \u6c42\u89e3\uff0c\u6362\u6839\u65f6\u540c\u6837\u8bb0\u5f55\u5b50\u6811\u4e2d0,1,2\u7684\u8def\u5f84\u4e2a\u6570\u548c\u603b\u548c\u5373\u53ef\u3002\u590d\u6742\u5ea6\u6bd4\u70b9\u5206\u6cbb\u4f4e\uff0c\u4e3a O(n) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 /*================================================================ * Copyright (C) 2019 Sangfor Ltd. All rights reserved. * * \u6587\u4ef6\u540d\u79f0\uff1aD.cpp * \u521b \u5efa \u8005\uff1a badcw * \u521b\u5efa\u65e5\u671f\uff1a 9/17/19 * ================================================================*/ #include <bits/stdc++.h> #define ll long long using namespace std ; const int maxn = 1e4 + 5 ; const int mod = 1e9 + 7 ; ll qp ( ll a , ll n ) { ll res = 1 ; while ( n > 0 ) { if ( n & 1 ) res = res * a % mod ; a = a * a % mod ; n >>= 1 ; } return res ; } template < class T > inline bool scan ( T & ret ) { char c ; int sgn ; if ( c = getchar (), c == EOF ) return 0 ; // EOF while ( c != '-' && ( c < '0' || c > '9' )) c = getchar (); sgn = ( c == '-' ) ? - 1 : 1 ; ret = ( c == '-' ) ? 0 : ( c - '0' ); while ( c = getchar (), c >= '0' && c <= '9' ) ret = ret * 10 + ( c - '0' ); ret *= sgn ; return 1 ; } //template <class T> //inline void out(T x) { // if (x > 9) out(x / 10); // putchar(x % 10 + '0'); //} int n ; vector < pair < int , int > > edge [ maxn ]; ll dp [ maxn ][ 3 ]; // \u6bcf\u4e2a\u70b9\u7684\u7b54\u6848 ll num [ maxn ][ 3 ]; // \u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u6570\u91cf ll res [ 3 ]; inline void cal ( int u ) { for ( int i = 0 ; i < 3 ; ++ i ) { ( res [ i ] += dp [ u ][ i ]) %= mod ; } } inline void dfs1 ( int u , int pre , ll len ) { for ( auto i : edge [ u ]) { int v = i . first ; int w = i . second ; if ( v == pre ) continue ; dfs1 ( v , u , len + w ); num [ v ][ 0 ] ++ ; for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][( j + w ) % 3 ] += num [ v ][ j ] * w + dp [ v ][ j ]; num [ u ][( j + w ) % 3 ] += num [ v ][ j ]; } } } inline void dfs2 ( int u , int pre ) { cal ( u ); for ( auto i : edge [ u ]) { int v = i . first ; int w = i . second ; if ( v == pre ) continue ; ll dptmp [ 3 ], dptmp2 [ 3 ]; ll numtmp [ 3 ], numtmp2 [ 3 ]; for ( int j = 0 ; j < 3 ; ++ j ) { dptmp [ j ] = dp [ u ][ j ]; dptmp2 [ j ] = dp [ v ][ j ]; numtmp [ j ] = num [ u ][ j ]; numtmp2 [ j ] = num [ v ][ j ]; } for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][( j + w ) % 3 ] -= num [ v ][ j ] * w + dp [ v ][ j ]; num [ u ][( j + w ) % 3 ] -= num [ v ][ j ]; } num [ v ][ 0 ] -- ; num [ u ][ 0 ] ++ ; for ( int j = 0 ; j < 3 ; ++ j ) { dp [ v ][( j + w ) % 3 ] += num [ u ][ j ] * w + dp [ u ][ j ]; num [ v ][( j + w ) % 3 ] += num [ u ][ j ]; } dfs2 ( v , u ); for ( int j = 0 ; j < 3 ; ++ j ) { dp [ u ][ j ] = dptmp [ j ]; dp [ v ][ j ] = dptmp2 [ j ]; num [ u ][ j ] = numtmp [ j ]; num [ v ][ j ] = numtmp2 [ j ]; } } } int main ( int argc , char * argv []) { while ( scanf ( \"%d\" , & n ) != EOF ) { for ( int i = 0 ; i < 3 ; ++ i ) res [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { edge [ i ]. clear (); for ( int j = 0 ; j < 3 ; ++ j ) dp [ i ][ j ] = num [ i ][ j ] = 0 ; } for ( int i = 1 , u , v , w ; i < n ; ++ i ) { scanf ( \"%d%d%d\" , & u , & v , & w ); u ++ , v ++ ; edge [ u ]. push_back ( make_pair ( v , w )); edge [ v ]. push_back ( make_pair ( u , w )); } dfs1 ( 1 , 0 , 0 ); dfs2 ( 1 , 0 ); printf ( \"%lld %lld %lld \\n \" , res [ 0 ], res [ 1 ], res [ 2 ]); } return 0 ; }","title":"D\u3001Fish eating fruit"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shenyang 2019/#fhonks-pool","text":"","title":"\uff26\u3001Honk's pool"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shenyang 2019/#htexas-holdem-poker","text":"\u9898\u610f\uff1a\u5fb7\u5dde\u6251\u514b\u6bd4\u5927\u5c0f \u9898\u89e3\uff1a\u6309\u9898\u610f\u6a21\u62dfinclude <bits/stdc++.h> using namespace std ; const int maxn = 1e5 + 10 ; struct player { char name [ 15 ]; int poker [ 5 ]; } p [ maxn ]; char card [ 15 ]; bool RoyalStraight ( player a ) { if ( a . poker [ 1 ] == 10 && a . poker [ 2 ] == 11 && a . poker [ 3 ] == 12 && a . poker [ 4 ] == 13 && a . poker [ 0 ] == 1 ) return true ; return false ; } bool Straight ( player a ) { for ( int i = 1 ; i < 5 ; i ++ ) { if ( a . poker [ i ] - a . poker [ i - 1 ] != 1 ) return false ; } return true ; } bool Pair ( player a ) { for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ]) return true ; } return false ; } bool TwoPairs ( player a ) { int tot = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ]) tot ++ ; } return tot == 2 ; } bool Three ( player a ) { for ( int i = 0 ; i < 3 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ] && a . poker [ i ] == a . poker [ i + 2 ]) return true ; } return false ; } bool Four ( player a ) { for ( int i = 0 ; i < 2 ; i ++ ) { if ( a . poker [ i ] == a . poker [ i + 1 ] && a . poker [ i ] == a . poker [ i + 2 ] && a . poker [ i ] == a . poker [ i + 3 ]) return true ; } return false ; } bool FullHouse ( player a ) { int cnt ; bool f1 = false , f2 = false ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; } if ( cnt == 3 ) f1 = true ; if ( cnt == 2 ) f2 = true ; } return f1 && f2 ; } bool cmp ( player a , player b ) { bool f1 = RoyalStraight ( a ), f2 = RoyalStraight ( b ); if ( f1 == true && f2 == true ) return strcmp ( a . name , b . name ) < 0 ; if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Straight ( a ); f2 = Straight ( b ); if ( f1 == true && f2 == true ) { if ( a . poker [ 4 ] == b . poker [ 4 ]) return strcmp ( a . name , b . name ) < 0 ; return a . poker [ 4 ] > b . poker [ 4 ]; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Four ( a ); f2 = Four ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; if ( a . poker [ 0 ] == a . poker [ 1 ]) { n1 = a . poker [ 0 ]; n2 = a . poker [ 4 ]; } else { n1 = a . poker [ 4 ]; n2 = a . poker [ 0 ]; } if ( b . poker [ 0 ] == b . poker [ 1 ]) { m1 = b . poker [ 0 ]; m2 = b . poker [ 4 ]; } else { m1 = b . poker [ 4 ]; m2 = b . poker [ 0 ]; } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = FullHouse ( a ); f2 = FullHouse ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; int cnt = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( a . poker [ i ] == a . poker [ 0 ]) cnt ++ ; } if ( cnt == 3 ) { n1 = a . poker [ 0 ]; n2 = a . poker [ 4 ]; } else { n1 = a . poker [ 4 ]; n2 = a . poker [ 0 ]; } cnt = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( b . poker [ i ] == b . poker [ 0 ]) cnt ++ ; } if ( cnt == 3 ) { m1 = b . poker [ 0 ]; m2 = b . poker [ 4 ]; } else { m1 = b . poker [ 4 ]; m2 = b . poker [ 0 ]; } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Three ( a ); f2 = Three ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 ; int cnt ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; n2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; else n2 += a . poker [ j ]; } if ( cnt == 3 ) { n1 = a . poker [ i ]; break ; } } for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; m2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( b . poker [ i ] == b . poker [ j ]) cnt ++ ; else m2 += b . poker [ j ]; } if ( cnt == 3 ) { m1 = b . poker [ i ]; break ; } } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = TwoPairs ( a ); f2 = TwoPairs ( b ); if ( f1 == true && f2 == true ) { int n1 =- 1 , n2 , n3 , m1 =- 1 , m2 , m3 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 4 ){ n3 = a . poker [ 4 ]; break ; } if ( a . poker [ i ] == a . poker [ i + 1 ]) { if ( n1 ==- 1 ) n1 = a . poker [ i ]; else n2 = a . poker [ i ]; i ++ ; } else n3 = a . poker [ i ]; } for ( int i = 0 ; i < 5 ; i ++ ) { if ( i == 4 ) { m3 = b . poker [ 4 ]; break ; } if ( b . poker [ i ] == b . poker [ i + 1 ]) { if ( m1 ==- 1 ) m1 = b . poker [ i ]; else m2 = b . poker [ i ]; i ++ ; } else m3 = b . poker [ i ]; } if ( n1 < n2 ) swap ( n1 , n2 ); if ( m1 < m2 ) swap ( m1 , m2 ); if ( n1 == m1 ) { if ( n2 == m2 ) { if ( n3 == m3 ) return strcmp ( a . name , b . name ) < 0 ; else return n3 > m3 ; } else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; f1 = Pair ( a ); f2 = Pair ( b ); if ( f1 == true && f2 == true ) { int n1 , n2 , m1 , m2 , cnt ; for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; n2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( a . poker [ i ] == a . poker [ j ]) cnt ++ ; else n2 += a . poker [ j ]; } if ( cnt == 2 ) { n1 = a . poker [ i ]; break ; } } for ( int i = 0 ; i < 5 ; i ++ ) { cnt = 0 ; m2 = 0 ; for ( int j = 0 ; j < 5 ; j ++ ) { if ( b . poker [ i ] == b . poker [ j ]) cnt ++ ; else m2 += b . poker [ j ]; } if ( cnt == 2 ) { m1 = b . poker [ i ]; break ; } } if ( n1 == m1 ) { if ( n2 == m2 ) return strcmp ( a . name , b . name ) < 0 ; else return n2 > m2 ; } else return n1 > m1 ; } if ( f1 == true && f2 == false ) return true ; if ( f1 == false && f2 == true ) return false ; int sum1 = 0 , sum2 = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { sum1 += a . poker [ i ]; sum2 += b . poker [ i ]; } if ( sum1 == sum2 ) return strcmp ( a . name , b . name ) < 0 ; else return sum1 > sum2 ; } int main () { int n ; while ( ~ scanf ( \"%d\" , & n )) { for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%s%s\" , & p [ i ]. name , & card ); int len = strlen ( card ); int now = 0 ; for ( int j = 0 ; j < len ; j ++ ) { if ( card [ j ] >= '2' && card [ j ] <= '9' ) { p [ i ]. poker [ now ++ ] = card [ j ] - '0' ; continue ; } if ( card [ j ] == 'A' ) { p [ i ]. poker [ now ++ ] = 1 ; continue ; } if ( card [ j ] == 'J' ) { p [ i ]. poker [ now ++ ] = 11 ; continue ; } if ( card [ j ] == 'Q' ) { p [ i ]. poker [ now ++ ] = 12 ; continue ; } if ( card [ j ] == 'K' ) { p [ i ]. poker [ now ++ ] = 13 ; continue ; } p [ i ]. poker [ now ++ ] = 10 ; j ++ ; } sort ( p [ i ]. poker , p [ i ]. poker + 5 ); } sort ( p + 1 , p + 1 + n , cmp ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%s \\n \" , p [ i ]. name ); } return 0 ; }","title":"\uff28\u3001Texas hold'em Poker"},{"location":"Training Logs/2019\u7f51\u7edc\u9884\u9009\u8d5b/The Preliminary Contest for ICPC Asia Shenyang 2019/#kguanguans-happy-water","text":"\u9898\u610f\uff1a\u5df2\u77e5\u524d2\u00d7k\u9879\uff0c\u5df2\u77e5\u6bcf\u4e00\u9879\u53ea\u4e0e\u524dk\u9879\u6709\u5173\u4e14\u662f\u56fa\u5b9a\u7cfb\u6570\u4e14\u4fdd\u8bc1\u7ed3\u679c\u4e3a\u6574\u6570\uff0c\u5373 f_i = \\sum_{j=1}^{k} a_j * f_{i-j} \u5176\u4e2d a[j] \u7684\u548c\u4e3a1 \u9898\u89e3\uff1a\u9ad8\u65af\u6d88\u5143\u6c42\u51faa\u6570\u7ec4\uff0c\u7136\u540e\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\uff0c\u7531\u4e8e\u7b54\u6848\u8981\u6c42 \\sum_{i=1}^n f_i \u7ed9\u5feb\u901f\u5e42\u52a0\u4e00\u7ef4\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 #include <bits/stdc++.h> using namespace std ; #define ll long long const int mod = 1e9 + 7 ; const double eps = 1e-10 ; const int maxn = 70 + 10 ; double a [ maxn ][ maxn ], x [ maxn ]; inline int sgn ( double x ) { return ( x > eps ) - ( x < - eps ); } int gauss ( int n , int m ) { int r = 0 , c = 0 ; while ( r < n && c < m ) { int m_r = r ; for ( int i = r + 1 ; i < n ; i ++ ) { if ( fabs ( a [ i ][ c ]) > fabs ( a [ m_r ][ c ])) m_r = i ; } if ( m_r != r ) { for ( int j = c ; j <= m ; j ++ ) swap ( a [ r ][ j ], a [ m_r ][ j ]); } if ( ! sgn ( a [ r ][ c ])) { a [ r ][ c ] = 0 ; ++ c ; continue ; } for ( int i = r + 1 ; i < n ; i ++ ) { if ( a [ i ][ c ]) { double t = a [ i ][ c ] / a [ r ][ c ]; for ( int j = c ; j < m + 1 ; j ++ ) a [ i ][ j ] -= a [ r ][ j ] * t ; } } ++ r ; ++ c ; } for ( int i = r ; i < n ; i ++ ) if ( sgn ( a [ i ][ m ])) return - 1 ; for ( int i = m - 1 ; i > - 1 ; i -- ) { double s = a [ i ][ m ]; for ( int j = i + 1 ; j < m ; j ++ ) s -= a [ i ][ j ] * x [ j ]; x [ i ] = s / a [ i ][ i ]; } return 0 ; } struct Matrix { int sz ; // int n, m; ll a [ maxn ][ maxn ]; Matrix ( int sz_ = 0 ) : sz ( sz_ ) { memset ( a , 0 , sizeof a ); } void pr () { printf ( \"* \\n \" ); for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = 0 ; j < sz ; ++ j ) { printf ( \"%lld \" , a [ i ][ j ]); } printf ( \" \\n \" ); } } void tr () { for ( int i = 0 ; i < sz ; ++ i ) { for ( int j = i + 1 ; j < sz ; ++ j ) { swap ( a [ i ][ j ], a [ j ][ i ]); } } } } res , t1 ; Matrix mul ( Matrix a , Matrix b ) { Matrix res ( a . sz ); // if (a.m != b.n) return res; for ( int i = 0 ; i < res . sz ; i ++ ) // a.n for ( int j = 0 ; j < res . sz ; j ++ ) // b.m for ( int k = 0 ; k < res . sz ; k ++ ) // a.m, b.n ( res . a [ i ][ j ] += a . a [ i ][ k ] * b . a [ k ][ j ] % mod ) %= mod ; return res ; } Matrix qp ( ll n ) { //for(int i = 0; i < cur; i++) res.a[i][i] = 1; while ( n > 0 ) { if ( n & 1 ) res = mul ( res , t1 ); t1 = mul ( t1 , t1 ); n >>= 1 ; } return res ; } ll A [ maxn * 2 ]; int main () { int T ; scanf ( \"%d\" , & T ); while ( T -- ) { int k ; ll n ; double b ; scanf ( \"%d%lld\" , & k , & n ); ll sum = 0 ; for ( int i = 0 ; i < 2 * k ; i ++ ) { scanf ( \"%lld\" , & A [ i ]); if ( i < k ) sum = ( sum + A [ i ]) % mod ; b = A [ i ]; // scanf(\"%lf\", &b); for ( int j = max ( k , i + 1 ); j < 2 * k ; j ++ ) { if ( j - i > k ) break ; else a [ j - k ][ j - i - 1 ] = b ; } if ( i >= k ) a [ i - k ][ k ] = b ; } gauss ( k , k ); for ( int i = 0 ; i < k ; i ++ ) { if ( x [ i ] == - 0.0 ) x [ i ] = 0 ; } memset ( res . a , 0 , sizeof res . a ); res . sz = k + 1 ; for ( int i = 0 ; i < k ; ++ i ) res . a [ 0 ][ i ] = A [ i ]; res . a [ 0 ][ k ] = sum ; // res.pr(); t1 . sz = k + 1 ; memset ( t1 . a , 0 , sizeof t1 . a ); for ( int i = 0 ; i < k - 1 ; ++ i ) { t1 . a [ i + 1 ][ i ] = 1 ; } for ( int i = 0 ; i < k ; ++ i ) { t1 . a [ k - i - 1 ][ k ] = t1 . a [ k - i - 1 ][ k - 1 ] = ( ll ) x [ i ] % mod ; } t1 . a [ k ][ k ] = 1 ; // t1.pr(); // for (int i = k; i < n; ++i) { // res = mul(res, t1); // res.pr(); // } Matrix gg = qp ( n - k ); printf ( \"%lld \\n \" , gg . a [ 0 ][ k ]); } return 0 ; } bm\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u677f\u5b50\u8fc7\u4e0d\u4e86\u6837\u4f8b\u5c31\u6ca1\u5199 \u770b\u522b\u4eba\u9898\u89e3\u5199\u7684\u4e0d\u77e5\u9053\u5565\u73a9\u610f\uff1f\uff1f\u9898\u89e3\u5199\u4e86\u5206\u5757\u77e9\u9635\u53bb\u6c42\u548c\u6bd4\u6211\u590d\u6742\u5ea6\u8fd8\u5927\u4e2a8\u500d\u4e0d\u592a\u884c\u3002","title":"K\u3001Guanguan's Happy water"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/","text":"Name Date Solved A B C D E F G H I J K L M 2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest 2019/10/8 10/12 O O O . \u00d8 \u00d8 \u00d8 \u00d8 O . O O tag Link # A \u601d\u7ef4 # B \u601d\u7ef4 # C \u72b6\u6001\u679a\u4e3e #E \u601d\u7ef4 # F \u62d3\u6251\u5e8f/\u72b6\u538bdp # G dfs\u6811 # H \u8d2a\u5fc3 # I \u601d\u7ef4 # K \u601d\u7ef4 # L \u6570\u5b66\u601d\u7ef4 A. Auxiliary Project Link \u9898\u610f\uff1a\u7ed9x\u6839\u706b\u67f4\u68d2\uff0c\u62fc\u51fa10\u79cd\u6570\u5b57\u7684\u548c\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a3\u6839\u5373\u53ef\u62fc\u51fa7\uff0c\u6240\u4ee5\u4f18\u5148\u53d6\u8fd9\u4e2a\uff0c\u5bf93\u53d6\u6a21\u5206\u7c7b\u5373\u53ef\u3002 == 0 \u5168\u90e8\u62fc7 == 1 \u5927\u90e8\u5206\u62fc7\uff0c\u52694\u4e2a\u62fc4 == 2 \u5927\u90e8\u5206\u62fc7\uff0c\u5269\u4e24\u4e2a\u62fc1 B. Boolean Satisfiability Link \u9898\u610f\uff1a\u7ed9\u53ea\u6709 \u6216 \u548c \u975e \u7684\u8868\u8fbe\u5f0f\uff0c\u6c42\u5176\u4e3a\u771f\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5982\u679c\u51fa\u73b0\u4e86 x|~x \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\uff0c\u5219\u6240\u6709\u53d8\u91cf\u4efb\u610f\u53d6\u90fd\u662f\u5bf9\u7684\uff0c\u6240\u4ee5\u4e3a 2^n \uff0c\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5219\u662f 2^n-1 \u5373\u53ef\u3002 C. Consonant Fencity Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32\uff0c\u67097\u79cd\u5143\u97f3\u5b57\u6bcd\uff0c\u5176\u4ed6\u7684\u5b57\u6bcd\u5982\u679c\u76f8\u90bb\u4e14\u4e00\u4e2a\u4e3a\u5927\u5199\u4e00\u4e2a\u4e3a\u5c0f\u5199\u5219\u8ba1\u7b97\u4e00\u6b21\uff0c\u53ef\u4ee5\u8fdb\u884c\u6539\u5199\uff0c\u5c06\u67d0\u4e00\u7c7b\u5c0f\u5199\u6539\u6210\u5927\u5199\uff0c\u6c42\u6539\u5199\u540e\u6700\u5927\u7684\u65b9\u6848\u3002 \u9898\u89e3\uff1a\u76f4\u63a520\u79cd\u5b57\u7b26\u679a\u4e3e\u51fa\u6240\u6709\u72b6\u6001\u5373\u53ef\uff0c\u5176\u4e2d mp[i][j] \u8bb0\u5f55\u6bcf\u79cd\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f7f\u4ed6\u6700\u5927\u5373\u53ef\u3002 E. Equal Numbers Link \u9898\u610f\uff1a\u6709n\u4e2a\u6570\uff0c\u6bcf\u6b21\u64cd\u4f5c\u9009\u62e91\u4e2a\u6570\uff0c\u4f7f\u5176\u53d8\u4e3a\u539f\u6765\u7684\u6b63\u6574\u6570\u500d\uff1b\u95ee\u64cd\u4f5c1-n\u6b21\u540e\u5e8f\u5217\u4e2d\u6700\u5c11\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u3002\u6bcf\u4e2a\u8be2\u95ee\u662f\u72ec\u7acb\u7684\u3002 \u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u79cd\u4f7f\u4e00\u4e2a\u6570\u6210\u4e3a\u53e6\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u500d\u6570\uff0c\u53e6\u4e00\u79cd\u76f4\u63a5\u53d8\u4e3a goal=lcm(a_1,a_2, ...,a_n) goal=lcm(a_1,a_2, ...,a_n) \uff0c\u66f4\u65b0\u6bcf\u4e2a\u70b9\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 F. Fygon 2.0 Link \u9898\u610f\uff1a\u7ed9\u4e00\u7cfb\u5217for\u5faa\u73af\u548c\u4e0d\u8d85\u8fc720\u4e2a\u53d8\u91cf\uff0c\u8ba1\u7b97\u7ed9\u7684\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u9700\u8981\u8ba1\u7b97\u5e38\u6570\uff09\u3002 \u6bcf\u4e2afor\u5faa\u73af\u76f8\u5f53\u4e8e\u7ed9\u51fa\u4e86\u53d8\u91cf\u4e4b\u95f4\u5927\u5c0f\u5173\u7cfb\u7684\u9650\u5236\uff0ca->b\u8868\u793aa\u2264b\uff0c\u6bcf\u4e2aSCC\u5185\u7684\u53d8\u91cf\u8981\u76f8\u7b49\u3002 \u6240\u70b9\u540e\u5f97\u5230\u4e00\u4e2an\u4e2a\u70b9\u7684DAG\uff0c\u6e10\u8fdb\u590d\u6742\u5ea6\u4e3an!\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u4e3a\u62d3\u6251\u5e8f\u7684\u65b9\u6848\u6570\uff0c\u7528\u72b6\u538bdp\u6c42\u89e3\u3002 G. Grand Test Link \u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6c42\u4e09\u6761\u8d77\u70b9\u7ec8\u70b9\u76f8\u540c\u7684\u4e0d\u76f8\u4ea4\u7b80\u5355\u8def\u5f84\u3002 \u6c42\u51faDFS\u6811\uff0c\u5bf9\u4e8e\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u66b4\u529b\u5c06u-v\u7684\u6811\u8fb9\u67d3\u8272\u3002\u5982\u679c\u4e00\u6761\u8fb9\u88ab\u67d3\u4e86\u4e24\u6b21\u8272\uff0c\u8bf4\u660e\u4e24\u4e2a\u7b80\u5355\u73af\u95f4\u6709\u516c\u5171\u8fb9\u3002\u4ec5\u4fdd\u7559\u4e24\u4e2a\u7b80\u5355\u73af\uff0c\u4efb\u9009\u4e24\u4e2a\u5ea6\u6570>=3\u7684\u70b9\u4f5c\u4e3aS\u548cT\uff0c\u7206\u641c\u51fa\u4e09\u6761\u8def\u5f84\u5373\u53ef\u3002 H. Hidden Supervisors Link \u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u4ee51\u4e3a\u6839\u7684\u6709n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4e00\u4e9b\u8282\u70b9\u7684\u7236\u4eb2\u5df2\u77e5\uff0c\u6784\u9020\u4e00\u4e2a\u65b9\u6848\uff0c\u8bbe\u7f6e\u672a\u77e5\u7236\u4eb2\u8282\u70b9\u7684\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u4f7f\u8fd9\u68f5\u6811\u4e0a\u7236\u4eb2\u8282\u70b9-\u513f\u5b50\u8282\u70b9\u7684\u5339\u914d\u6700\u5927\u3002 \u6c42\u51fa\u6bcf\u4e2a\u8fde\u901a\u5757\u6839\u7684\u5339\u914d\u60c5\u51b5\u4ee5\u53ca\u5185\u90e8\u672a\u88ab\u5339\u914d\u7684\u70b9\u6570\u3002\u5bf9\u4e8e\u6839\u5df2\u7ecf\u88ab\u5339\u914d\u7684\u8fde\u901a\u5757\uff0c\u663e\u7136\u4e0e1\u76f8\u8fde\u6700\u4f18\uff1b\u5269\u4e0b\u7684\u8054\u901a\u5757\u4ece\u5927\u5230\u5c0f\u8d2a\u5fc3\u5411\u672a\u5339\u914d\u70b9\u8fde\u8fb9\u5373\u53ef\u3002 I. Intelligence in Perpendicularia Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5f62\u72b6\uff0c\u5176\u4e2d\u6240\u6709\u8fb9\u90fd\u662f\u5e73\u884c\u4e0e\u5750\u6807\u8f74\u7684\uff0c\u6c42\u5916\u9762\u56db\u4e2a\u65b9\u5411\u770b\u4e0d\u5230\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u663e\u7136\uff0c\u603b-\u770b\u5230\u7684 K. Kotlin Island Link \u9898\u610f\uff1a\u521d\u59cbn\u00d7m\u7684\u77e9\u9635\u56fe\uff0c\u628a\u67d0\u4e9b\u884c\u67d0\u4e9b\u5217\u6dfb\u52a0\u5206\u9694\u7b26\u6c42\u5206\u5272\u6210x\u4e2a\u533a\u95f4\u7684\u65b9\u6848\u3002 \u9898\u89e3\uff1an\uff0cm\u4e0d\u662f\u5f88\u5927\u76f4\u63a5\u679a\u4e3e\u53ef\u80fd\u7684a\u00d7b=x\u5373\u53ef\u3002 L. Little Difference Link \u9898\u610f\uff1a\u7ed9n\uff0c\u6c42\u6240\u6709\u65b9\u6848\u4f7f\u5f97 n=x^p1*(x+1)^p2 \u6210\u7acb \u9898\u89e3\uff1a\u9996\u51482\u7684\u6b21\u65b9\u6709\u65e0\u7a77\u79cd\u65b9\u6848\uff0c\u56e0\u4e3a1\u53ef\u4ee5\u968f\u4fbf\u4e58\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u6570n\uff0c\u5728 [1\uff0cn**(1/3)] \u5185\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u89e3\uff0c\u5728 [n**(1/3),n] \u5185\u5982\u679c\u6709\u89e3\u53ea\u6709\u4e24\u79cd\u60c5\u51b5 x*x=n \u6216\u8005 x*(x+1)=n \uff0c\u6c42\u5e73\u65b9\u6839\u5373\u53ef\u3002","title":"2017 2018 ACM ICPC, NEERC, Northern Subregional Contest"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#tag","text":"# A \u601d\u7ef4 # B \u601d\u7ef4 # C \u72b6\u6001\u679a\u4e3e #E \u601d\u7ef4 # F \u62d3\u6251\u5e8f/\u72b6\u538bdp # G dfs\u6811 # H \u8d2a\u5fc3 # I \u601d\u7ef4 # K \u601d\u7ef4 # L \u6570\u5b66\u601d\u7ef4","title":"tag"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#a-auxiliary-project","text":"\u9898\u610f\uff1a\u7ed9x\u6839\u706b\u67f4\u68d2\uff0c\u62fc\u51fa10\u79cd\u6570\u5b57\u7684\u548c\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a3\u6839\u5373\u53ef\u62fc\u51fa7\uff0c\u6240\u4ee5\u4f18\u5148\u53d6\u8fd9\u4e2a\uff0c\u5bf93\u53d6\u6a21\u5206\u7c7b\u5373\u53ef\u3002 == 0 \u5168\u90e8\u62fc7 == 1 \u5927\u90e8\u5206\u62fc7\uff0c\u52694\u4e2a\u62fc4 == 2 \u5927\u90e8\u5206\u62fc7\uff0c\u5269\u4e24\u4e2a\u62fc1","title":"A. Auxiliary Project"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#b-boolean-satisfiability","text":"\u9898\u610f\uff1a\u7ed9\u53ea\u6709 \u6216 \u548c \u975e \u7684\u8868\u8fbe\u5f0f\uff0c\u6c42\u5176\u4e3a\u771f\u7684\u65b9\u6848\u6570\u3002 \u9898\u89e3\uff1a\u663e\u7136\u5982\u679c\u51fa\u73b0\u4e86 x|~x \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\uff0c\u5219\u6240\u6709\u53d8\u91cf\u4efb\u610f\u53d6\u90fd\u662f\u5bf9\u7684\uff0c\u6240\u4ee5\u4e3a 2^n \uff0c\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5219\u662f 2^n-1 \u5373\u53ef\u3002","title":"B. Boolean Satisfiability"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#c-consonant-fencity","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e32\uff0c\u67097\u79cd\u5143\u97f3\u5b57\u6bcd\uff0c\u5176\u4ed6\u7684\u5b57\u6bcd\u5982\u679c\u76f8\u90bb\u4e14\u4e00\u4e2a\u4e3a\u5927\u5199\u4e00\u4e2a\u4e3a\u5c0f\u5199\u5219\u8ba1\u7b97\u4e00\u6b21\uff0c\u53ef\u4ee5\u8fdb\u884c\u6539\u5199\uff0c\u5c06\u67d0\u4e00\u7c7b\u5c0f\u5199\u6539\u6210\u5927\u5199\uff0c\u6c42\u6539\u5199\u540e\u6700\u5927\u7684\u65b9\u6848\u3002 \u9898\u89e3\uff1a\u76f4\u63a520\u79cd\u5b57\u7b26\u679a\u4e3e\u51fa\u6240\u6709\u72b6\u6001\u5373\u53ef\uff0c\u5176\u4e2d mp[i][j] \u8bb0\u5f55\u6bcf\u79cd\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f7f\u4ed6\u6700\u5927\u5373\u53ef\u3002","title":"C. Consonant Fencity"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#e-equal-numbers","text":"\u9898\u610f\uff1a\u6709n\u4e2a\u6570\uff0c\u6bcf\u6b21\u64cd\u4f5c\u9009\u62e91\u4e2a\u6570\uff0c\u4f7f\u5176\u53d8\u4e3a\u539f\u6765\u7684\u6b63\u6574\u6570\u500d\uff1b\u95ee\u64cd\u4f5c1-n\u6b21\u540e\u5e8f\u5217\u4e2d\u6700\u5c11\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u3002\u6bcf\u4e2a\u8be2\u95ee\u662f\u72ec\u7acb\u7684\u3002 \u4e24\u79cd\u64cd\u4f5c\uff0c\u4e00\u79cd\u4f7f\u4e00\u4e2a\u6570\u6210\u4e3a\u53e6\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684\u500d\u6570\uff0c\u53e6\u4e00\u79cd\u76f4\u63a5\u53d8\u4e3a goal=lcm(a_1,a_2, ...,a_n) goal=lcm(a_1,a_2, ...,a_n) \uff0c\u66f4\u65b0\u6bcf\u4e2a\u70b9\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002","title":"E. Equal Numbers"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#f-fygon-20","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u7cfb\u5217for\u5faa\u73af\u548c\u4e0d\u8d85\u8fc720\u4e2a\u53d8\u91cf\uff0c\u8ba1\u7b97\u7ed9\u7684\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u9700\u8981\u8ba1\u7b97\u5e38\u6570\uff09\u3002 \u6bcf\u4e2afor\u5faa\u73af\u76f8\u5f53\u4e8e\u7ed9\u51fa\u4e86\u53d8\u91cf\u4e4b\u95f4\u5927\u5c0f\u5173\u7cfb\u7684\u9650\u5236\uff0ca->b\u8868\u793aa\u2264b\uff0c\u6bcf\u4e2aSCC\u5185\u7684\u53d8\u91cf\u8981\u76f8\u7b49\u3002 \u6240\u70b9\u540e\u5f97\u5230\u4e00\u4e2an\u4e2a\u70b9\u7684DAG\uff0c\u6e10\u8fdb\u590d\u6742\u5ea6\u4e3an!\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u4e3a\u62d3\u6251\u5e8f\u7684\u65b9\u6848\u6570\uff0c\u7528\u72b6\u538bdp\u6c42\u89e3\u3002","title":"F. Fygon 2.0"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#g-grand-test","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6c42\u4e09\u6761\u8d77\u70b9\u7ec8\u70b9\u76f8\u540c\u7684\u4e0d\u76f8\u4ea4\u7b80\u5355\u8def\u5f84\u3002 \u6c42\u51faDFS\u6811\uff0c\u5bf9\u4e8e\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u66b4\u529b\u5c06u-v\u7684\u6811\u8fb9\u67d3\u8272\u3002\u5982\u679c\u4e00\u6761\u8fb9\u88ab\u67d3\u4e86\u4e24\u6b21\u8272\uff0c\u8bf4\u660e\u4e24\u4e2a\u7b80\u5355\u73af\u95f4\u6709\u516c\u5171\u8fb9\u3002\u4ec5\u4fdd\u7559\u4e24\u4e2a\u7b80\u5355\u73af\uff0c\u4efb\u9009\u4e24\u4e2a\u5ea6\u6570>=3\u7684\u70b9\u4f5c\u4e3aS\u548cT\uff0c\u7206\u641c\u51fa\u4e09\u6761\u8def\u5f84\u5373\u53ef\u3002","title":"G. Grand Test"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#h-hidden-supervisors","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u4ee51\u4e3a\u6839\u7684\u6709n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u4e00\u4e9b\u8282\u70b9\u7684\u7236\u4eb2\u5df2\u77e5\uff0c\u6784\u9020\u4e00\u4e2a\u65b9\u6848\uff0c\u8bbe\u7f6e\u672a\u77e5\u7236\u4eb2\u8282\u70b9\u7684\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u4f7f\u8fd9\u68f5\u6811\u4e0a\u7236\u4eb2\u8282\u70b9-\u513f\u5b50\u8282\u70b9\u7684\u5339\u914d\u6700\u5927\u3002 \u6c42\u51fa\u6bcf\u4e2a\u8fde\u901a\u5757\u6839\u7684\u5339\u914d\u60c5\u51b5\u4ee5\u53ca\u5185\u90e8\u672a\u88ab\u5339\u914d\u7684\u70b9\u6570\u3002\u5bf9\u4e8e\u6839\u5df2\u7ecf\u88ab\u5339\u914d\u7684\u8fde\u901a\u5757\uff0c\u663e\u7136\u4e0e1\u76f8\u8fde\u6700\u4f18\uff1b\u5269\u4e0b\u7684\u8054\u901a\u5757\u4ece\u5927\u5230\u5c0f\u8d2a\u5fc3\u5411\u672a\u5339\u914d\u70b9\u8fde\u8fb9\u5373\u53ef\u3002","title":"H. Hidden Supervisors"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#i-intelligence-in-perpendicularia","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5f62\u72b6\uff0c\u5176\u4e2d\u6240\u6709\u8fb9\u90fd\u662f\u5e73\u884c\u4e0e\u5750\u6807\u8f74\u7684\uff0c\u6c42\u5916\u9762\u56db\u4e2a\u65b9\u5411\u770b\u4e0d\u5230\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u663e\u7136\uff0c\u603b-\u770b\u5230\u7684","title":"I. Intelligence in Perpendicularia"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#k-kotlin-island","text":"\u9898\u610f\uff1a\u521d\u59cbn\u00d7m\u7684\u77e9\u9635\u56fe\uff0c\u628a\u67d0\u4e9b\u884c\u67d0\u4e9b\u5217\u6dfb\u52a0\u5206\u9694\u7b26\u6c42\u5206\u5272\u6210x\u4e2a\u533a\u95f4\u7684\u65b9\u6848\u3002 \u9898\u89e3\uff1an\uff0cm\u4e0d\u662f\u5f88\u5927\u76f4\u63a5\u679a\u4e3e\u53ef\u80fd\u7684a\u00d7b=x\u5373\u53ef\u3002","title":"K. Kotlin Island"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2017-2018 ACM-ICPC, NEERC, Northern Subregional Contest/#l-little-difference","text":"\u9898\u610f\uff1a\u7ed9n\uff0c\u6c42\u6240\u6709\u65b9\u6848\u4f7f\u5f97 n=x^p1*(x+1)^p2 \u6210\u7acb \u9898\u89e3\uff1a\u9996\u51482\u7684\u6b21\u65b9\u6709\u65e0\u7a77\u79cd\u65b9\u6848\uff0c\u56e0\u4e3a1\u53ef\u4ee5\u968f\u4fbf\u4e58\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u6570n\uff0c\u5728 [1\uff0cn**(1/3)] \u5185\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u89e3\uff0c\u5728 [n**(1/3),n] \u5185\u5982\u679c\u6709\u89e3\u53ea\u6709\u4e24\u79cd\u60c5\u51b5 x*x=n \u6216\u8005 x*(x+1)=n \uff0c\u6c42\u5e73\u65b9\u6839\u5373\u53ef\u3002","title":"L. Little Difference"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/","text":"Name Date Solved A B C D E F G H I J K L 2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b 2019/11/20 6/12 O O . O . O . . . O O . tag Link A.\u51e0\u4f55\u3001\u968f\u673a B.\u66b4\u529b C.\u4e09\u7ef4\u51e0\u4f55 D.\u51e0\u4f55\u3001\u66b4\u529b E.\u56de\u6587\u4e32\u3001hash F.\u5dee\u5206\u6570\u7ec4\u3001\u66b4\u529b G.\u51e0\u4f55 H.\u7ebf\u6bb5\u6811 I.\u8d39\u7528\u6d41 J.\u6570\u4f4ddp K.\u77e9\u9635\u4e58\u6cd5\u3001\u66b4\u529b L.\u5377\u79ef A. Fruit Ninja Link \u7ed91e4\u4e2a\u70b9\uff0c\u6c42\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u7684\u70b9\u6700\u591a\u591a\u5c11\u4e2a \u610f\u4f1a\u4e00\u4e0b\u6982\u7387\u95ee\u9898\uff0c\u5047\u5982\u7b54\u6848\u4e3ax\uff0c\u90a3\u4e48\u5c31\u6709x/n\u7684\u6982\u7387\u53d6\u5230\u90a3\u4e2a\u7b54\u6848\u4e0a\u3002\u5f53\u7b54\u6848\u8f83\u5c0f\u65f6\uff0c\u89e3\u6cd5\u8f83\u591a\uff0c\u7b54\u6848\u8f83\u5927\u65f6\uff0c\u53d6\u70b9\u5230\u7b54\u6848\u76f4\u7ebf\u7684\u6982\u7387\u8f83\u5927\u3002\u6240\u4ee5\u968f\u673a\u53d6\u70b9\u5e76 O(n) check\u7b54\u6848\u5373\u53ef\u3002 B. Perfect Numbers Link \u7565 D. Thinking-Bear magic Link \u7ed9\u6b63\u591a\u8fb9\u5f62\uff0c\u8f93\u5165\u8fb9\u957fa\u548c\u8fb9\u6570l\u3002\u64cd\u4f5c\u4e3a\uff1a\u628a\u6240\u6709\u8fb9\u7684\u4e2d\u70b9\u53d6\u51fa\u6765\u4f9d\u6b21\u8fde\u63a5\u5f62\u6210\u65b0\u7684\u6b63n\u8fb9\u5f62\uff0c\u6c42\u591a\u5c11\u6b21\u64cd\u4f5c\u540e\u591a\u8fb9\u5f62\u9762\u79ef\u4e0d\u8d85\u8fc7l\u3002 \u6b63\u591a\u8fb9\u5f62\u9762\u79ef\u53ef\u4ee5\u7528\u5706\u5468\u89d2\u6c42\u51fa \\frac{n*a^2}{4 * tan(pi / n)} \u6bcf\u6b21\u7f29\u5c0f\u76f8\u5f53\u4e8e\u5f62\u72b6\u4e0d\u53d8\u7f29\u5c0fa\uff0c\u6240\u4ee5\u7b97\u51faa\u7684\u6bd4\u4f8b\u5373\u53ef\uff0c\u6839\u636e\u591a\u8fb9\u5f62\u5185\u89d2\u548c\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u5199\u51fa\u6765 a' = a * sin^2(\\frac{(n-2)*pi}{2 * n}) \u7136\u540e\u7531\u4e8e\u7b54\u6848\u4e0d\u4f1a\u5f88\u5927\u76f4\u63a5for\u5c31\u53ef\u4ee5\u7b97\u51fa\u7ed3\u679c F. Color it Link \u7ed9\u5b9an\u00d7m\u7684\u6574\u70b9\u65b9\u683c\u56fe\uff0cQ\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u5706\u5185\u7684\u6574\u70b9\u6d82\u9ed1\uff0c\u6c42\u6700\u540e\u767d\u8272\u70b9\u7684\u4e2a\u6570\u3002 1 \\le n, m \\le 2*10^4, 1 \\le q \\le 200 \u663e\u7136\u66b4\u529b\u4e24\u79cd\u65b9\u5f0f\uff1a\u679a\u4e3e\u6bcf\u4e2a\u70b9\u662f\u5426\u5728\u67d0\u4e2aq\u4e2d\uff0c\u6216\u8005\u679a\u4e3e\u6240\u6709q\u4e2d\u7684\u70b9\u90fd\u662f O(nmq) \u7684\u590d\u6742\u5ea6 \u8003\u8651\u4e00\u7ef4\u66b4\u529b\uff0c\u53e6\u4e00\u7ef4\u7528\u5dee\u5206\u6570\u7ec4\u4f18\u5316\u5373\u53ef O(nq) I. Matrix Game Link \u7ed9\u5b9a\u4e00\u4e2a n\u00d7m n\u00d7m \u77e9\u9635\u4e0a\u7684\u6570\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5c06\u77e9\u9635\u4e0a\u7684\u67d0\u4e2a\u6570+1\u6216-1\uff0c\u95ee\u6700\u5c11\u64cd\u4f5c\u591a\u5c11\u6b21\uff0c\u80fd\u4f7f\u6bcf\u884c\u4e0a\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u4e14\u6bcf\u5217\u4e0a\u7684\u4e2a\u6570\u76f8\u7b49\u3002 \u8d39\u7528\u6d41\u3002\u884c\u5217\u6a21\u578b\u5efa\u56fe\uff0c\u539f\u6709\u7684\u70b9\u884c\u5217\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a mp[i][j] \uff0c\u8d39\u7528\u4e3a-1(\u5f3a\u5236\u5148\u53d6)\uff0c\u518d\u5bf9\u8be5\u884c\u8be5\u5217\u8fde\u6d41\u91cf\u4e3ainf\u7684\u8fb9\uff0c\u8d39\u7528\u4e3a1\u3002\u4ee4\u539f\u6709\u7684\u70b9\u603b\u548c\u4e3asum\uff0c\u5f53\u524d\u7684\u82b1\u8d39\u5373\u4e3asum+mcmf\u3002 \u679a\u4e3e\u6d41\u91cf\uff0c\u6bcf\u6b21\u589e\u52a0 n*m/__gcd(n,m) \uff0c\u4ece\u6e90\u70b9\u5411\u884c\u5206\u6210n\u4efd\uff0c\u5217\u5411\u6c47\u70b9\u5206\u6210m\u4efd\uff0c\u6c42\u51fa\u6700\u5927\u503c\u3002 \u6ce8\u610f\u8fd9\u91cc\u662f**\u6709\u8d1f\u5708**\u7684\u8d39\u7528\u6d41\u3002\u5e76\u4e14\u5728\u8dd1\u7684\u65f6\u5019\u6709\u4e9b\u7384\u5b66\u7684\u5e38\u6570\u4f18\u5316\u2026\u2026\uff1f J. Beautiful Numbers Link \u6c42 1\uff5en \u4e2d\u7684\u7f8e\u4e3d\u6570\u7684\u4e2a\u6570\uff0c\u5f53\u4e00\u4e2a\u6570\u53ef\u4ee5\u6574\u9664\u5b83\u7684\u6570\u4f4d\u548c\u5373\u662f\u7f8e\u4e3d\u6570\u3002 \u663e\u7136\u6570\u4f4ddp\uff0c\u8003\u8651\u5230\u6a21\u6570\u5e76\u4e0d\u786e\u5b9a\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u6570\u4f4d\u548c\uff08 1e12 \u4ee5\u5185\u53ea\u6709 1~9*12 \u8fd9\u4e9b\u6570\u4f4d\u548c\u53ef\u80fd\u51fa\u73b0\uff09\u3002\u7136\u540e\u5c31\u662f\u6570\u4f4ddp\u89e3 1\uff5en \u4e2d\u6709\u591a\u5c11\u6a21x\u4e3a0\u4e14\u6570\u4f4d\u548c\u4e3ax\u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef\u3002 \u7531\u4e8e\u6a21\u6570\u4e0d\u540c\uff0c\u666e\u901a\u7684\u4f7f\u7528\u6570\u4f4ddp\u5e76\u4e14\u6bcf\u6b21\u6e05\u7a7a\u590d\u6742\u5ea6\u8fc7\u5927\uff0c\u7531\u4e8e\u672c\u9898\u6570\u636e\u4e0d\u90a3\u4e48\u5927\u53ef\u4ee5\u8003\u8651\u591a\u5b58\u4e00\u7ef4\u4e0d\u6e05\u7a7a\uff0c\u5373\uff1a dp[i][j][k][t] \u8868\u793a\u6a21\u6570\u3001\u548c\u90fd\u4e3ai\u65f6\uff0cj\u4f4d\u6570\uff0c\u5269\u4f59k\u7684\u548c\uff0c\u5f53\u524d\u4f59\u6570\u7684\u7b54\u6848 K. Matrix Multiplication Link \u7565","title":"2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/#tag","text":"A.\u51e0\u4f55\u3001\u968f\u673a B.\u66b4\u529b C.\u4e09\u7ef4\u51e0\u4f55 D.\u51e0\u4f55\u3001\u66b4\u529b E.\u56de\u6587\u4e32\u3001hash F.\u5dee\u5206\u6570\u7ec4\u3001\u66b4\u529b G.\u51e0\u4f55 H.\u7ebf\u6bb5\u6811 I.\u8d39\u7528\u6d41 J.\u6570\u4f4ddp K.\u77e9\u9635\u4e58\u6cd5\u3001\u66b4\u529b L.\u5377\u79ef","title":"tag"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/#a-fruit-ninja","text":"\u7ed91e4\u4e2a\u70b9\uff0c\u6c42\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u7684\u70b9\u6700\u591a\u591a\u5c11\u4e2a \u610f\u4f1a\u4e00\u4e0b\u6982\u7387\u95ee\u9898\uff0c\u5047\u5982\u7b54\u6848\u4e3ax\uff0c\u90a3\u4e48\u5c31\u6709x/n\u7684\u6982\u7387\u53d6\u5230\u90a3\u4e2a\u7b54\u6848\u4e0a\u3002\u5f53\u7b54\u6848\u8f83\u5c0f\u65f6\uff0c\u89e3\u6cd5\u8f83\u591a\uff0c\u7b54\u6848\u8f83\u5927\u65f6\uff0c\u53d6\u70b9\u5230\u7b54\u6848\u76f4\u7ebf\u7684\u6982\u7387\u8f83\u5927\u3002\u6240\u4ee5\u968f\u673a\u53d6\u70b9\u5e76 O(n) check\u7b54\u6848\u5373\u53ef\u3002","title":"A. Fruit Ninja"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/#b-perfect-numbers","text":"\u7565","title":"B.  Perfect Numbers"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/#d-thinking-bear-magic","text":"\u7ed9\u6b63\u591a\u8fb9\u5f62\uff0c\u8f93\u5165\u8fb9\u957fa\u548c\u8fb9\u6570l\u3002\u64cd\u4f5c\u4e3a\uff1a\u628a\u6240\u6709\u8fb9\u7684\u4e2d\u70b9\u53d6\u51fa\u6765\u4f9d\u6b21\u8fde\u63a5\u5f62\u6210\u65b0\u7684\u6b63n\u8fb9\u5f62\uff0c\u6c42\u591a\u5c11\u6b21\u64cd\u4f5c\u540e\u591a\u8fb9\u5f62\u9762\u79ef\u4e0d\u8d85\u8fc7l\u3002 \u6b63\u591a\u8fb9\u5f62\u9762\u79ef\u53ef\u4ee5\u7528\u5706\u5468\u89d2\u6c42\u51fa \\frac{n*a^2}{4 * tan(pi / n)} \u6bcf\u6b21\u7f29\u5c0f\u76f8\u5f53\u4e8e\u5f62\u72b6\u4e0d\u53d8\u7f29\u5c0fa\uff0c\u6240\u4ee5\u7b97\u51faa\u7684\u6bd4\u4f8b\u5373\u53ef\uff0c\u6839\u636e\u591a\u8fb9\u5f62\u5185\u89d2\u548c\u53ef\u4ee5\u5f88\u8f7b\u6613\u7684\u5199\u51fa\u6765 a' = a * sin^2(\\frac{(n-2)*pi}{2 * n}) \u7136\u540e\u7531\u4e8e\u7b54\u6848\u4e0d\u4f1a\u5f88\u5927\u76f4\u63a5for\u5c31\u53ef\u4ee5\u7b97\u51fa\u7ed3\u679c","title":"D. Thinking-Bear magic"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/#f-color-it","text":"\u7ed9\u5b9an\u00d7m\u7684\u6574\u70b9\u65b9\u683c\u56fe\uff0cQ\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u5706\u5185\u7684\u6574\u70b9\u6d82\u9ed1\uff0c\u6c42\u6700\u540e\u767d\u8272\u70b9\u7684\u4e2a\u6570\u3002 1 \\le n, m \\le 2*10^4, 1 \\le q \\le 200 \u663e\u7136\u66b4\u529b\u4e24\u79cd\u65b9\u5f0f\uff1a\u679a\u4e3e\u6bcf\u4e2a\u70b9\u662f\u5426\u5728\u67d0\u4e2aq\u4e2d\uff0c\u6216\u8005\u679a\u4e3e\u6240\u6709q\u4e2d\u7684\u70b9\u90fd\u662f O(nmq) \u7684\u590d\u6742\u5ea6 \u8003\u8651\u4e00\u7ef4\u66b4\u529b\uff0c\u53e6\u4e00\u7ef4\u7528\u5dee\u5206\u6570\u7ec4\u4f18\u5316\u5373\u53ef O(nq)","title":"F. Color it"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/#i-matrix-game","text":"\u7ed9\u5b9a\u4e00\u4e2a n\u00d7m n\u00d7m \u77e9\u9635\u4e0a\u7684\u6570\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5c06\u77e9\u9635\u4e0a\u7684\u67d0\u4e2a\u6570+1\u6216-1\uff0c\u95ee\u6700\u5c11\u64cd\u4f5c\u591a\u5c11\u6b21\uff0c\u80fd\u4f7f\u6bcf\u884c\u4e0a\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u4e14\u6bcf\u5217\u4e0a\u7684\u4e2a\u6570\u76f8\u7b49\u3002 \u8d39\u7528\u6d41\u3002\u884c\u5217\u6a21\u578b\u5efa\u56fe\uff0c\u539f\u6709\u7684\u70b9\u884c\u5217\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a mp[i][j] \uff0c\u8d39\u7528\u4e3a-1(\u5f3a\u5236\u5148\u53d6)\uff0c\u518d\u5bf9\u8be5\u884c\u8be5\u5217\u8fde\u6d41\u91cf\u4e3ainf\u7684\u8fb9\uff0c\u8d39\u7528\u4e3a1\u3002\u4ee4\u539f\u6709\u7684\u70b9\u603b\u548c\u4e3asum\uff0c\u5f53\u524d\u7684\u82b1\u8d39\u5373\u4e3asum+mcmf\u3002 \u679a\u4e3e\u6d41\u91cf\uff0c\u6bcf\u6b21\u589e\u52a0 n*m/__gcd(n,m) \uff0c\u4ece\u6e90\u70b9\u5411\u884c\u5206\u6210n\u4efd\uff0c\u5217\u5411\u6c47\u70b9\u5206\u6210m\u4efd\uff0c\u6c42\u51fa\u6700\u5927\u503c\u3002 \u6ce8\u610f\u8fd9\u91cc\u662f**\u6709\u8d1f\u5708**\u7684\u8d39\u7528\u6d41\u3002\u5e76\u4e14\u5728\u8dd1\u7684\u65f6\u5019\u6709\u4e9b\u7384\u5b66\u7684\u5e38\u6570\u4f18\u5316\u2026\u2026\uff1f","title":"I. Matrix Game"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/#j-beautiful-numbers","text":"\u6c42 1\uff5en \u4e2d\u7684\u7f8e\u4e3d\u6570\u7684\u4e2a\u6570\uff0c\u5f53\u4e00\u4e2a\u6570\u53ef\u4ee5\u6574\u9664\u5b83\u7684\u6570\u4f4d\u548c\u5373\u662f\u7f8e\u4e3d\u6570\u3002 \u663e\u7136\u6570\u4f4ddp\uff0c\u8003\u8651\u5230\u6a21\u6570\u5e76\u4e0d\u786e\u5b9a\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u6570\u4f4d\u548c\uff08 1e12 \u4ee5\u5185\u53ea\u6709 1~9*12 \u8fd9\u4e9b\u6570\u4f4d\u548c\u53ef\u80fd\u51fa\u73b0\uff09\u3002\u7136\u540e\u5c31\u662f\u6570\u4f4ddp\u89e3 1\uff5en \u4e2d\u6709\u591a\u5c11\u6a21x\u4e3a0\u4e14\u6570\u4f4d\u548c\u4e3ax\u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef\u3002 \u7531\u4e8e\u6a21\u6570\u4e0d\u540c\uff0c\u666e\u901a\u7684\u4f7f\u7528\u6570\u4f4ddp\u5e76\u4e14\u6bcf\u6b21\u6e05\u7a7a\u590d\u6742\u5ea6\u8fc7\u5927\uff0c\u7531\u4e8e\u672c\u9898\u6570\u636e\u4e0d\u90a3\u4e48\u5927\u53ef\u4ee5\u8003\u8651\u591a\u5b58\u4e00\u7ef4\u4e0d\u6e05\u7a7a\uff0c\u5373\uff1a dp[i][j][k][t] \u8868\u793a\u6a21\u6570\u3001\u548c\u90fd\u4e3ai\u65f6\uff0cj\u4f4d\u6570\uff0c\u5269\u4f59k\u7684\u548c\uff0c\u5f53\u524d\u4f59\u6570\u7684\u7b54\u6848","title":"J. Beautiful Numbers"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 ACM \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e0a\u6d77\u5927\u90fd\u4f1a\u8d5b/#k-matrix-multiplication","text":"\u7565","title":"K.  Matrix Multiplication"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 China Collegiate Programming Contest Final (CCPC-Final 2018)/","text":"Name Date Solved A B C D E F G H I J K L 2018 China Collegiate Programming Contest Final (CCPC-Final 2018) 2019/11/11 6/12 O O . . . . O . \u00d8 . O O A. Mischievous Problem Setter Link \u7b7e\u5230 B. Balance of the Force Link \u7ed9\u4e00\u7cfb\u5217\u70b9\u9ed1\u767d\u67d3\u8272\uff0c\u67d3\u6210\u9ed1\u8272/\u767d\u8272\u53ef\u4ee5\u4f7f\u8fd9\u4e2a\u70b9\u5f97\u5230\u76f8\u5e94\u7684\u6743\u503c\uff0c\u5bf9\u5176\u4e2d\u7684\u4e00\u4e9b\u70b9\u8fde\u8fb9\uff0c\u8fde\u8fb9\u7684\u4e24\u4e2a\u70b9\u989c\u8272\u4e0d\u80fd\u76f8\u540c\uff0c\u8981\u4f7f\u67d3\u8272\u540e\u6240\u6709\u70b9\u6743\u503c\u7684\u6781\u5dee\u6700\u5c0f\uff0c\u6c42\u8fd9\u4e2a\u6781\u5dee\u3002 2-SAT\u5224\u65ad\u662f\u5426\u5b58\u5728\u89e3\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u7684\u67d3\u8272\u65b9\u6848\u662f\u786e\u5b9a\u7684\uff08\u6c42\u51fa\u4e00\u4e2a\u67d3\u8272\u65b9\u6848\u540e\u53ea\u80fd\u4e0d\u53d8\u6216\u5168\u90e8\u7ffb\u8f6c\uff09\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u6709k\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u9700\u8981\u5728(min1,max1)/(min2,max2)\u4e2d\u9009\u62e9\u4e00\u79cd\uff0c\u5982\u4f55\u9009\u62e9\u4f7f\u6781\u5dee\u6700\u5c0f\u3002 \u4ee4min1<min2\uff0c\u8003\u8651\u5c06\u6bcf\u4e2a\u70b9\u5bf9min\u7684\u8f83\u5c0f\u503c\u653e\u5165set A\uff0c\u5728set B\u4e2d\u653e\u5165k\u4e2amin(max1,max2)\uff0c\u5f53\u7ecf\u8fc7\u67d0\u4e2a\u70b9\u65f6\u8ba1\u7b97\u4e0eB\u4e2d\u6700\u5927\u503c\u7684\u5dee\uff0c\u66f4\u65b0\u7b54\u6848\u3002\u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u70b9\u662fmin1\uff0c\u5728setA\u4e2d\u5220\u9664min1,\u63d2\u5165min2\uff0c\u5982\u679cmax1<max2\uff0c\u5728setB\u4e2d\u5220\u9664max1,\u63d2\u5165max2\u3002\u5982\u679c\u5f53\u524dA\u96c6\u5408\u9996\u90e8\u662fmin2\uff0c\u8bf4\u660e\u518d\u5411\u53f3\u65e0\u6cd5\u53d6\u6ee1k\u4e2a\u70b9\uff0c\u5904\u7406\u5373\u53ef\u5f97\u5230\u6700\u5927\u503c G. Pastoral Life in Stardew Valley Link \u7ed9\u4e00\u4e2a n\u00d7m n\u00d7m \u7684\u77e9\u9635\uff0c\u9009\u53d6\u4e00\u4e2a\u5b50\u77e9\u9635\uff0c\u5728\u5b50\u77e9\u9635\u4e2d\u653e\u4e00\u4e2a\u7a3b\u8349\u4eba\uff0c\u4f7f\u7a3b\u8349\u4eba\u80fd\u88ab\u653e\u5728\u5b50\u77e9\u9635\u4e2d\u7684\u4f5c\u7269\u5305\u56f4\uff0c\u6c42\u65b9\u6848\u6570\u3002 \u63a8\u53cd\u6b63\u4e5f\u4e0d\u4f1a\u63a8\u2026\u2026\u6253\u8868\u627e\u89c4\u5f8b\u4e86\u3002 I. Cockroaches Link \u7ed9m\u4e2a\u4e8c\u7ef4\u70b9\u3002\u9009\u62e9\u4e00\u4e2a\u5750\u6807\u70b9\uff0c\u5728\u5176\u540c\u884c/\u540c\u5217\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u5220\u9664\u3002\u95ee\u4e00\u6b21\u6700\u591a\u80fd\u5220\u9664\u591a\u5c11\u4e2a\u70b9\uff0c\u53ca\u5220\u9664\u6700\u591a\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff08\u5220\u9664\u7684\u70b9\u7f16\u53f7\u5168\u90e8\u76f8\u540c\u89c6\u4f5c\u540c\u4e00\u79cd\u65b9\u6848\uff09\u3002 \u6709\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a1.\u5168\u5728\u540c\u4e00\u884c/\u540c\u4e00\u5217\u53ea\u6709\u4e00\u79cd\uff1b2.\u6240\u6709\u7684\u884c\u3001\u5217\u5168\u4e0d\u76f8\u540c\uff0c\u6709n\u00d7(n-1)/2\u79cd\u65b9\u6848\u3002\u5269\u4e0b\u7684\u60c5\u51b5\u5219\u53d6\u70b9\u6570\u6700\u591a\u3001\u6b21\u591a\u7684\u884c\u548c\u5217\uff0c\u679a\u4e3e\u7b54\u6848\u5373\u53ef\u3002 K. Mr. Panda and Kakin Link \u5df2\u77e5 c,p c,p \uff0c\u6c42 X^{2^{30}+3}\u2261c\\ mod\\ p X^{2^{30}+3}\u2261c\\ mod\\ p \u6709 x^y\u2261z\\ mod \\ p x^y\u2261z\\ mod \\ p \uff0c\u53d6\u5bf9\u6570\u6709 y\u00b7lg(x)\u2261lg(z) \\ mod \\ p y\u00b7lg(x)\u2261lg(z) \\ mod \\ p \u4e24\u8fb9\u540c\u4e58inv(y)\u6709 lg(x)\u2261inv(y)\u00b7lg(z) \\ mod \\ p lg(x)\u2261inv(y)\u00b7lg(z) \\ mod \\ p \u63a8\u51fa x\u2261z^{inv(y)}\\ mod\\ p x\u2261z^{inv(y)}\\ mod\\ p \u5373 X=c^{inv({2^{30}+3})} \\ mod \\ p X=c^{inv({2^{30}+3})} \\ mod \\ p \u6240\u4ee5\u5feb\u901f\u5e42\u641e\u4e00\u4e0b\u5c31\u884c L. Ultra Weak Goldbach\u2019s Conjecture Link \u7ed9\u4f60\u4e00\u4e2a\u6570\uff0c\u628a\u5b83\u62c6\u62106\u4e2a\u7d20\u6570\u3002 n\u226411\u65e0\u89e3\uff0c\u5426\u5219n\u662f\u5947\u6570\u5219\u628a\u5b83\u62c6\u62102+2+2+3+\u5076\u6570\uff0cn\u662f\u5076\u6570\u5219\u628a\u5b83\u62c6\u62102+2+2+2+\u5076\u6570\uff0c\u66b4\u529b\u5206\u89e3\u5076\u6570\u4e3a\u4e24\u4e2a\u7d20\u6570\u5373\u53ef\u3002","title":"2018 China Collegiate Programming Contest Final (CCPC Final 2018)"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 China Collegiate Programming Contest Final (CCPC-Final 2018)/#a-mischievous-problem-setter","text":"\u7b7e\u5230","title":"A. Mischievous Problem Setter"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 China Collegiate Programming Contest Final (CCPC-Final 2018)/#b-balance-of-the-force","text":"\u7ed9\u4e00\u7cfb\u5217\u70b9\u9ed1\u767d\u67d3\u8272\uff0c\u67d3\u6210\u9ed1\u8272/\u767d\u8272\u53ef\u4ee5\u4f7f\u8fd9\u4e2a\u70b9\u5f97\u5230\u76f8\u5e94\u7684\u6743\u503c\uff0c\u5bf9\u5176\u4e2d\u7684\u4e00\u4e9b\u70b9\u8fde\u8fb9\uff0c\u8fde\u8fb9\u7684\u4e24\u4e2a\u70b9\u989c\u8272\u4e0d\u80fd\u76f8\u540c\uff0c\u8981\u4f7f\u67d3\u8272\u540e\u6240\u6709\u70b9\u6743\u503c\u7684\u6781\u5dee\u6700\u5c0f\uff0c\u6c42\u8fd9\u4e2a\u6781\u5dee\u3002 2-SAT\u5224\u65ad\u662f\u5426\u5b58\u5728\u89e3\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u7684\u67d3\u8272\u65b9\u6848\u662f\u786e\u5b9a\u7684\uff08\u6c42\u51fa\u4e00\u4e2a\u67d3\u8272\u65b9\u6848\u540e\u53ea\u80fd\u4e0d\u53d8\u6216\u5168\u90e8\u7ffb\u8f6c\uff09\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u6709k\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u9700\u8981\u5728(min1,max1)/(min2,max2)\u4e2d\u9009\u62e9\u4e00\u79cd\uff0c\u5982\u4f55\u9009\u62e9\u4f7f\u6781\u5dee\u6700\u5c0f\u3002 \u4ee4min1<min2\uff0c\u8003\u8651\u5c06\u6bcf\u4e2a\u70b9\u5bf9min\u7684\u8f83\u5c0f\u503c\u653e\u5165set A\uff0c\u5728set B\u4e2d\u653e\u5165k\u4e2amin(max1,max2)\uff0c\u5f53\u7ecf\u8fc7\u67d0\u4e2a\u70b9\u65f6\u8ba1\u7b97\u4e0eB\u4e2d\u6700\u5927\u503c\u7684\u5dee\uff0c\u66f4\u65b0\u7b54\u6848\u3002\u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u70b9\u662fmin1\uff0c\u5728setA\u4e2d\u5220\u9664min1,\u63d2\u5165min2\uff0c\u5982\u679cmax1<max2\uff0c\u5728setB\u4e2d\u5220\u9664max1,\u63d2\u5165max2\u3002\u5982\u679c\u5f53\u524dA\u96c6\u5408\u9996\u90e8\u662fmin2\uff0c\u8bf4\u660e\u518d\u5411\u53f3\u65e0\u6cd5\u53d6\u6ee1k\u4e2a\u70b9\uff0c\u5904\u7406\u5373\u53ef\u5f97\u5230\u6700\u5927\u503c","title":"B. Balance of the Force"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 China Collegiate Programming Contest Final (CCPC-Final 2018)/#g-pastoral-life-in-stardew-valley","text":"\u7ed9\u4e00\u4e2a n\u00d7m n\u00d7m \u7684\u77e9\u9635\uff0c\u9009\u53d6\u4e00\u4e2a\u5b50\u77e9\u9635\uff0c\u5728\u5b50\u77e9\u9635\u4e2d\u653e\u4e00\u4e2a\u7a3b\u8349\u4eba\uff0c\u4f7f\u7a3b\u8349\u4eba\u80fd\u88ab\u653e\u5728\u5b50\u77e9\u9635\u4e2d\u7684\u4f5c\u7269\u5305\u56f4\uff0c\u6c42\u65b9\u6848\u6570\u3002 \u63a8\u53cd\u6b63\u4e5f\u4e0d\u4f1a\u63a8\u2026\u2026\u6253\u8868\u627e\u89c4\u5f8b\u4e86\u3002","title":"G. Pastoral Life in Stardew Valley"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 China Collegiate Programming Contest Final (CCPC-Final 2018)/#i-cockroaches","text":"\u7ed9m\u4e2a\u4e8c\u7ef4\u70b9\u3002\u9009\u62e9\u4e00\u4e2a\u5750\u6807\u70b9\uff0c\u5728\u5176\u540c\u884c/\u540c\u5217\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u5220\u9664\u3002\u95ee\u4e00\u6b21\u6700\u591a\u80fd\u5220\u9664\u591a\u5c11\u4e2a\u70b9\uff0c\u53ca\u5220\u9664\u6700\u591a\u4e2a\u70b9\u7684\u65b9\u6848\u6570\uff08\u5220\u9664\u7684\u70b9\u7f16\u53f7\u5168\u90e8\u76f8\u540c\u89c6\u4f5c\u540c\u4e00\u79cd\u65b9\u6848\uff09\u3002 \u6709\u4e24\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a1.\u5168\u5728\u540c\u4e00\u884c/\u540c\u4e00\u5217\u53ea\u6709\u4e00\u79cd\uff1b2.\u6240\u6709\u7684\u884c\u3001\u5217\u5168\u4e0d\u76f8\u540c\uff0c\u6709n\u00d7(n-1)/2\u79cd\u65b9\u6848\u3002\u5269\u4e0b\u7684\u60c5\u51b5\u5219\u53d6\u70b9\u6570\u6700\u591a\u3001\u6b21\u591a\u7684\u884c\u548c\u5217\uff0c\u679a\u4e3e\u7b54\u6848\u5373\u53ef\u3002","title":"I. Cockroaches"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 China Collegiate Programming Contest Final (CCPC-Final 2018)/#k-mr-panda-and-kakin","text":"\u5df2\u77e5 c,p c,p \uff0c\u6c42 X^{2^{30}+3}\u2261c\\ mod\\ p X^{2^{30}+3}\u2261c\\ mod\\ p \u6709 x^y\u2261z\\ mod \\ p x^y\u2261z\\ mod \\ p \uff0c\u53d6\u5bf9\u6570\u6709 y\u00b7lg(x)\u2261lg(z) \\ mod \\ p y\u00b7lg(x)\u2261lg(z) \\ mod \\ p \u4e24\u8fb9\u540c\u4e58inv(y)\u6709 lg(x)\u2261inv(y)\u00b7lg(z) \\ mod \\ p lg(x)\u2261inv(y)\u00b7lg(z) \\ mod \\ p \u63a8\u51fa x\u2261z^{inv(y)}\\ mod\\ p x\u2261z^{inv(y)}\\ mod\\ p \u5373 X=c^{inv({2^{30}+3})} \\ mod \\ p X=c^{inv({2^{30}+3})} \\ mod \\ p \u6240\u4ee5\u5feb\u901f\u5e42\u641e\u4e00\u4e0b\u5c31\u884c","title":"K. Mr. Panda and Kakin"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018 China Collegiate Programming Contest Final (CCPC-Final 2018)/#l-ultra-weak-goldbachs-conjecture","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\uff0c\u628a\u5b83\u62c6\u62106\u4e2a\u7d20\u6570\u3002 n\u226411\u65e0\u89e3\uff0c\u5426\u5219n\u662f\u5947\u6570\u5219\u628a\u5b83\u62c6\u62102+2+2+3+\u5076\u6570\uff0cn\u662f\u5076\u6570\u5219\u628a\u5b83\u62c6\u62102+2+2+2+\u5076\u6570\uff0c\u66b4\u529b\u5206\u89e3\u5076\u6570\u4e3a\u4e24\u4e2a\u7d20\u6570\u5373\u53ef\u3002","title":"L. Ultra Weak Goldbach's Conjecture"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018-2019 ACM-ICPC, Asia East Continent Finals/","text":"Name Date Solved A B C D E F G H I J K L 2018-2019 ACM-ICPC, Asia East Continent Finals 2019/10/8 6/12 . . \u00d8 O . O . . O \u00d8 . O C. Heretical \u2026 M\u00f6bius Link \u7ed9\u51fa\u4e00\u4e2a20\u00d710\u768401\u4e32\uff0c\u4e3a\u4e00\u6bb5\u8fde\u7eed\u7684Mobius\u51fd\u6570\u7684\u7edd\u5bf9\u503c\uff0c\u6c42\u8fd9\u6bb5\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\uff0c\u65e0\u89e3\u8f93\u51fa-1. \u9898\u89e3\uff1a\u6839\u636e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u53ef\u77e5\u6240\u6709\u5e73\u65b9\u6570\u7684\u500d\u6570\u7684\u503c\u90fd\u662f0\uff0c\u73b0\u5728\u53f3\u8fde\u7eed\u7684200\u4e2a\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u7edd\u5bf9\u503c\uff0c\u82e5\u5408\u6cd5\u53ef\u4ee5\u6c42\u51fa4\u30019\u300116\u300125\u300136\u300149\u300164\u300181\u3001100\u3001121\u3001144\u3001169\u3001196\u7684\u5927\u81f4\u4f4d\u7f6e\uff0c\u5373\u6c42\u51fa\u7b54\u6848x\u5bf9\u8fd9\u4e9b\u6570\u53d6\u6a21\u5f97\u5230\u7684\u503c\u7684\u5927\u81f4\u60c5\u51b5\uff08\u505adfs\u5224\u65ad\u5373\u53ef\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u5355\u70b9\u6c42\u51fa\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u503c\u505a\u5339\u914d\u6216\u8005\u7528\u4efb\u610f\u4f4d\u7f6e\u5f00\u5934\u7684\u7ebf\u6027\u7b5b\u5373\u53ef\u3002\u6ce8\u610f\u6b64\u9898\u9700\u8981\u526a\u679d\uff0c\u53ef\u4ee5\u53d1\u73b01e9\u4ee5\u5185200\u4e2a\u8fde\u7eed\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u4e0d\u53ef\u80fd\u51fa\u73b0100\u4e2a\u4ee5\u4e0a\u76840\uff0c\u5177\u4f53\u600e\u4e48\u7b97\u7684\u6211\u4e5f\u4e0d\u77e5\u9053\u3002 D. Deja vu of \u2026 Go Players Link \u7b7e\u5230 F. Interstellar \u2026 Fantasy Link I. Misunderstood \u2026 Missing Link \u6253\u602a\u517d\uff0c\u521d\u59cb\u65f6\u6709A\u7684\u653b\u51fb\u529b\uff0c\u6bcf\u8f6e\u589e\u957fD\uff0c\u521d\u59cb\u65f6\u4e3a0\uff0c\u6709n\u8f6e\uff0c\u6bcf\u8f6e\u5728\u4e09\u79cd\u64cd\u4f5c\u9009\u62e9\u4e00\u79cd\uff1a \u2460\u53d1\u8d77\u653b\u51fb\uff0c\u4ea7\u751fA+a[i]\u7684\u4f24\u5bb3 \u2461D=D+b[i] \u2462\u6c38\u4e45\u589e\u52a0\u653b\u51fb\u529bA=A+c[i] \u6c42\u6700\u5927\u53ef\u80fd\u4ea7\u751f\u7684\u603b\u4f24\u5bb3\u3002 \u9898\u89e3\uff1a\u5012\u7740DP\uff0c\u7edf\u8ba1i-n\u4e00\u5171\u8fdb\u884c\u7684\u653b\u51fb\u6b21\u6570cnt\u4ee5\u53ca\u4e4b\u540e\u6240\u6709\u653b\u51fb\u5230\u5f53\u524d\u70b9\u7684\u8ddd\u79bb\u4e4b\u548csum\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u591a\u4ea7\u751fa[i]\u7684\u4f24\u5bb3\uff1b\u5982\u679c\u9009\u62e92\uff0c\u6bcf\u4e00\u6b21\u653b\u51fbj\u7684\u4f24\u5bb3\u90fd\u4f1a\u589e\u52a0(j-i)\u00b7b[i]\uff1b\u5982\u679c\u9009\u62e93\uff0c\u6bcf\u4e00\u6b21\u653b\u51fb\u7684\u4f24\u5bb3\u589e\u52a0c[i]\u3002 \u8bbe\u7f6e\u72b6\u6001 dp[n][cnt][sum] \uff0c\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt - 1][sum - cnt + 1]+a[i]) dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt][sum - cnt] + b[i] * sum; dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt][sum - cnt] + c[i] * cnt; \u5373\u53ef\u6c42\u89e3\u3002 J. Philosophical \u2026 Balance Link \u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5148\u624b\u7ed9\u4e32\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u8d4b\u4e00\u4e2a\u503c p_i p_i \u5e76\u4fdd\u8bc1 p_i \\ge 0, \\sum_{i=1}^n p_i = 1 p_i \\ge 0, \\sum_{i=1}^n p_i = 1 \uff0c\u540e\u624b\u9009\u62e9\u4e00\u4e2a\u5b50\u4e32 j j \u3002\u6709\u5f0f\u5b50 \\sum_{k=1}^n p_k \\mathrm{lcp}(s_k,s_j) \\sum_{k=1}^n p_k \\mathrm{lcp}(s_k,s_j) \uff0c\u5148\u624b\u60f3\u4f7f\u5176\u5c3d\u53ef\u80fd\u5927\uff0c\u540e\u624b\u60f3\u4f7f\u5176\u5c3d\u53ef\u80fd\u5c0f\u3002\u5148\u624b\u8981\u5982\u4f55\u64cd\u4f5c\u624d\u80fd\u4f7f\u8fd9\u4e2a\u503c\u6700\u5927\uff0c\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5c06\u539f\u4e32\u53cd\u5411\uff0c\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u5bf9\u4e8e\u53cd\u4e32\u7684\u540e\u7f00\u6811\uff0c\u6b64\u65f6\u540e\u624b\u5982\u679c\u9009\u62e9\u67d0\u4e2a\u5b50\u6811 u u \u4e2d\u9009\u62e9\u4e32 s_j s_j \uff0c\u5728 p p \u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u8981\u4f7flcp\u6700\u5c0f\uff0c\u663e\u7136\u6700\u4f18\u89e3\u4e3a\u9009\u62e9\u5b50\u6811\u7684\u6839\u3002 \u5728\u540e\u7f00\u81ea\u52a8\u673a\u7684suffix link\u6811\u4e2d\uff0c\u5982\u679c\u5f53\u524dstate\u4e3anp\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u53d6\u5f53\u524d\u8282\u70b9\u7684len\u4f5c\u4e3a\u7b54\u6848\u3002\u5426\u5219\u9700\u8981\u5408\u5e76\u82e5\u5e72\u5b50\u6811\u7684\u7b54\u6848\uff0c\u7b54\u6848\u4e3a\u4e00\u4e2a\u7eb3\u4ec0\u5747\u8861\u7684\u6a21\u578b\uff0c\u5373\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684\u8d21\u732e\u76f8\u7b49\u3002\u90a3\u4e48\u8be5\u70b9\u7684\u8d21\u732e\u4e3a len[u]+x len[u]+x \uff0c\u5176\u4e2d$len[u])\u4e00\u5b9a\u4f1a\u53d6\u5230\uff0c x x \u4e3a\u7eb3\u4ec0\u5747\u8861\u4e0b\u53ef\u4ee5\u53d6\u5230\u7684\u6700\u5927\u503c\uff0c\u63a8\u4e00\u4e0b\u5b50\u6811\u7684 x x \u5f97\u5230 x = \\frac{1}{\\sum \\frac{1}{f_i}} x = \\frac{1}{\\sum \\frac{1}{f_i}} \uff0c\u90a3\u4e48\u5728suffix link\u6811\u4e0adfs\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002 L. Eventual \u2026 Journey Link \u6709 n \u4e2a\u8f66\u7ad9\uff0c\u76f8\u4e92\u4e4b\u95f4\u6709 m \u6761\u516c\u5171\u7684\u53cc\u5411\u94c1\u8def\u8fde\u901a\uff0c\u8f66\u7ad9\u5206\u6210 0,1 \u4e24\u79cd\u7c7b\u522b\uff0c\u4efb\u610f\u4e24\u4e2a 0 \u7c7b\u8f66\u7ad9\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u79c1\u6709\u7684\u94c1\u8def\u76f8\u4e92\u8fde\u63a5\uff0c1 \u7c7b\u8f66\u7ad9\u4e5f\u7c7b\u4f3c\u3002 \u73b0\u5728\uff0c\u4ece\u6bcf\u8f66\u7ad9 i \u51fa\u53d1\uff0c\u5230\u8f66\u7ad9 j \u7684\u6700\u5c11\u8d70\u8fc7\u7684\u94c1\u8def\u6570\u76ee\u4e3a D(u,v)\uff0c\u8981\u6c42\u4f60\u5bf9\u6bcf\u4e2a\u56fa\u5b9a\u7684\u8f66\u7ad9 i\uff0c\u90fd\u8f93\u51fa\u5230\u5176\u4ed6\u6240\u6709\u8f66\u7ad9\u7684 D(i,j) \u4e4b\u548c\u3002 \u9898\u89e3\uff1a\u5206\u7c7b\u8ba8\u8bba\u679a\u4e3e\u72b6\u6001\u5373\u53ef\u3002","title":"2018 2019 ACM ICPC, Asia East Continent Finals"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018-2019 ACM-ICPC, Asia East Continent Finals/#c-heretical-mobius","text":"\u7ed9\u51fa\u4e00\u4e2a20\u00d710\u768401\u4e32\uff0c\u4e3a\u4e00\u6bb5\u8fde\u7eed\u7684Mobius\u51fd\u6570\u7684\u7edd\u5bf9\u503c\uff0c\u6c42\u8fd9\u6bb5\u5e8f\u5217\u8d77\u59cb\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\uff0c\u65e0\u89e3\u8f93\u51fa-1. \u9898\u89e3\uff1a\u6839\u636e\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u53ef\u77e5\u6240\u6709\u5e73\u65b9\u6570\u7684\u500d\u6570\u7684\u503c\u90fd\u662f0\uff0c\u73b0\u5728\u53f3\u8fde\u7eed\u7684200\u4e2a\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u7edd\u5bf9\u503c\uff0c\u82e5\u5408\u6cd5\u53ef\u4ee5\u6c42\u51fa4\u30019\u300116\u300125\u300136\u300149\u300164\u300181\u3001100\u3001121\u3001144\u3001169\u3001196\u7684\u5927\u81f4\u4f4d\u7f6e\uff0c\u5373\u6c42\u51fa\u7b54\u6848x\u5bf9\u8fd9\u4e9b\u6570\u53d6\u6a21\u5f97\u5230\u7684\u503c\u7684\u5927\u81f4\u60c5\u51b5\uff08\u505adfs\u5224\u65ad\u5373\u53ef\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u5355\u70b9\u6c42\u51fa\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u7684\u503c\u505a\u5339\u914d\u6216\u8005\u7528\u4efb\u610f\u4f4d\u7f6e\u5f00\u5934\u7684\u7ebf\u6027\u7b5b\u5373\u53ef\u3002\u6ce8\u610f\u6b64\u9898\u9700\u8981\u526a\u679d\uff0c\u53ef\u4ee5\u53d1\u73b01e9\u4ee5\u5185200\u4e2a\u8fde\u7eed\u7684\u83ab\u6bd4\u4e4c\u65af\u51fd\u6570\u4e0d\u53ef\u80fd\u51fa\u73b0100\u4e2a\u4ee5\u4e0a\u76840\uff0c\u5177\u4f53\u600e\u4e48\u7b97\u7684\u6211\u4e5f\u4e0d\u77e5\u9053\u3002","title":"C. Heretical \u2026 M\u00f6bius"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018-2019 ACM-ICPC, Asia East Continent Finals/#d-deja-vu-of-go-players","text":"\u7b7e\u5230","title":"D. Deja vu of \u2026 Go Players"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018-2019 ACM-ICPC, Asia East Continent Finals/#f-interstellar-fantasy","text":"","title":"F. Interstellar \u2026 Fantasy"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018-2019 ACM-ICPC, Asia East Continent Finals/#i-misunderstood-missing","text":"\u6253\u602a\u517d\uff0c\u521d\u59cb\u65f6\u6709A\u7684\u653b\u51fb\u529b\uff0c\u6bcf\u8f6e\u589e\u957fD\uff0c\u521d\u59cb\u65f6\u4e3a0\uff0c\u6709n\u8f6e\uff0c\u6bcf\u8f6e\u5728\u4e09\u79cd\u64cd\u4f5c\u9009\u62e9\u4e00\u79cd\uff1a \u2460\u53d1\u8d77\u653b\u51fb\uff0c\u4ea7\u751fA+a[i]\u7684\u4f24\u5bb3 \u2461D=D+b[i] \u2462\u6c38\u4e45\u589e\u52a0\u653b\u51fb\u529bA=A+c[i] \u6c42\u6700\u5927\u53ef\u80fd\u4ea7\u751f\u7684\u603b\u4f24\u5bb3\u3002 \u9898\u89e3\uff1a\u5012\u7740DP\uff0c\u7edf\u8ba1i-n\u4e00\u5171\u8fdb\u884c\u7684\u653b\u51fb\u6b21\u6570cnt\u4ee5\u53ca\u4e4b\u540e\u6240\u6709\u653b\u51fb\u5230\u5f53\u524d\u70b9\u7684\u8ddd\u79bb\u4e4b\u548csum\uff1b\u5982\u679c\u9009\u62e91\uff0c\u5219\u591a\u4ea7\u751fa[i]\u7684\u4f24\u5bb3\uff1b\u5982\u679c\u9009\u62e92\uff0c\u6bcf\u4e00\u6b21\u653b\u51fbj\u7684\u4f24\u5bb3\u90fd\u4f1a\u589e\u52a0(j-i)\u00b7b[i]\uff1b\u5982\u679c\u9009\u62e93\uff0c\u6bcf\u4e00\u6b21\u653b\u51fb\u7684\u4f24\u5bb3\u589e\u52a0c[i]\u3002 \u8bbe\u7f6e\u72b6\u6001 dp[n][cnt][sum] \uff0c\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt - 1][sum - cnt + 1]+a[i]) dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt][sum - cnt] + b[i] * sum; dp[i][cnt][sum] = max(dp[i][cnt][sum], dp[i + 1][cnt][sum - cnt] + c[i] * cnt; \u5373\u53ef\u6c42\u89e3\u3002","title":"I. Misunderstood \u2026 Missing"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018-2019 ACM-ICPC, Asia East Continent Finals/#j-philosophical-balance","text":"\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5148\u624b\u7ed9\u4e32\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u8d4b\u4e00\u4e2a\u503c p_i p_i \u5e76\u4fdd\u8bc1 p_i \\ge 0, \\sum_{i=1}^n p_i = 1 p_i \\ge 0, \\sum_{i=1}^n p_i = 1 \uff0c\u540e\u624b\u9009\u62e9\u4e00\u4e2a\u5b50\u4e32 j j \u3002\u6709\u5f0f\u5b50 \\sum_{k=1}^n p_k \\mathrm{lcp}(s_k,s_j) \\sum_{k=1}^n p_k \\mathrm{lcp}(s_k,s_j) \uff0c\u5148\u624b\u60f3\u4f7f\u5176\u5c3d\u53ef\u80fd\u5927\uff0c\u540e\u624b\u60f3\u4f7f\u5176\u5c3d\u53ef\u80fd\u5c0f\u3002\u5148\u624b\u8981\u5982\u4f55\u64cd\u4f5c\u624d\u80fd\u4f7f\u8fd9\u4e2a\u503c\u6700\u5927\uff0c\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\u3002 \u9898\u89e3\uff1a\u5c06\u539f\u4e32\u53cd\u5411\uff0c\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u3002 \u5bf9\u4e8e\u53cd\u4e32\u7684\u540e\u7f00\u6811\uff0c\u6b64\u65f6\u540e\u624b\u5982\u679c\u9009\u62e9\u67d0\u4e2a\u5b50\u6811 u u \u4e2d\u9009\u62e9\u4e32 s_j s_j \uff0c\u5728 p p \u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\u8981\u4f7flcp\u6700\u5c0f\uff0c\u663e\u7136\u6700\u4f18\u89e3\u4e3a\u9009\u62e9\u5b50\u6811\u7684\u6839\u3002 \u5728\u540e\u7f00\u81ea\u52a8\u673a\u7684suffix link\u6811\u4e2d\uff0c\u5982\u679c\u5f53\u524dstate\u4e3anp\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u53d6\u5f53\u524d\u8282\u70b9\u7684len\u4f5c\u4e3a\u7b54\u6848\u3002\u5426\u5219\u9700\u8981\u5408\u5e76\u82e5\u5e72\u5b50\u6811\u7684\u7b54\u6848\uff0c\u7b54\u6848\u4e3a\u4e00\u4e2a\u7eb3\u4ec0\u5747\u8861\u7684\u6a21\u578b\uff0c\u5373\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684\u8d21\u732e\u76f8\u7b49\u3002\u90a3\u4e48\u8be5\u70b9\u7684\u8d21\u732e\u4e3a len[u]+x len[u]+x \uff0c\u5176\u4e2d$len[u])\u4e00\u5b9a\u4f1a\u53d6\u5230\uff0c x x \u4e3a\u7eb3\u4ec0\u5747\u8861\u4e0b\u53ef\u4ee5\u53d6\u5230\u7684\u6700\u5927\u503c\uff0c\u63a8\u4e00\u4e0b\u5b50\u6811\u7684 x x \u5f97\u5230 x = \\frac{1}{\\sum \\frac{1}{f_i}} x = \\frac{1}{\\sum \\frac{1}{f_i}} \uff0c\u90a3\u4e48\u5728suffix link\u6811\u4e0adfs\u5373\u53ef\u6c42\u51fa\u7b54\u6848\u3002","title":"J. Philosophical \u2026 Balance"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2018-2019 ACM-ICPC, Asia East Continent Finals/#l-eventual-journey","text":"\u6709 n \u4e2a\u8f66\u7ad9\uff0c\u76f8\u4e92\u4e4b\u95f4\u6709 m \u6761\u516c\u5171\u7684\u53cc\u5411\u94c1\u8def\u8fde\u901a\uff0c\u8f66\u7ad9\u5206\u6210 0,1 \u4e24\u79cd\u7c7b\u522b\uff0c\u4efb\u610f\u4e24\u4e2a 0 \u7c7b\u8f66\u7ad9\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u79c1\u6709\u7684\u94c1\u8def\u76f8\u4e92\u8fde\u63a5\uff0c1 \u7c7b\u8f66\u7ad9\u4e5f\u7c7b\u4f3c\u3002 \u73b0\u5728\uff0c\u4ece\u6bcf\u8f66\u7ad9 i \u51fa\u53d1\uff0c\u5230\u8f66\u7ad9 j \u7684\u6700\u5c11\u8d70\u8fc7\u7684\u94c1\u8def\u6570\u76ee\u4e3a D(u,v)\uff0c\u8981\u6c42\u4f60\u5bf9\u6bcf\u4e2a\u56fa\u5b9a\u7684\u8f66\u7ad9 i\uff0c\u90fd\u8f93\u51fa\u5230\u5176\u4ed6\u6240\u6709\u8f66\u7ad9\u7684 D(i,j) \u4e4b\u548c\u3002 \u9898\u89e3\uff1a\u5206\u7c7b\u8ba8\u8bba\u679a\u4e3e\u72b6\u6001\u5373\u53ef\u3002","title":"L. Eventual \u2026 Journey"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/","text":"Name Date Solved A B C D E F G H I J K L 2019-2020 ICPC, Asia Jakarta Regional Contest 2019/10/31 9/12 O . O \u00d8 O \u00d8 O O . \u00d8 O \u00d8 A. Copying Homework Link \u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217a\uff0c\u8f93\u51fa\u5e8f\u5217b\u4f7f \\sum_{i=1}^n{|b_i-a_i|}\u2265n \\sum_{i=1}^n{|b_i-a_i|}\u2265n \u3002 \u8f93\u51fan-a[i]\u5373\u53ef\u3002 C. Even Path Link \u7ed9\u5b9a\u4e00\u4e2a\u7f51\u683c\uff0c\u70b9(i,j)\u7684\u503c\u4e3aR[i]+c[j]\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4ece (sx,sy) (sx,sy) \u8d70\u5230 (tx,ty) (tx,ty) \u7684\u5168\u4e3a\u5947\u6570\u7684\u8def\u5f84\u3002 \u5224\u65adsx-tx\uff0csy-ty\u7684R,C\u503c\u662f\u5426\u540c\u65f6\u5168\u4e3a\u5947\u6570\u6216\u8005\u5168\u4e3a\u5076\u6570\uff0c\u524d\u7f00\u548c\u641e\u4e00\u4e0b\u5c31\u597d\u3002 D. Find String in a Grid Link \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u77e9\u9635\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e00\u4e2a\u4e32\uff0c\u95ee\u5728\u77e9\u9635\u4e2d\u9009\u4efb\u610f\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u9996\u5148\u5411\u53f3\u8d70\u518d\u5411\u4e0b\u8d70\uff0c\u80fd\u627e\u5230\u591a\u5c11\u4e2a\u67e5\u8be2\u4e32\u3002 \u9898\u89e3\uff1a\u5c06\u6bcf\u4e2a\u67e5\u8be2\u4e32\u5207\u6210\u4e24\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206\u4e0e\u884c\u5339\u914d\uff0c\u540e\u534a\u90e8\u5206\u4e0e\u5217\u5339\u914d\uff0c\u5b57\u7b26\u77e9\u9635\u4e2d\u5982\u679c\u6709\u67d0\u4e2a\u70b9\u540c\u65f6\u4f5c\u4e3a\u5339\u914d\u7684\u884c\u7ed3\u5c3e\u548c\u5217\u5f00\u5934\uff0c\u5219\u8ba1\u7b97\u4e00\u6b21\u8d21\u732e\u3002 \u5c06\u884c\u4e32H\u548c\u5217\u4e32V\u5206\u522b\u5efa\u7acb\u4e00\u4e2aSA\uff0c\u53ef\u4ee5\u5f97\u5230SA\u4e2d\u7684\u4e00\u4e2a\u533a\u95f4(l,r)\u6ee1\u8db3 lcp(x,y)>=len(x) \uff0c\u5728\u5efa\u4e32\u7684\u65f6\u5019\u628a\u67e5\u8be2\u4e32\u4e5f\u52a0\u5165SA\u7684\u4e32\u4ee5\u786e\u5b9a\u4f4d\u7f6e\uff0c\u884c\u4e32\u9700\u8981\u53cd\u5411\uff08\u56e0\u4e3a\u67e5\u8be2\u7684\u662f\u516c\u5171\u540e\u7f00\uff09\uff0c\u4e8c\u5206\u627e\u51fa\u884c\u548c\u5217\u7684\u533a\u95f4(h_l,h_r),(v_l,v_r)\uff0c\u5982\u679c\u6709\u5b57\u7b26\u77e9\u9635\u4e0a\u7684\u70b9\u5728SA\u4e2d\u7684\u4f4d\u7f6e(pos_h,pos_v)\u6ee1\u8db3 h_l\u2264pos_h\u2264h_r h_l\u2264pos_h\u2264h_r \u4e14 v_l\u2264pos_v\u2264v_r v_l\u2264pos_v\u2264v_r \uff0c\u5219\u8ba1\u7b97\u4e00\u6b21\u5b83\u5bf9\u67e5\u8be2\u4e32\u7684\u8d21\u732e\u3002 \u8003\u8651\u4e8c\u7ef4\u6570\u70b9\uff0c\u6c42\u51fa\u6bcf\u4e2a\u67e5\u8be2\u4e32\u6bcf\u4e2a\u70b9\u7684\u884c\u5217\u533a\u95f4\uff0c\u6c42\u5757\u5185\u7684\u70b9\u6570\u548c\u5373\u53ef\u3002 E. Songwriter Link \u5df2\u77e5\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u548c\u4e0a\u4e00\u4e2a\u503c\u7684\u5173\u7cfb\uff08\u4e0a\u5347/\u4e0b\u964d/\u4e0d\u53d8\uff09\uff0c\u4e0a\u5347/\u4e0b\u964d\u7684\u8303\u56f4\u4e3a[1,k]\uff0c\u8981\u6c42\u5e8f\u5217\u7684\u6240\u6709\u503c\u90fd\u5728[l,r]\u533a\u95f4\u5185\uff0c\u6784\u9020\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5408\u6cd5\u5e8f\u5217\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8f93\u51fa-1\u3002 \u4ece\u5012\u63a8\u6c42\u51fa\u6bcf\u4e2a\u503c\u7684\u533a\u95f4\u8303\u56f4\uff0c\u5982\u679c\u6700\u5927\u503c\u5c0f\u4e8el\u6216\u6700\u5c0f\u503c\u5927\u4e8er\u5219\u65e0\u89e3\uff0c\u5426\u5219\u9012\u63a8\u6784\u9020\u5e8f\u5217\u5e76\u4f7f\u6bcf\u4e2a\u503c\u5c3d\u53ef\u80fd\u5c0f\u3002 F. Regular Forestation Link \u7ed9\u4e00\u68f5\u6811\uff0c\u6c42\u53bb\u6389\u4e00\u4e2a\u70b9\u662f\u7684\u5269\u4f59\u7684\u68ee\u6797\u4e2d\u7684\u65e0\u6839\u6811\u5168\u90e8\u540c\u6784\uff0c\u6700\u5927\u7684\u540c\u6784\u4e2a\u6570\u3002 \u663e\u7136\uff0c\u53ea\u6709\u5f53\u8fd9\u68f5\u6811\u4ec5\u6709\u4e00\u4e2a\u91cd\u5fc3\u4e14\u5b83\u7684\u5b50\u6811\u5927\u5c0f\u90fd\u76f8\u7b49\u65f6\u624d\u53ef\u80fd\u6709\u89e3\uff0c\u7136\u540e\u5224\u65e0\u6839\u6811\u540c\u6784\u540e\u76f4\u63a5\u8f93\u51fa\u91cd\u5fc3\u7684\u5ea6\u6570\u5373\u53ef\u3002 G. Performance Review Link \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u505am\u6b21\u4fee\u6539\uff0c\u7b2ci\u6b21\u4fee\u6539\u7ed9\u51fa\u4e00\u4e2a\u5e8f\u5217 a \u5c06\u524dk\u4e2a\u5c0f\u7684\u66ff\u6362\u4e3a a[i][0],a[i][1],a[i][k-1] \u8fd9\u4e9b\u6570\u5b57\uff0c\u95eem\u6b21\u4fee\u6539\u540e\u521d\u59cb\u7684\u7b2c1\u4e2a\u4eba\u662f\u5426\u4ecd\u5728\u5e8f\u5217\u4e2d\u3002 q\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u4fee\u6539\u7b2ci\u6b21\u4fee\u6539\u7684\u7b2cj\u4e2a\u503c\uff0c\u5c06\u5176\u4fee\u6539\u4e3ax\uff0c\u5e76\u56de\u7b54\u8be2\u95ee\u3002 \u8bb0\u5f55\u7b2c1\u4e2a\u4eba\u5728\u7b2ci\u6b21\u4fee\u6539\u540e\u7684rank\uff0c\u663e\u7136\u5bf9\u4e8eq\u6b21\u4fee\u6539\u6700\u591a\u53ea\u4f1a\u6539\u53d8\u4e00\u4f4d\uff0c\u4e5f\u5c31\u662f\u4f7f (j,n) \u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u503c+1\u6216-1\uff0c\u4fee\u6539\u540e\u5224\u65ad(1,n)\u7684rank\u662f\u5426\u90fd>0\u5373\u53ef\u3002 H. Twin Buildings Link \u7ed9\u5b9an\u5757\u77e9\u5f62\uff0c\u9009\u62e9\u4e00\u5757\u6216\u4e24\u5757\uff0c\u5e76\u5728\u5176\u4e2d\u653e\u5165\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5757\u77e9\u5f62\uff0c\u95ee\u653e\u5165\u7684\u77e9\u5f62\u7684\u9762\u79ef\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u5757\u6216\u4e24\u5757\u77e9\u5f62\u4e2d\u653e\u5165\uff0c\u5982\u679c\u662f\u4e00\u5757\u5c31\u662f\u77e9\u5f62\u9762\u79ef/2\uff0c\u5982\u679c\u662f\u4e24\u5757\uff0c\u9996\u5148\u4f7f\u6bcf\u4e2a\u77e9\u5f62\u7684L\u5927\u4e8eW\uff0c\u6309\u7167W\u964d\u5e8f\u6392\u5e8f\uff0c\u8bb0\u5f55L\u7684\u524d\u7f00\u6700\u5927\u503cpreL\uff0c\u904d\u5386\uff0c\u5f53\u524d\u77e9\u5f62\u7684\u6700\u5927\u8d21\u732e\u5373\u4e3a min(preL, a[i].L)*a[i].W \u3002 J. Tiling Terrace Link \u7ed9\u4e00\u4e2a01\u4e32\uff0c\u7ed9\u4e09\u79cd\u5b50\u4e32\u5206\u522b\u6709abc\u6743\u503c\uff080\\00\\010\uff09\uff0c\u8981\u6c42\u628a\u539f\u4e32\u5206\u5272\u6210\u591a\u4e2a\u8fd9\u4e09\u79cd\u4e32\uff0c\u5176\u4e2da\u4e32\u6700\u591a\u53ea\u80fd\u6709k\u4e2a\uff0c\u6c42\u6700\u5927\u6743\u503c\u548c\uff0c\u4fdd\u8bc11\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc750 \u663e\u7136dp\u4e00\u4e0b\uff0c\u7528 dp[i][j] \u8868\u793a\u524d i \u4f4d\uff0c\u6709 j \u4e2ac\u4e32\uff0c\u6700\u591a\u7684b\u4e32\u4e2a\u6570\u3002 \u90a3\u4e48\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3ec\u4e32\u4e2a\u6570\u8fdb\u884c\u679a\u4e3e\u7b54\u6848\u3002 \u8bben1\u4e3a\u53d6\u7684a\u4e32\uff0cn2\u4e3a\u53d6\u7684b\u4e32\uff0cn3\u4e3a\u53d6\u7684c\u4e32\u4e2a\u6570 \u90a3\u4e48\u7531\u4e8e\u679a\u4e3e\u7684\u662fc\u4e32\u4e2a\u6570\uff0cn2\u7684\u6700\u5927\u503c\uff0cn1\u7684\u4e2a\u6570\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u3002 \u7136\u540e\u8003\u8651\u5c06n2\u66ff\u6362\u6210n1\u7684\u60c5\u51b5\u5373\u53ef\u3002 K. Addition Robot Link \u7ed9\u4e00\u6bb5AB\u4e32\uff0c\u64cd\u4f5c1\u4e3a\u7ffb\u8f6c\uff0c\u5373\u628aL,R\u533a\u95f4\u5185\u7684A\u53d8B\uff0cB\u53d8A\uff1b\u64cd\u4f5c2\u4e3a\u67e5\u8be2\uff0c\u987a\u5e8f\u904d\u5386\u5b50\u4e32 S[l-r] ,\u4f20\u5165A\uff0cB\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u4e32\u7684\u5f53\u524d\u503c\u4e3aA\uff0c\u4f7fA=A+B\uff0c\u5426\u5219\u4f7fB=A+B\uff0c\u8f93\u51fa\u8ba1\u7b97\u540e\u7684A\uff0cB\u3002 \u628a\u8fd0\u7b97\u5904\u7406\u62102x2\u7684\u77e9\u9635\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5904\u7406\u64cd\u4f5c\u3002 L. Road Construction Link \u7ed9\u5b9a\u4e00\u68f5\u57fa\u73af\u6811\u4e0a\u7684\u8fb9\uff0c\u6bcf\u4e00\u6761\u8fb9\u53ef\u4ee5\u88ab\u6307\u5b9a\u7c7b\u7684\u5de5\u4eba\u7ef4\u4fee\uff0c\u6c42\u80fd\u4f7f\u6811\u4e0a\u70b9\u8054\u901a\u7684\u7ef4\u4fee\u65b9\u6848\u3002 \u5982\u679c\u5bf9\u4e8e\u8fb9\u548c\u5de5\u4eba\u4e00\u4e00\u8fde\u8fb9\uff0c\u8fb9\u6570\u53ef\u80fd\u8fbe\u5230 NK NK \uff0c\u8003\u8651\u7b80\u5316\u8fb9\u6570\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u8fb9\u5bf9\u5e94\u7684\u7c7b\u578b\u6570 M_i M_i \uff0c\u6709 \\sum_{i=1}^n M_i<=10000 \\sum_{i=1}^n M_i<=10000 \uff0c\u6240\u4ee5\u8ba9\u6811\u8fb9\u4e0e\u5de5\u4eba\u7c7b\u578b\u6570\u8fde\u8fb9\uff0c\u5e76\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u5de5\u4eba\u8ba1\u6570\uff0c\u8fde\u5411\u6c47\u70b9\u5373\u53ef\u3002 \u5bf9\u4e8e\u4e00\u68f5\u57fa\u73af\u6811\uff0c\u8981\u9009 n-1 n-1 \u6761\u8fb9\u4f7f\u5176\u8054\u901a\uff0c\u5047\u8bbe\u5176\u73af\u4e0a\u6709k\u6761\u8fb9\uff0c\u5fc5\u987b\u9009\u62e9\u201c\u73af\u4e0a\u7684k-1\u6761\u8fb9\u201d\u548c\u201c\u73af\u5916\u7684\u6240\u6709\u8fb9\u201d\u3002dfs\u6c42\u51fa\u57fa\u73af\u6811\u4e0a\u7684\u73af\uff0c\u5b58\u50a8\u201c\u73af\u5916\u7684\u8fb9\u201d\u4e3aA\u96c6\u5408\uff0c\u201c\u73af\u4e0a\u7684\u8fb9\u201d\u4e3aB\u96c6\u5408\u3002 \u9996\u5148\u5bf9\u8d77\u70b9\u5411A\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u5168\u90e8\u5339\u914d\uff1b\u518d\u5bf9\u8d77\u70b9\u5411B\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u8fb9\uff0c\u5224\u65ad\u603b\u7684\u6d41\u91cf\u662f\u5426 >=n-1 >=n-1 \u5373\u53ef\u3002","title":"2019 2020 ICPC, Asia Jakarta Regional Contest"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#a-copying-homework","text":"\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5e8f\u5217a\uff0c\u8f93\u51fa\u5e8f\u5217b\u4f7f \\sum_{i=1}^n{|b_i-a_i|}\u2265n \\sum_{i=1}^n{|b_i-a_i|}\u2265n \u3002 \u8f93\u51fan-a[i]\u5373\u53ef\u3002","title":"A. Copying Homework"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#c-even-path","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7f51\u683c\uff0c\u70b9(i,j)\u7684\u503c\u4e3aR[i]+c[j]\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4ece (sx,sy) (sx,sy) \u8d70\u5230 (tx,ty) (tx,ty) \u7684\u5168\u4e3a\u5947\u6570\u7684\u8def\u5f84\u3002 \u5224\u65adsx-tx\uff0csy-ty\u7684R,C\u503c\u662f\u5426\u540c\u65f6\u5168\u4e3a\u5947\u6570\u6216\u8005\u5168\u4e3a\u5076\u6570\uff0c\u524d\u7f00\u548c\u641e\u4e00\u4e0b\u5c31\u597d\u3002","title":"C. Even Path"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#d-find-string-in-a-grid","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u77e9\u9635\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e00\u4e2a\u4e32\uff0c\u95ee\u5728\u77e9\u9635\u4e2d\u9009\u4efb\u610f\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u9996\u5148\u5411\u53f3\u8d70\u518d\u5411\u4e0b\u8d70\uff0c\u80fd\u627e\u5230\u591a\u5c11\u4e2a\u67e5\u8be2\u4e32\u3002 \u9898\u89e3\uff1a\u5c06\u6bcf\u4e2a\u67e5\u8be2\u4e32\u5207\u6210\u4e24\u90e8\u5206\uff0c\u524d\u534a\u90e8\u5206\u4e0e\u884c\u5339\u914d\uff0c\u540e\u534a\u90e8\u5206\u4e0e\u5217\u5339\u914d\uff0c\u5b57\u7b26\u77e9\u9635\u4e2d\u5982\u679c\u6709\u67d0\u4e2a\u70b9\u540c\u65f6\u4f5c\u4e3a\u5339\u914d\u7684\u884c\u7ed3\u5c3e\u548c\u5217\u5f00\u5934\uff0c\u5219\u8ba1\u7b97\u4e00\u6b21\u8d21\u732e\u3002 \u5c06\u884c\u4e32H\u548c\u5217\u4e32V\u5206\u522b\u5efa\u7acb\u4e00\u4e2aSA\uff0c\u53ef\u4ee5\u5f97\u5230SA\u4e2d\u7684\u4e00\u4e2a\u533a\u95f4(l,r)\u6ee1\u8db3 lcp(x,y)>=len(x) \uff0c\u5728\u5efa\u4e32\u7684\u65f6\u5019\u628a\u67e5\u8be2\u4e32\u4e5f\u52a0\u5165SA\u7684\u4e32\u4ee5\u786e\u5b9a\u4f4d\u7f6e\uff0c\u884c\u4e32\u9700\u8981\u53cd\u5411\uff08\u56e0\u4e3a\u67e5\u8be2\u7684\u662f\u516c\u5171\u540e\u7f00\uff09\uff0c\u4e8c\u5206\u627e\u51fa\u884c\u548c\u5217\u7684\u533a\u95f4(h_l,h_r),(v_l,v_r)\uff0c\u5982\u679c\u6709\u5b57\u7b26\u77e9\u9635\u4e0a\u7684\u70b9\u5728SA\u4e2d\u7684\u4f4d\u7f6e(pos_h,pos_v)\u6ee1\u8db3 h_l\u2264pos_h\u2264h_r h_l\u2264pos_h\u2264h_r \u4e14 v_l\u2264pos_v\u2264v_r v_l\u2264pos_v\u2264v_r \uff0c\u5219\u8ba1\u7b97\u4e00\u6b21\u5b83\u5bf9\u67e5\u8be2\u4e32\u7684\u8d21\u732e\u3002 \u8003\u8651\u4e8c\u7ef4\u6570\u70b9\uff0c\u6c42\u51fa\u6bcf\u4e2a\u67e5\u8be2\u4e32\u6bcf\u4e2a\u70b9\u7684\u884c\u5217\u533a\u95f4\uff0c\u6c42\u5757\u5185\u7684\u70b9\u6570\u548c\u5373\u53ef\u3002","title":"D. Find String in a Grid"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#e-songwriter","text":"\u5df2\u77e5\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u503c\u548c\u4e0a\u4e00\u4e2a\u503c\u7684\u5173\u7cfb\uff08\u4e0a\u5347/\u4e0b\u964d/\u4e0d\u53d8\uff09\uff0c\u4e0a\u5347/\u4e0b\u964d\u7684\u8303\u56f4\u4e3a[1,k]\uff0c\u8981\u6c42\u5e8f\u5217\u7684\u6240\u6709\u503c\u90fd\u5728[l,r]\u533a\u95f4\u5185\uff0c\u6784\u9020\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5408\u6cd5\u5e8f\u5217\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8f93\u51fa-1\u3002 \u4ece\u5012\u63a8\u6c42\u51fa\u6bcf\u4e2a\u503c\u7684\u533a\u95f4\u8303\u56f4\uff0c\u5982\u679c\u6700\u5927\u503c\u5c0f\u4e8el\u6216\u6700\u5c0f\u503c\u5927\u4e8er\u5219\u65e0\u89e3\uff0c\u5426\u5219\u9012\u63a8\u6784\u9020\u5e8f\u5217\u5e76\u4f7f\u6bcf\u4e2a\u503c\u5c3d\u53ef\u80fd\u5c0f\u3002","title":"E. Songwriter"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#f-regular-forestation","text":"\u7ed9\u4e00\u68f5\u6811\uff0c\u6c42\u53bb\u6389\u4e00\u4e2a\u70b9\u662f\u7684\u5269\u4f59\u7684\u68ee\u6797\u4e2d\u7684\u65e0\u6839\u6811\u5168\u90e8\u540c\u6784\uff0c\u6700\u5927\u7684\u540c\u6784\u4e2a\u6570\u3002 \u663e\u7136\uff0c\u53ea\u6709\u5f53\u8fd9\u68f5\u6811\u4ec5\u6709\u4e00\u4e2a\u91cd\u5fc3\u4e14\u5b83\u7684\u5b50\u6811\u5927\u5c0f\u90fd\u76f8\u7b49\u65f6\u624d\u53ef\u80fd\u6709\u89e3\uff0c\u7136\u540e\u5224\u65e0\u6839\u6811\u540c\u6784\u540e\u76f4\u63a5\u8f93\u51fa\u91cd\u5fc3\u7684\u5ea6\u6570\u5373\u53ef\u3002","title":"F. Regular Forestation"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#g-performance-review","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u505am\u6b21\u4fee\u6539\uff0c\u7b2ci\u6b21\u4fee\u6539\u7ed9\u51fa\u4e00\u4e2a\u5e8f\u5217 a \u5c06\u524dk\u4e2a\u5c0f\u7684\u66ff\u6362\u4e3a a[i][0],a[i][1],a[i][k-1] \u8fd9\u4e9b\u6570\u5b57\uff0c\u95eem\u6b21\u4fee\u6539\u540e\u521d\u59cb\u7684\u7b2c1\u4e2a\u4eba\u662f\u5426\u4ecd\u5728\u5e8f\u5217\u4e2d\u3002 q\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u4fee\u6539\u7b2ci\u6b21\u4fee\u6539\u7684\u7b2cj\u4e2a\u503c\uff0c\u5c06\u5176\u4fee\u6539\u4e3ax\uff0c\u5e76\u56de\u7b54\u8be2\u95ee\u3002 \u8bb0\u5f55\u7b2c1\u4e2a\u4eba\u5728\u7b2ci\u6b21\u4fee\u6539\u540e\u7684rank\uff0c\u663e\u7136\u5bf9\u4e8eq\u6b21\u4fee\u6539\u6700\u591a\u53ea\u4f1a\u6539\u53d8\u4e00\u4f4d\uff0c\u4e5f\u5c31\u662f\u4f7f (j,n) \u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u503c+1\u6216-1\uff0c\u4fee\u6539\u540e\u5224\u65ad(1,n)\u7684rank\u662f\u5426\u90fd>0\u5373\u53ef\u3002","title":"G. Performance Review"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#h-twin-buildings","text":"\u7ed9\u5b9an\u5757\u77e9\u5f62\uff0c\u9009\u62e9\u4e00\u5757\u6216\u4e24\u5757\uff0c\u5e76\u5728\u5176\u4e2d\u653e\u5165\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5757\u77e9\u5f62\uff0c\u95ee\u653e\u5165\u7684\u77e9\u5f62\u7684\u9762\u79ef\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u5757\u6216\u4e24\u5757\u77e9\u5f62\u4e2d\u653e\u5165\uff0c\u5982\u679c\u662f\u4e00\u5757\u5c31\u662f\u77e9\u5f62\u9762\u79ef/2\uff0c\u5982\u679c\u662f\u4e24\u5757\uff0c\u9996\u5148\u4f7f\u6bcf\u4e2a\u77e9\u5f62\u7684L\u5927\u4e8eW\uff0c\u6309\u7167W\u964d\u5e8f\u6392\u5e8f\uff0c\u8bb0\u5f55L\u7684\u524d\u7f00\u6700\u5927\u503cpreL\uff0c\u904d\u5386\uff0c\u5f53\u524d\u77e9\u5f62\u7684\u6700\u5927\u8d21\u732e\u5373\u4e3a min(preL, a[i].L)*a[i].W \u3002","title":"H. Twin Buildings"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#j-tiling-terrace","text":"\u7ed9\u4e00\u4e2a01\u4e32\uff0c\u7ed9\u4e09\u79cd\u5b50\u4e32\u5206\u522b\u6709abc\u6743\u503c\uff080\\00\\010\uff09\uff0c\u8981\u6c42\u628a\u539f\u4e32\u5206\u5272\u6210\u591a\u4e2a\u8fd9\u4e09\u79cd\u4e32\uff0c\u5176\u4e2da\u4e32\u6700\u591a\u53ea\u80fd\u6709k\u4e2a\uff0c\u6c42\u6700\u5927\u6743\u503c\u548c\uff0c\u4fdd\u8bc11\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc750 \u663e\u7136dp\u4e00\u4e0b\uff0c\u7528 dp[i][j] \u8868\u793a\u524d i \u4f4d\uff0c\u6709 j \u4e2ac\u4e32\uff0c\u6700\u591a\u7684b\u4e32\u4e2a\u6570\u3002 \u90a3\u4e48\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3ec\u4e32\u4e2a\u6570\u8fdb\u884c\u679a\u4e3e\u7b54\u6848\u3002 \u8bben1\u4e3a\u53d6\u7684a\u4e32\uff0cn2\u4e3a\u53d6\u7684b\u4e32\uff0cn3\u4e3a\u53d6\u7684c\u4e32\u4e2a\u6570 \u90a3\u4e48\u7531\u4e8e\u679a\u4e3e\u7684\u662fc\u4e32\u4e2a\u6570\uff0cn2\u7684\u6700\u5927\u503c\uff0cn1\u7684\u4e2a\u6570\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6765\u3002 \u7136\u540e\u8003\u8651\u5c06n2\u66ff\u6362\u6210n1\u7684\u60c5\u51b5\u5373\u53ef\u3002","title":"J. Tiling Terrace"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#k-addition-robot","text":"\u7ed9\u4e00\u6bb5AB\u4e32\uff0c\u64cd\u4f5c1\u4e3a\u7ffb\u8f6c\uff0c\u5373\u628aL,R\u533a\u95f4\u5185\u7684A\u53d8B\uff0cB\u53d8A\uff1b\u64cd\u4f5c2\u4e3a\u67e5\u8be2\uff0c\u987a\u5e8f\u904d\u5386\u5b50\u4e32 S[l-r] ,\u4f20\u5165A\uff0cB\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u4e32\u7684\u5f53\u524d\u503c\u4e3aA\uff0c\u4f7fA=A+B\uff0c\u5426\u5219\u4f7fB=A+B\uff0c\u8f93\u51fa\u8ba1\u7b97\u540e\u7684A\uff0cB\u3002 \u628a\u8fd0\u7b97\u5904\u7406\u62102x2\u7684\u77e9\u9635\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5904\u7406\u64cd\u4f5c\u3002","title":"K. Addition Robot"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, Asia Jakarta Regional Contest/#l-road-construction","text":"\u7ed9\u5b9a\u4e00\u68f5\u57fa\u73af\u6811\u4e0a\u7684\u8fb9\uff0c\u6bcf\u4e00\u6761\u8fb9\u53ef\u4ee5\u88ab\u6307\u5b9a\u7c7b\u7684\u5de5\u4eba\u7ef4\u4fee\uff0c\u6c42\u80fd\u4f7f\u6811\u4e0a\u70b9\u8054\u901a\u7684\u7ef4\u4fee\u65b9\u6848\u3002 \u5982\u679c\u5bf9\u4e8e\u8fb9\u548c\u5de5\u4eba\u4e00\u4e00\u8fde\u8fb9\uff0c\u8fb9\u6570\u53ef\u80fd\u8fbe\u5230 NK NK \uff0c\u8003\u8651\u7b80\u5316\u8fb9\u6570\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u8fb9\u5bf9\u5e94\u7684\u7c7b\u578b\u6570 M_i M_i \uff0c\u6709 \\sum_{i=1}^n M_i<=10000 \\sum_{i=1}^n M_i<=10000 \uff0c\u6240\u4ee5\u8ba9\u6811\u8fb9\u4e0e\u5de5\u4eba\u7c7b\u578b\u6570\u8fde\u8fb9\uff0c\u5e76\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u5de5\u4eba\u8ba1\u6570\uff0c\u8fde\u5411\u6c47\u70b9\u5373\u53ef\u3002 \u5bf9\u4e8e\u4e00\u68f5\u57fa\u73af\u6811\uff0c\u8981\u9009 n-1 n-1 \u6761\u8fb9\u4f7f\u5176\u8054\u901a\uff0c\u5047\u8bbe\u5176\u73af\u4e0a\u6709k\u6761\u8fb9\uff0c\u5fc5\u987b\u9009\u62e9\u201c\u73af\u4e0a\u7684k-1\u6761\u8fb9\u201d\u548c\u201c\u73af\u5916\u7684\u6240\u6709\u8fb9\u201d\u3002dfs\u6c42\u51fa\u57fa\u73af\u6811\u4e0a\u7684\u73af\uff0c\u5b58\u50a8\u201c\u73af\u5916\u7684\u8fb9\u201d\u4e3aA\u96c6\u5408\uff0c\u201c\u73af\u4e0a\u7684\u8fb9\u201d\u4e3aB\u96c6\u5408\u3002 \u9996\u5148\u5bf9\u8d77\u70b9\u5411A\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u5168\u90e8\u5339\u914d\uff1b\u518d\u5bf9\u8d77\u70b9\u5411B\u96c6\u5408\u4e2d\u7684\u70b9\u8fde\u8fb9\uff0c\u5224\u65ad\u603b\u7684\u6d41\u91cf\u662f\u5426 >=n-1 >=n-1 \u5373\u53ef\u3002","title":"L. Road Construction"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/","text":"Name Date Solved A B C D E F G H I J K L 2019-2020 ICPC, NERC, Northern Eurasia Finals 2019/12/1 7/12 \u00d8 O . . O . . . \u00d8 O O O tag Link a\u3001set b\u3001\u4e71\u641e e\u3001\u66b4\u529b i\u3001\u6784\u9020\u4ea4\u4e92 j\u3001exgcd\u66b4\u529b k\u3001\u7ec4\u5408\u6570 l\u3001\u66b4\u529b A - Apprentice Learning Trajectory Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u533a\u95f4\u548c\u533a\u95f4\u6743\u503c\uff0c\u8868\u793a\u5728\u8fd9\u6bb5\u533a\u95f4\u5185\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u591a\u4e2a\u8fde\u7eed\u7684\u6743\u503c\u65f6\u95f4\uff0c\u6bcf\u4e2a\u65f6\u95f4\u83b7\u5f971\u70b9\u7b54\u6848\u3002\u6c42\u4e0d\u80fd\u65f6\u95f4\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u7b54\u6848\u3002 \u9898\u89e3\uff1a \u5e76\u4e0d\u592a\u4f1a\u7684set\u9898\uff0c\u968f\u4fbf\u601d\u8003\u4e00\u4e0b\u53ef\u77e5\u5b83\u5e94\u8be5\u662f\u4f18\u5148\u6743\u503c\u65f6\u95f4\u5c0f\u7684\u53d6\uff0c\u7136\u540e\u5c0f\u7684\u53d6\u5230\u4e0d\u80fd\u53d6\u4e86\u624d\u4f1a\u7528\u5927\u7684\u3002 \u7136\u540e\u8003\u8651\u66b4\u529b\u89e3\u6cd5\uff1a\u5bf9\u4e8e\u6240\u6709\u7684\u65f6\u95f4\u70b9 dp[i] dp[i] \u8868\u793a\u5230 i i \u65f6\u95f4\u80fd\u83b7\u5f97\u7684\u6700\u5927\u7b54\u6848\uff0c\u90a3\u4e48\u663e\u7136 dp[i]=max(dp[i-t[k]]+1) dp[i]=max(dp[i-t[k]]+1) \uff0c\u5176\u4e2d k k \u4e3a\u6240\u6709\u5408\u6cd5\u7684\u70b9\uff08\u5728\u533a\u95f4\u5185\u7684\u70b9\uff09\u3002 \u4f46\u662f\u590d\u6742\u5ea6\u8fbe\u5230 O(nt) O(nt) \uff0c\u800c t \\le 10^{18} t \\le 10^{18} \u663e\u7136\u662f\u4e0d\u80fd\u51fa\u73b0\u5728\u590d\u6742\u5ea6\u4e2d \u7136\u540e\u8003\u8651\u5230\u7531\u4e8e\u6bcf\u6bb5\u7684\u60c5\u51b5\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff0c\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u5757\u6c42\u89e3\u3002 \u9996\u5148\u5904\u7406\u51fa\u6bcf\u79cd\u533a\u95f4\u7684\u5de6\u7ec8\u70b9\u548c\u53f3\u7ec8\u70b9\u3002\u5373 s[i]-t[i],e[i] s[i]-t[i],e[i] \uff0c\u56e0\u4e3a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8d77\u70b9\uff0c\u663e\u7136\u662f\u4f18\u5148\u53d6\u4f1a\u8ba9\u8d77\u70b9\u66f4\u5c0f\u7684\u70b9\u3002\u7136\u540e\u5904\u7406\u6210\u67e5\u5206\u5e8f\u5217\u7684\u5f62\u5f0f\u5373\u53ef\uff0c\u7528set\u7ef4\u62a4\u5f53\u524d\u6700\u5c0f\u7684 t t \uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u8d77\u70b9\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(nlogn) O(nlogn) B - Balls of Buma Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8981\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4f7f\u5f97\u8fde\u8d77\u6765\u7684\u76f8\u540c\u5b57\u7b26\u5927\u4e8e\u7b49\u4e8e\u4e09\u4e2a\u5373\u53ef\u6d88\u53bb\u8fd9\u4e9b\u76f8\u540c\u5b57\u7b26\uff0c\u7136\u540e\u5982\u679c\u6269\u5145\u7684\u5b57\u7b26\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u4e09\u4e2a\u4e5f\u53ef\u4ee5\u6d88\u53bb\uff0c\u6c42\u80fd\u5168\u90e8\u5220\u6389\u7684\u65b9\u6848\u6570 yysy\uff0c\u8111\u762b\u8bbe\u5b9a\uff0c\u90a3\u4e48\u9996\u5148\u5fc5\u7136\u6bb5\u6570\u662f\u5947\u6570\uff0c\u5176\u6b21\u5de6\u53f3\u5b57\u7b26\u5bf9\u79f0\uff0c\u518d\u5176\u6b21\u5de6\u53f3\u548c\u5927\u4e8e\u7b49\u4e8e3\uff0c\u518d\u5176\u6b21\u4e2d\u95f4\u548c\u5927\u4e8e\u7b49\u4e8e2\u5373\u53ef\u3002\u7b54\u6848\u4e3a\u4e2d\u95f4\u548c+1 E - Elections Link \u9898\u610f\uff1an\u4e2a\u4eba\uff0cm\u573a\u9009\u4e3e\uff0c\u7ed9\u51fa\u77e9\u9635\u8868\u793a\u7b2ci\u573a\u7b2cj\u4e2a\u4eba\u7684\u6743\u91cd\uff0c\u8981\u6c42\u7b2cn\u4e2a\u4eba\u6b7b\uff0c\u6b7b\u7684\u5b9a\u4e49\u662f\u5b83\u4e0d\u662f\u6700\u5927\u503c\u6216\u8005\u53ea\u662f\u6700\u5927\u503c\u4e4b\u4e00\u3002\u6c42\u6700\u5c11\u5220\u6389\u591a\u5c11\u573a\u9009\u4e3e\u5e76\u8f93\u51fa\u65b9\u6848\u3002 \u7531\u4e8e\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u6240\u4ee5\u76f4\u63a5\u7206\u5c31\u8fc7\u4e86\uff0c\u679a\u4e3e\u8ba9\u4ed6\u6b7b\u7684\u90a3\u4e2a\u4eba\u662f\u8c01\uff0c\u7136\u540e\u505a\u5dee\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u52a0\uff0c\u76f4\u5230\u4e0d\u80fd\u8ba9\u4ed6\u6b7b\u7684\u8fb9\u754c\u7136\u540e\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002 I - Intriguing Selection Link \u9898\u610f\uff1a\u4ea4\u4e92\u9898\uff0c\u67092\u00d7n\u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u67091~2n\u7684\u6743\u503c\uff0c\u6bcf\u6b21\u8be2\u95eei\u548cj\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u9700\u8981\u77e5\u9053\u524dn\u4e2a\u4eba\u662f\u54ea\u4e9b\uff0c\u4f46\u662f\u4e0d\u80fd\u4f7f\u5f97\u524dn\u4e2a\u4eba\u7684\u5927\u5c0f\u5173\u7cfb\u5b8c\u5168\u77e5\u9053\uff0c\u8be2\u95ee\u6b21\u6570\u4e0d\u9650\uff08\u9650\u5236\u6bcf\u5bf9\u4eba\u4e0d\u91cd\u590d\u95ee\u7684\u6b21\u6570\uff09\u3002 \u5c06\u4eba\u5206\u62103\u7c7b\uff0c\u4e00\u7c7bn-1\u4e2a\uff0c\u4e8c\u7c7b2\u4e2a\uff0c\u4e09\u7c7bn-1\u4e2a \u5c06\u4e00\u7c7b\u4eba\u4e24\u4e24\u6bd4\u8f83\u5f97\u51fa\u4e00\u4e2a\u5173\u7cfb\u77e9\u9635\u3002\u4e8c\u7c7b\u4eba\u4e5f\u5982\u6b64\u3002 \u7136\u540e\u5c06\u4e00\u7c7b\u4e2d\u7684\u6700\u5c0f\u7684\u4e0e\u4e8c\u7c7b\u6700\u5c0f\u7684\u6bd4\u8f83\u5f97\u51fa\u66f4\u5c0f\u7684\uff0c\u5c06\u66f4\u5c0f\u7684\u6dd8\u6c70\uff0c\u4ece\u4e09\u7c7b\u4e2d\u53d6\u4e00\u4e2a\u8865\u9f50\uff0c\u76f4\u5230\u4e09\u7c7b\u4e3a\u7a7a\uff0c\u4e00\u7c7b\u548c\u4e8c\u7c7b\u4eba\u7684\u5e76\u96c6\u5373\u4e3a\u7b54\u6848\uff0c\u4e14\u4e00\u7c7b\u548c\u4e8c\u7c7b\u672c\u8eab\u6ca1\u6709\u8fdb\u884c\u6bd4\u8f83\u6240\u4ee5\u4e0d\u662f\u5b8c\u5168\u77e5\u9053\u4ed6\u4eec\u7684\u5173\u7cfb\u3002 J - Just Arrange the Icons Link \u9898\u610f\uff1a\u7ed9n\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u5206\u7c7b\uff0c\u6c42\u7bb1\u5b50\u5927\u5c0f\u4e3ak\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7bb1\u5b50\u53ea\u88c5\u4e00\u79cd\u7269\u54c1\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u81f3\u5c11\u586b\u5145\u5230k-1\u60c5\u51b5\u4e0b\u7bb1\u5b50\u7684\u6700\u5c0f\u4e2a\u6570\u3002\uff08k\u662f\u4efb\u610f\uff09 \u9996\u5148\u5904\u7406\u6210map\u5f62\u5f0f\uff0c\u5373\u7b2ci\u7c7b\u6709 x[i] x[i] \u4ef6\u7269\u54c1\uff0c\u7136\u540e\u9996\u5148\u8003\u8651k\u7684\u8303\u56f4\uff0c\u663e\u7136\u662f 1\uff5emin(x[i])+ 1 1\uff5emin(x[i])+ 1 \uff0c\u7136\u540e\u8003\u8651\u679a\u4e3e\u8fd9\u4e9b\u503c\u5904\u7406\u7b54\u6848\u3002 \u663e\u7136\uff0c\u5982\u679c\u4e00\u4e2ak\u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u5bf9\u6240\u6709\u7684i\u90fd\u6ee1\u8db3 k * t_1 + (k - 1) * t_2 = a_i, 0 \\le t1,t2 \u90a3\u4e48\u8fd9\u4e2a\u76f4\u63a5exgcd\u6c42\u662f\u5426\u6709\u6b63\u6574\u6570\u89e3\u5373\u53ef\u3002\u7136\u540e\u628a\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u5f04\u51fa\u6765\u6c42\u548c\u5c31\u53ef\u4ee5\u4e86\u3002 K - Key Storage Link \u9898\u610f\uff1a\u5bf9\u4e00\u4e2a\u6570n\uff0c\u4ece2\u5f00\u59cb\u53d6\u6a21\u6c42\u4f59\uff0c\u76f4\u5230n\u4e3a0\uff0c\u5f97\u5230\u4e00\u4e2a\u4f59\u6570\u5e8f\u5217\uff0c\u5bf9\u4f59\u6570\u5e8f\u5217\u6392\u5e8f\uff0c\u6c42\u4f59\u6570\u5e8f\u5217\u4e0en\u76f8\u7b49\u7684\u6570\u7684\u4e2a\u6570\u3002 \u7531\u4e8e\u6bcf\u4e2a\u6570\u7684\u4f59\u6570\u5e8f\u5217\u663e\u7136\u662f\u4e0d\u540c\u7684\uff0c\u663e\u7136\u5c31\u662f\u5408\u6cd5\u6392\u5217\u6570\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\uff0c\u5b83\u662f\u5408\u6cd5\u7684\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6a21\u6570\uff0c\u5b83\u7684\u4f59\u6570\u90fd\u662f\u5c0f\u4e8e\u6a21\u6570\u7684\uff0c\u7136\u540e\u5176\u5b9e\u9690\u85cf\u6761\u4ef6\u662f\u5b83\u4e0d\u80fd\u6709\u540e\u7f000\uff0c\u5373\u6700\u540e\u4e00\u4e2a\u6a21\u6570\u4e0d\u80fd\u4e3a0\u3002 \u90a3\u4e48\u663e\u7136\u5c31\u662f\u53ef\u91cd\u6392\u5217\u7684\u4e00\u4e2a\u9650\u5236\u6027\u7684\u53d8\u79cd\u3002\u4e0d\u8003\u8651\u540e\u7f000\u7684\u8bdd\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4f59\u6570\u5e8f\u5217\u9006\u6743\u6392\u5e8f\u4e4b\u540e\uff1a \\{a_1, a_2, \\dots a_n\\} \\{a_1, a_2, \\dots a_n\\} \uff0c a_i a_i \u548c\u4e0e a_i a_i \u76f8\u540c\u7684\u6743\u503c\uff0c\u5fc5\u987b\u653e\u5728 n+1-2-a[i]+1 n+1-2-a[i]+1 \u7684\u957f\u5ea6\u7684\u7a7a\u683c\u4e2d\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u7ec4\u5408\u6570\uff0c\u7136\u540e\u5b83\u524d\u7f00\u586b\u5145\u7269\u54c1\u5df2\u7ecf\u6709i\u4e2a\u4e86\uff0c\u7ec4\u5408\u6570\u7684\u4e0b\u90e8\u8fd8\u9700\u8981\u51cf\u6389\u4e00\u4e2a\u6743\u503c\uff0c\u89e3\u51fa\u6765\u5c31\u662f\u539f\u59cb\u7b54\u6848\u3002 \u7136\u540e\u518d\u6765\u8003\u8651\u540e\u7f000\uff0c\u5bf9\u4e8e\u540e\u7f000\u5728\u539f\u59cb\u7b54\u6848\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5b9e\u9645\u4e0a\u662f\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u5373\u53d6\u6700\u540e\u4e00\u4f4d\u4e3a0\uff0c\u628a0\u7684\u4e2a\u6570\u51cf\u4e00\uff0c\u7136\u540e\u518d\u8dd1\u4e00\u6b21\u539f\u59cb\u7b54\u6848\uff0c\u5373\u662f\u542b\u540e\u7f000\u7684\u5408\u6cd5\u7b54\u6848\uff0c\u51cf\u53bb\u5c31\u53ef\u4ee5\u4e86 \u5176\u5b9e\u770b\u9519\u9898\u4e86\u8fd8\u4ee5\u4e3a\u662f\u4e2a\u72b6\u538b\uff0c\u7ed3\u679c\u4e00\u770b\u7ec4\u6570\u5c31\u653e\u5f03\u4e86\uff0c\u4ee5\u540e\u6709\u673a\u4f1a\u51fa\u6210\u9898\u76ee\u3002 L - Lexicography Link \u9898\u610f\uff1a\u8111\u762b\uff0c\u7ed9nlr\uff0c\u8868\u793a\u7ed9\u51fan\u00d7l\u4e2a\u5b57\u7b26\u8981\u6784\u9020n\u4e2a\u957f\u5ea6\u4e3al\u7684\u5b57\u7b26\u4e32\uff0c\u4f7f\u5f97\u7b2cr\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6c42\u65b9\u6848\u3002 \u771f\u7684\u8111\u762b\uff0c\u663e\u7136\u662f\u4ece\u4e0a\u5f80\u4e0b\u7ed9\u5b57\u7b26\uff0c\u7136\u540e\u5982\u679c\u5f53\u524d\u4f4d\u4e0e\u524d\u4e00\u4e2a\u4f4d\u4e0d\u540c\u5373\u8868\u793a\u4e24\u4e2a\u4e32\u7684\u5b57\u5178\u5e8f\u5df2\u7ecf\u533a\u5206\u51fa\u6765\uff0c\u5c31\u4e0d\u7528\u7ba1\u5176\u4ed6\u7684\u4e86\uff0c\u7136\u540e\u6bd4r\u5927\u7684\u5b57\u7b26\u4e32\u4e5f\u4e0d\u7528\u7ba1\uff0c\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u6700\u5c0fr\u3002","title":"2019 2020 ICPC, NERC, Northern Eurasia Finals"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/#tag","text":"a\u3001set b\u3001\u4e71\u641e e\u3001\u66b4\u529b i\u3001\u6784\u9020\u4ea4\u4e92 j\u3001exgcd\u66b4\u529b k\u3001\u7ec4\u5408\u6570 l\u3001\u66b4\u529b","title":"tag"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/#a-apprentice-learning-trajectory","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u533a\u95f4\u548c\u533a\u95f4\u6743\u503c\uff0c\u8868\u793a\u5728\u8fd9\u6bb5\u533a\u95f4\u5185\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u591a\u4e2a\u8fde\u7eed\u7684\u6743\u503c\u65f6\u95f4\uff0c\u6bcf\u4e2a\u65f6\u95f4\u83b7\u5f971\u70b9\u7b54\u6848\u3002\u6c42\u4e0d\u80fd\u65f6\u95f4\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u7b54\u6848\u3002 \u9898\u89e3\uff1a \u5e76\u4e0d\u592a\u4f1a\u7684set\u9898\uff0c\u968f\u4fbf\u601d\u8003\u4e00\u4e0b\u53ef\u77e5\u5b83\u5e94\u8be5\u662f\u4f18\u5148\u6743\u503c\u65f6\u95f4\u5c0f\u7684\u53d6\uff0c\u7136\u540e\u5c0f\u7684\u53d6\u5230\u4e0d\u80fd\u53d6\u4e86\u624d\u4f1a\u7528\u5927\u7684\u3002 \u7136\u540e\u8003\u8651\u66b4\u529b\u89e3\u6cd5\uff1a\u5bf9\u4e8e\u6240\u6709\u7684\u65f6\u95f4\u70b9 dp[i] dp[i] \u8868\u793a\u5230 i i \u65f6\u95f4\u80fd\u83b7\u5f97\u7684\u6700\u5927\u7b54\u6848\uff0c\u90a3\u4e48\u663e\u7136 dp[i]=max(dp[i-t[k]]+1) dp[i]=max(dp[i-t[k]]+1) \uff0c\u5176\u4e2d k k \u4e3a\u6240\u6709\u5408\u6cd5\u7684\u70b9\uff08\u5728\u533a\u95f4\u5185\u7684\u70b9\uff09\u3002 \u4f46\u662f\u590d\u6742\u5ea6\u8fbe\u5230 O(nt) O(nt) \uff0c\u800c t \\le 10^{18} t \\le 10^{18} \u663e\u7136\u662f\u4e0d\u80fd\u51fa\u73b0\u5728\u590d\u6742\u5ea6\u4e2d \u7136\u540e\u8003\u8651\u5230\u7531\u4e8e\u6bcf\u6bb5\u7684\u60c5\u51b5\u5e94\u8be5\u662f\u76f8\u540c\u7684\uff0c\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u5757\u6c42\u89e3\u3002 \u9996\u5148\u5904\u7406\u51fa\u6bcf\u79cd\u533a\u95f4\u7684\u5de6\u7ec8\u70b9\u548c\u53f3\u7ec8\u70b9\u3002\u5373 s[i]-t[i],e[i] s[i]-t[i],e[i] \uff0c\u56e0\u4e3a\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8d77\u70b9\uff0c\u663e\u7136\u662f\u4f18\u5148\u53d6\u4f1a\u8ba9\u8d77\u70b9\u66f4\u5c0f\u7684\u70b9\u3002\u7136\u540e\u5904\u7406\u6210\u67e5\u5206\u5e8f\u5217\u7684\u5f62\u5f0f\u5373\u53ef\uff0c\u7528set\u7ef4\u62a4\u5f53\u524d\u6700\u5c0f\u7684 t t \uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u8d77\u70b9\u5373\u53ef\u3002\u590d\u6742\u5ea6 O(nlogn) O(nlogn)","title":"A - Apprentice Learning Trajectory"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/#b-balls-of-buma","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8981\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4f7f\u5f97\u8fde\u8d77\u6765\u7684\u76f8\u540c\u5b57\u7b26\u5927\u4e8e\u7b49\u4e8e\u4e09\u4e2a\u5373\u53ef\u6d88\u53bb\u8fd9\u4e9b\u76f8\u540c\u5b57\u7b26\uff0c\u7136\u540e\u5982\u679c\u6269\u5145\u7684\u5b57\u7b26\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e\u4e09\u4e2a\u4e5f\u53ef\u4ee5\u6d88\u53bb\uff0c\u6c42\u80fd\u5168\u90e8\u5220\u6389\u7684\u65b9\u6848\u6570 yysy\uff0c\u8111\u762b\u8bbe\u5b9a\uff0c\u90a3\u4e48\u9996\u5148\u5fc5\u7136\u6bb5\u6570\u662f\u5947\u6570\uff0c\u5176\u6b21\u5de6\u53f3\u5b57\u7b26\u5bf9\u79f0\uff0c\u518d\u5176\u6b21\u5de6\u53f3\u548c\u5927\u4e8e\u7b49\u4e8e3\uff0c\u518d\u5176\u6b21\u4e2d\u95f4\u548c\u5927\u4e8e\u7b49\u4e8e2\u5373\u53ef\u3002\u7b54\u6848\u4e3a\u4e2d\u95f4\u548c+1","title":"B - Balls of Buma"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/#e-elections","text":"\u9898\u610f\uff1an\u4e2a\u4eba\uff0cm\u573a\u9009\u4e3e\uff0c\u7ed9\u51fa\u77e9\u9635\u8868\u793a\u7b2ci\u573a\u7b2cj\u4e2a\u4eba\u7684\u6743\u91cd\uff0c\u8981\u6c42\u7b2cn\u4e2a\u4eba\u6b7b\uff0c\u6b7b\u7684\u5b9a\u4e49\u662f\u5b83\u4e0d\u662f\u6700\u5927\u503c\u6216\u8005\u53ea\u662f\u6700\u5927\u503c\u4e4b\u4e00\u3002\u6c42\u6700\u5c11\u5220\u6389\u591a\u5c11\u573a\u9009\u4e3e\u5e76\u8f93\u51fa\u65b9\u6848\u3002 \u7531\u4e8e\u6570\u636e\u8303\u56f4\u8f83\u5c0f\u6240\u4ee5\u76f4\u63a5\u7206\u5c31\u8fc7\u4e86\uff0c\u679a\u4e3e\u8ba9\u4ed6\u6b7b\u7684\u90a3\u4e2a\u4eba\u662f\u8c01\uff0c\u7136\u540e\u505a\u5dee\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u52a0\uff0c\u76f4\u5230\u4e0d\u80fd\u8ba9\u4ed6\u6b7b\u7684\u8fb9\u754c\u7136\u540e\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002","title":"E - Elections"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/#i-intriguing-selection","text":"\u9898\u610f\uff1a\u4ea4\u4e92\u9898\uff0c\u67092\u00d7n\u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u67091~2n\u7684\u6743\u503c\uff0c\u6bcf\u6b21\u8be2\u95eei\u548cj\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u9700\u8981\u77e5\u9053\u524dn\u4e2a\u4eba\u662f\u54ea\u4e9b\uff0c\u4f46\u662f\u4e0d\u80fd\u4f7f\u5f97\u524dn\u4e2a\u4eba\u7684\u5927\u5c0f\u5173\u7cfb\u5b8c\u5168\u77e5\u9053\uff0c\u8be2\u95ee\u6b21\u6570\u4e0d\u9650\uff08\u9650\u5236\u6bcf\u5bf9\u4eba\u4e0d\u91cd\u590d\u95ee\u7684\u6b21\u6570\uff09\u3002 \u5c06\u4eba\u5206\u62103\u7c7b\uff0c\u4e00\u7c7bn-1\u4e2a\uff0c\u4e8c\u7c7b2\u4e2a\uff0c\u4e09\u7c7bn-1\u4e2a \u5c06\u4e00\u7c7b\u4eba\u4e24\u4e24\u6bd4\u8f83\u5f97\u51fa\u4e00\u4e2a\u5173\u7cfb\u77e9\u9635\u3002\u4e8c\u7c7b\u4eba\u4e5f\u5982\u6b64\u3002 \u7136\u540e\u5c06\u4e00\u7c7b\u4e2d\u7684\u6700\u5c0f\u7684\u4e0e\u4e8c\u7c7b\u6700\u5c0f\u7684\u6bd4\u8f83\u5f97\u51fa\u66f4\u5c0f\u7684\uff0c\u5c06\u66f4\u5c0f\u7684\u6dd8\u6c70\uff0c\u4ece\u4e09\u7c7b\u4e2d\u53d6\u4e00\u4e2a\u8865\u9f50\uff0c\u76f4\u5230\u4e09\u7c7b\u4e3a\u7a7a\uff0c\u4e00\u7c7b\u548c\u4e8c\u7c7b\u4eba\u7684\u5e76\u96c6\u5373\u4e3a\u7b54\u6848\uff0c\u4e14\u4e00\u7c7b\u548c\u4e8c\u7c7b\u672c\u8eab\u6ca1\u6709\u8fdb\u884c\u6bd4\u8f83\u6240\u4ee5\u4e0d\u662f\u5b8c\u5168\u77e5\u9053\u4ed6\u4eec\u7684\u5173\u7cfb\u3002","title":"I - Intriguing Selection"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/#j-just-arrange-the-icons","text":"\u9898\u610f\uff1a\u7ed9n\u4e2a\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u5206\u7c7b\uff0c\u6c42\u7bb1\u5b50\u5927\u5c0f\u4e3ak\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7bb1\u5b50\u53ea\u88c5\u4e00\u79cd\u7269\u54c1\uff0c\u6bcf\u4e2a\u7bb1\u5b50\u81f3\u5c11\u586b\u5145\u5230k-1\u60c5\u51b5\u4e0b\u7bb1\u5b50\u7684\u6700\u5c0f\u4e2a\u6570\u3002\uff08k\u662f\u4efb\u610f\uff09 \u9996\u5148\u5904\u7406\u6210map\u5f62\u5f0f\uff0c\u5373\u7b2ci\u7c7b\u6709 x[i] x[i] \u4ef6\u7269\u54c1\uff0c\u7136\u540e\u9996\u5148\u8003\u8651k\u7684\u8303\u56f4\uff0c\u663e\u7136\u662f 1\uff5emin(x[i])+ 1 1\uff5emin(x[i])+ 1 \uff0c\u7136\u540e\u8003\u8651\u679a\u4e3e\u8fd9\u4e9b\u503c\u5904\u7406\u7b54\u6848\u3002 \u663e\u7136\uff0c\u5982\u679c\u4e00\u4e2ak\u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u5bf9\u6240\u6709\u7684i\u90fd\u6ee1\u8db3 k * t_1 + (k - 1) * t_2 = a_i, 0 \\le t1,t2 \u90a3\u4e48\u8fd9\u4e2a\u76f4\u63a5exgcd\u6c42\u662f\u5426\u6709\u6b63\u6574\u6570\u89e3\u5373\u53ef\u3002\u7136\u540e\u628a\u6700\u5c0f\u6b63\u6574\u6570\u89e3\u5f04\u51fa\u6765\u6c42\u548c\u5c31\u53ef\u4ee5\u4e86\u3002","title":"J - Just Arrange the Icons"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/#k-key-storage","text":"\u9898\u610f\uff1a\u5bf9\u4e00\u4e2a\u6570n\uff0c\u4ece2\u5f00\u59cb\u53d6\u6a21\u6c42\u4f59\uff0c\u76f4\u5230n\u4e3a0\uff0c\u5f97\u5230\u4e00\u4e2a\u4f59\u6570\u5e8f\u5217\uff0c\u5bf9\u4f59\u6570\u5e8f\u5217\u6392\u5e8f\uff0c\u6c42\u4f59\u6570\u5e8f\u5217\u4e0en\u76f8\u7b49\u7684\u6570\u7684\u4e2a\u6570\u3002 \u7531\u4e8e\u6bcf\u4e2a\u6570\u7684\u4f59\u6570\u5e8f\u5217\u663e\u7136\u662f\u4e0d\u540c\u7684\uff0c\u663e\u7136\u5c31\u662f\u5408\u6cd5\u6392\u5217\u6570\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\uff0c\u5b83\u662f\u5408\u6cd5\u7684\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6a21\u6570\uff0c\u5b83\u7684\u4f59\u6570\u90fd\u662f\u5c0f\u4e8e\u6a21\u6570\u7684\uff0c\u7136\u540e\u5176\u5b9e\u9690\u85cf\u6761\u4ef6\u662f\u5b83\u4e0d\u80fd\u6709\u540e\u7f000\uff0c\u5373\u6700\u540e\u4e00\u4e2a\u6a21\u6570\u4e0d\u80fd\u4e3a0\u3002 \u90a3\u4e48\u663e\u7136\u5c31\u662f\u53ef\u91cd\u6392\u5217\u7684\u4e00\u4e2a\u9650\u5236\u6027\u7684\u53d8\u79cd\u3002\u4e0d\u8003\u8651\u540e\u7f000\u7684\u8bdd\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4f59\u6570\u5e8f\u5217\u9006\u6743\u6392\u5e8f\u4e4b\u540e\uff1a \\{a_1, a_2, \\dots a_n\\} \\{a_1, a_2, \\dots a_n\\} \uff0c a_i a_i \u548c\u4e0e a_i a_i \u76f8\u540c\u7684\u6743\u503c\uff0c\u5fc5\u987b\u653e\u5728 n+1-2-a[i]+1 n+1-2-a[i]+1 \u7684\u957f\u5ea6\u7684\u7a7a\u683c\u4e2d\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a\u7ec4\u5408\u6570\uff0c\u7136\u540e\u5b83\u524d\u7f00\u586b\u5145\u7269\u54c1\u5df2\u7ecf\u6709i\u4e2a\u4e86\uff0c\u7ec4\u5408\u6570\u7684\u4e0b\u90e8\u8fd8\u9700\u8981\u51cf\u6389\u4e00\u4e2a\u6743\u503c\uff0c\u89e3\u51fa\u6765\u5c31\u662f\u539f\u59cb\u7b54\u6848\u3002 \u7136\u540e\u518d\u6765\u8003\u8651\u540e\u7f000\uff0c\u5bf9\u4e8e\u540e\u7f000\u5728\u539f\u59cb\u7b54\u6848\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5b9e\u9645\u4e0a\u662f\u4e2a\u9012\u5f52\u95ee\u9898\uff0c\u5373\u53d6\u6700\u540e\u4e00\u4f4d\u4e3a0\uff0c\u628a0\u7684\u4e2a\u6570\u51cf\u4e00\uff0c\u7136\u540e\u518d\u8dd1\u4e00\u6b21\u539f\u59cb\u7b54\u6848\uff0c\u5373\u662f\u542b\u540e\u7f000\u7684\u5408\u6cd5\u7b54\u6848\uff0c\u51cf\u53bb\u5c31\u53ef\u4ee5\u4e86 \u5176\u5b9e\u770b\u9519\u9898\u4e86\u8fd8\u4ee5\u4e3a\u662f\u4e2a\u72b6\u538b\uff0c\u7ed3\u679c\u4e00\u770b\u7ec4\u6570\u5c31\u653e\u5f03\u4e86\uff0c\u4ee5\u540e\u6709\u673a\u4f1a\u51fa\u6210\u9898\u76ee\u3002","title":"K - Key Storage"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Northern Eurasia Finals/#l-lexicography","text":"\u9898\u610f\uff1a\u8111\u762b\uff0c\u7ed9nlr\uff0c\u8868\u793a\u7ed9\u51fan\u00d7l\u4e2a\u5b57\u7b26\u8981\u6784\u9020n\u4e2a\u957f\u5ea6\u4e3al\u7684\u5b57\u7b26\u4e32\uff0c\u4f7f\u5f97\u7b2cr\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6c42\u65b9\u6848\u3002 \u771f\u7684\u8111\u762b\uff0c\u663e\u7136\u662f\u4ece\u4e0a\u5f80\u4e0b\u7ed9\u5b57\u7b26\uff0c\u7136\u540e\u5982\u679c\u5f53\u524d\u4f4d\u4e0e\u524d\u4e00\u4e2a\u4f4d\u4e0d\u540c\u5373\u8868\u793a\u4e24\u4e2a\u4e32\u7684\u5b57\u5178\u5e8f\u5df2\u7ecf\u533a\u5206\u51fa\u6765\uff0c\u5c31\u4e0d\u7528\u7ba1\u5176\u4ed6\u7684\u4e86\uff0c\u7136\u540e\u6bd4r\u5927\u7684\u5b57\u7b26\u4e32\u4e5f\u4e0d\u7528\u7ba1\uff0c\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u6700\u5c0fr\u3002","title":"L - Lexicography"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/","text":"Name Date Solved A B C D E F G H I J K L M N 2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest 2019/10/29 9/14 O O O . O O . O . O . O . O Tag Link a\u3001\u6a21\u62df b\u3001\u8d2a\u5fc3 c\u3001\u7ebf\u6bb5\u6811 e\u30012-sat f\u3001\u66b4\u529b h\u3001\u601d\u7ef4 j\u3001\u4e8c\u5206\u8d2a\u5fc3 l\u3001\u601d\u7ef4\u66b4\u529b n\u3001\u6865 A. Berstagram Link \u7b7e\u5230 B. The Feast and the Bus Link \u9898\u610f\uff1an\u4e2a\u4eba\uff0c\u5206k\u961f\uff0c\u8981\u6784\u9020\u4e00\u4e2a\u8f66\u8fd0\u9001\u6240\u6709\u4eba\uff0c\u6bcf\u8d9f\u8f66\u53ea\u80fd\u8fd0\u9001\u5b8c\u6574\u7684\u4e00\u961f\u4eba\u6216\u8005\u5b8c\u6574\u7684\u4e24\u961f\u4eba\uff0c\u6c42\u8d9f\u6b21\u00d7\u8f66\u7684\u5927\u5c0f\u7684\u6700\u5c0f\u503c\u3002n\u4e0d\u8d85\u8fc75e5\uff0ck\u4e0d\u8d85\u8fc78000\u3002 \u9898\u89e3\uff1a \u906e\u4f4f\u6570\u636e\u8303\u56f4\u8fd9\u9898\u53ef\u4ee5\u5f88\u591a\u89e3\u6cd5\uff0ck\u4e3a8000\u6240\u4ee5\u8003\u8651 O(k^2) \uff0c\u679a\u4e3e\u8d9f\u6b21x\uff0c\u53ef\u77e5x\u7684\u8303\u56f4\u4e3a [k/2, k] \uff0c\u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u4e00\u4e2a2\u00d7x\u7684\u76d2\u5b50\uff0c\u586b\u5165k\u4e2a\u6570\u4f7f\u5f97\u5217\u4e0a\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u8d2a\u5fc3\u6784\u9020\u51fa\u89e3\uff1a\u7b2c\u4e00\u5217\u653e\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff08k\u4e0d\u8db32\u00d7x\u65f6\u653e\u51650\uff09\uff0c\u7b2c\u4e8c\u5217\u6b21\u5927\u6b21\u5c0f\u2026\u2026\uff0c\u53ef\u4ee5\u8bc1\u660e\u53ea\u8981\u4efb\u610f\u8c03\u6362\u987a\u5e8f\u90fd\u4f1a\u4f7f\u6700\u5927\u503c\u53d8\u5927\u3002\u5373\u5982\u679c x \u4e0e y \u5728\u4e00\u5217\uff0c z \u4e0e p \u5728\u4e00\u5217\uff0c\u4ed6\u4eec\u6ee1\u8db3\u6761\u4ef6\u4e3a x>=y && z>=p && x>=z && p>=y \uff0c\u5219 max(x+y, z+p)<=max(x+p, z+y) \u6210\u7acb\u3002 C. Trip to Saint Petersburg Link \u9898\u610f\uff1a\u7ed9\u4e00\u4e9b\u533a\u95f4\u4ee5\u53ca\u533a\u95f4\u7684\u6743\u503c\uff0c\u6c42 L\uff0cR \u4f7f\u5f97\u5b8c\u5168\u5305\u542b\u4e8e L\uff0cR \u7684\u533a\u95f4\u6743\u503c\u548c-k\u00d7\u533a\u95f4\u5927\u5c0f\u6700\u5927\u3002\u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002\uff08\u533a\u95f4\u6570\u91cf2e5\uff0c\u533a\u95f4\u8303\u56f4\u4e5f\u4e3a2e5\uff09 \u9898\u89e3\uff1a\u8003\u8651\u5230\u8fd9\u4e2a\u9898\u7684\u533a\u95f4\u7aef\u70b9\u6700\u5927\u503c\u4e5f\u53ea\u67092e5\uff0c\u4e0d\u9700\u8981\u79bb\u6563\u5316\u76f4\u63a5\u904d\u5386\u6c42\u89e3\u5373\u53ef\u3002\u5177\u4f53\u6765\u8bb2\u679a\u4e3eR\u7684\u4f4d\u7f6e\uff0c\u9700\u8981\u6c42\u51fa\u7684\u662fr\u5c0f\u4e8e\u7b49\u4e8eR\u7684\u6240\u6709\u533a\u95f4\u5728\u8f74\u4e0a\u6784\u6210\u7684\u6700\u5927\u503c\u3002\u7136\u540e\u5c31\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u6811\u4f18\u5316dp\u5373\u53ef\u3002 E. The Coronation Link \u7ed9\u5b9a n n \u4e2a\u957f\u5ea6\u4e3a m m \u768401\u4e32\uff0c\u53ef\u4ee5\u5bf9\u4efb\u610f\u4e32\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6c42\u6ee1\u8db3\u4efb\u610f\u4e24\u4e2a\u4e32\u81f3\u5c11\u6709k\u4f4d\u76f8\u540c\u7684\u7ffb\u8f6c\u65b9\u6848\uff0c\u5e76\u4f7f\u7ffb\u8f6c\u6b21\u6570\u6700\u5c0f\u3002 2-SAT\u95ee\u9898\u3002 \u8bbe\u4e32\u4e0d\u7ffb\u8f6c\u4e3a0\uff0c\u7ffb\u8f6c\u4e3a1\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e32\u90fd\u6709\u5982\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a a,b\u548ca,rev(b)\u76f8\u540c\u4f4d\u6570\u5747\u5927\u4e8e\u7b49\u4e8ek\uff0c\u6b64\u65f6a,b\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u9650\u5236\uff1b a,b\u76f8\u540c\u4e4b\u95f4\u4f4d\u6570\u5927\u4e8e\u7b49\u4e8ek\uff0ca,rev(b)\u4e4b\u95f4\u76f8\u540c\u4f4d\u6570\u5c0f\u4e8ek\uff0c\u6b64\u65f6a,b\u5fc5\u987b\u76f8\u540c\uff0c\u5373XOR(a,b)=0; a,b\u76f8\u540c\u4e4b\u95f4\u4f4d\u6570\u5c0f\u4e8e\u7b49\u4e8ek\uff0ca,rev(b)\u4e4b\u95f4\u76f8\u540c\u4f4d\u6570\u5927\u4e8ek\uff0c\u6b64\u65f6a,b\u5fc5\u987b\u76f8\u53cd\uff0c\u5373XOR(a,b)=1; a,b\u548ca,rev(b)\u76f8\u540c\u4f4d\u6570\u5747\u5c0f\u4e8ek\uff0c\u5373\u65e0\u8bba\u600e\u4e48\u7ffb\u8f6c\u90fd\u4e0d\u80fd\u4f7fa,b\u4e24\u8005\u5339\u914d\uff1b \u4e00\u65e6\u51fa\u73b04\uff0c\u6574\u7ec4\u60c5\u51b5\u4e00\u5b9a\u662f\u65e0\u89e3\u7684\u3002 \u76f8\u5f53\u4e8e\u539f\u4e32\u6240\u4ee3\u8868\u7684\u70b9\u5f62\u6210\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u4e2d\u7684\u5143\u7d20\u989c\u8272\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff08\u5373\u5982\u679c\u7ffb\u8f6c\u4e00\u4e2a\uff0c\u5fc5\u987b\u7ffb\u8f6c\u8be5\u5757\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff09\u3002 \u5efa\u5b8c\u56fe\u540e\u5bf9\u70b9 i i \u548c\u70b9 i+n\u200b i+n\u200b \u8fdb\u884cdfs\uff0c\u56e0\u4e3a\u56fe\u7684\u4e24\u4fa7\u5b8c\u5168\u5bf9\u79f0\uff0c\u4e00\u5b9a\u4f1a\u641c\u51fa\u4e00\u7ec4\u70b9\u5b8c\u5168\u76f8\u53cd\u7684\u4e24\u79cd\u67d3\u8272\u65b9\u6848\uff0c\u53ea\u8981\u9009\u62e9\u7ffb\u8f6c\u6b21\u6570\u8f83\u5c0f\u7684\u90a3\u4e00\u7ec4\u5373\u53ef\u3002\u6ce8\u610f\u5728dfs\u65f6\u9700\u8981\u5224\u5947\u73af\uff0c\u5982\u679c\u51fa\u73b0\u5947\u73af\u5219\u65e0\u89e3\u3002 F. Data Center Link \u7b7e\u5230 H. Happy Birthday Link \u7ed9\u5b9a0-9\u5404\u4e2a\u6570\u5b57\u7684\u4e2a\u6570\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u4e0d\u80fd\u7ec4\u6210\u7684\u6570\u5b57\u3002 \u7b54\u6848\u662f\u51fa\u73b0\u7684\u6700\u5c11\u6b21\u6570\u7684\u6570\u5b57\u591a1\u4e2a\uff0c\u5982\u679c\u662f0\u5c31\u5728\u524d\u9762\u52a01\u3002 J. The Parade Link \u7ed9\u5b9a\u4e86\u4e00\u4e9b\u8eab\u9ad8\u4e0d\u540c\u7684\u58eb\u5175\uff0c\u8eab\u9ad8\u4e3ai\u7684\u58eb\u5175\u6709c[i]\u4e2a\uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2ak\u884c\u7684\u77e9\u5f62\uff0c\u4f7f\u6bcf\u4e00\u884c\u7684\u4eba\u6570\u76f8\u7b49\uff0c\u4e14\u8be5\u884c\u7684\u6781\u5dee\u4e0d\u8d85\u8fc71\uff0c\u95ee\u8fd9\u4e2a\u77e9\u9635\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u4e8c\u5206\u6bcf\u884c\u957f\u5ea6x\uff0c\u5c06\u524d\u4e00\u7c7b\u4f59\u4e0b\u7684\u4eba\u6570pre\u4e0ei\u76f8\u52a0\uff0c\u5224\u65ad\u5176\u662f\u5426\u5927\u4e8ex\uff0c\u5982\u679c\u662fx\u5219\u6709\u8d21\u732e\uff0c\u5c06\u5269\u4e0b\u7684i\u6392\u6210\u957f\u5ea6\u4e3ax\u7684\u884c\uff0c\u5269\u4e0b\u7684\u503c\u66f4\u65b0pre. L. Divide The Students Link \u6709\u4e09\u7c7b\u4ebaa,b,c\uff0ca\u7c7b\u4e0ec\u7c7b\u4e0d\u80fd\u540c\u7ec4\uff0c\u5c06\u4ed6\u4eec\u5206\u62103\u7ec4\uff0c\u4f7f\u6700\u5927\u7ec4\u6570\u6700\u5c0f\u3002 \u5c06a\uff0cc\u4e2d\u8f83\u5927\u7684\u503c\u5206\u6210\u4e24\u4efd\uff0c\u6bcf\u6b21\u62ffb\u586b\u51453\u7c7b\u4e2d\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002 N. Wires Link \u7ed9\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6bcf\u6b21\u53ef\u4ee5\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u4e00\u7aef\uff0c\u95ee\u6700\u5c11\u4fee\u6539\u591a\u5c11\u6b21\u80fd\u4f7f\u8054\u901a\u5757\u53d8\u4e3a\u53ea\u67091\u4e2a\uff08\u6ca1\u6709\u4efb\u4f55\u8fb9\u76f8\u8fde\u7684\u70b9\u89c6\u4e3a\u6e38\u79bb\uff0c\u4e0d\u7528\u4e0e\u5757\u8fde\u901a\uff09\u3002 \u5982\u679c\u6709n\u4e2a\u8054\u901a\u5757\u663e\u7136\u81f3\u5c11\u4fee\u6539n-1\u6b21\uff0c\u6bcf\u6b21\u9009\u62e9\u8054\u901a\u5757\u4e2d\u7684\u975e\u6865\u8fb9\u4e0e\u7b2c\u4e00\u4e2a\u8054\u901a\u5757\u76f8\u8fde\uff0c\u5982\u679c\u90fd\u4e3a\u6865\u8fb9\uff08\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff09\uff0c\u4fee\u6539\u94fe\u9996\u5373\u53ef\u3002\u6ce8\u610f\u91cd\u8fb9\u3002","title":"2019 2020 ICPC, NERC, Southern and Volga Russian Regional Contest"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#tag","text":"a\u3001\u6a21\u62df b\u3001\u8d2a\u5fc3 c\u3001\u7ebf\u6bb5\u6811 e\u30012-sat f\u3001\u66b4\u529b h\u3001\u601d\u7ef4 j\u3001\u4e8c\u5206\u8d2a\u5fc3 l\u3001\u601d\u7ef4\u66b4\u529b n\u3001\u6865","title":"Tag"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#a-berstagram","text":"\u7b7e\u5230","title":"A. Berstagram"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#b-the-feast-and-the-bus","text":"\u9898\u610f\uff1an\u4e2a\u4eba\uff0c\u5206k\u961f\uff0c\u8981\u6784\u9020\u4e00\u4e2a\u8f66\u8fd0\u9001\u6240\u6709\u4eba\uff0c\u6bcf\u8d9f\u8f66\u53ea\u80fd\u8fd0\u9001\u5b8c\u6574\u7684\u4e00\u961f\u4eba\u6216\u8005\u5b8c\u6574\u7684\u4e24\u961f\u4eba\uff0c\u6c42\u8d9f\u6b21\u00d7\u8f66\u7684\u5927\u5c0f\u7684\u6700\u5c0f\u503c\u3002n\u4e0d\u8d85\u8fc75e5\uff0ck\u4e0d\u8d85\u8fc78000\u3002 \u9898\u89e3\uff1a \u906e\u4f4f\u6570\u636e\u8303\u56f4\u8fd9\u9898\u53ef\u4ee5\u5f88\u591a\u89e3\u6cd5\uff0ck\u4e3a8000\u6240\u4ee5\u8003\u8651 O(k^2) \uff0c\u679a\u4e3e\u8d9f\u6b21x\uff0c\u53ef\u77e5x\u7684\u8303\u56f4\u4e3a [k/2, k] \uff0c\u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u4e00\u4e2a2\u00d7x\u7684\u76d2\u5b50\uff0c\u586b\u5165k\u4e2a\u6570\u4f7f\u5f97\u5217\u4e0a\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\uff0c\u8d2a\u5fc3\u6784\u9020\u51fa\u89e3\uff1a\u7b2c\u4e00\u5217\u653e\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff08k\u4e0d\u8db32\u00d7x\u65f6\u653e\u51650\uff09\uff0c\u7b2c\u4e8c\u5217\u6b21\u5927\u6b21\u5c0f\u2026\u2026\uff0c\u53ef\u4ee5\u8bc1\u660e\u53ea\u8981\u4efb\u610f\u8c03\u6362\u987a\u5e8f\u90fd\u4f1a\u4f7f\u6700\u5927\u503c\u53d8\u5927\u3002\u5373\u5982\u679c x \u4e0e y \u5728\u4e00\u5217\uff0c z \u4e0e p \u5728\u4e00\u5217\uff0c\u4ed6\u4eec\u6ee1\u8db3\u6761\u4ef6\u4e3a x>=y && z>=p && x>=z && p>=y \uff0c\u5219 max(x+y, z+p)<=max(x+p, z+y) \u6210\u7acb\u3002","title":"B. The Feast and the Bus"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#c-trip-to-saint-petersburg","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e9b\u533a\u95f4\u4ee5\u53ca\u533a\u95f4\u7684\u6743\u503c\uff0c\u6c42 L\uff0cR \u4f7f\u5f97\u5b8c\u5168\u5305\u542b\u4e8e L\uff0cR \u7684\u533a\u95f4\u6743\u503c\u548c-k\u00d7\u533a\u95f4\u5927\u5c0f\u6700\u5927\u3002\u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002\uff08\u533a\u95f4\u6570\u91cf2e5\uff0c\u533a\u95f4\u8303\u56f4\u4e5f\u4e3a2e5\uff09 \u9898\u89e3\uff1a\u8003\u8651\u5230\u8fd9\u4e2a\u9898\u7684\u533a\u95f4\u7aef\u70b9\u6700\u5927\u503c\u4e5f\u53ea\u67092e5\uff0c\u4e0d\u9700\u8981\u79bb\u6563\u5316\u76f4\u63a5\u904d\u5386\u6c42\u89e3\u5373\u53ef\u3002\u5177\u4f53\u6765\u8bb2\u679a\u4e3eR\u7684\u4f4d\u7f6e\uff0c\u9700\u8981\u6c42\u51fa\u7684\u662fr\u5c0f\u4e8e\u7b49\u4e8eR\u7684\u6240\u6709\u533a\u95f4\u5728\u8f74\u4e0a\u6784\u6210\u7684\u6700\u5927\u503c\u3002\u7136\u540e\u5c31\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u6811\u4f18\u5316dp\u5373\u53ef\u3002","title":"C. Trip to Saint Petersburg"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#e-the-coronation","text":"\u7ed9\u5b9a n n \u4e2a\u957f\u5ea6\u4e3a m m \u768401\u4e32\uff0c\u53ef\u4ee5\u5bf9\u4efb\u610f\u4e32\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6c42\u6ee1\u8db3\u4efb\u610f\u4e24\u4e2a\u4e32\u81f3\u5c11\u6709k\u4f4d\u76f8\u540c\u7684\u7ffb\u8f6c\u65b9\u6848\uff0c\u5e76\u4f7f\u7ffb\u8f6c\u6b21\u6570\u6700\u5c0f\u3002 2-SAT\u95ee\u9898\u3002 \u8bbe\u4e32\u4e0d\u7ffb\u8f6c\u4e3a0\uff0c\u7ffb\u8f6c\u4e3a1\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e32\u90fd\u6709\u5982\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a a,b\u548ca,rev(b)\u76f8\u540c\u4f4d\u6570\u5747\u5927\u4e8e\u7b49\u4e8ek\uff0c\u6b64\u65f6a,b\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u9650\u5236\uff1b a,b\u76f8\u540c\u4e4b\u95f4\u4f4d\u6570\u5927\u4e8e\u7b49\u4e8ek\uff0ca,rev(b)\u4e4b\u95f4\u76f8\u540c\u4f4d\u6570\u5c0f\u4e8ek\uff0c\u6b64\u65f6a,b\u5fc5\u987b\u76f8\u540c\uff0c\u5373XOR(a,b)=0; a,b\u76f8\u540c\u4e4b\u95f4\u4f4d\u6570\u5c0f\u4e8e\u7b49\u4e8ek\uff0ca,rev(b)\u4e4b\u95f4\u76f8\u540c\u4f4d\u6570\u5927\u4e8ek\uff0c\u6b64\u65f6a,b\u5fc5\u987b\u76f8\u53cd\uff0c\u5373XOR(a,b)=1; a,b\u548ca,rev(b)\u76f8\u540c\u4f4d\u6570\u5747\u5c0f\u4e8ek\uff0c\u5373\u65e0\u8bba\u600e\u4e48\u7ffb\u8f6c\u90fd\u4e0d\u80fd\u4f7fa,b\u4e24\u8005\u5339\u914d\uff1b \u4e00\u65e6\u51fa\u73b04\uff0c\u6574\u7ec4\u60c5\u51b5\u4e00\u5b9a\u662f\u65e0\u89e3\u7684\u3002 \u76f8\u5f53\u4e8e\u539f\u4e32\u6240\u4ee3\u8868\u7684\u70b9\u5f62\u6210\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u4e2d\u7684\u5143\u7d20\u989c\u8272\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff08\u5373\u5982\u679c\u7ffb\u8f6c\u4e00\u4e2a\uff0c\u5fc5\u987b\u7ffb\u8f6c\u8be5\u5757\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff09\u3002 \u5efa\u5b8c\u56fe\u540e\u5bf9\u70b9 i i \u548c\u70b9 i+n\u200b i+n\u200b \u8fdb\u884cdfs\uff0c\u56e0\u4e3a\u56fe\u7684\u4e24\u4fa7\u5b8c\u5168\u5bf9\u79f0\uff0c\u4e00\u5b9a\u4f1a\u641c\u51fa\u4e00\u7ec4\u70b9\u5b8c\u5168\u76f8\u53cd\u7684\u4e24\u79cd\u67d3\u8272\u65b9\u6848\uff0c\u53ea\u8981\u9009\u62e9\u7ffb\u8f6c\u6b21\u6570\u8f83\u5c0f\u7684\u90a3\u4e00\u7ec4\u5373\u53ef\u3002\u6ce8\u610f\u5728dfs\u65f6\u9700\u8981\u5224\u5947\u73af\uff0c\u5982\u679c\u51fa\u73b0\u5947\u73af\u5219\u65e0\u89e3\u3002","title":"E. The Coronation"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#f-data-center","text":"\u7b7e\u5230","title":"F. Data Center"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#h-happy-birthday","text":"\u7ed9\u5b9a0-9\u5404\u4e2a\u6570\u5b57\u7684\u4e2a\u6570\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u4e0d\u80fd\u7ec4\u6210\u7684\u6570\u5b57\u3002 \u7b54\u6848\u662f\u51fa\u73b0\u7684\u6700\u5c11\u6b21\u6570\u7684\u6570\u5b57\u591a1\u4e2a\uff0c\u5982\u679c\u662f0\u5c31\u5728\u524d\u9762\u52a01\u3002","title":"H. Happy Birthday"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#j-the-parade","text":"\u7ed9\u5b9a\u4e86\u4e00\u4e9b\u8eab\u9ad8\u4e0d\u540c\u7684\u58eb\u5175\uff0c\u8eab\u9ad8\u4e3ai\u7684\u58eb\u5175\u6709c[i]\u4e2a\uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2ak\u884c\u7684\u77e9\u5f62\uff0c\u4f7f\u6bcf\u4e00\u884c\u7684\u4eba\u6570\u76f8\u7b49\uff0c\u4e14\u8be5\u884c\u7684\u6781\u5dee\u4e0d\u8d85\u8fc71\uff0c\u95ee\u8fd9\u4e2a\u77e9\u9635\u6700\u5927\u53ef\u4ee5\u662f\u591a\u5c11\u3002 \u4e8c\u5206\u6bcf\u884c\u957f\u5ea6x\uff0c\u5c06\u524d\u4e00\u7c7b\u4f59\u4e0b\u7684\u4eba\u6570pre\u4e0ei\u76f8\u52a0\uff0c\u5224\u65ad\u5176\u662f\u5426\u5927\u4e8ex\uff0c\u5982\u679c\u662fx\u5219\u6709\u8d21\u732e\uff0c\u5c06\u5269\u4e0b\u7684i\u6392\u6210\u957f\u5ea6\u4e3ax\u7684\u884c\uff0c\u5269\u4e0b\u7684\u503c\u66f4\u65b0pre.","title":"J. The Parade"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#l-divide-the-students","text":"\u6709\u4e09\u7c7b\u4ebaa,b,c\uff0ca\u7c7b\u4e0ec\u7c7b\u4e0d\u80fd\u540c\u7ec4\uff0c\u5c06\u4ed6\u4eec\u5206\u62103\u7ec4\uff0c\u4f7f\u6700\u5927\u7ec4\u6570\u6700\u5c0f\u3002 \u5c06a\uff0cc\u4e2d\u8f83\u5927\u7684\u503c\u5206\u6210\u4e24\u4efd\uff0c\u6bcf\u6b21\u62ffb\u586b\u51453\u7c7b\u4e2d\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002","title":"L. Divide The Students"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/2019-2020 ICPC, NERC, Southern and Volga Russian Regional Contest/#n-wires","text":"\u7ed9\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u6bcf\u6b21\u53ef\u4ee5\u4fee\u6539\u4e00\u6761\u8fb9\u7684\u4e00\u7aef\uff0c\u95ee\u6700\u5c11\u4fee\u6539\u591a\u5c11\u6b21\u80fd\u4f7f\u8054\u901a\u5757\u53d8\u4e3a\u53ea\u67091\u4e2a\uff08\u6ca1\u6709\u4efb\u4f55\u8fb9\u76f8\u8fde\u7684\u70b9\u89c6\u4e3a\u6e38\u79bb\uff0c\u4e0d\u7528\u4e0e\u5757\u8fde\u901a\uff09\u3002 \u5982\u679c\u6709n\u4e2a\u8054\u901a\u5757\u663e\u7136\u81f3\u5c11\u4fee\u6539n-1\u6b21\uff0c\u6bcf\u6b21\u9009\u62e9\u8054\u901a\u5757\u4e2d\u7684\u975e\u6865\u8fb9\u4e0e\u7b2c\u4e00\u4e2a\u8054\u901a\u5757\u76f8\u8fde\uff0c\u5982\u679c\u90fd\u4e3a\u6865\u8fb9\uff08\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff09\uff0c\u4fee\u6539\u94fe\u9996\u5373\u53ef\u3002\u6ce8\u610f\u91cd\u8fb9\u3002","title":"N. Wires"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/The 13th Chinese Northeast Collegiate Programming Contest/","text":"Name Date Solved A B C D E F G H I J K L M N The 13 th Chinese Northeast Collegiate Programming Contest 2019/9/25 7/10 . O O . O \u00d8 O O . O","title":"The 13th Chinese Northeast Collegiate Programming Contest"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/The 2018 ACM-ICPC Asia Beijing Regional Contest/","text":"Name Date Solved A B C D E F G H I J The 2018 ACM-ICPC Asia Beijing Regional Contest 2019/10/11 5/12 O \u00d8 . O . . . O O . A. Jin Yong\u2019s Wukong Ranking List Link \u6709\u5411\u56fe\u5224\u73af\uff0c20\u4e2a\u70b9 B. Heshen\u2019s Account Book Link \u6309\u9898\u610f\u6a21\u62df\uff0c\u6570\u636e\u6c34 \u7ed9\u82e5\u5e72\u884c\u5b57\u7b26\uff0c\u5305\u542b\u6570\u5b57\u5b57\u6bcd\u548c\u7a7a\u683c\u6362\u884c \u6c42\u6240\u6709\u8fde\u7eed\u7684\u975e\u7a7a\u4e32\u4e2d\uff0c\u4ee5\u6570\u5b57\u5f00\u5934\u6570\u5b57\u7ed3\u5c3e\uff0c\u5f00\u5934\u975e0\u7684\u4e32\uff0c\u5254\u9664\u5b57\u6bcd\u3002\u8fd8\u8981\u7edf\u8ba1\u6bcf\u884c\u8fd9\u6837\u7684\u4e32\u7684\u4e2a\u6570\uff0c\u5355\u4e2a\u6362\u884c\u4e0d\u5f71\u54cd\u4e32\u7684\u8fde\u7eed\u6027\u3002\u4f46\u662f\u6362\u884c\u524d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e0d\u80fd\u4e3a\u5b57\u6bcd\uff0c\u540e\u4e00\u4e2a\u4e5f\u4e0d\u80fd\u3002 D. Frog and Portal Link \u5171200\u4e2a\u70b9\uff0c\u521d\u59cb\u57280\u4f4d\u7f6e\uff0c\u8981\u5230201\u683c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8df31\u62162\u683c\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e9b\u4f20\u9001\u70b9\uff08\u5de6\u548c\u53f3\uff0c\u8868\u793a\u5230\u5de6\u8fb9\u683c\u5b50\u5fc5\u4f1a\u81ea\u52a8\u4f20\u9001\u5230\u53f3\u8fb9\u683c\u5b50\uff09\uff0c\u4f7f\u5f97\u5230201\u7684\u65b9\u6848\u6570\u6070\u4e3am \u9996\u5148\u8003\u8651\u65b9\u6848\u6570\u7684\u8bb0\u5f55\uff1a \u5bf9\u4f20\u9001\u70b9\u53f3\u5230\u5de6\u5efa\u8fb9 dp[i] \u8868\u793a i \u4f4d\u7f6e\u7684\u65b9\u6848\u4e2a\u6570 \u5982\u679c i \u7684\u5165\u5ea6\u4e3a1\uff08\u6700\u591a\u4e3a1\uff09\uff0c\u5219 dp[i] = 0 \uff0c\u5426\u5219 dp[i] = dp[i - 1] + dp[i - 2] + all(dp[edge[i]]) dp[n] \u5373\u4e3a\u603b\u65b9\u6848\u6570 \u7136\u540e\u8003\u8651\u5982\u4f55\u6784\u9020\u65b9\u6848 \u7531\u4e8em\u7684\u8303\u56f4\u4e3a 0 \\le M < 2^{32} \u8003\u8651\u4e8c\u8fdb\u5236\u679a\u4e3e \u7531\u4e8e\u8fd9\u4e2adp\u770b\u7740\u5c31\u50cf\u500d\u589e\u7684\u590d\u6742\u5ea6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u968f\u4fbf\u5199\u4e86 \u6bd4\u5982\uff1a 1 1 2 \u5982\u679c\u4e0d\u8df3\u7684\u8bdd\u4f1a\u4ea7\u751f\u4e00\u4e2a 3 \uff0c\u5bf9\u4e8c\u8fdb\u5236\u7684\u679a\u4e3e\u4e0d\u5229\uff0c\u6240\u4ee5\u72ec\u7acb\u51fa299\u81ea\u52a8\u6210\u73af\uff0c\u7136\u540e\u5c063\u53f7\u70b9\u8df3\u5230299\u5c31\u53ef\u4ee5\u5bf9\u7b54\u6848\u4e0d\u4ea7\u751f\u8d21\u732e\u3002 1 1 2 0 2 2 4 0 4 4 0 ... \u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u679a\u4e3e\u51fa\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u4f4d \u4f46\u662f\u95ee\u9898\u662f\u8981\u8df3\u5230\u6700\u540e\u4e00\u4f4d\uff0c\u6240\u4ee5\u7ee7\u7eed\u6784\u9020 1 1 2 0 2 2 x 2 2 4 0 4 4 x 4 4 x \u8868\u793a\u5f53\u524d\u4e3a0\uff0c\u5373\u5982\u679c\u5f53\u524d\u6570\u662fM\u9700\u8981\u7684\u5219\u76f4\u63a5\u8df3\u5230200\uff0c\u5426\u5219\u8df3\u5230199\u81ea\u73af\u3002 \u6ce8\u610f198\u4e5f\u8981\u81ea\u73af\u5426\u5219\u4f1a\u5bf9200\u4ea7\u751f\u5f71\u54cd\u3002 \uff28. Approximate Matching Link \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6a21\u5f0f\u4e32\uff0c\u5982\u679c\u4e00\u4e2a\u4e32\u7684\u4efb\u610f\u4e00\u4e2a\u4e0e\u6a21\u5f0f\u4e32\u957f\u5ea6\u76f8\u540c\u5b50\u4e32\u4e0e\u8be5\u6a21\u5f0f\u4e32\u53ea\u6709<=1\u4f4d\u4e0d\u540c\uff0c\u5219\u8fd9\u4e2a\u4e32\u4e0e\u7ed9\u7684\u6a21\u5f0f\u4e32\u8fd1\u4f3c\u5339\u914d\u3002\u6c42\u957f\u5ea6\u4e3an\uff0c\u4e14\u4e0e\u8be5\u6a21\u5f0f\u4e32\u8fd1\u4f3c\u5339\u914d\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u3002 \u88ab\u51fa\u70c2\u4e86\u7684\u9898\u2026\u2026\u628a\u539f\u4e32\u548c\u6240\u6709\u6539\u53d8\u4e00\u4f4d\u7684\u4e32\u52a0\u5165AC\u81ea\u52a8\u673a\uff0c\u7b54\u6848\u7b49\u4e8e\u5b57\u7b26\u4e32\u603b\u6570-\u4e0d\u542b\u4efb\u4f55\u6a21\u5f0f\u4e32\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\uff0c\u540e\u8005\u5728AC\u81ea\u52a8\u673a\u4e0adp\u8dd1\u4e00\u4e0b\u5c31\u597d\u3002 I. Palindromes Link \u8f93\u51fa\u957f\u5ea6\u4f18\u5148\u5b57\u5178\u5e8f\u7b2ck\u5927\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u56de\u6587\u4e32 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, \u2026 k\u5f88\u5927\u6240\u4ee5\u901a\u8fc7\u8ba1\u7b97\uff0c\u5b9e\u9645\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u4e3a\u4e0d\u7b97\u524d\u5bfc0\u7684\u539f\u56e0\u4f1a\u4ea7\u751f\u4e00\u4e9b\u9700\u8981\u7279\u522b\u5224\u65ad\u7684\u70b9\u3002 \u603b\u4e4b\u5c31\u662f\u9996\u5148\u5224\u65ad\u6709x\u4f4d\u6570\uff0c\u7136\u540e\u5199\u51fa\u8fd9(x/2)\u4f4d\u6570\u7684\u524d\u7f00\u8ba1\u6570\u5220\u53bb\u540e\u5269\u4e0b\u7684\u7b2c\u51e0\u4f4d\u5373\u53ef\u3002","title":"The 2018 ACM ICPC Asia Beijing Regional Contest"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/The 2018 ACM-ICPC Asia Beijing Regional Contest/#a-jin-yongs-wukong-ranking-list","text":"\u6709\u5411\u56fe\u5224\u73af\uff0c20\u4e2a\u70b9","title":"A. Jin Yong\u2019s Wukong Ranking List"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/The 2018 ACM-ICPC Asia Beijing Regional Contest/#b-heshens-account-book","text":"\u6309\u9898\u610f\u6a21\u62df\uff0c\u6570\u636e\u6c34 \u7ed9\u82e5\u5e72\u884c\u5b57\u7b26\uff0c\u5305\u542b\u6570\u5b57\u5b57\u6bcd\u548c\u7a7a\u683c\u6362\u884c \u6c42\u6240\u6709\u8fde\u7eed\u7684\u975e\u7a7a\u4e32\u4e2d\uff0c\u4ee5\u6570\u5b57\u5f00\u5934\u6570\u5b57\u7ed3\u5c3e\uff0c\u5f00\u5934\u975e0\u7684\u4e32\uff0c\u5254\u9664\u5b57\u6bcd\u3002\u8fd8\u8981\u7edf\u8ba1\u6bcf\u884c\u8fd9\u6837\u7684\u4e32\u7684\u4e2a\u6570\uff0c\u5355\u4e2a\u6362\u884c\u4e0d\u5f71\u54cd\u4e32\u7684\u8fde\u7eed\u6027\u3002\u4f46\u662f\u6362\u884c\u524d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e0d\u80fd\u4e3a\u5b57\u6bcd\uff0c\u540e\u4e00\u4e2a\u4e5f\u4e0d\u80fd\u3002","title":"B. Heshen's Account Book"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/The 2018 ACM-ICPC Asia Beijing Regional Contest/#d-frog-and-portal","text":"\u5171200\u4e2a\u70b9\uff0c\u521d\u59cb\u57280\u4f4d\u7f6e\uff0c\u8981\u5230201\u683c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8df31\u62162\u683c\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e9b\u4f20\u9001\u70b9\uff08\u5de6\u548c\u53f3\uff0c\u8868\u793a\u5230\u5de6\u8fb9\u683c\u5b50\u5fc5\u4f1a\u81ea\u52a8\u4f20\u9001\u5230\u53f3\u8fb9\u683c\u5b50\uff09\uff0c\u4f7f\u5f97\u5230201\u7684\u65b9\u6848\u6570\u6070\u4e3am \u9996\u5148\u8003\u8651\u65b9\u6848\u6570\u7684\u8bb0\u5f55\uff1a \u5bf9\u4f20\u9001\u70b9\u53f3\u5230\u5de6\u5efa\u8fb9 dp[i] \u8868\u793a i \u4f4d\u7f6e\u7684\u65b9\u6848\u4e2a\u6570 \u5982\u679c i \u7684\u5165\u5ea6\u4e3a1\uff08\u6700\u591a\u4e3a1\uff09\uff0c\u5219 dp[i] = 0 \uff0c\u5426\u5219 dp[i] = dp[i - 1] + dp[i - 2] + all(dp[edge[i]]) dp[n] \u5373\u4e3a\u603b\u65b9\u6848\u6570 \u7136\u540e\u8003\u8651\u5982\u4f55\u6784\u9020\u65b9\u6848 \u7531\u4e8em\u7684\u8303\u56f4\u4e3a 0 \\le M < 2^{32} \u8003\u8651\u4e8c\u8fdb\u5236\u679a\u4e3e \u7531\u4e8e\u8fd9\u4e2adp\u770b\u7740\u5c31\u50cf\u500d\u589e\u7684\u590d\u6742\u5ea6\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u968f\u4fbf\u5199\u4e86 \u6bd4\u5982\uff1a 1 1 2 \u5982\u679c\u4e0d\u8df3\u7684\u8bdd\u4f1a\u4ea7\u751f\u4e00\u4e2a 3 \uff0c\u5bf9\u4e8c\u8fdb\u5236\u7684\u679a\u4e3e\u4e0d\u5229\uff0c\u6240\u4ee5\u72ec\u7acb\u51fa299\u81ea\u52a8\u6210\u73af\uff0c\u7136\u540e\u5c063\u53f7\u70b9\u8df3\u5230299\u5c31\u53ef\u4ee5\u5bf9\u7b54\u6848\u4e0d\u4ea7\u751f\u8d21\u732e\u3002 1 1 2 0 2 2 4 0 4 4 0 ... \u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u679a\u4e3e\u51fa\u6240\u6709\u7684\u4e8c\u8fdb\u5236\u4f4d \u4f46\u662f\u95ee\u9898\u662f\u8981\u8df3\u5230\u6700\u540e\u4e00\u4f4d\uff0c\u6240\u4ee5\u7ee7\u7eed\u6784\u9020 1 1 2 0 2 2 x 2 2 4 0 4 4 x 4 4 x \u8868\u793a\u5f53\u524d\u4e3a0\uff0c\u5373\u5982\u679c\u5f53\u524d\u6570\u662fM\u9700\u8981\u7684\u5219\u76f4\u63a5\u8df3\u5230200\uff0c\u5426\u5219\u8df3\u5230199\u81ea\u73af\u3002 \u6ce8\u610f198\u4e5f\u8981\u81ea\u73af\u5426\u5219\u4f1a\u5bf9200\u4ea7\u751f\u5f71\u54cd\u3002","title":"D. Frog and Portal"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/The 2018 ACM-ICPC Asia Beijing Regional Contest/#h-approximate-matching","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6a21\u5f0f\u4e32\uff0c\u5982\u679c\u4e00\u4e2a\u4e32\u7684\u4efb\u610f\u4e00\u4e2a\u4e0e\u6a21\u5f0f\u4e32\u957f\u5ea6\u76f8\u540c\u5b50\u4e32\u4e0e\u8be5\u6a21\u5f0f\u4e32\u53ea\u6709<=1\u4f4d\u4e0d\u540c\uff0c\u5219\u8fd9\u4e2a\u4e32\u4e0e\u7ed9\u7684\u6a21\u5f0f\u4e32\u8fd1\u4f3c\u5339\u914d\u3002\u6c42\u957f\u5ea6\u4e3an\uff0c\u4e14\u4e0e\u8be5\u6a21\u5f0f\u4e32\u8fd1\u4f3c\u5339\u914d\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u3002 \u88ab\u51fa\u70c2\u4e86\u7684\u9898\u2026\u2026\u628a\u539f\u4e32\u548c\u6240\u6709\u6539\u53d8\u4e00\u4f4d\u7684\u4e32\u52a0\u5165AC\u81ea\u52a8\u673a\uff0c\u7b54\u6848\u7b49\u4e8e\u5b57\u7b26\u4e32\u603b\u6570-\u4e0d\u542b\u4efb\u4f55\u6a21\u5f0f\u4e32\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\uff0c\u540e\u8005\u5728AC\u81ea\u52a8\u673a\u4e0adp\u8dd1\u4e00\u4e0b\u5c31\u597d\u3002","title":"\uff28.  Approximate Matching"},{"location":"Training Logs/2019\u8bad\u7ec3\u8d5b/The 2018 ACM-ICPC Asia Beijing Regional Contest/#i-palindromes","text":"\u8f93\u51fa\u957f\u5ea6\u4f18\u5148\u5b57\u5178\u5e8f\u7b2ck\u5927\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u56de\u6587\u4e32 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, \u2026 k\u5f88\u5927\u6240\u4ee5\u901a\u8fc7\u8ba1\u7b97\uff0c\u5b9e\u9645\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u4e3a\u4e0d\u7b97\u524d\u5bfc0\u7684\u539f\u56e0\u4f1a\u4ea7\u751f\u4e00\u4e9b\u9700\u8981\u7279\u522b\u5224\u65ad\u7684\u70b9\u3002 \u603b\u4e4b\u5c31\u662f\u9996\u5148\u5224\u65ad\u6709x\u4f4d\u6570\uff0c\u7136\u540e\u5199\u51fa\u8fd9(x/2)\u4f4d\u6570\u7684\u524d\u7f00\u8ba1\u6570\u5220\u53bb\u540e\u5269\u4e0b\u7684\u7b2c\u51e0\u4f4d\u5373\u53ef\u3002","title":"I.  Palindromes"}]}