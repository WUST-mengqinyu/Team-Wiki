{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Team Wiki General Name \uff1a\u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members : badcw , Verly , MesutZ DashBoard : Team DashBoard Personal Pages Training Logs Name Date Solved A B C D E F G H I J K L M 2019 Multi-University Training Contest 1 2019/7/22 6/13 \u00d8 O . \u00d8 O . . . \u00d8 . . . \u00d8 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 7/10 \u00d8 \u00d8 . \u00d8 \u00d8 \u00d8 . O . \u00d8 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u00d8 \u00d8 . \u00d8 O . \u00d8 \u00d8 O O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"Team Wiki"},{"location":"#team-wiki","text":"","title":"Team Wiki"},{"location":"#general","text":"Name \uff1a\u5c31\u8fd9\u4e48\u559c\u6b22\u5199\u4ee3\u7801\u5417\uff1f\u4f60\u8fd9\u4e2a\u5c0f\u79c3\u5934(2019) Members : badcw , Verly , MesutZ DashBoard : Team DashBoard","title":"General"},{"location":"#personal-pages","text":"","title":"Personal Pages"},{"location":"#training-logs","text":"Name Date Solved A B C D E F G H I J K L M 2019 Multi-University Training Contest 1 2019/7/22 6/13 \u00d8 O . \u00d8 O . . . \u00d8 . . . \u00d8 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 7/10 \u00d8 \u00d8 . \u00d8 \u00d8 \u00d8 . O . \u00d8 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u00d8 \u00d8 . \u00d8 O . \u00d8 \u00d8 O O \u5f53\u573a\u901a\u8fc7\u2003\u00d8 \u8d5b\u540e\u901a\u8fc7 \u00b7 \u5c1a\u672a\u901a\u8fc7","title":"Training Logs"},{"location":"Personal Page/Verly/","text":"\u5565\u4e5f\u6ca1\u6709","title":"Index"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/","text":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898 \u72b6\u6001\u538b\u7f29dp\u5e38\u7528\u6765\u5904\u7406\u91cf\u7ea7\u5f88\u5c0f\u7684np\u95ee\u9898 \u7531\u6b64\u8fd8\u53ef\u4ee5\u884d\u751f\u51fa\u8f6e\u5ed3\u7ebfdp\u53ca\u5728\u6b64\u4e4b\u4e0a\u7684\u63d2\u5934dp \u72b6\u6001\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u4e2d\u6709\u4e00\u4e9b\u5c0f\u64cd\u4f5c\u60f3\u5206\u4eab\u4e00\u4e0b\uff1a 1\u3001\u679a\u4e3e\u4e8c\u8fdb\u5236\u72b6\u6001\u5b50\u96c6 //for(int i = 0; i != s; i = (i-s)&s) void print(int x) { if (x < 2) printf(\"%d\", x); else { print(x >> 1); print(x % 2); } } int main() { int s = 0B1111; for (int i = 0; i != s; i = (i - s) & s) { print(i); printf(\"\\n\"); } } /*\u8f93\u51fa\u4e3a\uff1a 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 */ \u5f88\u65b9\u4fbf\u800c\u4e14\u662f\u5347\u5e8f 2\u3001\u72b6\u6001\u7684\u5404\u79cd\u57fa\u672c\u64cd\u4f5c // \u6240\u6709\u4f4d\u4e3a1 (1<<n)-1 //\u6ce8\u610f\u4f4d\u8fd0\u7b97\u6bd4\u4e00\u6b21\u8fd0\u7b97\u4f18\u5148\u7ea7\u4f4e\u6240\u4ee5\u8981\u52a0\u62ec\u53f7 // \u5224\u65ad\u7b2ci\u4f4d stat & (1<<i) // lowbit\uff0c\u72b6\u6001\u4e2d\u6700\u9760\u8fd1\u672b\u5c3e\u76841 i & -i // \u6c42\u72b6\u6001\u4e2d\u542b\u6709\u7684\u9009\u4e2d\u6570\u91cf\uff0c\u76f8\u5f53\u4e8e\u6c42\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570 int c = 0; for (int i = 0; i < n; ++i) if (stat & (1<<i)) c++; // \u6216\u8005\u76f4\u63a5\u9884\u5904\u7406\uff0c\u8fd9\u91cc\u7528\u5230\u4e86lowbit for (int i = 0; i < (1<<n); ++i) c[i] = c[i ^ (i & -i)] + 1; // \u679a\u4e3e\u9012\u63a8\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u5b9e\u968f\u4fbf\u5199\u5c31\u662f\u4e86 for (int i = 0; i < n; ++i) { if ((stat & (1<<i)) == 0) { int newstat = stat | (1<<i); } } 3\u3001\u8f6e\u5ed3\u7ebfdp\u5165\u95e8 \u8bf4\u5230\u8f6e\u5ed3\u7ebfdp\u5c31\u662f\u90a3\u4e2a\u65b9\u683c\u586b\u5145\u95ee\u9898\uff0c\u6c42\u75281*2\u7684\u65b9\u683c\u586b\u6ee1n\u00d7m\u7684\u65b9\u6848\u6570\u3002 \u3010poj 2411\u3011 \u8fd9\u91cc\u662f\u57fa\u7840\u90e8\u5206\uff0c\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7 \u8bbe\u8ba1 dp[i][j][k] \u662f\u7b2ci\u884c\u7b2cj\u5217\uff0c\u4e0a\u65b9\u72b6\u6001\u4e3ak\u7684\u65b9\u6848\u6570 \u6700\u540e\u6c42\u89e3\u7684\u662f dp[n][m][(1<<m)-1] 0000xxx xxxx000 \u8fd9\u6837\u4e00\u5f20\u56fe\uff0c\u8868\u793a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217\uff0c\u90a3\u4e48\u5b83\u6240\u9700\u8981\u7684\u72b6\u6001\u4e3a\u6807x\u7684\u4f4d\u7f6e\u662f\u5426\u586b\u5145\uff0c\u5f80\u4e0b\u9012\u63a8\u5c06\u7b2c2\u884c\u7b2c5\u5217\u586b\u5145\u4e00\u4e2a\u7ad6\u7740\u7684\u65b9\u683c\u7684\u8bdd\u5c31\u662f\uff1a cpp int newstat = stat >> 1 | (1 << m - 1) | 1 \u5176\u4e2d stat>>1 \u5c31\u662f\u628a\u72b6\u6001\u53d8\u6210\u4e86 00000xx xxxxx00 \u53bb\u6389\u4e86\u5934\u4f4d\uff0c\u589e\u52a0\u4e86\u4e00\u4f4d\uff0c\u8fd9\u5c31\u662f\u8f6e\u5ed3\u7ebfdp\uff0c\u7c7b\u4f3c\u4e00\u4e2a\u53d6\u7a97\u53e3shift\u7684\u8fc7\u7a0b\u3002\u6807x\u7684\u4f4d\u7f6e\u4e5f\u5c31\u662f\u8f6e\u5ed3\u7ebf\u3002 \u65b9\u683c\u586b\u5145\u95ee\u9898\u7684\u5177\u4f53\u89e3\u7b54\u662f\uff1a 1\u3001\u6bcf\u6b21\u679a\u4e3e\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u4e00\u662f\u6b64\u4f4d\u7f6e\u4e0d\u586b\uff0c\u4e8c\u662f\u6b64\u4f4d\u7f6e\u586b\u7ad6\u7740\u76841\u00d72\u4e5f\u5c31\u662f\u4e0a\u4e00\u884c\u540c\u5217\u548c\u6b64\u4f4d\u7f6e\uff0c\u4e09\u662f\u586b\u6a2a\u7740\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u5217\u540c\u884c\u548c\u6b64\u4f4d\u7f6e 2\u3001\u5982\u679c\u8f6e\u5ed3\u7ebf\u4e2d\u4e0a\u4e00\u884c\u540c\u5217\u7684\u4f4d\u7f6e\u4e3a\u7a7a\u5fc5\u987b\u8981\u586b\u4e0a\u4e0d\u7136\u4e4b\u540e\u5c31\u6ca1\u6709\u65b9\u6cd5\u53ef\u4ee5\u5c06\u90a3\u4e2a\u4f4d\u7f6e\u8865\u4e0a\u6240\u4ee5\u662f cpp if ((stat & 2) == 0) { int newstat = stat >> 1 | (1 << m - 1) | 1; dp[i][j][newstat] += dp[i][j - 1][stat];//i,j-1\u770b\u60c5\u51b5\u6539\u52a8\uff0c\u662f\u5b83\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u4f4d\u7f6e continue; } \u6ce8\u610f\u6b64\u65f6\u8981\u4e0d\u662f\u7b2c\u4e00\u884c\uff0c\u6839\u636e\u4f60\u4ece1\u8fd8\u662f0\u5f00\u59cb\u8bb0\u5f55\u884c\u6570\u53ef\u80fd\u6709\u8d1f\u4e0b\u6807\u7684\u98ce\u9669\u6240\u4ee5\u5224\u65ad\u4e00\u4e0bi\u662f\u5426\u5927\u4e8e\u5f00\u59cb\u884c\u4e0b\u6807 3\u3001\u5982\u679c\u4e0d\u662f\u4ee5\u4e0a\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e0d\u586b cpp int newstat = stat >> 1; dp[i][j][newstat] += dp[i][j - 1][stat]; 4\u3001\u5982\u679c\u5de6\u8fb9\u4e3a\u7a7a\u53ef\u4ee5\u586b cpp if ((stat & (1<<m - 1)) == 0) { int newstat = stat >> 1 | 3; dp[i][j][newstat] += dp[i][j - 1][stat]; } \u5f53\u7136\u4ee5\u4e0a\u53ea\u662f\u89e3\u91ca\u6027\u7684\u5199\u6cd5\uff0c\u771f\u8981\u505a\u9898\u7684\u8bdd\u663e\u7136\u53ef\u4ee5\u52a0\u4e2a\u6eda\u52a8\u6570\u7ec4\uff0c\u5b83\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4e0e\u4e0a\u4e00\u4e2a\u72b6\u6001\u76f8\u5173\uff0c\u800c\u4e14\u5199\u8d77\u6765\u53cd\u800c\u66f4\u7b80\u5355\u3002 \u6211\u4e60\u60ef\u6765\u8bb2\u662f\u628a\u6700\u8fdc\u4f4d\u770b\u505a0\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53f3\u6ea2 0000xxx xxxx000 \u7b80\u5355\u6765\u8bb2\u6bd4\u5982\u8fd9\u4e2a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217 \u90a3\u4e48\u5b83\u72b6\u6001\u5c31\u8981\u53bb\u8868\u793a\u6807\u201cx\u201d\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u628a\u5b83\u6b63\u4e0a\u65b9\uff08\u4e5f\u5c31\u662f1\uff0c5\uff09\u90a3\u4e2a\u70b9\u770b\u505a\u662f\u72b6\u6001\u7684\u6700\u540e\u4e00\u4f4d\u4e5f\u5c31\u662f0\u4f4d\uff0c\u5728\u5f80\u4e0b\u9012\u63a8\u7684\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u591f int newstat = stat >> 1 | (1<<m-1) \u76f4\u63a5\u5f97\u51fa\u4e0b\u4e00\u7ec4\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u8003\u8651\u6ea2\u51fa\u4f4d \u5982\u679c\u53cd\u7740\u8bbe\u8ba1\u72b6\u538b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u6765\u51cf\u53bb\u6ea2\u51fa\u4f4d \u4e00\u9053\u9898\uff1acodeforces 903F \u5927\u610f\uff1a\u7ed9\u4e00\u4e2a4\u00d7m\u7684\u77e9\u9635\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e3ax\uff0c\u9700\u8981\u75281\u00d71\uff0c 2\u00d72\uff0c3\u00d73\uff0c 4\u00d74\u7684\u683c\u5b50\u5c06\u5176\u586b\u5145\u4f7f\u5f97\u6240\u6709x\u4f4d\u7f6e\u90fd\u8981\u88ab\u8986\u76d6\u3002\u6bcf\u79cd\u683c\u5b50\u6709\u4e00\u4e2a\u4ee3\u4ef7\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002 \u663e\u7136\u6b64\u9898\u8f6e\u5ed3\u7ebf\u5927\u5c0f\u4e3a4*4\u4e5f\u5c31\u662f\u524d16\u4e2a\u683c\u5b50\uff0c\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u4e0b\u5f80\u4e0a\u9012\u63a8\u5373\u53ef\u3002 \u552f\u4e00\u4e0d\u597d\u5904\u7406\u7684\u662f\u8fd9\u4e2a\u4ee3\u4ef7\u95ee\u9898\u3002 \u5f3a\u70c8\u63a8\u8350\u8bfb\u4e00\u4e0bdotorya\u7684\u4ee3\u7801\uff0c\u7b80\u76f4\u795e\u4f5c\uff0c\u8bfb\u5230\u5c31\u662f\u8d5a\u5230 // https://codeforces.com/contest/903/submission/33174261 int A[5]; int val[5]; char in[4][1050]; int nxt[65536][120]; int cost[120]; int dp[1050][4096]; int main() { int N, i, j, k, l, m; scanf(\"%d\", &N); for (i = 1; i <= 4; i++) scanf(\"%d\", &A[i]); for (i = 0; i < 4; i++) scanf(\"%s\", in[i]); for (i = 1; i <= 4; i++) { for (j = 0; j < i; j++) for (k = 0; k < i; k++) val[i] |= 1 << (4 * j + k); } int p = 0; for (i = 0; i <= 1; i++) { for (j = 0; j <= 2; j++) { for (k = 0; k <= 3; k++) { for (l = 0; l <= 4; l++) { int totc = A[i] + A[j] + A[k] + A[l]; cost[p] = totc; int v = (val[i] << 3) | (val[j] << 2) | (val[k] << 1) | val[l]; for (m = 0; m < 65536; m++) nxt[m][p] = m & ~v; p++; } } } } memset(dp, 0x3f, sizeof(dp)); int st = 0; for (i = 0; i < 1; i++) { for (j = 0; j < 4; j++) { st = st * 2; if (in[j][i] == '*') st++; } } for (i = 0; i < 120; i++) dp[0][nxt[st][i]] = min(dp[0][nxt[st][i]], cost[i]); for (i = 1; i < N; i++) { int v = 0; for (j = 0; j < 4; j++) v = v * 2 + (int)(in[j][i] == '*'); for (j = 0; j < 4096; j++) { if (dp[i-1][j] > 1000000) continue; l = j * 16 + v; for (k = 0; k < 120; k++) { int x = nxt[l][k]; if (x < 4096) dp[i][x] = min(dp[i][x], dp[i - 1][j] + cost[k]); } } } return !printf(\"%d\\n\", dp[N - 1][0]); } \u9996\u5148 val[1\uff5e4] \u8868\u793a\u4e861\u00d71\u52304\u00d74\u7684\u65b9\u683c\u586b\u5145\u7684\u8f6e\u5ed3\u7ebf\u5f62\u72b6 \u7136\u540e\u9884\u5904\u7406\u4e2d\u7684\u4e00\u4e2a nxt \u6570\u7ec4\u662f\u771f\u7684\u7cbe\u9ad3\uff0c net[m][p] \u8868\u793a\u7684\u662f\u628am\u72b6\u6001\u7ecf\u8fc7p\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u72b6\u6001\uff0cp\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u7684\u4ee3\u4ef7\u4e3a$cost[p]$\uff0c\u7531\u4e8e\u72b6\u538bdp\u8fd9\u79cd\u4e1c\u897f\u771f\u7684\u662f\u4e0d\u80fd\u8868\u793a\u5f88\u591a\u72b6\u6001\uff0c\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u4e5f\u4f1a\u5f88\u5c0f\uff0c\u8fd9\u6837\u7684\u9884\u5904\u7406\u4e0d\u4ec5\u53ef\u4ee5\u5f88\u597d\u7684\u63d0\u9ad8\u4ee3\u7801\u8fd0\u884c\u6548\u7387\u8fd8\u53ef\u4ee5\u51cf\u4f4e\u6211\u4eec\u7684\u7f16\u5199\u96be\u5ea6\u3002 \u6ce8\u610f\u4ed6\u8fd9\u91cc\u8f6c\u79fb\u65b9\u5f0f\u7684\u603b\u6570\u7684\u95ee\u9898\uff0c\u5176\u5b9e\u6211\u4eec\u8bf416\u4e2a\u683c\u5b50\u75281~4\u7684\u65b9\u683c\u586b\u6ee1\u6700\u591a\u751a\u81f3\u9700\u898116\u4e2a1*1\uff0c\u4f46\u662f4\u4e2a1\u00d7 1\u5fc5\u7136\u662f\u53ea\u4e0e\u524d\u4e00\u5217\u76f8\u5173\u8054\uff0c\u6240\u4ee5\u6700\u591a4\u4e2a\u5c31\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u95ee\u9898p\u7684\u72b6\u6001\u6570\u5c31\u662f$1\u00d72\u00d73\u00d74=24$\u79cd\uff0c\u867d\u7136\u4e0d\u660e\u767d\u4ed6\u4e3a\u4f55\u8981\u5199\u6210120\u79cd\u4f46\u662f\u8fd9\u4e2anxt\u6570\u7ec4\u7684\u4f18\u8d8a\u6027\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u7b97\u540e\u9762\u7684p\u4e0d\u505a\u5904\u7406\uff0c\u5b83\u4ecd\u7136\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3anxt\u6570\u7ec4\u9ed8\u8ba4\u6307\u54110\uff0c\u518d\u600e\u4e48\u778e\u5f04\u5b83\u6700\u7ec80\u65e2\u4e0d\u662f\u7b54\u6848\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u4e2d\u95f4\u72b6\u6001\uff0c\u540c\u65f6\u4ee3\u4ef7\u4e5f\u662f0\u3002 \u7136\u540e\u53ef\u4ee5\u8bf4\u540e\u9762\u968f\u4fbf\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u90fd\u662f\u53ef\u4ee5\u5199\u7684\u4e86\uff0c\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002 4\u3001\u63d2\u5934dp \u7b49\u54ea\u5929\u4f1a\u624b\u6495\u4e86\u518d\u5199 \u5927\u6982\u6b65\u9aa4\u662f\uff1a\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf->\u8bbe\u8ba1\u63d2\u5934\u7f16\u7801->\u8003\u8651hashmap\u7684\u5b58\u50a8->\u8bbe\u8ba1\u72b6\u6001\u8f6c\u79fb->\u5f00\u59cb\u4e0a\u624b \u8fd9\u4e2a\u7b97\u6cd5\u8ba9\u6211\u89c9\u5f97\u5728\u505a\u7a0b\u5e8f\u8bbe\u8ba1\u800c\u4e0d\u662f\u7b97\u6cd5\u8bbe\u8ba1\u3002 5\u3001\u72b6\u538bdp\u5176\u4ed6\u7ec6\u8282 \u987a\u5e8f\u95ee\u9898\uff1a \u4f8b\u9898\uff1ahttps://www.cometoj.com/contest/52/problem/C \u5f88\u7cbe\u9ad3\u7684\u4e00\u9898\uff0c\u6c42\u89e3\u6240\u6709\u5408\u6cd5\u6392\u5217\u7684\u9006\u5e8f\u5bf9 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u7684\u6743\u503c\u548c \u672c\u6765\u72b6\u538b\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u76f8\u5f53\u56f0\u96be\uff0c\u56e0\u4e3a\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u5e26\u987a\u5e8f\u7684\u9009\u62e9\u95ee\u9898\uff0c\u4e00\u822c\u6765\u8bb2\u66b4\u529b\u662f\u9636\u4e58\u7ea7\u522b\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u79cd\u95ee\u9898\u5c31\u548c\u72b6\u538bdp\u89e3\u51b3\u65c5\u884c\u5546\u95ee\u9898\u4e00\u6837\uff0c\u5c06\u9636\u4e58\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u6307\u6570\u7ea7\u3002 \u5176\u5b9e\u53ef\u4ee5\u5bf9\u5df2\u9009\u62e9\u7684\u4f4d\u7f6e\u8fdb\u884c\u72b6\u538b\uff0c\u7136\u540e\u6dfb\u52a0\u5e8f\u5217\u5c31\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u8003\u8651\u987a\u5e8f\u3002 \u7528\u4e00\u4e2a dp[1<<maxn] \u8868\u793a\u67d0\u79cd\u9009\u62e9\u4e0b\u7684\u6743\u503c\u8d21\u732e \u8fd9\u6837\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u539f\u56e0\u662f\u5176\u5b9e\u5b83\u72b6\u6001\u4e2d1\u7684\u4e2a\u6570\u5c31\u662f\u5f53\u524d\u53d6\u7684\u6570\u7684\u5927\u5c0f-1\u3002 \u8003\u8651\u8f6c\u79fb\u65b9\u4e58\uff1a dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) \u5176\u4e2ds'\u8868\u793as\u7684\u5b50\u96c6\uff0ct\u8868\u793as'\u4e2d1\u7684\u4e2a\u6570\uff08\u5373\u5f53\u524d\u53d6\u7684\u6570-1\uff09\uff0cpre\u8868\u793a\u6bd4t\u5c0f\u7684\u67d0\u4e2a\u6570 \u770b\u4f3c\u4e0d\u53ef\u89e3\uff0c\u5176\u5b9e\u7531\u4e8e\u786e\u5b9a\u4e86\u4ece\u5c0f\u5230\u5927\u653e\u6570\u7684\u987a\u5e8f\uff0c\u5b83\u771f\u6b63\u6bcf\u79cd\u60c5\u51b5\u7684\u987a\u5e8f\u53cd\u800c\u53d8\u5f97\u4e0d\u90a3\u4e48\u91cd\u8981\u4e86\u3002 \u8bb0\u5f55 g[1<<maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u7684\u53ef\u80fd\u6392\u5217\u4e2a\u6570 t[1<<maxn][maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u4e0b\u67d0\u4f4d\u7f6e\u4e0a\u6240\u6709\u6392\u5217\u53ef\u80fd\u6027\u7684\u503c\u7684\u548c\u3002 \u7531\u4e8e\u4e0b\u4e00\u79cd\u72b6\u6001\u7684\u6570\u6bd4\u5df2\u6dfb\u52a0\u7684\u6570\u90fd\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u662f\u5305\u542b\u5728\u503c\u5185\u4e14\u5728\u5f53\u524d\u4f4d\u7f6e\u540e\u9762\u7684\u6570\u90fd\u662f\u9006\u5e8f\u5bf9\u3002 \u8f6c\u79fb\u5c31\u53d8\u7b80\u5355\u4e86 \u8bbes\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u4e3ay\uff0c\u679a\u4e3e\u5230\u7684\u4f4d\u7f6e\uff08 s\\bigoplus s' \uff09\u4e3ax \u5219\u6709 \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \u770b\u7684\u6709\u70b9\u4e91\u91cc\u96fe\u91cc\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709\u5b50\u96c6\u7684\u60c5\u51b5\u90fd\u7d2f\u52a0\u5230\u4e00\u8d77\uff0ct\u6570\u7ec4\u5c31\u662f\u7528\u6765\u50a8\u5b58\u6bcf\u4f4d\u4e0a\u5b50\u96c6\u6240\u6709\u60c5\u51b5\u7684\u6570\u5b57\u548c\u3002\u7136\u540e\u6bcf\u6b21\u628a\u5b83\u540e\u9762\u7684\u548c\u52a0\u5230dp\u6570\u7ec4\u5373\u53ef \u7ef4\u62a4g\u6570\u7ec4\u662f\u4e3a\u4e86\u66f4\u65b0t\u6570\u7ec4\uff0c\u6240\u4ee5\u6574\u4e2a\u4e00\u6765\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u5957\u8def\uff1a \u5bf9\u4e00\u4e2a\u5e26\u987a\u5e8f\u548c\u6743\u503c\u7684\u72b6\u538bdp\uff0c\u5f80\u5f80\u9700\u8981\u7ef4\u62a4\u4e09\u4e2a\u6743\u503c\uff1a\u72b6\u6001\u7684\u53ef\u80fd\u6027\u4e2a\u6570\u3001\u72b6\u6001\u4e0a\u6bcf\u4e00\u4f4d\u7684\u6743\u503c\u548c\u3001\u72b6\u6001\u672c\u8eab\u4ee3\u8868\u7684\u586b\u5145\u65b9\u5f0f\u3002 \u4e00\u9053\u65b0\u9898\uff1acodeforces 1152F1 \u5927\u610f\uff1a\u6709n\u4e2a\u7269\u54c1\uff0c\u4f60\u53ef\u4ee5\u9009k\u4e2a\uff0c\u6bcf\u6b21\u9009\u62e9\u7684\u662f\u4e4b\u524d\u6ca1\u6709\u9009\u8fc7\u800c\u4e14\u8bbe\u4e0a\u4e00\u4e2a\u7684\u4f4d\u7f6e\u4e3ax\uff0c\u5f53\u524d\u7269\u54c1\u53ea\u80fd\u5728 1~x+m \u4e4b\u95f4\u9009\u62e9\uff0c\u6c42\u9009k\u4e2a\u7684\u65b9\u6848\u6570 \u53c8\u662f\u6307\u5b9a\u4e86\u987a\u5e8f\uff0c\u5982\u679c\u786e\u5b9a\uff08\u5750\u6807\uff09\u4ece\u5c0f\u5f80\u5927\u53d6\uff0c\u90a3\u4e48\u5f53\u524d\u8981\u53d6\u7684\u70b9\u53ea\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5\u6709\u5173\uff0c\u8fd9\u4e2a\u70b9\u8981\u4e48\u76f4\u63a5\u662f\u6700\u540e\u4e00\u4e2a\u53d6\uff0c\u8981\u4e48\u4e4b\u524dm\u4f4d\u6709\u53d6\u8fc7\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u662f\u5b83\u4eec\u8f6c\u79fb\u8fc7\u6765\u3002 \u76f4\u63a5\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u4e3a\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5 dp[i][j][k] \u8868\u793a\u524di\u4e2a\u7269\u54c1\uff0c\u53d6\u4e86j\u4e2a\uff0ci-k\u5230i\u7684\u53d6\u6570\u60c5\u51b5\u4e3ak\u7684\u65b9\u6848\u6570\u3002 dp[i + 1][j][stat>>1] += dp[i][j][stat] \u8868\u793a\u4e0d\u53d6\u76f4\u63a5\u628a\u8f6e\u5ed3\u7ebf\u79fb\u4f4d dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) \u8868\u793a\u53d6\u6700\u540e\u4e00\u4e2a\uff0c\u65b9\u6848\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u60c5\u51b5\u76f8\u5173 \u6b64\u9898large\u7248\u672c\u7684n\u8303\u56f4\u6269\u5927\u5230\u4e861e9\uff0c\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u4e0d\u600e\u4e48\u5e38\u89c1\u7684\u64cd\u4f5c\uff1a\u8f6e\u5ed3\u7ebf+\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4e00\u822c\u6765\u8bb2\u8f6e\u5ed3\u7ebf\u7684\u7b2c\u4e00\u7ef4\u662f\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4ee3\u66ff\u7684\uff0c\u56e0\u4e3a\u5f80\u5f80\u786e\u5b9a\u4e86\u679a\u4e3e\u987a\u5e8f\u4e4b\u540e\u6bcf\u4e00\u4f4d\u5176\u5b9e\u5c31\u53ea\u4e0e\u524d\u4e00\u4f4d\u6709\u5173\uff0c\u6240\u4ee5\u51fa\u6210\u77e9\u9635\u5feb\u901f\u5e42\u4e5f\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u5f88\u602a\u5f02\u7684\u662f\u5c31\u7b97\u4e0d\u7b97\u7b2c\u4e00\u7ef4\uff0c\u5b83\u8fd8\u6709\u4e00\u7ef4\u53d6\u7684\u6570\u91cf\u548c\u4e00\u4e2amask\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\u77e9\u9635\u5feb\u901f\u5e42\u9700\u8981\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u77e9\u9635\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u4e09\u7ef4\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4f17\u6240\u5468\u77e5\u77e9\u9635\u5230\u4e8c\u7ef4\u9012\u63a8\u57fa\u672c\u65e0\u89e3\uff0c\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0c\u4f46\u662f\u672c\u9898\u7684m\u9650\u5236\u5728\u4e864\u4ee5\u5185\u800c\u4e14k\u572812\u4ee5\u5185\u3002\u5c06\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u6309mapindex\u7f29\u6210\u4e00\u7ef4\u4e4b\u540e\u77e9\u9635\u5927\u5c0f\u4e5f\u53ea\u6709 12*(1<<4) \uff0c\u603b\u4f53\u590d\u6742\u5ea6\u5c31\u662f O(logn*(k*(1<<m))^3) \uff0c\u8fd8\u662f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185 \u6b64\u9898large\u7248\u672c\u7684\u9012\u63a8\u77e9\u9635\u786e\u5b9e\u4e0d\u592a\u597d\u8ba1\u7b97\uff0c\u5177\u4f53\u65b9\u5f0f\u89c1 \u77e9\u9635\u5feb\u901f\u5e42 6\u3001\u5206\u8fa8\u72b6\u538bdp\u548c\u8d39\u7528\u6d41 \u4f17\u6240\u5468\u77e5\u8d39\u7528\u6d41\u548c\u72b6\u538bdp\u90fd\u662f\u7528\u6765\u89e3\u51b3\u5c0f\u8303\u56f4\u6570\u636e\u7684np\u95ee\u9898\u7684\u3002\u90a3\u4e48\u5f53\u62ff\u5230\u4e00\u4e2a\u9898\u770b\u7684\u6570\u636e\u8303\u56f420\u751a\u81f310\u4ee5\u5185\u600e\u6837\u5206\u8fa8\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002 \u72b6\u538bdp\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff1a\u53d6\u8fd8\u662f\u4e0d\u53d6\uff0c\u80fd\u4e0d\u80fd\u53d6\u3002 \u8d39\u7528\u6d41\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\uff1a\u4e00\u822c\u4e0d\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u95ee\u9898\u3002 \u90a3\u4e48\u9996\u5148\u5e94\u8be5\u770b\u662f\u5426\u662f\u7ebf\u6027\u6216\u987a\u5e8f\u65e0\u5173\u7684\u95ee\u9898\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u770b\u662f\u5426\u7b26\u5408\u53d6\u4e0d\u53d6\u768401\u89c4\u5219\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u72b6\u538b\u57fa\u672c\u65e0\u6cd5\u89e3\u51b3\uff0c\u8003\u8651\u8d39\u7528\u6d41\u548c\u7206\u641c\u3002","title":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#dp","text":"\u72b6\u6001\u538b\u7f29dp\u5e38\u7528\u6765\u5904\u7406\u91cf\u7ea7\u5f88\u5c0f\u7684np\u95ee\u9898 \u7531\u6b64\u8fd8\u53ef\u4ee5\u884d\u751f\u51fa\u8f6e\u5ed3\u7ebfdp\u53ca\u5728\u6b64\u4e4b\u4e0a\u7684\u63d2\u5934dp \u72b6\u6001\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u4e2d\u6709\u4e00\u4e9b\u5c0f\u64cd\u4f5c\u60f3\u5206\u4eab\u4e00\u4e0b\uff1a","title":"\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#1","text":"//for(int i = 0; i != s; i = (i-s)&s) void print(int x) { if (x < 2) printf(\"%d\", x); else { print(x >> 1); print(x % 2); } } int main() { int s = 0B1111; for (int i = 0; i != s; i = (i - s) & s) { print(i); printf(\"\\n\"); } } /*\u8f93\u51fa\u4e3a\uff1a 0 1 10 11 100 101 110 111 1000 1001 1010 1011 1100 1101 1110 */ \u5f88\u65b9\u4fbf\u800c\u4e14\u662f\u5347\u5e8f","title":"1\u3001\u679a\u4e3e\u4e8c\u8fdb\u5236\u72b6\u6001\u5b50\u96c6"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#2","text":"// \u6240\u6709\u4f4d\u4e3a1 (1<<n)-1 //\u6ce8\u610f\u4f4d\u8fd0\u7b97\u6bd4\u4e00\u6b21\u8fd0\u7b97\u4f18\u5148\u7ea7\u4f4e\u6240\u4ee5\u8981\u52a0\u62ec\u53f7 // \u5224\u65ad\u7b2ci\u4f4d stat & (1<<i) // lowbit\uff0c\u72b6\u6001\u4e2d\u6700\u9760\u8fd1\u672b\u5c3e\u76841 i & -i // \u6c42\u72b6\u6001\u4e2d\u542b\u6709\u7684\u9009\u4e2d\u6570\u91cf\uff0c\u76f8\u5f53\u4e8e\u6c42\u4e8c\u8fdb\u5236\u4f4d\u4e2d1\u7684\u4e2a\u6570 int c = 0; for (int i = 0; i < n; ++i) if (stat & (1<<i)) c++; // \u6216\u8005\u76f4\u63a5\u9884\u5904\u7406\uff0c\u8fd9\u91cc\u7528\u5230\u4e86lowbit for (int i = 0; i < (1<<n); ++i) c[i] = c[i ^ (i & -i)] + 1; // \u679a\u4e3e\u9012\u63a8\u4e0b\u4e00\u4e2a\u72b6\u6001\uff0c\u5176\u5b9e\u968f\u4fbf\u5199\u5c31\u662f\u4e86 for (int i = 0; i < n; ++i) { if ((stat & (1<<i)) == 0) { int newstat = stat | (1<<i); } }","title":"2\u3001\u72b6\u6001\u7684\u5404\u79cd\u57fa\u672c\u64cd\u4f5c"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#3dp","text":"\u8bf4\u5230\u8f6e\u5ed3\u7ebfdp\u5c31\u662f\u90a3\u4e2a\u65b9\u683c\u586b\u5145\u95ee\u9898\uff0c\u6c42\u75281*2\u7684\u65b9\u683c\u586b\u6ee1n\u00d7m\u7684\u65b9\u6848\u6570\u3002 \u3010poj 2411\u3011 \u8fd9\u91cc\u662f\u57fa\u7840\u90e8\u5206\uff0c\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7 \u8bbe\u8ba1 dp[i][j][k] \u662f\u7b2ci\u884c\u7b2cj\u5217\uff0c\u4e0a\u65b9\u72b6\u6001\u4e3ak\u7684\u65b9\u6848\u6570 \u6700\u540e\u6c42\u89e3\u7684\u662f dp[n][m][(1<<m)-1] 0000xxx xxxx000 \u8fd9\u6837\u4e00\u5f20\u56fe\uff0c\u8868\u793a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217\uff0c\u90a3\u4e48\u5b83\u6240\u9700\u8981\u7684\u72b6\u6001\u4e3a\u6807x\u7684\u4f4d\u7f6e\u662f\u5426\u586b\u5145\uff0c\u5f80\u4e0b\u9012\u63a8\u5c06\u7b2c2\u884c\u7b2c5\u5217\u586b\u5145\u4e00\u4e2a\u7ad6\u7740\u7684\u65b9\u683c\u7684\u8bdd\u5c31\u662f\uff1a cpp int newstat = stat >> 1 | (1 << m - 1) | 1 \u5176\u4e2d stat>>1 \u5c31\u662f\u628a\u72b6\u6001\u53d8\u6210\u4e86 00000xx xxxxx00 \u53bb\u6389\u4e86\u5934\u4f4d\uff0c\u589e\u52a0\u4e86\u4e00\u4f4d\uff0c\u8fd9\u5c31\u662f\u8f6e\u5ed3\u7ebfdp\uff0c\u7c7b\u4f3c\u4e00\u4e2a\u53d6\u7a97\u53e3shift\u7684\u8fc7\u7a0b\u3002\u6807x\u7684\u4f4d\u7f6e\u4e5f\u5c31\u662f\u8f6e\u5ed3\u7ebf\u3002 \u65b9\u683c\u586b\u5145\u95ee\u9898\u7684\u5177\u4f53\u89e3\u7b54\u662f\uff1a 1\u3001\u6bcf\u6b21\u679a\u4e3e\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u4e00\u662f\u6b64\u4f4d\u7f6e\u4e0d\u586b\uff0c\u4e8c\u662f\u6b64\u4f4d\u7f6e\u586b\u7ad6\u7740\u76841\u00d72\u4e5f\u5c31\u662f\u4e0a\u4e00\u884c\u540c\u5217\u548c\u6b64\u4f4d\u7f6e\uff0c\u4e09\u662f\u586b\u6a2a\u7740\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u5217\u540c\u884c\u548c\u6b64\u4f4d\u7f6e 2\u3001\u5982\u679c\u8f6e\u5ed3\u7ebf\u4e2d\u4e0a\u4e00\u884c\u540c\u5217\u7684\u4f4d\u7f6e\u4e3a\u7a7a\u5fc5\u987b\u8981\u586b\u4e0a\u4e0d\u7136\u4e4b\u540e\u5c31\u6ca1\u6709\u65b9\u6cd5\u53ef\u4ee5\u5c06\u90a3\u4e2a\u4f4d\u7f6e\u8865\u4e0a\u6240\u4ee5\u662f cpp if ((stat & 2) == 0) { int newstat = stat >> 1 | (1 << m - 1) | 1; dp[i][j][newstat] += dp[i][j - 1][stat];//i,j-1\u770b\u60c5\u51b5\u6539\u52a8\uff0c\u662f\u5b83\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u4f4d\u7f6e continue; } \u6ce8\u610f\u6b64\u65f6\u8981\u4e0d\u662f\u7b2c\u4e00\u884c\uff0c\u6839\u636e\u4f60\u4ece1\u8fd8\u662f0\u5f00\u59cb\u8bb0\u5f55\u884c\u6570\u53ef\u80fd\u6709\u8d1f\u4e0b\u6807\u7684\u98ce\u9669\u6240\u4ee5\u5224\u65ad\u4e00\u4e0bi\u662f\u5426\u5927\u4e8e\u5f00\u59cb\u884c\u4e0b\u6807 3\u3001\u5982\u679c\u4e0d\u662f\u4ee5\u4e0a\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e0d\u586b cpp int newstat = stat >> 1; dp[i][j][newstat] += dp[i][j - 1][stat]; 4\u3001\u5982\u679c\u5de6\u8fb9\u4e3a\u7a7a\u53ef\u4ee5\u586b cpp if ((stat & (1<<m - 1)) == 0) { int newstat = stat >> 1 | 3; dp[i][j][newstat] += dp[i][j - 1][stat]; } \u5f53\u7136\u4ee5\u4e0a\u53ea\u662f\u89e3\u91ca\u6027\u7684\u5199\u6cd5\uff0c\u771f\u8981\u505a\u9898\u7684\u8bdd\u663e\u7136\u53ef\u4ee5\u52a0\u4e2a\u6eda\u52a8\u6570\u7ec4\uff0c\u5b83\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4e0e\u4e0a\u4e00\u4e2a\u72b6\u6001\u76f8\u5173\uff0c\u800c\u4e14\u5199\u8d77\u6765\u53cd\u800c\u66f4\u7b80\u5355\u3002 \u6211\u4e60\u60ef\u6765\u8bb2\u662f\u628a\u6700\u8fdc\u4f4d\u770b\u505a0\u4f4d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u53f3\u6ea2 0000xxx xxxx000 \u7b80\u5355\u6765\u8bb2\u6bd4\u5982\u8fd9\u4e2a\u679a\u4e3e\u5230\u4e86\u7b2c2\u884c\u7b2c4\u5217 \u90a3\u4e48\u5b83\u72b6\u6001\u5c31\u8981\u53bb\u8868\u793a\u6807\u201cx\u201d\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u628a\u5b83\u6b63\u4e0a\u65b9\uff08\u4e5f\u5c31\u662f1\uff0c5\uff09\u90a3\u4e2a\u70b9\u770b\u505a\u662f\u72b6\u6001\u7684\u6700\u540e\u4e00\u4f4d\u4e5f\u5c31\u662f0\u4f4d\uff0c\u5728\u5f80\u4e0b\u9012\u63a8\u7684\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u591f int newstat = stat >> 1 | (1<<m-1) \u76f4\u63a5\u5f97\u51fa\u4e0b\u4e00\u7ec4\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u8003\u8651\u6ea2\u51fa\u4f4d \u5982\u679c\u53cd\u7740\u8bbe\u8ba1\u72b6\u538b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u6765\u51cf\u53bb\u6ea2\u51fa\u4f4d \u4e00\u9053\u9898\uff1acodeforces 903F \u5927\u610f\uff1a\u7ed9\u4e00\u4e2a4\u00d7m\u7684\u77e9\u9635\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e3ax\uff0c\u9700\u8981\u75281\u00d71\uff0c 2\u00d72\uff0c3\u00d73\uff0c 4\u00d74\u7684\u683c\u5b50\u5c06\u5176\u586b\u5145\u4f7f\u5f97\u6240\u6709x\u4f4d\u7f6e\u90fd\u8981\u88ab\u8986\u76d6\u3002\u6bcf\u79cd\u683c\u5b50\u6709\u4e00\u4e2a\u4ee3\u4ef7\uff0c\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002 \u663e\u7136\u6b64\u9898\u8f6e\u5ed3\u7ebf\u5927\u5c0f\u4e3a4*4\u4e5f\u5c31\u662f\u524d16\u4e2a\u683c\u5b50\uff0c\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u3001\u4ece\u4e0b\u5f80\u4e0a\u9012\u63a8\u5373\u53ef\u3002 \u552f\u4e00\u4e0d\u597d\u5904\u7406\u7684\u662f\u8fd9\u4e2a\u4ee3\u4ef7\u95ee\u9898\u3002 \u5f3a\u70c8\u63a8\u8350\u8bfb\u4e00\u4e0bdotorya\u7684\u4ee3\u7801\uff0c\u7b80\u76f4\u795e\u4f5c\uff0c\u8bfb\u5230\u5c31\u662f\u8d5a\u5230 // https://codeforces.com/contest/903/submission/33174261 int A[5]; int val[5]; char in[4][1050]; int nxt[65536][120]; int cost[120]; int dp[1050][4096]; int main() { int N, i, j, k, l, m; scanf(\"%d\", &N); for (i = 1; i <= 4; i++) scanf(\"%d\", &A[i]); for (i = 0; i < 4; i++) scanf(\"%s\", in[i]); for (i = 1; i <= 4; i++) { for (j = 0; j < i; j++) for (k = 0; k < i; k++) val[i] |= 1 << (4 * j + k); } int p = 0; for (i = 0; i <= 1; i++) { for (j = 0; j <= 2; j++) { for (k = 0; k <= 3; k++) { for (l = 0; l <= 4; l++) { int totc = A[i] + A[j] + A[k] + A[l]; cost[p] = totc; int v = (val[i] << 3) | (val[j] << 2) | (val[k] << 1) | val[l]; for (m = 0; m < 65536; m++) nxt[m][p] = m & ~v; p++; } } } } memset(dp, 0x3f, sizeof(dp)); int st = 0; for (i = 0; i < 1; i++) { for (j = 0; j < 4; j++) { st = st * 2; if (in[j][i] == '*') st++; } } for (i = 0; i < 120; i++) dp[0][nxt[st][i]] = min(dp[0][nxt[st][i]], cost[i]); for (i = 1; i < N; i++) { int v = 0; for (j = 0; j < 4; j++) v = v * 2 + (int)(in[j][i] == '*'); for (j = 0; j < 4096; j++) { if (dp[i-1][j] > 1000000) continue; l = j * 16 + v; for (k = 0; k < 120; k++) { int x = nxt[l][k]; if (x < 4096) dp[i][x] = min(dp[i][x], dp[i - 1][j] + cost[k]); } } } return !printf(\"%d\\n\", dp[N - 1][0]); } \u9996\u5148 val[1\uff5e4] \u8868\u793a\u4e861\u00d71\u52304\u00d74\u7684\u65b9\u683c\u586b\u5145\u7684\u8f6e\u5ed3\u7ebf\u5f62\u72b6 \u7136\u540e\u9884\u5904\u7406\u4e2d\u7684\u4e00\u4e2a nxt \u6570\u7ec4\u662f\u771f\u7684\u7cbe\u9ad3\uff0c net[m][p] \u8868\u793a\u7684\u662f\u628am\u72b6\u6001\u7ecf\u8fc7p\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u72b6\u6001\uff0cp\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u5f0f\u7684\u4ee3\u4ef7\u4e3a$cost[p]$\uff0c\u7531\u4e8e\u72b6\u538bdp\u8fd9\u79cd\u4e1c\u897f\u771f\u7684\u662f\u4e0d\u80fd\u8868\u793a\u5f88\u591a\u72b6\u6001\uff0c\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u4e5f\u4f1a\u5f88\u5c0f\uff0c\u8fd9\u6837\u7684\u9884\u5904\u7406\u4e0d\u4ec5\u53ef\u4ee5\u5f88\u597d\u7684\u63d0\u9ad8\u4ee3\u7801\u8fd0\u884c\u6548\u7387\u8fd8\u53ef\u4ee5\u51cf\u4f4e\u6211\u4eec\u7684\u7f16\u5199\u96be\u5ea6\u3002 \u6ce8\u610f\u4ed6\u8fd9\u91cc\u8f6c\u79fb\u65b9\u5f0f\u7684\u603b\u6570\u7684\u95ee\u9898\uff0c\u5176\u5b9e\u6211\u4eec\u8bf416\u4e2a\u683c\u5b50\u75281~4\u7684\u65b9\u683c\u586b\u6ee1\u6700\u591a\u751a\u81f3\u9700\u898116\u4e2a1*1\uff0c\u4f46\u662f4\u4e2a1\u00d7 1\u5fc5\u7136\u662f\u53ea\u4e0e\u524d\u4e00\u5217\u76f8\u5173\u8054\uff0c\u6240\u4ee5\u6700\u591a4\u4e2a\u5c31\u53ef\u4ee5\u89e3\u51b3\u6240\u6709\u95ee\u9898p\u7684\u72b6\u6001\u6570\u5c31\u662f$1\u00d72\u00d73\u00d74=24$\u79cd\uff0c\u867d\u7136\u4e0d\u660e\u767d\u4ed6\u4e3a\u4f55\u8981\u5199\u6210120\u79cd\u4f46\u662f\u8fd9\u4e2anxt\u6570\u7ec4\u7684\u4f18\u8d8a\u6027\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u7b97\u540e\u9762\u7684p\u4e0d\u505a\u5904\u7406\uff0c\u5b83\u4ecd\u7136\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3anxt\u6570\u7ec4\u9ed8\u8ba4\u6307\u54110\uff0c\u518d\u600e\u4e48\u778e\u5f04\u5b83\u6700\u7ec80\u65e2\u4e0d\u662f\u7b54\u6848\uff0c\u4e5f\u4e0d\u80fd\u6539\u53d8\u4e2d\u95f4\u72b6\u6001\uff0c\u540c\u65f6\u4ee3\u4ef7\u4e5f\u662f0\u3002 \u7136\u540e\u53ef\u4ee5\u8bf4\u540e\u9762\u968f\u4fbf\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u90fd\u662f\u53ef\u4ee5\u5199\u7684\u4e86\uff0c\u4e0d\u8fc7\u591a\u8d58\u8ff0\u3002","title":"3\u3001\u8f6e\u5ed3\u7ebfdp\u5165\u95e8"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#4dp","text":"\u7b49\u54ea\u5929\u4f1a\u624b\u6495\u4e86\u518d\u5199 \u5927\u6982\u6b65\u9aa4\u662f\uff1a\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf->\u8bbe\u8ba1\u63d2\u5934\u7f16\u7801->\u8003\u8651hashmap\u7684\u5b58\u50a8->\u8bbe\u8ba1\u72b6\u6001\u8f6c\u79fb->\u5f00\u59cb\u4e0a\u624b \u8fd9\u4e2a\u7b97\u6cd5\u8ba9\u6211\u89c9\u5f97\u5728\u505a\u7a0b\u5e8f\u8bbe\u8ba1\u800c\u4e0d\u662f\u7b97\u6cd5\u8bbe\u8ba1\u3002","title":"4\u3001\u63d2\u5934dp"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#5dp","text":"\u987a\u5e8f\u95ee\u9898\uff1a \u4f8b\u9898\uff1ahttps://www.cometoj.com/contest/52/problem/C \u5f88\u7cbe\u9ad3\u7684\u4e00\u9898\uff0c\u6c42\u89e3\u6240\u6709\u5408\u6cd5\u6392\u5217\u7684\u9006\u5e8f\u5bf9 \u2223i\u2212j\u2223 \u00d7 \u2223pos_j\u2212pos_i\u2223 \u7684\u6743\u503c\u548c \u672c\u6765\u72b6\u538b\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u76f8\u5f53\u56f0\u96be\uff0c\u56e0\u4e3a\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u5e26\u987a\u5e8f\u7684\u9009\u62e9\u95ee\u9898\uff0c\u4e00\u822c\u6765\u8bb2\u66b4\u529b\u662f\u9636\u4e58\u7ea7\u522b\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u79cd\u95ee\u9898\u5c31\u548c\u72b6\u538bdp\u89e3\u51b3\u65c5\u884c\u5546\u95ee\u9898\u4e00\u6837\uff0c\u5c06\u9636\u4e58\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u6307\u6570\u7ea7\u3002 \u5176\u5b9e\u53ef\u4ee5\u5bf9\u5df2\u9009\u62e9\u7684\u4f4d\u7f6e\u8fdb\u884c\u72b6\u538b\uff0c\u7136\u540e\u6dfb\u52a0\u5e8f\u5217\u5c31\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u8003\u8651\u987a\u5e8f\u3002 \u7528\u4e00\u4e2a dp[1<<maxn] \u8868\u793a\u67d0\u79cd\u9009\u62e9\u4e0b\u7684\u6743\u503c\u8d21\u732e \u8fd9\u6837\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u539f\u56e0\u662f\u5176\u5b9e\u5b83\u72b6\u6001\u4e2d1\u7684\u4e2a\u6570\u5c31\u662f\u5f53\u524d\u53d6\u7684\u6570\u7684\u5927\u5c0f-1\u3002 \u8003\u8651\u8f6c\u79fb\u65b9\u4e58\uff1a dp[s] = \\sum (dp[s'] + \\sum_{x=s \\bigoplus s'+1}^n(pre - t)*(x - s\\bigoplus s')) \u5176\u4e2ds'\u8868\u793as\u7684\u5b50\u96c6\uff0ct\u8868\u793as'\u4e2d1\u7684\u4e2a\u6570\uff08\u5373\u5f53\u524d\u53d6\u7684\u6570-1\uff09\uff0cpre\u8868\u793a\u6bd4t\u5c0f\u7684\u67d0\u4e2a\u6570 \u770b\u4f3c\u4e0d\u53ef\u89e3\uff0c\u5176\u5b9e\u7531\u4e8e\u786e\u5b9a\u4e86\u4ece\u5c0f\u5230\u5927\u653e\u6570\u7684\u987a\u5e8f\uff0c\u5b83\u771f\u6b63\u6bcf\u79cd\u60c5\u51b5\u7684\u987a\u5e8f\u53cd\u800c\u53d8\u5f97\u4e0d\u90a3\u4e48\u91cd\u8981\u4e86\u3002 \u8bb0\u5f55 g[1<<maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u7684\u53ef\u80fd\u6392\u5217\u4e2a\u6570 t[1<<maxn][maxn] \u8868\u793a\u67d0\u79cd\u72b6\u6001\u4e0b\u67d0\u4f4d\u7f6e\u4e0a\u6240\u6709\u6392\u5217\u53ef\u80fd\u6027\u7684\u503c\u7684\u548c\u3002 \u7531\u4e8e\u4e0b\u4e00\u79cd\u72b6\u6001\u7684\u6570\u6bd4\u5df2\u6dfb\u52a0\u7684\u6570\u90fd\u5927\uff0c\u6240\u4ee5\u53ea\u8981\u662f\u5305\u542b\u5728\u503c\u5185\u4e14\u5728\u5f53\u524d\u4f4d\u7f6e\u540e\u9762\u7684\u6570\u90fd\u662f\u9006\u5e8f\u5bf9\u3002 \u8f6c\u79fb\u5c31\u53d8\u7b80\u5355\u4e86 \u8bbes\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u4e3ay\uff0c\u679a\u4e3e\u5230\u7684\u4f4d\u7f6e\uff08 s\\bigoplus s' \uff09\u4e3ax \u5219\u6709 \\begin{cases} dp[s] = \\sum_{s'} (dp[s'] + \\sum_{z>x\uff0cz\\in s'} (z - x)*(g[s]*y - t[s][z])) \\\\ t[s][i] = \\sum_{s'}(t[s][i]) & \\text{i != x} \\\\ t[s][x] = \\sum_{s'}(g[s]*y + t[s][x]) \\\\ g[s] = \\sum_{s'}g[s'] \\end{cases} \u770b\u7684\u6709\u70b9\u4e91\u91cc\u96fe\u91cc\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709\u5b50\u96c6\u7684\u60c5\u51b5\u90fd\u7d2f\u52a0\u5230\u4e00\u8d77\uff0ct\u6570\u7ec4\u5c31\u662f\u7528\u6765\u50a8\u5b58\u6bcf\u4f4d\u4e0a\u5b50\u96c6\u6240\u6709\u60c5\u51b5\u7684\u6570\u5b57\u548c\u3002\u7136\u540e\u6bcf\u6b21\u628a\u5b83\u540e\u9762\u7684\u548c\u52a0\u5230dp\u6570\u7ec4\u5373\u53ef \u7ef4\u62a4g\u6570\u7ec4\u662f\u4e3a\u4e86\u66f4\u65b0t\u6570\u7ec4\uff0c\u6240\u4ee5\u6574\u4e2a\u4e00\u6765\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u5957\u8def\uff1a \u5bf9\u4e00\u4e2a\u5e26\u987a\u5e8f\u548c\u6743\u503c\u7684\u72b6\u538bdp\uff0c\u5f80\u5f80\u9700\u8981\u7ef4\u62a4\u4e09\u4e2a\u6743\u503c\uff1a\u72b6\u6001\u7684\u53ef\u80fd\u6027\u4e2a\u6570\u3001\u72b6\u6001\u4e0a\u6bcf\u4e00\u4f4d\u7684\u6743\u503c\u548c\u3001\u72b6\u6001\u672c\u8eab\u4ee3\u8868\u7684\u586b\u5145\u65b9\u5f0f\u3002 \u4e00\u9053\u65b0\u9898\uff1acodeforces 1152F1 \u5927\u610f\uff1a\u6709n\u4e2a\u7269\u54c1\uff0c\u4f60\u53ef\u4ee5\u9009k\u4e2a\uff0c\u6bcf\u6b21\u9009\u62e9\u7684\u662f\u4e4b\u524d\u6ca1\u6709\u9009\u8fc7\u800c\u4e14\u8bbe\u4e0a\u4e00\u4e2a\u7684\u4f4d\u7f6e\u4e3ax\uff0c\u5f53\u524d\u7269\u54c1\u53ea\u80fd\u5728 1~x+m \u4e4b\u95f4\u9009\u62e9\uff0c\u6c42\u9009k\u4e2a\u7684\u65b9\u6848\u6570 \u53c8\u662f\u6307\u5b9a\u4e86\u987a\u5e8f\uff0c\u5982\u679c\u786e\u5b9a\uff08\u5750\u6807\uff09\u4ece\u5c0f\u5f80\u5927\u53d6\uff0c\u90a3\u4e48\u5f53\u524d\u8981\u53d6\u7684\u70b9\u53ea\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5\u6709\u5173\uff0c\u8fd9\u4e2a\u70b9\u8981\u4e48\u76f4\u63a5\u662f\u6700\u540e\u4e00\u4e2a\u53d6\uff0c\u8981\u4e48\u4e4b\u524dm\u4f4d\u6709\u53d6\u8fc7\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u662f\u5b83\u4eec\u8f6c\u79fb\u8fc7\u6765\u3002 \u76f4\u63a5\u8bbe\u8ba1\u8f6e\u5ed3\u7ebf\u4e3a\u524dm\u4e2a\u4f4d\u7f6e\u7684\u53d6\u6570\u60c5\u51b5 dp[i][j][k] \u8868\u793a\u524di\u4e2a\u7269\u54c1\uff0c\u53d6\u4e86j\u4e2a\uff0ci-k\u5230i\u7684\u53d6\u6570\u60c5\u51b5\u4e3ak\u7684\u65b9\u6848\u6570\u3002 dp[i + 1][j][stat>>1] += dp[i][j][stat] \u8868\u793a\u4e0d\u53d6\u76f4\u63a5\u628a\u8f6e\u5ed3\u7ebf\u79fb\u4f4d dp[i + 1][j + 1][stat>>1|(1<<m-1)] += dp[i][j][stat] * (bitcount(stat) + 1) \u8868\u793a\u53d6\u6700\u540e\u4e00\u4e2a\uff0c\u65b9\u6848\u4e0e\u524dm\u4e2a\u4f4d\u7f6e\u60c5\u51b5\u76f8\u5173 \u6b64\u9898large\u7248\u672c\u7684n\u8303\u56f4\u6269\u5927\u5230\u4e861e9\uff0c\u5c31\u6d89\u53ca\u5230\u4e00\u4e2a\u4e0d\u600e\u4e48\u5e38\u89c1\u7684\u64cd\u4f5c\uff1a\u8f6e\u5ed3\u7ebf+\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4e00\u822c\u6765\u8bb2\u8f6e\u5ed3\u7ebf\u7684\u7b2c\u4e00\u7ef4\u662f\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u4ee3\u66ff\u7684\uff0c\u56e0\u4e3a\u5f80\u5f80\u786e\u5b9a\u4e86\u679a\u4e3e\u987a\u5e8f\u4e4b\u540e\u6bcf\u4e00\u4f4d\u5176\u5b9e\u5c31\u53ea\u4e0e\u524d\u4e00\u4f4d\u6709\u5173\uff0c\u6240\u4ee5\u51fa\u6210\u77e9\u9635\u5feb\u901f\u5e42\u4e5f\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u5f88\u602a\u5f02\u7684\u662f\u5c31\u7b97\u4e0d\u7b97\u7b2c\u4e00\u7ef4\uff0c\u5b83\u8fd8\u6709\u4e00\u7ef4\u53d6\u7684\u6570\u91cf\u548c\u4e00\u4e2amask\uff0c\u90a3\u4e48\u8fd9\u6837\u4e00\u6765\u77e9\u9635\u5feb\u901f\u5e42\u9700\u8981\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u77e9\u9635\u672c\u8eab\uff0c\u4e5f\u5c31\u662f\u4e09\u7ef4\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u4f17\u6240\u5468\u77e5\u77e9\u9635\u5230\u4e8c\u7ef4\u9012\u63a8\u57fa\u672c\u65e0\u89e3\uff0c\u590d\u6742\u5ea6\u80fd\u4e0a\u5929\uff0c\u4f46\u662f\u672c\u9898\u7684m\u9650\u5236\u5728\u4e864\u4ee5\u5185\u800c\u4e14k\u572812\u4ee5\u5185\u3002\u5c06\u8fd9\u4e2a\u4e8c\u7ef4\u77e9\u9635\u6309mapindex\u7f29\u6210\u4e00\u7ef4\u4e4b\u540e\u77e9\u9635\u5927\u5c0f\u4e5f\u53ea\u6709 12*(1<<4) \uff0c\u603b\u4f53\u590d\u6742\u5ea6\u5c31\u662f O(logn*(k*(1<<m))^3) \uff0c\u8fd8\u662f\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u4e4b\u5185 \u6b64\u9898large\u7248\u672c\u7684\u9012\u63a8\u77e9\u9635\u786e\u5b9e\u4e0d\u592a\u597d\u8ba1\u7b97\uff0c\u5177\u4f53\u65b9\u5f0f\u89c1 \u77e9\u9635\u5feb\u901f\u5e42","title":"5\u3001\u72b6\u538bdp\u5176\u4ed6\u7ec6\u8282"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u72b6\u6001\u538b\u7f29dp\u7684\u76f8\u5173\u95ee\u9898/#6dp","text":"\u4f17\u6240\u5468\u77e5\u8d39\u7528\u6d41\u548c\u72b6\u538bdp\u90fd\u662f\u7528\u6765\u89e3\u51b3\u5c0f\u8303\u56f4\u6570\u636e\u7684np\u95ee\u9898\u7684\u3002\u90a3\u4e48\u5f53\u62ff\u5230\u4e00\u4e2a\u9898\u770b\u7684\u6570\u636e\u8303\u56f420\u751a\u81f310\u4ee5\u5185\u600e\u6837\u5206\u8fa8\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002 \u72b6\u538bdp\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff1a\u53d6\u8fd8\u662f\u4e0d\u53d6\uff0c\u80fd\u4e0d\u80fd\u53d6\u3002 \u8d39\u7528\u6d41\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u70b9\uff1a\u4e00\u822c\u4e0d\u7528\u6765\u89e3\u51b3\u7ebf\u6027\u95ee\u9898\u3002 \u90a3\u4e48\u9996\u5148\u5e94\u8be5\u770b\u662f\u5426\u662f\u7ebf\u6027\u6216\u987a\u5e8f\u65e0\u5173\u7684\u95ee\u9898\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u770b\u662f\u5426\u7b26\u5408\u53d6\u4e0d\u53d6\u768401\u89c4\u5219\uff0c\u5982\u679c\u662f\u5b9a\u662f\u72b6\u538bdp\uff0c\u5426\u5219\u72b6\u538b\u57fa\u672c\u65e0\u6cd5\u89e3\u51b3\uff0c\u8003\u8651\u8d39\u7528\u6d41\u548c\u7206\u641c\u3002","title":"6\u3001\u5206\u8fa8\u72b6\u538bdp\u548c\u8d39\u7528\u6d41"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/","text":"\u77e9\u9635\u5feb\u901f\u5e42 \u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u80fd\u7528\u6eda\u52a8\u4f18\u5316\u7684\u524d\u540e\u9879\u5173\u8054\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff0c\u800c\u4e14\u4e00\u822c\u9012\u63a8\u9879\u6570\u8fc7\u5927\u4f7f\u7528\u666e\u901a\u679a\u4e3e\u4e0d\u80fd\u89e3\u51b3\u3002 \u590d\u6742\u5ea6\uff1a \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u57fa\u672c\u601d\u60f3\u548c\u524d\u7f6e\u6280\u80fd\uff1a\u77e9\u9635\u4e58\u6cd5 1\u3001\u77e9\u9635\u5feb\u901f\u5e42\u7684\u57fa\u672c\u8fc7\u7a0b \u6784\u9020\u521d\u59cb\u77e9\u9635 \u6784\u9020\u9012\u63a8\u77e9\u9635 \u9012\u63a8\u77e9\u9635\u4f7f\u7528\u5feb\u901f\u5e42\u7b97\u6cd5\u9012\u63a8\u51fa\u7ed3\u679c\u77e9\u9635 \u521d\u59cb\u77e9\u9635\u4e0e\u7ed3\u679c\u77e9\u9635\u76f8\u4e58\u5f97\u5230\u6700\u7ec8\u7ed3\u679c \u51e0\u5927\u7279\u70b9 \u521d\u59cb\u77e9\u9635\u53ea\u6709\u4e00\u884c\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u4e00\u5217\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7684\u65b9\u4fbf\u6027\u548c\u4e60\u60ef\u95ee\u9898\u5e38\u91c7\u7528\u4e00\u884c\uff09\uff0c\u5217\u6570\u7531\u9012\u63a8\u5f0f\u51b3\u5b9a \u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\uff0c\u884c\u5217\u6570\u4e0e\u521d\u59cb\u77e9\u9635\u5217\u6570\u76f8\u540c \u5feb\u901f\u5e42\u771f\u7684\u662f\u5feb\u901f\u5e42\uff0c\u5c31\u662f\u6309\u7167\u500d\u589e\u7684\u601d\u60f3\u5c06\u9012\u63a8\u77e9\u9635\u53d8\u6210n\u6b21\u65b9\uff0c\u7531\u4e8e\u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\u6240\u4ee5\u662f\u5b58\u5728\u6b21\u65b9\u7684\u3002 \u7531\u4e8e\u5feb\u901f\u5e42\u4e00\u5f00\u59cb\u9700\u8981\u4e00\u4e2a\u5e7a\u5143\u4f5c\u4e3a\u521d\u59cb\u7ed3\u679c\uff0c\u5e38\u5e38\u76f4\u63a5\u628a\u521d\u59cb\u77e9\u9635\u66ff\u6362\u4e0a\u53bb\uff0c\u5e26\u5165\u8ba1\u7b97\uff0c\u6700\u7ec8\u5feb\u901f\u5e42\u7684\u7ed3\u679c\u5c31\u662f\u89e3\u3002 2\u3001\u4f8b\u9898 \u6c42\u5927fib\u6570 \u4f17\u6240\u5468\u77e5 fib[i]=fib[i-1]+fib[i-2] \uff0c\u6240\u4ee5\u76f4\u63a5\u6784\u9020\u4e0a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u50cf\u8fd9\u79cd\u7b80\u5355\u7684\u52a0\u51cf\u9012\u63a8\u7684\u8bdd\u7ef4\u6570\u5c31\u53ef\u4ee5\u7b49\u4e8e\u9012\u63a8\u5f0f\u4e2d\u7684\u9879\u6570 \u521d\u59cb\u77e9\u9635 fib[0] = 1, fib[1] = 1 \uff0c\u9012\u63a8\u77e9\u9635 \\begin{bmatrix} 0&1\\\\ 1&1\\\\ \\end{bmatrix} \u90fd\u77e5\u9053\u5de6\u884c\u4e58\u53f3\u5217\uff0c\u6240\u4ee5\u53f3\u8fb9\u7684\u7b2c\u4e00\u5217\u548c\u5de6\u8fb9\u7684\u7b2c\u4e00\u884c\u5c31\u6784\u6210\u4e86\u4e0b\u4e00\u4e2a\u9012\u63a8\u7684\u6570\uff0c\u4ece fib[0] fib[1] \u53d8\u6210 fib[1] fib[2] \uff0c\u8fd9\u6837\u4ee5\u6765\u5c31\u53ef\u4ee5\u5199\u51fa\u9012\u63a8\u77e9\u9635\u4e86\u3002 \u6c42 f[n] = f[n-1] + n^3 \u5177\u4f53\u662f\u4e0d\u662f\u6211\u4e5f\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f46\u662f\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff0c\u50cf\u8fd9\u79cd\u5e26\u975e\u5e38\u6570\u6b21\u65b9\u7684\u4e1c\u897f\u8bb2\u4e2a\u9053\u7406\u786e\u5b9e\u6bd4\u8f83\u96be\u6784\u9020\u9012\u63a8\u77e9\u9635 \u7531\u4e8e (n+1)^3=n^3+3*n^2+3*n+1 \uff0c\u4e0d\u4f1a\u53ef\u4ee5\u5b66\u4e8c\u9879\u5f0f\u5b9a\u7406 \u6784\u9020 \\begin{cases} p[n]=1 \\\\ g1[n]=g1[n-1]*3+p[n-1] \\\\ g2[n]=g2[n-1]*3+g1[n-1] \\\\ g3[n]=g3[n-1]+g2[n] \\\\ f[n]=f[n-1]+g3[n-1] \\end{cases} \u5373\u53ef\u3002 \u6c42\u9ad8\u7ef4\u77e9\u9635\u7684\u77e9\u9635\u5feb\u901f\u5e42 \u5177\u4f53\u6765\u8bb2\u662f\u521d\u59cb\u77e9\u9635\u4e0d\u6b62\u4e00\u7ef4 \u6709\u6ca1\u6709\u89e3\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u8fd9\u662f\u4e2a\u663e\u7136\u4e0d\u662f\u51e0\u4e2a\u5c0f\u65f6\u80fd\u5199\u51fa\u6765\u7684\u7b97\u6cd5\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u6210\u6307\u6570\u7ea7\u66b4\u6da8 \u5177\u4f53\u6765\u8bb2\u5c31\u662f\u628a\u4e8c\u7ef4\u53d8\u6210\u4e00\u7ef4\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u7f16\u53f7\u4e4b\u540e\u5c06\u77e9\u9635\u5316\u6210\u4e00\u7ef4\u518d\u6c42\u89e3\u3002(codeforces 1152F2) 3\u3001\u6a21\u677f \u4e00\u5957\u81ea\u7528\u7684\u6a21\u677f\uff0c\u4e0d\u7b97\u7b80\u4fbf\u4f46\u662f\u6bd5\u7adf\u4eb2\u624b\u5199\u7684\u5f88\u719f\u6089\u3002 const int maxn = 10; const int mod = 1e9+7; int sz; struct matrix { ll gg[maxn][maxn]; matrix() {memset(gg, 0, sizeof(gg));} void show() { printf(\"*\\n\"); for (int i = 0; i < 2; ++i) { for (int j = 0; j < 2; ++j) { printf(\"%lld \", gg[i][j]); } printf(\"\\n\"); } } int tr() { int res = 0; // for (int i = 0; i < n; ++i) { // res += gg[i][i]; // } return res; } }t1, res; int n, m, k; //a * b\uff0c x\u4e3aa\u7684\u5217\u6570\uff0c y\u4e3ab\u7684\u884c\u6570\uff0ck\u4e3aa\u7684\u884c\u548cb\u7684\u5217\u6570 matrix multiply(matrix a, matrix b, int x, int y, int kk) { matrix temp;//\u6784\u9020\u51fd\u6570\u6e05\u96f6 memset(temp.gg, 0, sizeof(temp.gg)); for (int i = 0; i < x; ++i) { for (int j = 0; j < y; ++j) { for (int k = 0; k < kk; ++k) { temp.gg[i][j] = (temp.gg[i][j] + a.gg[i][k] * b.gg[k][j]) % mod; } } } return temp; } void quickSolve(ll k) { while (k > 0) { if (k & 1) { res = multiply(res, t1, 1, sz, sz); } t1 = multiply(t1, t1, sz, sz, sz); k >>= 1; } }","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#_1","text":"\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u80fd\u7528\u6eda\u52a8\u4f18\u5316\u7684\u524d\u540e\u9879\u5173\u8054\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\uff0c\u800c\u4e14\u4e00\u822c\u9012\u63a8\u9879\u6570\u8fc7\u5927\u4f7f\u7528\u666e\u901a\u679a\u4e3e\u4e0d\u80fd\u89e3\u51b3\u3002 \u590d\u6742\u5ea6\uff1a \u6784\u9020\u77e9\u9635\u7684\u957f\u5ea6^3*log(\u9012\u63a8\u9879\u6570) \u57fa\u672c\u601d\u60f3\u548c\u524d\u7f6e\u6280\u80fd\uff1a\u77e9\u9635\u4e58\u6cd5","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#1","text":"\u6784\u9020\u521d\u59cb\u77e9\u9635 \u6784\u9020\u9012\u63a8\u77e9\u9635 \u9012\u63a8\u77e9\u9635\u4f7f\u7528\u5feb\u901f\u5e42\u7b97\u6cd5\u9012\u63a8\u51fa\u7ed3\u679c\u77e9\u9635 \u521d\u59cb\u77e9\u9635\u4e0e\u7ed3\u679c\u77e9\u9635\u76f8\u4e58\u5f97\u5230\u6700\u7ec8\u7ed3\u679c \u51e0\u5927\u7279\u70b9 \u521d\u59cb\u77e9\u9635\u53ea\u6709\u4e00\u884c\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u4e00\u5217\uff0c\u4f46\u662f\u7531\u4e8e\u6570\u7ec4\u7684\u65b9\u4fbf\u6027\u548c\u4e60\u60ef\u95ee\u9898\u5e38\u91c7\u7528\u4e00\u884c\uff09\uff0c\u5217\u6570\u7531\u9012\u63a8\u5f0f\u51b3\u5b9a \u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\uff0c\u884c\u5217\u6570\u4e0e\u521d\u59cb\u77e9\u9635\u5217\u6570\u76f8\u540c \u5feb\u901f\u5e42\u771f\u7684\u662f\u5feb\u901f\u5e42\uff0c\u5c31\u662f\u6309\u7167\u500d\u589e\u7684\u601d\u60f3\u5c06\u9012\u63a8\u77e9\u9635\u53d8\u6210n\u6b21\u65b9\uff0c\u7531\u4e8e\u9012\u63a8\u77e9\u9635\u662f\u65b9\u9635\u6240\u4ee5\u662f\u5b58\u5728\u6b21\u65b9\u7684\u3002 \u7531\u4e8e\u5feb\u901f\u5e42\u4e00\u5f00\u59cb\u9700\u8981\u4e00\u4e2a\u5e7a\u5143\u4f5c\u4e3a\u521d\u59cb\u7ed3\u679c\uff0c\u5e38\u5e38\u76f4\u63a5\u628a\u521d\u59cb\u77e9\u9635\u66ff\u6362\u4e0a\u53bb\uff0c\u5e26\u5165\u8ba1\u7b97\uff0c\u6700\u7ec8\u5feb\u901f\u5e42\u7684\u7ed3\u679c\u5c31\u662f\u89e3\u3002","title":"1\u3001\u77e9\u9635\u5feb\u901f\u5e42\u7684\u57fa\u672c\u8fc7\u7a0b"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#2","text":"","title":"2\u3001\u4f8b\u9898"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#fib","text":"\u4f17\u6240\u5468\u77e5 fib[i]=fib[i-1]+fib[i-2] \uff0c\u6240\u4ee5\u76f4\u63a5\u6784\u9020\u4e0a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u50cf\u8fd9\u79cd\u7b80\u5355\u7684\u52a0\u51cf\u9012\u63a8\u7684\u8bdd\u7ef4\u6570\u5c31\u53ef\u4ee5\u7b49\u4e8e\u9012\u63a8\u5f0f\u4e2d\u7684\u9879\u6570 \u521d\u59cb\u77e9\u9635 fib[0] = 1, fib[1] = 1 \uff0c\u9012\u63a8\u77e9\u9635 \\begin{bmatrix} 0&1\\\\ 1&1\\\\ \\end{bmatrix} \u90fd\u77e5\u9053\u5de6\u884c\u4e58\u53f3\u5217\uff0c\u6240\u4ee5\u53f3\u8fb9\u7684\u7b2c\u4e00\u5217\u548c\u5de6\u8fb9\u7684\u7b2c\u4e00\u884c\u5c31\u6784\u6210\u4e86\u4e0b\u4e00\u4e2a\u9012\u63a8\u7684\u6570\uff0c\u4ece fib[0] fib[1] \u53d8\u6210 fib[1] fib[2] \uff0c\u8fd9\u6837\u4ee5\u6765\u5c31\u53ef\u4ee5\u5199\u51fa\u9012\u63a8\u77e9\u9635\u4e86\u3002","title":"\u6c42\u5927fib\u6570"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#fn-fn-1-n3","text":"\u5177\u4f53\u662f\u4e0d\u662f\u6211\u4e5f\u4e0d\u8bb0\u5f97\u4e86\uff0c\u4f46\u662f\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff0c\u50cf\u8fd9\u79cd\u5e26\u975e\u5e38\u6570\u6b21\u65b9\u7684\u4e1c\u897f\u8bb2\u4e2a\u9053\u7406\u786e\u5b9e\u6bd4\u8f83\u96be\u6784\u9020\u9012\u63a8\u77e9\u9635 \u7531\u4e8e (n+1)^3=n^3+3*n^2+3*n+1 \uff0c\u4e0d\u4f1a\u53ef\u4ee5\u5b66\u4e8c\u9879\u5f0f\u5b9a\u7406 \u6784\u9020 \\begin{cases} p[n]=1 \\\\ g1[n]=g1[n-1]*3+p[n-1] \\\\ g2[n]=g2[n-1]*3+g1[n-1] \\\\ g3[n]=g3[n-1]+g2[n] \\\\ f[n]=f[n-1]+g3[n-1] \\end{cases} \u5373\u53ef\u3002","title":"\u6c42f[n] = f[n-1] + n^3"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#_2","text":"\u5177\u4f53\u6765\u8bb2\u662f\u521d\u59cb\u77e9\u9635\u4e0d\u6b62\u4e00\u7ef4 \u6709\u6ca1\u6709\u89e3\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u8fd9\u662f\u4e2a\u663e\u7136\u4e0d\u662f\u51e0\u4e2a\u5c0f\u65f6\u80fd\u5199\u51fa\u6765\u7684\u7b97\u6cd5\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u800c\u4e14\u590d\u6742\u5ea6\u6210\u6307\u6570\u7ea7\u66b4\u6da8 \u5177\u4f53\u6765\u8bb2\u5c31\u662f\u628a\u4e8c\u7ef4\u53d8\u6210\u4e00\u7ef4\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u4e0a\u5230\u4e0b\u4f9d\u6b21\u7f16\u53f7\u4e4b\u540e\u5c06\u77e9\u9635\u5316\u6210\u4e00\u7ef4\u518d\u6c42\u89e3\u3002(codeforces 1152F2)","title":"\u6c42\u9ad8\u7ef4\u77e9\u9635\u7684\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"Personal Page/badcw/\u52a8\u6001\u89c4\u5212/\u77e9\u9635\u5feb\u901f\u5e42dp/#3","text":"\u4e00\u5957\u81ea\u7528\u7684\u6a21\u677f\uff0c\u4e0d\u7b97\u7b80\u4fbf\u4f46\u662f\u6bd5\u7adf\u4eb2\u624b\u5199\u7684\u5f88\u719f\u6089\u3002 const int maxn = 10; const int mod = 1e9+7; int sz; struct matrix { ll gg[maxn][maxn]; matrix() {memset(gg, 0, sizeof(gg));} void show() { printf(\"*\\n\"); for (int i = 0; i < 2; ++i) { for (int j = 0; j < 2; ++j) { printf(\"%lld \", gg[i][j]); } printf(\"\\n\"); } } int tr() { int res = 0; // for (int i = 0; i < n; ++i) { // res += gg[i][i]; // } return res; } }t1, res; int n, m, k; //a * b\uff0c x\u4e3aa\u7684\u5217\u6570\uff0c y\u4e3ab\u7684\u884c\u6570\uff0ck\u4e3aa\u7684\u884c\u548cb\u7684\u5217\u6570 matrix multiply(matrix a, matrix b, int x, int y, int kk) { matrix temp;//\u6784\u9020\u51fd\u6570\u6e05\u96f6 memset(temp.gg, 0, sizeof(temp.gg)); for (int i = 0; i < x; ++i) { for (int j = 0; j < y; ++j) { for (int k = 0; k < kk; ++k) { temp.gg[i][j] = (temp.gg[i][j] + a.gg[i][k] * b.gg[k][j]) % mod; } } } return temp; } void quickSolve(ll k) { while (k > 0) { if (k & 1) { res = multiply(res, t1, 1, sz, sz); } t1 = multiply(t1, t1, sz, sz, sz); k >>= 1; } }","title":"3\u3001\u6a21\u677f"},{"location":"Training Logs/2019 Multi-University Training Contest/2019 Multi-University Training Contest 1/","text":"Name Date Solved A B C D E F G H I J K L M 2019 Multi-University Training Contest 1 2019/7/22 6/13 \u00d8 O . \u00d8 O . . . \u00d8 . . . \u00d8","title":"2019 Multi University Training Contest 1"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/","text":"Name Date Solved A B C D E F G H I J 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09 2019/7/18 8/10 O \u00d8 \u00d8 . \u00d8 O . \u00d8 \u00d8 O \u6bd4\u8d5b\u5730\u5740 A\u3001 Equivalent Prefixes \u9898\u610f\uff1a\u5b9a\u4e49\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\u800c\u4e14\u6240\u6709\u7684 (l,r) \u5bf9\u90fd\u6709\u5f53\u524d\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u76f8\u540c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u4e24\u4e2a\u6700\u957f\u7684\u76f8\u5f53\u524d\u7f00\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u8003\u8651\u4e8c\u5206\u524d\u7f00\u957f\u5ea6\uff0c\u9996\u5148\u663e\u7136\u53ef\u77e5\u7684\u662f\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u90a3\u4e48\u4ed6\u4eec\u6240\u6709\u7684\u76f8\u540c\u4f4d\u7f6e\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u4e5f\u76f8\u5f53\u3002\u6240\u4ee5\u6700\u957f\u7684\u524d\u7f00\u5e8f\u5217\u7684\u524d\u7f00\u5e8f\u5217\u4e5f\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4efb\u4f55\u5c0f\u4e8e\u7b49\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5927\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u4e0d\u60f3\u5f53\u7684\u3002\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u7b1b\u5361\u5c14\u6811\u7684\u6a21\u5f0f\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u53e6\u5916\u4e00\u79cd\u505a\u6cd5\uff08\u590d\u6742\u5ea6 O(nlogn) \u6bd4\u5b98\u65b9\u9898\u89e3\u591a\u4e00\u4e9b\uff09\uff0c\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u4e3a x \uff0c\u90a3\u4e48 l \\in [1,x], r \\in [x,n] \u8fd9\u90e8\u5206\u7684\u6240\u6709\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u90fd\u662f x \uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u6cbb (1,x-1)(x+1,n) \uff0c\u4e0d\u65ad\u8fdb\u884c\u4e0b\u53bb\uff0c\u6bcf\u6b21\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u6700\u5c0f\u503c\u4f4d\u7f6e\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std; const int maxn = 1e5+5; int n; vector<int> a, b; inline bool check(int l, int r) { if (r - l <= 1) return 1; int mnposa = 0, mn = 0x3f3f3f3f; int mnposb = 0, mn2 = 0x3f3f3f3f; for (int i = l; i < r; ++i) { if (mn > a[i]) { mn = a[i]; mnposa = i; } if (mn2 > b[i]) { mn2 = b[i]; mnposb = i; } } return mnposb == mnposa && check(l, mnposa) && check(mnposa + 1, r); } int main() { while (scanf(\"%d\", &n) != EOF) { a.resize(n), b.resize(n); for (int i = 0; i < n; ++i) { scanf(\"%d\", &a[i]); } for (int i = 0; i < n; ++i) { scanf(\"%d\", &b[i]); } int l = 1, r = n, res = 1; while (l <= r) { int mid = l + r >> 1; if (check(0, mid)) { l = mid + 1; res = mid; } else r = mid - 1; } printf(\"%d\\n\", res); } return 0; } B\u3001 Integration \u9898\u610f\uff1a\u7ed9\u5b9a\u5e8f\u5217 a \uff0c\u6c42 \\frac{1}{\\pi} \\int_0^\\infty \\frac{1}{\\prod_{i=1}^n(a_i^2+x^2)} dx \u4eba\u5c3d\u7686\u77e5\u591a\u6b21\u9879\u5728\u5206\u6bcd\u7684\u51fd\u6570\u6c42\u79ef\u5206\u5f02\u5e38\u96be\u7b97\uff0c\u4f46\u662f \\int_0^\\infty \\frac{1}{t^2+x^2}dx=\\frac{\\pi}{2t} \u7136\u540e\u8003\u8651\u62c6\u9879 \\prod_{i=1}^n\\frac{1}{a_i^2+x^2}=\\sum_{i=1}^n\\frac{c_i}{a_i^2+x^2} \u5de6\u8fb9\u5206\u6bcd\u628a\u67d0\u4e00\u9879 a_t \u63d0\u53d6\u51fa\u6765 \\frac{1}{a_t^2+x^2}\\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}+\\frac{c_t}{a_t^2+x^2} \u5c06\u5206\u6bcd\u4e58\u8fc7\u53bb \\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}(a_t^2+x^2)+c_t \u7531\u4e8e\u5bf9\u4efb\u610f x \u90fd\u8981\u4f7f\u7b49\u5f0f\u6210\u7acb\uff0c\u53d6 x=a_t \\dot i \u5f97\u5230 x^2=-a_t^2 \u7136\u540e\u7b49\u5f0f\u5c31\u53d8\u6210 \\prod_{i \\neq t}\\frac{1}{a_i^2-a_t^2}=c_t \u89e3\u51fa\u6240\u6709c\u540e\u5373\u53ef\u79ef\u5206\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; typedef long long ll; ll inv(ll a, ll n = mod - 2) { ll ans = 1, base = a; while(n) { if(n & 1) (ans *= base) %= mod; (base *= base) %= mod; n >>= 1; } return ans; } int main() { int n; ll a[1000 + 10]; while(~scanf(\"%d\", &n)) { ll ans = 0; for(int i = 0; i < n; i ++) scanf(\"%lld\", &a[i]); for(int i = 0; i < n; i ++) { ll c = 1; for(int j = 0; j < n; j ++) if(j != i) (c *= (a[j] * a[j] % mod - a[i] * a[i] % mod + mod) % mod) %= mod; (ans += inv(a[i]) * inv(c) % mod * inv(2) % mod) %= mod; } printf(\"%lld\\n\", ans); } return 0; } C\u3001 Euclidean Distance \u9898\u610f\uff1a\u7ed9\u4e00\u4e2am\u7ef4\u5411\u91cf\uff0c\u6c42\u53e6\u4e00\u4e2am\u7ef4\u5411\u91cf (p_1,p_2,...p_n) \u4f7f\u5f97 p_i \\ge 0 \\sum p_i = 1 \u4e14\u4e24\u5411\u91cf\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u6700\u77ed\u3002 \u9898\u89e3\uff1a\u5b98\u65b9\u9898\u89e3\u7528\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\u4e0d\u662f\u5f88\u4f1a\uff0c\u7b80\u5355\u6765\u8bb2\u662f\u9996\u5148\u4f7f\u6700\u9ad8\u7684\u53d8\u77ee\uff0c\u7136\u540e\u603b\u548c\u4e3a1\u7684\u60c5\u51b5\u4e0b\u8981\u600e\u4e48\u4f7f\u6700\u5927\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u7136\u8d1f\u6570\u90a3\u8fb9\u662f\u53cd\u8fc7\u6765\u7684\uff0c\u8981\u4f7f\u5f97\u603b\u8ddd\u79bb\u66f4\u63a5\u8fd10\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std; typedef long long ll; const int maxn = 1e5 + 10; ll a[maxn], sum[maxn]; bool cmp(const int &a, const int &b) { return a > b; } int main() { int n, m; while(scanf(\"%d%d\", &n, &m) != EOF) { ll res1, res2, pos = n; for(int i = 1; i <= n; i ++) scanf(\"%lld\", &a[i]); sort(a + 1, a + n + 1, cmp); sum[0] = -m; for(int i = 1; i <= n; i ++) sum[i] = sum[i - 1] + a[i]; for(int i = 1; i < n; i ++) if(sum[i] > a[i + 1] * i) {pos = i; break; } res1 = sum[pos] * sum[pos] * pos; res2 = pos * pos; for(int i = pos + 1; i <= n; i ++) res1 += a[i] * a[i] * res2; res2 *= m * m; ll g = __gcd(res1, res2); res1 /= g, res2 /= g; if((res1 == 0) || res2 == 1) printf(\"%lld\\n\", res1); else printf(\"%lld/%lld\\n\", res1, res2); } return 0; } E\u3001 ABBA \u9898\u610f\uff1a\u6c42\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a 2*(n+m) \u7684ab\u4e32\u4f7f\u5f97\u6709n\u5bf9 ab \u548cm\u5bf9 ba \uff0c\u4f7f\u7528\u8fc7\u7684\u4e32\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u3002 \u9898\u89e3\uff1a\u5176\u5b9e\u662f\u5e26\u9650\u5236\u7684\u5361\u7279\u5170\u6570\uff0c\u4e0e\u5361\u7279\u5170\u6570\u552f\u4e00\u7684\u533a\u522b\u662f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76840\u7684\u4e2a\u6570\u6bd41\u7684\u4e2a\u6570\u591an\u4ee5\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76841\u7684\u4e2a\u6570\u6bd40\u591am\u4ee5\u4e0a\uff0c\u7136\u540e\u5c31\u5199\u4e2a\u5361\u7279\u5170\u6570\u7684\u9012\u63a8\u628a\u4e0d\u5408\u6cd5\u72b6\u6001\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std; const int maxn = 2e3+5; const int mod = 1e9+7; int n, m; int main() { while (scanf(\"%d%d\", &n, &m) != EOF) { vector<vector<int> > dp((n + m) * 2 + 1); for (int i = 0; i <= (n + m) * 2; ++i) dp[i].resize(2005); dp[0][1002] = 1; for (int i = 0; i < (n + m) * 2; ++i) { for (int j = 1002 - m; j <= 1002 + n; ++j) { dp[i + 1][j + 1] = (dp[i + 1][j + 1] + dp[i][j]) % mod; dp[i + 1][j - 1] = (dp[i + 1][j - 1] + dp[i][j]) % mod; } } printf(\"%d\\n\", dp[(n + m) * 2][1002]); } return 0; } F\u3001 Random Point in Triangle \u9898\u610f\uff1a\u6c42\u4e09\u89d2\u5f62\u5185\u70b9\u4e0e\u4e09\u4e2a\u9876\u70b9\u6784\u6210\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6700\u5927\u503c\u7684\u671f\u671b\u3002 \u9898\u89e3\uff1apython\u968f\u673a\u53d6\u70b9\uff0c\u63a8\u6d4b\u4e0e\u4e09\u89d2\u5f62\u9762\u79ef\u76f8\u5173\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u9762\u79ef0.5\u65f6\u671f\u671b\u4e3a11/36\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u9898\u9762\u4e2d\u63d0\u793a\u4e86\u671f\u671b\u00d736\u662f\u6574\u6570\u6240\u4ee5\u76f4\u63a5\u628a\u968f\u673a\u7ed3\u679c\u00d736\u5f88\u5bb9\u6613\u770b\u3002 \u4ee3\u7801\uff1a # \u968f\u673a\u53d6\u70b9 import random res = 0 times = 20000000 tx = 0 for i in range(times): x = random.random() y = random.random() if y > x: continue # print(str(x) + \" \" + str(y)) tx += 1 t = 0.5*y t2 = 0.5*(1-x) t3 = 0.5 - t - t2 res += max(t, max(t2, t3)) print(res * 36 / tx) #include <bits/stdc++.h> #define ll long long using namespace std; const int maxn = 1e2+5; pair<ll, ll> pos[3]; ll myabs(ll x) { return x < 0 ? -x : x; } int main() { while (scanf(\"%lld%lld\", &pos[0].first, &pos[0].second) != EOF) { for (int i = 1; i < 3; ++i) { scanf(\"%lld%lld\", &pos[i].first, &pos[i].second); } ll res = (pos[0].first * pos[1].second) + (pos[1].first * pos[2].second) + (pos[2].first * pos[0].second) - (pos[0].first * pos[2].second) - (pos[1].first * pos[0].second) - (pos[2].first * pos[1].second); if (res < 0) res = -res; printf(\"%lld\\n\", res * 11); } } H\u3001 XOR \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u96c6\u5408\uff0c\u6c42\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u7684\u5b50\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u663e\u7136\u5c31\u662f\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u8003\u8651\u5bf9\u6240\u6709\u6570\u6c42\u4e00\u6b21\u7ebf\u6027\u57fa\uff0c\u57fa\u5916\u6240\u6709\u6570\u4efb\u610f\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7ec4\u62100\u7684\u6240\u4ee5\u57fa\u5916\u6240\u6709\u70b9\uff08\u8bbe\u4e2a\u6570\u4e3ax\uff09\u90fd\u6709 2^(x-1) \u7684\u6743\uff0c\u56e0\u4e3a\u5355\u70b9\u8981\u53d6\u4e4b\u5916\u5176\u4ed6\u6240\u6709\u70b9\u53ef\u53d6\u53ef\u4e0d\u53d6\uff0c\u5bf9\u4e8e\u57fa\u5185\u7684\u70b9\u5982\u679c\u53ef\u4ee5\u66ff\u6362\u67d0\u4e2a\u57fa\u5916\u70b9\u5b83\u7684\u6743\u4e5f\u662f\u8fd9\u4e2a\uff0c\u5176\u4ed6\u70b9\u662f\u6ca1\u6709\u6743\u7684\uff0c\u6240\u6709\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002\u56e0\u4e3a\u57fa\u5185\u6700\u591a\u5c31 log \u4e2a\u6570\uff0c\u53ef\u4ee5insert\u7684\u65f6\u5019\u7ef4\u62a4\u5982\u679cinsert\u5931\u8d25\u5b83\u5305\u542b\u7684\u57fa\u90fd\u662f\u53ef\u66ff\u6362\u7684\uff0c\u7528\u72b6\u538b\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u53ef\u66ff\u6362\u7684\u57fa\u5e95\u4e86\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; typedef long long ll; ll qp(ll a, ll n) { if (n < 0) return 0; ll ans = 1; for(;n ; (a *= a) %= mod, n >>= 1) if(n & 1) (ans *= a) %= mod; return ans; } ll v; struct LinearBasis { ll d[63], o[63]; //\u539f\u77e9\u9635\uff0c\u5bf9\u89d2\u77e9\u9635 void init() { for(int i = 0; i < 64; i ++) d[i] = o[i] = 0; v = 0; } bool ins(ll x) { ll tmp = 0; bool flag = false; for(int i = 62; i >= 0; i --) { if((x >> i) & 1) { if(!d[i]) d[i] = x, o[i] = tmp | (1ll << i), flag = true; x ^= d[i]; tmp |= o[i]; if(!x) break; } } if(!flag) v |= tmp; return flag; } }L; int main() { int n; while(scanf(\"%d\", &n) != EOF) { L.init(); ll x, ans = 0, cnt = 0; for(int i = 0; i < n; i ++) { scanf(\"%lld\", &x); if(!L.ins(x)) ans ++; } for(int i = 0; i < 63; i ++) { if(L.d[i]) cnt ++; if((1ll << i) & v) ans ++; } printf(\"%lld\\n\", ans * qp(2, n - cnt - 1) % mod); } return 0; } I\u3001 Points Division \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e8c\u7ef4\u70b9\u96c6\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u70b9\u6743 a,b \uff0c\u8981\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f97A\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u548cB\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u6ee1\u8db3 if(i\\in A \\and j\\in B \\and x_i\\ge x_j) y_i\\gt y_j \u4f7f\u5f97\u65b9\u6848\u4e2d \\sum a_i + \\sum b_j \u6700\u5927\u3002 \u9898\u89e3\uff1a\u76f8\u5f53\u4e8e\u6c42\u659c\u7387\u59cb\u7ec8\u4e3a\u6b63\u7684\u6298\u7ebf\uff0c\u4e14\u6298\u7ebf\u7684\u6240\u6709\u7aef\u70b9\u662f\u7ed9\u5b9a\u70b9\uff08\u6298\u7ebf\u4ee5\u4e0a\u90e8\u5206\u4e3aA\u96c6\u5408\uff0c\u5176\u4f59\u4e3aB\u96c6\u5408\uff09\u3002\u53ef\u4ee5\u679a\u4e3eA\u96c6\u5408\u4e2d\u70b9\u7684\u6298\u7ebf\u7aef\u70b9\u3002\u90a3\u4e48\u8003\u8651\u5982\u679c\u70b9\u7684\u6a2a\u5750\u6807\u5747\u4e0d\u76f8\u540c\u4e14\u540e\u9762\u7684\u7eb5\u5750\u6807\u603b\u5927\u4e8e\u524d\u8005\uff0c\u90a3\u4e48\u6298\u7ebf\u662f\u786e\u5b9a\u7684\uff0c\u7684\u6700\u5927\u6743\u503c\u8981\u6c42\u7684\u8bdd\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u79bb\u6563\u5316\u7684\u7eb5\u5750\u6807\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u628a\u5927\u4e8e\u7eb5\u5750\u6807\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6700\u5927\u503c\u3002\u73b0\u5728\u7eb5\u5750\u6807\u53ef\u80fd\u4e0d\u5355\u589e\u7684\u8bdd\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u628a\u5c0f\u4e8e\u5b83\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u5927\u4e8e\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u7b49\u4e8e\u7684\u90e8\u5206\u4fee\u6539\u6210\u73b0\u5728\u53ef\u80fd\u53d6\u5230\u7684\u6700\u5927\u6743\u503c\uff0c\u5373\u67e5\u8be2 [1,y_i-1] \u7684\u6700\u503c\uff0c\u52a0\u4e0aa\u6743\uff0c\u7136\u540e\u518d\u8003\u8651\u6709\u53ef\u80fd\u6709\u5171\u6a2a\u5750\u6807\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u8003\u8651\u52a0\u70b9\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f53\u524d\u70b9\u52a0\u5165\u65f6\u53ef\u4ee5\u53d6\u5230\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f18\u5148\u53f3\u5230\u5de6\uff0c\u6b21\u6392\u4e0b\u5230\u4e0a\u5373\u53ef\uff0c\u56e0\u4e3a\u679a\u4e3e\u7684\u662fA\u96c6\u5408\u4e0a\u7684\u70b9\uff0c\u662f\u53ef\u4ee5\u53d6\u7b49\u7684\uff0c\u540c\u4e00\u6a2a\u5750\u6807\u4e0b\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u89e3\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std; const int maxn = 1e5+10; int n; ll val[maxn << 2], lazy[maxn << 2]; int le, re; ll k; void pushdown(int rt) { if (lazy[rt]) { lazy[rt << 1] += lazy[rt]; lazy[rt << 1 | 1] += lazy[rt]; val[rt << 1] += lazy[rt]; val[rt << 1 | 1] += lazy[rt]; lazy[rt] = 0; } } void build(int rt, int l, int r) { val[rt] = lazy[rt] = 0; if (l == r) return; int mid = l + r >> 1; build(rt << 1, l, mid); build(rt << 1 | 1, mid + 1, r); } void update(int rt, int l, int r) { if (le <= l && r <= re) { val[rt] += k; lazy[rt] += k; return; } int mid = l + r >> 1; pushdown(rt); if (le <= mid) update(rt << 1, l, mid); if (re > mid) update(rt << 1 | 1, mid + 1, r); val[rt] = max(val[rt << 1], val[rt << 1 | 1]); } ll query(int rt, int l, int r) { if (le <= l && r <= re) { return val[rt]; } int mid = l + r >> 1; pushdown(rt); ll res = 0; if (le <= mid) res = max(res, query(rt << 1, l, mid)); if (re > mid) res = max(res, query(rt << 1 | 1, mid + 1, r)); return res; } vector<int> ypos; struct po { int x, y, a, b; bool operator < (const po& oth) const { if (x != oth.x) return x > oth.x; return y < oth.y; } }; void up(int l, int r, ll kt, int sz) { // cout << \"update from \" << l << \" to \" << r << \" val \"<< kt << endl; le = l, re = r, k = kt; update(1, 1, sz); } ll qu(int l, int r, int sz) { le = l, re = r; // cout << \"query from \" << l << \" to \" << r << \" ans \" << query(1, 1, sz) << endl; return query(1, 1, sz); } int main() { while (scanf(\"%d\", &n) != EOF) { vector<po> pi(n); ypos.clear(); for (int i = 0; i < n; ++i) { scanf(\"%d%d%d%d\", &pi[i].x, &pi[i].y, &pi[i].a, &pi[i].b); ypos.push_back(pi[i].y); } sort(ypos.begin(), ypos.end()); sort(pi.begin(), pi.end()); ypos.erase(unique(ypos.begin(), ypos.end()), ypos.end()); int sz = pi.size() + 5; build(1, 1, sz); for (int i = 0; i < n; ++i) pi[i].y = lower_bound(ypos.begin(), ypos.end(), pi[i].y) - ypos.begin() + 2; for (int i = 0; i < n; ++i) { ll mx = qu(pi[i].y, sz, sz); up(pi[i].y, pi[i].y, mx + pi[i].a - qu(pi[i].y, pi[i].y, sz), sz); up(pi[i].y + 1, sz, pi[i].b, sz); up(1, pi[i].y - 1, pi[i].a, sz); } printf(\"%lld\\n\", qu(1, sz, sz)); } return 0; } \u672c\u9898\u5f88\u96be\u8c03\uff0c\u5176\u5b9e\u6700\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u53d6\u7b49\u7684\u6761\u4ef6\uff0c\u8003\u8651\u4ece\u53f3\u5f80\u5de6\u548c\u53d6A\u96c6\u5408\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u53d6\u7b49\u56f0\u96be\u3002 J\u3001 Fraction Comparision \u9898\u610f\uff1a\u5224\u65ad \\frac{x}{a} \u4e0e \\frac{y}{b} \u7684\u5927\u5c0f \u9898\u89e3\uff1a\u6700\u7b80\u5355\u6ca1\u6709\u601d\u7ef4\u96be\u5ea6\u7684\u5f53\u7136\u662f\u6539\u6210\u4e58\u6cd5\u4e0a\u5927\u6570\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u53d6\u4f59\u6570\u548c\u5546\u4e24\u90e8\u5206\u5206\u522b\u6bd4\u8f83\u3002 import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Scanner; import java.math.BigInteger; /** * Built using CHelper plug-in * Actual solution is at the top * * @author badcw */ public class Main { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; Scanner in = new Scanner(inputStream); PrintWriter out = new PrintWriter(outputStream); Task solver = new Task(); solver.solve(1, in, out); out.close(); } static class Task { public void solve(int testNumber, Scanner in, PrintWriter out) { while (in.hasNext()) { BigInteger x = in.nextBigInteger(); BigInteger y = in.nextBigInteger(); BigInteger a = in.nextBigInteger(); BigInteger b = in.nextBigInteger(); BigInteger tt = x.multiply(b); BigInteger tt2 = y.multiply(a); if (tt.compareTo(tt2) == 0) out.println(\"=\"); else if (tt.compareTo(tt2) < 0) out.println(\"<\"); else out.println(\">\"); } } } }","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#aequivalent-prefixes","text":"\u9898\u610f\uff1a\u5b9a\u4e49\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u5e8f\u5217\u957f\u5ea6\u4e00\u81f4\u800c\u4e14\u6240\u6709\u7684 (l,r) \u5bf9\u90fd\u6709\u5f53\u524d\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u76f8\u540c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217\uff0c\u6c42\u4e24\u4e2a\u6700\u957f\u7684\u76f8\u5f53\u524d\u7f00\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u9898\u89e3\uff1a\u8003\u8651\u4e8c\u5206\u524d\u7f00\u957f\u5ea6\uff0c\u9996\u5148\u663e\u7136\u53ef\u77e5\u7684\u662f\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u90a3\u4e48\u4ed6\u4eec\u6240\u6709\u7684\u76f8\u540c\u4f4d\u7f6e\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u4e5f\u76f8\u5f53\u3002\u6240\u4ee5\u6700\u957f\u7684\u524d\u7f00\u5e8f\u5217\u7684\u524d\u7f00\u5e8f\u5217\u4e5f\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4efb\u4f55\u5c0f\u4e8e\u7b49\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u76f8\u5f53\u7684\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5927\u4e8e res \u7684\u524d\u7f00\u5e8f\u5217\u4e00\u5b9a\u662f\u4e0d\u60f3\u5f53\u7684\u3002\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u76f8\u5f53\uff0c\u5b98\u65b9\u9898\u89e3\u7ed9\u51fa\u7b1b\u5361\u5c14\u6811\u7684\u6a21\u5f0f\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u53e6\u5916\u4e00\u79cd\u505a\u6cd5\uff08\u590d\u6742\u5ea6 O(nlogn) \u6bd4\u5b98\u65b9\u9898\u89e3\u591a\u4e00\u4e9b\uff09\uff0c\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u4e3a x \uff0c\u90a3\u4e48 l \\in [1,x], r \\in [x,n] \u8fd9\u90e8\u5206\u7684\u6240\u6709\u533a\u95f4\u7684\u6700\u5c0f\u503c\u4f4d\u7f6e\u90fd\u662f x \uff0c\u90a3\u4e48\u53ef\u4ee5\u5206\u6cbb (1,x-1)(x+1,n) \uff0c\u4e0d\u65ad\u8fdb\u884c\u4e0b\u53bb\uff0c\u6bcf\u6b21\u5224\u65ad\u4e24\u4e2a\u5e8f\u5217\u6700\u5c0f\u503c\u4f4d\u7f6e\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std; const int maxn = 1e5+5; int n; vector<int> a, b; inline bool check(int l, int r) { if (r - l <= 1) return 1; int mnposa = 0, mn = 0x3f3f3f3f; int mnposb = 0, mn2 = 0x3f3f3f3f; for (int i = l; i < r; ++i) { if (mn > a[i]) { mn = a[i]; mnposa = i; } if (mn2 > b[i]) { mn2 = b[i]; mnposb = i; } } return mnposb == mnposa && check(l, mnposa) && check(mnposa + 1, r); } int main() { while (scanf(\"%d\", &n) != EOF) { a.resize(n), b.resize(n); for (int i = 0; i < n; ++i) { scanf(\"%d\", &a[i]); } for (int i = 0; i < n; ++i) { scanf(\"%d\", &b[i]); } int l = 1, r = n, res = 1; while (l <= r) { int mid = l + r >> 1; if (check(0, mid)) { l = mid + 1; res = mid; } else r = mid - 1; } printf(\"%d\\n\", res); } return 0; }","title":"A\u3001Equivalent Prefixes"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#bintegration","text":"\u9898\u610f\uff1a\u7ed9\u5b9a\u5e8f\u5217 a \uff0c\u6c42 \\frac{1}{\\pi} \\int_0^\\infty \\frac{1}{\\prod_{i=1}^n(a_i^2+x^2)} dx \u4eba\u5c3d\u7686\u77e5\u591a\u6b21\u9879\u5728\u5206\u6bcd\u7684\u51fd\u6570\u6c42\u79ef\u5206\u5f02\u5e38\u96be\u7b97\uff0c\u4f46\u662f \\int_0^\\infty \\frac{1}{t^2+x^2}dx=\\frac{\\pi}{2t} \u7136\u540e\u8003\u8651\u62c6\u9879 \\prod_{i=1}^n\\frac{1}{a_i^2+x^2}=\\sum_{i=1}^n\\frac{c_i}{a_i^2+x^2} \u5de6\u8fb9\u5206\u6bcd\u628a\u67d0\u4e00\u9879 a_t \u63d0\u53d6\u51fa\u6765 \\frac{1}{a_t^2+x^2}\\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}+\\frac{c_t}{a_t^2+x^2} \u5c06\u5206\u6bcd\u4e58\u8fc7\u53bb \\prod_{i \\neq t}\\frac{1}{a_i^2+x^2}=\\sum_{i\\neq t}\\frac{c_i}{a_i^2+x^2}(a_t^2+x^2)+c_t \u7531\u4e8e\u5bf9\u4efb\u610f x \u90fd\u8981\u4f7f\u7b49\u5f0f\u6210\u7acb\uff0c\u53d6 x=a_t \\dot i \u5f97\u5230 x^2=-a_t^2 \u7136\u540e\u7b49\u5f0f\u5c31\u53d8\u6210 \\prod_{i \\neq t}\\frac{1}{a_i^2-a_t^2}=c_t \u89e3\u51fa\u6240\u6709c\u540e\u5373\u53ef\u79ef\u5206\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; typedef long long ll; ll inv(ll a, ll n = mod - 2) { ll ans = 1, base = a; while(n) { if(n & 1) (ans *= base) %= mod; (base *= base) %= mod; n >>= 1; } return ans; } int main() { int n; ll a[1000 + 10]; while(~scanf(\"%d\", &n)) { ll ans = 0; for(int i = 0; i < n; i ++) scanf(\"%lld\", &a[i]); for(int i = 0; i < n; i ++) { ll c = 1; for(int j = 0; j < n; j ++) if(j != i) (c *= (a[j] * a[j] % mod - a[i] * a[i] % mod + mod) % mod) %= mod; (ans += inv(a[i]) * inv(c) % mod * inv(2) % mod) %= mod; } printf(\"%lld\\n\", ans); } return 0; }","title":"B\u3001Integration"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#ceuclidean-distance","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2am\u7ef4\u5411\u91cf\uff0c\u6c42\u53e6\u4e00\u4e2am\u7ef4\u5411\u91cf (p_1,p_2,...p_n) \u4f7f\u5f97 p_i \\ge 0 \\sum p_i = 1 \u4e14\u4e24\u5411\u91cf\u95f4\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u6700\u77ed\u3002 \u9898\u89e3\uff1a\u5b98\u65b9\u9898\u89e3\u7528\u62c9\u683c\u6717\u65e5\u4e58\u5b50\u6cd5\u4e0d\u662f\u5f88\u4f1a\uff0c\u7b80\u5355\u6765\u8bb2\u662f\u9996\u5148\u4f7f\u6700\u9ad8\u7684\u53d8\u77ee\uff0c\u7136\u540e\u603b\u548c\u4e3a1\u7684\u60c5\u51b5\u4e0b\u8981\u600e\u4e48\u4f7f\u6700\u5927\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u7136\u8d1f\u6570\u90a3\u8fb9\u662f\u53cd\u8fc7\u6765\u7684\uff0c\u8981\u4f7f\u5f97\u603b\u8ddd\u79bb\u66f4\u63a5\u8fd10\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std; typedef long long ll; const int maxn = 1e5 + 10; ll a[maxn], sum[maxn]; bool cmp(const int &a, const int &b) { return a > b; } int main() { int n, m; while(scanf(\"%d%d\", &n, &m) != EOF) { ll res1, res2, pos = n; for(int i = 1; i <= n; i ++) scanf(\"%lld\", &a[i]); sort(a + 1, a + n + 1, cmp); sum[0] = -m; for(int i = 1; i <= n; i ++) sum[i] = sum[i - 1] + a[i]; for(int i = 1; i < n; i ++) if(sum[i] > a[i + 1] * i) {pos = i; break; } res1 = sum[pos] * sum[pos] * pos; res2 = pos * pos; for(int i = pos + 1; i <= n; i ++) res1 += a[i] * a[i] * res2; res2 *= m * m; ll g = __gcd(res1, res2); res1 /= g, res2 /= g; if((res1 == 0) || res2 == 1) printf(\"%lld\\n\", res1); else printf(\"%lld/%lld\\n\", res1, res2); } return 0; }","title":"C\u3001Euclidean Distance"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#eabba","text":"\u9898\u610f\uff1a\u6c42\u6784\u9020\u4e00\u4e2a\u957f\u5ea6\u4e3a 2*(n+m) \u7684ab\u4e32\u4f7f\u5f97\u6709n\u5bf9 ab \u548cm\u5bf9 ba \uff0c\u4f7f\u7528\u8fc7\u7684\u4e32\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u3002 \u9898\u89e3\uff1a\u5176\u5b9e\u662f\u5e26\u9650\u5236\u7684\u5361\u7279\u5170\u6570\uff0c\u4e0e\u5361\u7279\u5170\u6570\u552f\u4e00\u7684\u533a\u522b\u662f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76840\u7684\u4e2a\u6570\u6bd41\u7684\u4e2a\u6570\u591an\u4ee5\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u6709\u4efb\u4f55\u4e00\u4e2a\u524d\u7f00\u76841\u7684\u4e2a\u6570\u6bd40\u591am\u4ee5\u4e0a\uff0c\u7136\u540e\u5c31\u5199\u4e2a\u5361\u7279\u5170\u6570\u7684\u9012\u63a8\u628a\u4e0d\u5408\u6cd5\u72b6\u6001\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std; const int maxn = 2e3+5; const int mod = 1e9+7; int n, m; int main() { while (scanf(\"%d%d\", &n, &m) != EOF) { vector<vector<int> > dp((n + m) * 2 + 1); for (int i = 0; i <= (n + m) * 2; ++i) dp[i].resize(2005); dp[0][1002] = 1; for (int i = 0; i < (n + m) * 2; ++i) { for (int j = 1002 - m; j <= 1002 + n; ++j) { dp[i + 1][j + 1] = (dp[i + 1][j + 1] + dp[i][j]) % mod; dp[i + 1][j - 1] = (dp[i + 1][j - 1] + dp[i][j]) % mod; } } printf(\"%d\\n\", dp[(n + m) * 2][1002]); } return 0; }","title":"E\u3001ABBA"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#frandom-point-in-triangle","text":"\u9898\u610f\uff1a\u6c42\u4e09\u89d2\u5f62\u5185\u70b9\u4e0e\u4e09\u4e2a\u9876\u70b9\u6784\u6210\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u6700\u5927\u503c\u7684\u671f\u671b\u3002 \u9898\u89e3\uff1apython\u968f\u673a\u53d6\u70b9\uff0c\u63a8\u6d4b\u4e0e\u4e09\u89d2\u5f62\u9762\u79ef\u76f8\u5173\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u9762\u79ef0.5\u65f6\u671f\u671b\u4e3a11/36\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u9898\u9762\u4e2d\u63d0\u793a\u4e86\u671f\u671b\u00d736\u662f\u6574\u6570\u6240\u4ee5\u76f4\u63a5\u628a\u968f\u673a\u7ed3\u679c\u00d736\u5f88\u5bb9\u6613\u770b\u3002 \u4ee3\u7801\uff1a # \u968f\u673a\u53d6\u70b9 import random res = 0 times = 20000000 tx = 0 for i in range(times): x = random.random() y = random.random() if y > x: continue # print(str(x) + \" \" + str(y)) tx += 1 t = 0.5*y t2 = 0.5*(1-x) t3 = 0.5 - t - t2 res += max(t, max(t2, t3)) print(res * 36 / tx) #include <bits/stdc++.h> #define ll long long using namespace std; const int maxn = 1e2+5; pair<ll, ll> pos[3]; ll myabs(ll x) { return x < 0 ? -x : x; } int main() { while (scanf(\"%lld%lld\", &pos[0].first, &pos[0].second) != EOF) { for (int i = 1; i < 3; ++i) { scanf(\"%lld%lld\", &pos[i].first, &pos[i].second); } ll res = (pos[0].first * pos[1].second) + (pos[1].first * pos[2].second) + (pos[2].first * pos[0].second) - (pos[0].first * pos[2].second) - (pos[1].first * pos[0].second) - (pos[2].first * pos[1].second); if (res < 0) res = -res; printf(\"%lld\\n\", res * 11); } }","title":"F\u3001Random Point in Triangle"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#hxor","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u96c6\u5408\uff0c\u6c42\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u7684\u5b50\u96c6\u5927\u5c0f\u7684\u548c\u3002 \u9898\u89e3\uff1a\u5b50\u96c6\u5f02\u6216\u548c\u4e3a0\u663e\u7136\u5c31\u662f\u7ebf\u6027\u57fa\uff0c\u7136\u540e\u8003\u8651\u5bf9\u6240\u6709\u6570\u6c42\u4e00\u6b21\u7ebf\u6027\u57fa\uff0c\u57fa\u5916\u6240\u6709\u6570\u4efb\u610f\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7ec4\u62100\u7684\u6240\u4ee5\u57fa\u5916\u6240\u6709\u70b9\uff08\u8bbe\u4e2a\u6570\u4e3ax\uff09\u90fd\u6709 2^(x-1) \u7684\u6743\uff0c\u56e0\u4e3a\u5355\u70b9\u8981\u53d6\u4e4b\u5916\u5176\u4ed6\u6240\u6709\u70b9\u53ef\u53d6\u53ef\u4e0d\u53d6\uff0c\u5bf9\u4e8e\u57fa\u5185\u7684\u70b9\u5982\u679c\u53ef\u4ee5\u66ff\u6362\u67d0\u4e2a\u57fa\u5916\u70b9\u5b83\u7684\u6743\u4e5f\u662f\u8fd9\u4e2a\uff0c\u5176\u4ed6\u70b9\u662f\u6ca1\u6709\u6743\u7684\uff0c\u6240\u6709\u52a0\u8d77\u6765\u5c31\u662f\u7b54\u6848\u3002\u56e0\u4e3a\u57fa\u5185\u6700\u591a\u5c31 log \u4e2a\u6570\uff0c\u53ef\u4ee5insert\u7684\u65f6\u5019\u7ef4\u62a4\u5982\u679cinsert\u5931\u8d25\u5b83\u5305\u542b\u7684\u57fa\u90fd\u662f\u53ef\u66ff\u6362\u7684\uff0c\u7528\u72b6\u538b\u5c31\u53ef\u4ee5\u8868\u793a\u6240\u6709\u53ef\u66ff\u6362\u7684\u57fa\u5e95\u4e86\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> using namespace std; const int mod = 1e9 + 7; typedef long long ll; ll qp(ll a, ll n) { if (n < 0) return 0; ll ans = 1; for(;n ; (a *= a) %= mod, n >>= 1) if(n & 1) (ans *= a) %= mod; return ans; } ll v; struct LinearBasis { ll d[63], o[63]; //\u539f\u77e9\u9635\uff0c\u5bf9\u89d2\u77e9\u9635 void init() { for(int i = 0; i < 64; i ++) d[i] = o[i] = 0; v = 0; } bool ins(ll x) { ll tmp = 0; bool flag = false; for(int i = 62; i >= 0; i --) { if((x >> i) & 1) { if(!d[i]) d[i] = x, o[i] = tmp | (1ll << i), flag = true; x ^= d[i]; tmp |= o[i]; if(!x) break; } } if(!flag) v |= tmp; return flag; } }L; int main() { int n; while(scanf(\"%d\", &n) != EOF) { L.init(); ll x, ans = 0, cnt = 0; for(int i = 0; i < n; i ++) { scanf(\"%lld\", &x); if(!L.ins(x)) ans ++; } for(int i = 0; i < 63; i ++) { if(L.d[i]) cnt ++; if((1ll << i) & v) ans ++; } printf(\"%lld\\n\", ans * qp(2, n - cnt - 1) % mod); } return 0; }","title":"H\u3001XOR"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#ipoints-division","text":"\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u4e8c\u7ef4\u70b9\u96c6\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e24\u4e2a\u70b9\u6743 a,b \uff0c\u8981\u5206\u6210\u4e24\u4e2a\u96c6\u5408\uff0c\u4f7f\u5f97A\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u548cB\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u6ee1\u8db3 if(i\\in A \\and j\\in B \\and x_i\\ge x_j) y_i\\gt y_j \u4f7f\u5f97\u65b9\u6848\u4e2d \\sum a_i + \\sum b_j \u6700\u5927\u3002 \u9898\u89e3\uff1a\u76f8\u5f53\u4e8e\u6c42\u659c\u7387\u59cb\u7ec8\u4e3a\u6b63\u7684\u6298\u7ebf\uff0c\u4e14\u6298\u7ebf\u7684\u6240\u6709\u7aef\u70b9\u662f\u7ed9\u5b9a\u70b9\uff08\u6298\u7ebf\u4ee5\u4e0a\u90e8\u5206\u4e3aA\u96c6\u5408\uff0c\u5176\u4f59\u4e3aB\u96c6\u5408\uff09\u3002\u53ef\u4ee5\u679a\u4e3eA\u96c6\u5408\u4e2d\u70b9\u7684\u6298\u7ebf\u7aef\u70b9\u3002\u90a3\u4e48\u8003\u8651\u5982\u679c\u70b9\u7684\u6a2a\u5750\u6807\u5747\u4e0d\u76f8\u540c\u4e14\u540e\u9762\u7684\u7eb5\u5750\u6807\u603b\u5927\u4e8e\u524d\u8005\uff0c\u90a3\u4e48\u6298\u7ebf\u662f\u786e\u5b9a\u7684\uff0c\u7684\u6700\u5927\u6743\u503c\u8981\u6c42\u7684\u8bdd\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u79bb\u6563\u5316\u7684\u7eb5\u5750\u6807\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u628a\u5927\u4e8e\u7eb5\u5750\u6807\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u6700\u540e\u7b54\u6848\u5c31\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6700\u5927\u503c\u3002\u73b0\u5728\u7eb5\u5750\u6807\u53ef\u80fd\u4e0d\u5355\u589e\u7684\u8bdd\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u628a\u5c0f\u4e8e\u5b83\u7684\u90e8\u5206\u52a0\u4e0aa\u6743\uff0c\u5927\u4e8e\u7684\u90e8\u5206\u52a0\u4e0ab\u6743\uff0c\u7b49\u4e8e\u7684\u90e8\u5206\u4fee\u6539\u6210\u73b0\u5728\u53ef\u80fd\u53d6\u5230\u7684\u6700\u5927\u6743\u503c\uff0c\u5373\u67e5\u8be2 [1,y_i-1] \u7684\u6700\u503c\uff0c\u52a0\u4e0aa\u6743\uff0c\u7136\u540e\u518d\u8003\u8651\u6709\u53ef\u80fd\u6709\u5171\u6a2a\u5750\u6807\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u8003\u8651\u52a0\u70b9\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f53\u524d\u70b9\u52a0\u5165\u65f6\u53ef\u4ee5\u53d6\u5230\u6700\u5927\u503c\uff0c\u53ef\u4ee5\u4f18\u5148\u53f3\u5230\u5de6\uff0c\u6b21\u6392\u4e0b\u5230\u4e0a\u5373\u53ef\uff0c\u56e0\u4e3a\u679a\u4e3e\u7684\u662fA\u96c6\u5408\u4e0a\u7684\u70b9\uff0c\u662f\u53ef\u4ee5\u53d6\u7b49\u7684\uff0c\u540c\u4e00\u6a2a\u5750\u6807\u4e0b\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u89e3\u3002 \u4ee3\u7801\uff1a #include <bits/stdc++.h> #define ll long long using namespace std; const int maxn = 1e5+10; int n; ll val[maxn << 2], lazy[maxn << 2]; int le, re; ll k; void pushdown(int rt) { if (lazy[rt]) { lazy[rt << 1] += lazy[rt]; lazy[rt << 1 | 1] += lazy[rt]; val[rt << 1] += lazy[rt]; val[rt << 1 | 1] += lazy[rt]; lazy[rt] = 0; } } void build(int rt, int l, int r) { val[rt] = lazy[rt] = 0; if (l == r) return; int mid = l + r >> 1; build(rt << 1, l, mid); build(rt << 1 | 1, mid + 1, r); } void update(int rt, int l, int r) { if (le <= l && r <= re) { val[rt] += k; lazy[rt] += k; return; } int mid = l + r >> 1; pushdown(rt); if (le <= mid) update(rt << 1, l, mid); if (re > mid) update(rt << 1 | 1, mid + 1, r); val[rt] = max(val[rt << 1], val[rt << 1 | 1]); } ll query(int rt, int l, int r) { if (le <= l && r <= re) { return val[rt]; } int mid = l + r >> 1; pushdown(rt); ll res = 0; if (le <= mid) res = max(res, query(rt << 1, l, mid)); if (re > mid) res = max(res, query(rt << 1 | 1, mid + 1, r)); return res; } vector<int> ypos; struct po { int x, y, a, b; bool operator < (const po& oth) const { if (x != oth.x) return x > oth.x; return y < oth.y; } }; void up(int l, int r, ll kt, int sz) { // cout << \"update from \" << l << \" to \" << r << \" val \"<< kt << endl; le = l, re = r, k = kt; update(1, 1, sz); } ll qu(int l, int r, int sz) { le = l, re = r; // cout << \"query from \" << l << \" to \" << r << \" ans \" << query(1, 1, sz) << endl; return query(1, 1, sz); } int main() { while (scanf(\"%d\", &n) != EOF) { vector<po> pi(n); ypos.clear(); for (int i = 0; i < n; ++i) { scanf(\"%d%d%d%d\", &pi[i].x, &pi[i].y, &pi[i].a, &pi[i].b); ypos.push_back(pi[i].y); } sort(ypos.begin(), ypos.end()); sort(pi.begin(), pi.end()); ypos.erase(unique(ypos.begin(), ypos.end()), ypos.end()); int sz = pi.size() + 5; build(1, 1, sz); for (int i = 0; i < n; ++i) pi[i].y = lower_bound(ypos.begin(), ypos.end(), pi[i].y) - ypos.begin() + 2; for (int i = 0; i < n; ++i) { ll mx = qu(pi[i].y, sz, sz); up(pi[i].y, pi[i].y, mx + pi[i].a - qu(pi[i].y, pi[i].y, sz), sz); up(pi[i].y + 1, sz, pi[i].b, sz); up(1, pi[i].y - 1, pi[i].a, sz); } printf(\"%lld\\n\", qu(1, sz, sz)); } return 0; } \u672c\u9898\u5f88\u96be\u8c03\uff0c\u5176\u5b9e\u6700\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u53d6\u7b49\u7684\u6761\u4ef6\uff0c\u8003\u8651\u4ece\u53f3\u5f80\u5de6\u548c\u53d6A\u96c6\u5408\u5c31\u662f\u4e3a\u4e86\u907f\u514d\u53d6\u7b49\u56f0\u96be\u3002","title":"I\u3001Points Division"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e00\u573a\uff09/#jfraction-comparision","text":"\u9898\u610f\uff1a\u5224\u65ad \\frac{x}{a} \u4e0e \\frac{y}{b} \u7684\u5927\u5c0f \u9898\u89e3\uff1a\u6700\u7b80\u5355\u6ca1\u6709\u601d\u7ef4\u96be\u5ea6\u7684\u5f53\u7136\u662f\u6539\u6210\u4e58\u6cd5\u4e0a\u5927\u6570\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u53d6\u4f59\u6570\u548c\u5546\u4e24\u90e8\u5206\u5206\u522b\u6bd4\u8f83\u3002 import java.io.OutputStream; import java.io.IOException; import java.io.InputStream; import java.io.PrintWriter; import java.util.Scanner; import java.math.BigInteger; /** * Built using CHelper plug-in * Actual solution is at the top * * @author badcw */ public class Main { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; Scanner in = new Scanner(inputStream); PrintWriter out = new PrintWriter(outputStream); Task solver = new Task(); solver.solve(1, in, out); out.close(); } static class Task { public void solve(int testNumber, Scanner in, PrintWriter out) { while (in.hasNext()) { BigInteger x = in.nextBigInteger(); BigInteger y = in.nextBigInteger(); BigInteger a = in.nextBigInteger(); BigInteger b = in.nextBigInteger(); BigInteger tt = x.multiply(b); BigInteger tt2 = y.multiply(a); if (tt.compareTo(tt2) == 0) out.println(\"=\"); else if (tt.compareTo(tt2) < 0) out.println(\"<\"); else out.println(\">\"); } } } }","title":"J\u3001Fraction Comparision"},{"location":"Training Logs/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425/2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09/","text":"Name Date Solved A B C D E F G H I J 2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09 2019/7/20 6/10 \u00d8 \u00d8 . \u00d8 \u00d8 \u00d8 . O . \u00d8","title":"2019\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425\uff08\u7b2c\u4e8c\u573a\uff09"}]}